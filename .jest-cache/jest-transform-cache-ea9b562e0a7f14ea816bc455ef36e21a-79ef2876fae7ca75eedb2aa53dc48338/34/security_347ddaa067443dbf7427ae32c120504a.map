{"version":3,"names":["cov_161buh4ef6","actualCoverage","crypto_1","s","__importDefault","require","zod_1","exports","DEFAULT_RATE_LIMITS","webhook","windowMs","maxRequests","api","upload","RateLimiter","constructor","f","requests","Map","isAllowed","key","config","now","Date","windowStart","keyRequests","b","get","recentRequests","filter","time","length","push","set","reset","delete","clear","rateLimiter","validateApiToken","token","isValid","error","includes","sanitizeInput","input","replace","trim","Array","isArray","map","sanitized","value","Object","entries","validateWebhookSignature","payload","signature","secret","expectedSignature","default","createHmac","update","digest","receivedSignature","test","timingSafeEqual","Buffer","from","Error","message","validateFileUpload","filename","mimetype","size","errors","dangerousExtensions","extension","toLowerCase","split","pop","allowedMimetypes","undefined","maxSize","validateUrl","url","parsedUrl","URL","protocol","hostname","startsWith","generateSecureToken","randomBytes","toString","hashSensitiveData","data","salt","actualSalt","pbkdf2Sync","validateEnvironment","requiredVars","varName","process","env","validation","getSecurityHeaders","logSecurityEvent","event","details","level","timestamp","toISOString","logEntry","console","toUpperCase","validateMcpParameters","schema","params","sanitizedParams","parse","z","ZodError","err","path","join"],"sources":["/Users/peterkrzyzek/Development/clickup-mcp-server/src/utils/security.ts"],"sourcesContent":["import crypto from 'crypto';\nimport { z } from 'zod';\n\n/**\n * Security utilities for the ClickUp MCP Server\n */\n\n// Rate limiting configuration\nexport interface RateLimitConfig {\n  windowMs: number;\n  maxRequests: number;\n}\n\n// Default rate limits\nexport const DEFAULT_RATE_LIMITS: Record<string, RateLimitConfig> = {\n  webhook: { windowMs: 60000, maxRequests: 100 }, // 100 requests per minute\n  api: { windowMs: 60000, maxRequests: 1000 }, // 1000 requests per minute\n  upload: { windowMs: 60000, maxRequests: 10 } // 10 uploads per minute\n};\n\n// Rate limiter implementation\nclass RateLimiter {\n  private requests: Map<string, number[]> = new Map();\n\n  isAllowed(key: string, config: RateLimitConfig): boolean {\n    const now = Date.now();\n    const windowStart = now - config.windowMs;\n    \n    // Get existing requests for this key\n    const keyRequests = this.requests.get(key) || [];\n    \n    // Filter out old requests\n    const recentRequests = keyRequests.filter(time => time > windowStart);\n    \n    // Check if under limit\n    if (recentRequests.length >= config.maxRequests) {\n      return false;\n    }\n    \n    // Add current request\n    recentRequests.push(now);\n    this.requests.set(key, recentRequests);\n    \n    return true;\n  }\n\n  reset(key?: string): void {\n    if (key) {\n      this.requests.delete(key);\n    } else {\n      this.requests.clear();\n    }\n  }\n}\n\nexport const rateLimiter = new RateLimiter();\n\n/**\n * Validate and sanitize API token\n */\nexport const validateApiToken = (token: string): { isValid: boolean; error?: string } => {\n  if (!token) {\n    return { isValid: false, error: 'API token is required' };\n  }\n\n  if (typeof token !== 'string') {\n    return { isValid: false, error: 'API token must be a string' };\n  }\n\n  if (token.length < 10) {\n    return { isValid: false, error: 'API token appears to be too short' };\n  }\n\n  if (token.length > 200) {\n    return { isValid: false, error: 'API token appears to be too long' };\n  }\n\n  // Check for suspicious patterns\n  if (token.includes(' ') || token.includes('\\n') || token.includes('\\t')) {\n    return { isValid: false, error: 'API token contains invalid characters' };\n  }\n\n  return { isValid: true };\n};\n\n/**\n * Sanitize user input to prevent injection attacks\n */\nexport const sanitizeInput = (input: any): any => {\n  if (typeof input === 'string') {\n    // Remove potentially dangerous characters\n    return input\n      .replace(/[<>]/g, '') // Remove HTML tags\n      .replace(/javascript:/gi, '') // Remove javascript: protocol\n      .replace(/on\\w+=/gi, '') // Remove event handlers\n      .trim();\n  }\n\n  if (Array.isArray(input)) {\n    return input.map(sanitizeInput);\n  }\n\n  if (input && typeof input === 'object') {\n    const sanitized: any = {};\n    for (const [key, value] of Object.entries(input)) {\n      sanitized[sanitizeInput(key)] = sanitizeInput(value);\n    }\n    return sanitized;\n  }\n\n  return input;\n};\n\n/**\n * Validate webhook signature with timing-safe comparison\n */\nexport const validateWebhookSignature = (\n  payload: string,\n  signature: string,\n  secret: string\n): { isValid: boolean; error?: string } => {\n  try {\n    if (!payload || !signature || !secret) {\n      return { isValid: false, error: 'Missing required parameters for signature validation' };\n    }\n\n    // Generate expected signature\n    const expectedSignature = crypto\n      .createHmac('sha256', secret)\n      .update(payload, 'utf8')\n      .digest('hex');\n\n    // Extract signature from header (remove 'sha256=' prefix if present)\n    const receivedSignature = signature.replace(/^sha256=/, '');\n\n    // Validate signature format\n    if (!/^[a-f0-9]{64}$/i.test(receivedSignature)) {\n      return { isValid: false, error: 'Invalid signature format' };\n    }\n\n    // Timing-safe comparison\n    const isValid = crypto.timingSafeEqual(\n      Buffer.from(expectedSignature, 'hex'),\n      Buffer.from(receivedSignature, 'hex')\n    );\n\n    return { isValid };\n  } catch (error) {\n    return { \n      isValid: false, \n      error: `Signature validation error: ${error instanceof Error ? error.message : 'Unknown error'}` \n    };\n  }\n};\n\n/**\n * Validate file upload security\n */\nexport const validateFileUpload = (\n  filename: string,\n  mimetype?: string,\n  size?: number\n): { isValid: boolean; errors: string[] } => {\n  const errors: string[] = [];\n\n  // Validate filename\n  if (!filename || typeof filename !== 'string') {\n    errors.push('Filename is required and must be a string');\n  } else {\n    // Check for path traversal attempts\n    if (filename.includes('..') || filename.includes('/') || filename.includes('\\\\')) {\n      errors.push('Filename contains invalid path characters');\n    }\n\n    // Check for dangerous extensions\n    const dangerousExtensions = [\n      '.exe', '.bat', '.cmd', '.com', '.pif', '.scr', '.vbs', '.js', '.jar',\n      '.php', '.asp', '.aspx', '.jsp', '.sh', '.ps1', '.py', '.rb'\n    ];\n    \n    const extension = filename.toLowerCase().split('.').pop();\n    if (extension && dangerousExtensions.includes(`.${extension}`)) {\n      errors.push('File type not allowed for security reasons');\n    }\n\n    // Check filename length\n    if (filename.length > 255) {\n      errors.push('Filename too long (max 255 characters)');\n    }\n\n    // Check for null bytes\n    if (filename.includes('\\0')) {\n      errors.push('Filename contains null bytes');\n    }\n  }\n\n  // Validate mimetype if provided\n  if (mimetype) {\n    const allowedMimetypes = [\n      // Images\n      'image/jpeg', 'image/png', 'image/gif', 'image/webp', 'image/svg+xml',\n      // Documents\n      'application/pdf', 'text/plain', 'text/csv',\n      'application/msword', 'application/vnd.openxmlformats-officedocument.wordprocessingml.document',\n      'application/vnd.ms-excel', 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',\n      'application/vnd.ms-powerpoint', 'application/vnd.openxmlformats-officedocument.presentationml.presentation',\n      // Archives\n      'application/zip', 'application/x-rar-compressed', 'application/x-7z-compressed',\n      // Media\n      'video/mp4', 'video/webm', 'audio/mp3', 'audio/wav', 'audio/ogg'\n    ];\n\n    if (!allowedMimetypes.includes(mimetype)) {\n      errors.push(`Mimetype '${mimetype}' not allowed`);\n    }\n  }\n\n  // Validate file size if provided (max 100MB)\n  if (size !== undefined) {\n    const maxSize = 100 * 1024 * 1024; // 100MB\n    if (size > maxSize) {\n      errors.push(`File size too large (max ${maxSize} bytes)`);\n    }\n    if (size < 0) {\n      errors.push('Invalid file size');\n    }\n  }\n\n  return {\n    isValid: errors.length === 0,\n    errors\n  };\n};\n\n/**\n * Validate URL for security\n */\nexport const validateUrl = (url: string): { isValid: boolean; error?: string } => {\n  try {\n    const parsedUrl = new URL(url);\n    \n    // Only allow HTTP and HTTPS\n    if (!['http:', 'https:'].includes(parsedUrl.protocol)) {\n      return { isValid: false, error: 'Only HTTP and HTTPS URLs are allowed' };\n    }\n\n    // Block localhost and private IPs for security\n    const hostname = parsedUrl.hostname.toLowerCase();\n    if (\n      hostname === 'localhost' ||\n      hostname === '127.0.0.1' ||\n      hostname === '::1' ||\n      hostname.startsWith('192.168.') ||\n      hostname.startsWith('10.') ||\n      hostname.startsWith('172.16.') ||\n      hostname.startsWith('172.17.') ||\n      hostname.startsWith('172.18.') ||\n      hostname.startsWith('172.19.') ||\n      hostname.startsWith('172.2') ||\n      hostname.startsWith('172.30.') ||\n      hostname.startsWith('172.31.')\n    ) {\n      return { isValid: false, error: 'Private and localhost URLs are not allowed' };\n    }\n\n    return { isValid: true };\n  } catch (error) {\n    return { isValid: false, error: 'Invalid URL format' };\n  }\n};\n\n/**\n * Generate secure random string\n */\nexport const generateSecureToken = (length: number = 32): string => {\n  return crypto.randomBytes(length).toString('hex');\n};\n\n/**\n * Hash sensitive data\n */\nexport const hashSensitiveData = (data: string, salt?: string): string => {\n  const actualSalt = salt || crypto.randomBytes(16).toString('hex');\n  return crypto.pbkdf2Sync(data, actualSalt, 10000, 64, 'sha512').toString('hex');\n};\n\n/**\n * Validate environment variables\n */\nexport const validateEnvironment = (): { isValid: boolean; errors: string[] } => {\n  const errors: string[] = [];\n\n  // Check required environment variables\n  const requiredVars = ['CLICKUP_API_TOKEN'];\n  \n  for (const varName of requiredVars) {\n    const value = process.env[varName];\n    if (!value) {\n      errors.push(`Missing required environment variable: ${varName}`);\n    } else {\n      // Validate API token format\n      if (varName === 'CLICKUP_API_TOKEN') {\n        const validation = validateApiToken(value);\n        if (!validation.isValid) {\n          errors.push(`Invalid ${varName}: ${validation.error}`);\n        }\n      }\n    }\n  }\n\n  return {\n    isValid: errors.length === 0,\n    errors\n  };\n};\n\n/**\n * Security headers for HTTP responses\n */\nexport const getSecurityHeaders = (): Record<string, string> => {\n  return {\n    'X-Content-Type-Options': 'nosniff',\n    'X-Frame-Options': 'DENY',\n    'X-XSS-Protection': '1; mode=block',\n    'Strict-Transport-Security': 'max-age=31536000; includeSubDomains',\n    'Content-Security-Policy': \"default-src 'self'\",\n    'Referrer-Policy': 'strict-origin-when-cross-origin'\n  };\n};\n\n/**\n * Log security events\n */\nexport const logSecurityEvent = (\n  event: string,\n  details: Record<string, any>,\n  level: 'info' | 'warn' | 'error' = 'info'\n): void => {\n  const timestamp = new Date().toISOString();\n  const logEntry = {\n    timestamp,\n    event,\n    level,\n    details: sanitizeInput(details)\n  };\n\n  // In production, this should go to a proper logging system\n  console.error(`[SECURITY ${level.toUpperCase()}] ${timestamp}: ${event}`, logEntry);\n};\n\n/**\n * Validate MCP tool parameters\n */\nexport const validateMcpParameters = (\n  schema: z.ZodSchema,\n  params: any\n): { isValid: boolean; data?: any; errors?: string[] } => {\n  try {\n    // Sanitize input first\n    const sanitizedParams = sanitizeInput(params);\n    \n    // Validate with schema\n    const data = schema.parse(sanitizedParams);\n    \n    return { isValid: true, data };\n  } catch (error) {\n    if (error instanceof z.ZodError) {\n      const errors = error.errors.map(err => `${err.path.join('.')}: ${err.message}`);\n      return { isValid: false, errors };\n    }\n    \n    return { \n      isValid: false, \n      errors: [`Validation error: ${error instanceof Error ? error.message : 'Unknown error'}`] \n    };\n  }\n};\n"],"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","ignoreList":[]}
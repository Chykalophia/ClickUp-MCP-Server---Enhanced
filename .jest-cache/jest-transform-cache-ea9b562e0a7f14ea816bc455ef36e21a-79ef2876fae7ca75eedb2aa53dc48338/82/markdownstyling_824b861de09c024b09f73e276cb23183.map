{"version":3,"names":["cov_135cn0mbll","actualCoverage","DEFAULT_OPTIONS","s","useColors","useEmojis","indentSize","maxWidth","COLORS","reset","bright","dim","italic","underline","black","red","green","yellow","blue","magenta","cyan","white","bgBlack","bgRed","bgGreen","bgYellow","bgBlue","bgMagenta","bgCyan","bgWhite","EMOJI_MAP","h1","h2","h3","h4","h5","h6","bold","code","link","image","list","quote","check","uncheck","warning","info","success","error","colorize","text","color","options","f","b","addEmoji","emoji","processHeaders","content","replace","match","hashes","level","length","styled","toUpperCase","result","repeat","Math","min","processEmphasis","processCode","lang","langLabel","header","styledCode","trim","border","processLists","indent","spaces","bullet","num","checkbox","processBlockquotes","processLinks","alt","url","processHorizontalRules","rule","addVisualEnhancements","applyMarkdownStyling","markdown","opts","createMarkdownPreview","title","styledTitle","titleWithEmoji","extractStyledSections","sectionType","sections","headerMatches","push","map","h","codeMatches","c","listMatches","l","quoteMatches","q","linkMatches","createMarkdownSummary","summary","headers","slice","codeBlocks","lists","links","join"],"sources":["/Users/peterkrzyzek/Development/clickup-mcp-server/src/utils/markdown-styling.ts"],"sourcesContent":["/**\n * Simple Markdown Styling Processor\n * Provides enhanced display formatting for markdown content with visual styling\n */\n\nexport interface MarkdownStyleOptions {\n  useColors?: boolean;\n  useEmojis?: boolean;\n  indentSize?: number;\n  maxWidth?: number;\n}\n\nconst DEFAULT_OPTIONS: MarkdownStyleOptions = {\n  useColors: true,\n  useEmojis: true,\n  indentSize: 2,\n  maxWidth: 80\n};\n\n// ANSI color codes for terminal styling\nconst COLORS = {\n  reset: '\\x1b[0m',\n  bright: '\\x1b[1m',\n  dim: '\\x1b[2m',\n  italic: '\\x1b[3m',\n  underline: '\\x1b[4m',\n  \n  // Text colors\n  black: '\\x1b[30m',\n  red: '\\x1b[31m',\n  green: '\\x1b[32m',\n  yellow: '\\x1b[33m',\n  blue: '\\x1b[34m',\n  magenta: '\\x1b[35m',\n  cyan: '\\x1b[36m',\n  white: '\\x1b[37m',\n  \n  // Background colors\n  bgBlack: '\\x1b[40m',\n  bgRed: '\\x1b[41m',\n  bgGreen: '\\x1b[42m',\n  bgYellow: '\\x1b[43m',\n  bgBlue: '\\x1b[44m',\n  bgMagenta: '\\x1b[45m',\n  bgCyan: '\\x1b[46m',\n  bgWhite: '\\x1b[47m'\n};\n\n// Emoji mappings for enhanced visual display\nconst EMOJI_MAP = {\n  h1: 'üî•',\n  h2: '‚ö°',\n  h3: 'üí´',\n  h4: '‚ú®',\n  h5: 'üåü',\n  h6: '‚≠ê',\n  bold: 'üí™',\n  italic: '‚ú®',\n  code: 'üíª',\n  link: 'üîó',\n  image: 'üñºÔ∏è',\n  list: 'üìã',\n  quote: 'üí¨',\n  check: '‚úÖ',\n  uncheck: '‚òê',\n  warning: '‚ö†Ô∏è',\n  info: 'üí°',\n  success: 'üéâ',\n  error: '‚ùå'\n};\n\n/**\n * Apply color styling to text\n */\nfunction colorize(text: string, color: string, options: MarkdownStyleOptions): string {\n  if (!options.useColors) return text;\n  return `${color}${text}${COLORS.reset}`;\n}\n\n/**\n * Add emoji prefix to text\n */\nfunction addEmoji(text: string, emoji: string, options: MarkdownStyleOptions): string {\n  if (!options.useEmojis) return text;\n  return `${emoji} ${text}`;\n}\n\n/**\n * Process headers with styling\n */\nfunction processHeaders(content: string, options: MarkdownStyleOptions): string {\n  return content.replace(/^(#{1,6})\\s+(.+)$/gm, (match, hashes, text) => {\n    const level = hashes.length;\n    const emoji = EMOJI_MAP[`h${level}` as keyof typeof EMOJI_MAP];\n    \n    let styled = text;\n    \n    switch (level) {\n      case 1:\n        styled = colorize(text.toUpperCase(), COLORS.bright + COLORS.red, options);\n        break;\n      case 2:\n        styled = colorize(text, COLORS.bright + COLORS.blue, options);\n        break;\n      case 3:\n        styled = colorize(text, COLORS.bright + COLORS.green, options);\n        break;\n      case 4:\n        styled = colorize(text, COLORS.bright + COLORS.yellow, options);\n        break;\n      case 5:\n        styled = colorize(text, COLORS.bright + COLORS.magenta, options);\n        break;\n      case 6:\n        styled = colorize(text, COLORS.bright + COLORS.cyan, options);\n        break;\n    }\n    \n    const result = addEmoji(styled, emoji, options);\n    return `\\n${result}\\n${'='.repeat(Math.min(text.length, options.maxWidth || 80))}\\n`;\n  });\n}\n\n/**\n * Process bold and italic text\n */\nfunction processEmphasis(content: string, options: MarkdownStyleOptions): string {\n  // Bold text\n  content = content.replace(/\\*\\*([^*]+)\\*\\*/g, (match, text) => {\n    const styled = colorize(text, COLORS.bright, options);\n    return options.useEmojis ? `üí™ ${styled}` : styled;\n  });\n  \n  // Italic text\n  content = content.replace(/\\*([^*]+)\\*/g, (match, text) => {\n    const styled = colorize(text, COLORS.italic, options);\n    return options.useEmojis ? `‚ú® ${styled}` : styled;\n  });\n  \n  return content;\n}\n\n/**\n * Process code blocks and inline code\n */\nfunction processCode(content: string, options: MarkdownStyleOptions): string {\n  // Code blocks\n  content = content.replace(/```(\\w+)?\\n([\\s\\S]*?)```/g, (match, lang, code) => {\n    const langLabel = lang ? ` (${lang})` : '';\n    const header = colorize(`CODE${langLabel}`, COLORS.bgBlue + COLORS.white, options);\n    const styledCode = colorize(code.trim(), COLORS.dim + COLORS.cyan, options);\n    const border = '‚îÄ'.repeat(Math.min(60, options.maxWidth || 80));\n    \n    return `\\n${addEmoji(header, EMOJI_MAP.code, options)}\\n${border}\\n${styledCode}\\n${border}\\n`;\n  });\n  \n  // Inline code\n  content = content.replace(/`([^`]+)`/g, (match, code) => {\n    const styled = colorize(code, COLORS.bgBlack + COLORS.yellow, options);\n    return options.useEmojis ? `üíª ${styled}` : styled;\n  });\n  \n  return content;\n}\n\n/**\n * Process lists\n */\nfunction processLists(content: string, options: MarkdownStyleOptions): string {\n  const indent = ' '.repeat(options.indentSize || 2);\n  \n  // Unordered lists\n  content = content.replace(/^(\\s*)[-*+]\\s+(.+)$/gm, (match, spaces, text) => {\n    const bullet = options.useEmojis ? 'üìã' : '‚Ä¢';\n    const styled = colorize(text, COLORS.white, options);\n    return `${spaces}${bullet} ${styled}`;\n  });\n  \n  // Ordered lists\n  content = content.replace(/^(\\s*)(\\d+)\\.\\s+(.+)$/gm, (match, spaces, num, text) => {\n    const bullet = options.useEmojis ? `${num}Ô∏è‚É£` : `${num}.`;\n    const styled = colorize(text, COLORS.white, options);\n    return `${spaces}${bullet} ${styled}`;\n  });\n  \n  // Checkboxes\n  content = content.replace(/^(\\s*)- \\[([x ])\\]\\s+(.+)$/gm, (match, spaces, check, text) => {\n    const checkbox = check === 'x' ? EMOJI_MAP.check : EMOJI_MAP.uncheck;\n    const styled = check === 'x' \n      ? colorize(text, COLORS.dim + COLORS.green, options)\n      : colorize(text, COLORS.white, options);\n    return `${spaces}${checkbox} ${styled}`;\n  });\n  \n  return content;\n}\n\n/**\n * Process blockquotes\n */\nfunction processBlockquotes(content: string, options: MarkdownStyleOptions): string {\n  return content.replace(/^>\\s+(.+)$/gm, (match, text) => {\n    const styled = colorize(text, COLORS.italic + COLORS.cyan, options);\n    const quote = addEmoji(styled, EMOJI_MAP.quote, options);\n    return `‚îÇ ${quote}`;\n  });\n}\n\n/**\n * Process links and images\n */\nfunction processLinks(content: string, options: MarkdownStyleOptions): string {\n  // Images\n  content = content.replace(/!\\[([^\\]]*)\\]\\(([^)]+)\\)/g, (match, alt, url) => {\n    const styled = colorize(`[${alt || 'Image'}]`, COLORS.bright + COLORS.magenta, options);\n    return addEmoji(`${styled} (${url})`, EMOJI_MAP.image, options);\n  });\n  \n  // Links\n  content = content.replace(/\\[([^\\]]+)\\]\\(([^)]+)\\)/g, (match, text, url) => {\n    const styled = colorize(text, COLORS.underline + COLORS.blue, options);\n    return addEmoji(`${styled} (${url})`, EMOJI_MAP.link, options);\n  });\n  \n  return content;\n}\n\n/**\n * Process horizontal rules\n */\nfunction processHorizontalRules(content: string, options: MarkdownStyleOptions): string {\n  return content.replace(/^---+$/gm, () => {\n    const rule = '‚ïê'.repeat(Math.min(60, options.maxWidth || 80));\n    return colorize(rule, COLORS.dim + COLORS.white, options);\n  });\n}\n\n/**\n * Add visual separators and spacing\n */\nfunction addVisualEnhancements(content: string, options: MarkdownStyleOptions): string {\n  // Add spacing around sections\n  content = content.replace(/\\n(#{1,6})/g, '\\n\\n$1');\n  content = content.replace(/(#{1,6}[^\\n]+)\\n/g, '$1\\n\\n');\n  \n  // Clean up excessive newlines\n  content = content.replace(/\\n{3,}/g, '\\n\\n');\n  \n  return content.trim();\n}\n\n/**\n * Main function to apply simple markdown styling\n * @param markdown The markdown content to style\n * @param options Styling options\n * @returns Styled markdown content with visual enhancements\n */\nexport function applyMarkdownStyling(markdown: string, options: MarkdownStyleOptions = {}): string {\n  if (!markdown || typeof markdown !== 'string') {\n    return '';\n  }\n  \n  const opts = { ...DEFAULT_OPTIONS, ...options };\n  \n  let styled = markdown;\n  \n  // Apply styling in order\n  styled = processHeaders(styled, opts);\n  styled = processCode(styled, opts);\n  styled = processEmphasis(styled, opts);\n  styled = processLists(styled, opts);\n  styled = processBlockquotes(styled, opts);\n  styled = processLinks(styled, opts);\n  styled = processHorizontalRules(styled, opts);\n  styled = addVisualEnhancements(styled, opts);\n  \n  return styled;\n}\n\n/**\n * Create a styled preview of markdown content\n * @param markdown The markdown content\n * @param title Optional title for the preview\n * @param options Styling options\n * @returns Formatted preview with title and borders\n */\nexport function createMarkdownPreview(\n  markdown: string, \n  title?: string, \n  options: MarkdownStyleOptions = {}\n): string {\n  const opts = { ...DEFAULT_OPTIONS, ...options };\n  const styled = applyMarkdownStyling(markdown, opts);\n  \n  if (!title) {\n    return styled;\n  }\n  \n  const border = '‚ïê'.repeat(Math.min(title.length + 4, opts.maxWidth || 80));\n  const styledTitle = colorize(title.toUpperCase(), COLORS.bright + COLORS.white, opts);\n  const titleWithEmoji = addEmoji(styledTitle, 'üìÑ', opts);\n  \n  return `${border}\\n  ${titleWithEmoji}\\n${border}\\n\\n${styled}\\n\\n${border}`;\n}\n\n/**\n * Extract and style markdown sections\n * @param markdown The markdown content\n * @param sectionType The type of section to extract ('headers', 'code', 'lists', etc.)\n * @param options Styling options\n * @returns Styled sections\n */\nexport function extractStyledSections(\n  markdown: string, \n  sectionType: 'headers' | 'code' | 'lists' | 'quotes' | 'links',\n  options: MarkdownStyleOptions = {}\n): string[] {\n  if (!markdown) return [];\n  \n  const opts = { ...DEFAULT_OPTIONS, ...options };\n  const sections: string[] = [];\n  \n  switch (sectionType) {\n    case 'headers':\n      const headerMatches = markdown.match(/^#{1,6}\\s+.+$/gm);\n      if (headerMatches) {\n        sections.push(...headerMatches.map(h => processHeaders(h, opts)));\n      }\n      break;\n      \n    case 'code':\n      const codeMatches = markdown.match(/```[\\s\\S]*?```|`[^`]+`/g);\n      if (codeMatches) {\n        sections.push(...codeMatches.map(c => processCode(c, opts)));\n      }\n      break;\n      \n    case 'lists':\n      const listMatches = markdown.match(/^(\\s*)[-*+]\\s+.+$|^(\\s*)\\d+\\.\\s+.+$/gm);\n      if (listMatches) {\n        sections.push(...listMatches.map(l => processLists(l, opts)));\n      }\n      break;\n      \n    case 'quotes':\n      const quoteMatches = markdown.match(/^>\\s+.+$/gm);\n      if (quoteMatches) {\n        sections.push(...quoteMatches.map(q => processBlockquotes(q, opts)));\n      }\n      break;\n      \n    case 'links':\n      const linkMatches = markdown.match(/\\[([^\\]]+)\\]\\(([^)]+)\\)|!\\[([^\\]]*)\\]\\(([^)]+)\\)/g);\n      if (linkMatches) {\n        sections.push(...linkMatches.map(l => processLinks(l, opts)));\n      }\n      break;\n  }\n  \n  return sections;\n}\n\n/**\n * Create a markdown summary with key information highlighted\n * @param markdown The markdown content\n * @param options Styling options\n * @returns Styled summary\n */\nexport function createMarkdownSummary(markdown: string, options: MarkdownStyleOptions = {}): string {\n  if (!markdown) return '';\n  \n  const opts = { ...DEFAULT_OPTIONS, ...options };\n  const summary: string[] = [];\n  \n  // Extract headers\n  const headers = extractStyledSections(markdown, 'headers', opts);\n  if (headers.length > 0) {\n    summary.push(colorize('üìã SECTIONS:', COLORS.bright + COLORS.blue, opts));\n    summary.push(...headers.slice(0, 5)); // Limit to first 5 headers\n  }\n  \n  // Extract code blocks\n  const codeBlocks = extractStyledSections(markdown, 'code', opts);\n  if (codeBlocks.length > 0) {\n    summary.push(colorize('üíª CODE BLOCKS:', COLORS.bright + COLORS.green, opts));\n    summary.push(`${codeBlocks.length} code block(s) found`);\n  }\n  \n  // Extract lists\n  const lists = extractStyledSections(markdown, 'lists', opts);\n  if (lists.length > 0) {\n    summary.push(colorize('üìù LISTS:', COLORS.bright + COLORS.yellow, opts));\n    summary.push(`${lists.length} list item(s) found`);\n  }\n  \n  // Extract links\n  const links = extractStyledSections(markdown, 'links', opts);\n  if (links.length > 0) {\n    summary.push(colorize('üîó LINKS:', COLORS.bright + COLORS.cyan, opts));\n    summary.push(`${links.length} link(s) found`);\n  }\n  \n  return summary.join('\\n');\n}\n"],"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","ignoreList":[]}
{"version":3,"names":["ChecklistsClient","constructor","client","cov_2jg5wtj2kk","f","s","createChecklist","taskId","params","post","updateChecklist","checklistId","put","deleteChecklist","delete","createChecklistItem","updateChecklistItem","checklistItemId","deleteChecklistItem","createChecklistsClient"],"sources":["/Users/peterkrzyzek/Development/clickup-mcp-server/src/clickup-client/checklists.ts"],"sourcesContent":["import { ClickUpClient } from './index.js';\n\nexport interface ChecklistItem {\n  id: string;\n  name: string;\n  orderindex: number;\n  resolved: boolean;\n  assignee: {\n    id: number;\n    username: string;\n    email: string;\n  } | null;\n  parent: string | null;\n}\n\nexport interface Checklist {\n  id: string;\n  task_id: string;\n  name: string;\n  orderindex: number;\n  items: ChecklistItem[];\n}\n\nexport interface CreateChecklistParams {\n  name: string;\n  // Note: The ClickUp API doesn't support creating items when creating a checklist\n  // Items must be created separately using the createChecklistItem method\n}\n\nexport interface UpdateChecklistParams {\n  name: string;\n}\n\nexport interface CreateChecklistItemParams {\n  name: string;\n  assignee?: number;\n  resolved?: boolean;\n}\n\nexport interface UpdateChecklistItemParams {\n  name?: string;\n  assignee?: number;\n  resolved?: boolean;\n}\n\nexport class ChecklistsClient {\n  private client: ClickUpClient;\n\n  constructor(client: ClickUpClient) {\n    this.client = client;\n  }\n\n  /**\n   * Create a new checklist in a task\n   * @param taskId The ID of the task to create the checklist in\n   * @param params The checklist parameters\n   * @returns The created checklist\n   */\n  async createChecklist(taskId: string, params: CreateChecklistParams): Promise<Checklist> {\n    return this.client.post(`/task/${taskId}/checklist`, params);\n  }\n\n  /**\n   * Update an existing checklist\n   * @param checklistId The ID of the checklist to update\n   * @param params The checklist parameters to update\n   * @returns The updated checklist\n   */\n  async updateChecklist(checklistId: string, params: UpdateChecklistParams): Promise<Checklist> {\n    return this.client.put(`/checklist/${checklistId}`, params);\n  }\n\n  /**\n   * Delete a checklist\n   * @param checklistId The ID of the checklist to delete\n   * @returns Success message\n   */\n  async deleteChecklist(checklistId: string): Promise<{ success: boolean }> {\n    return this.client.delete(`/checklist/${checklistId}`);\n  }\n\n  /**\n   * Create a new checklist item in a checklist\n   * @param checklistId The ID of the checklist to create the item in\n   * @param params The checklist item parameters\n   * @returns The created checklist item\n   */\n  async createChecklistItem(checklistId: string, params: CreateChecklistItemParams): Promise<ChecklistItem> {\n    return this.client.post(`/checklist/${checklistId}/checklist_item`, params);\n  }\n\n  /**\n   * Update an existing checklist item\n   * @param checklistId The ID of the checklist containing the item\n   * @param checklistItemId The ID of the checklist item to update\n   * @param params The checklist item parameters to update\n   * @returns The updated checklist item\n   */\n  async updateChecklistItem(checklistId: string, checklistItemId: string, params: UpdateChecklistItemParams): Promise<ChecklistItem> {\n    return this.client.put(`/checklist/${checklistId}/checklist_item/${checklistItemId}`, params);\n  }\n\n  /**\n   * Delete a checklist item\n   * @param checklistId The ID of the checklist containing the item\n   * @param checklistItemId The ID of the checklist item to delete\n   * @returns Success message\n   */\n  async deleteChecklistItem(checklistId: string, checklistItemId: string): Promise<{ success: boolean }> {\n    return this.client.delete(`/checklist/${checklistId}/checklist_item/${checklistItemId}`);\n  }\n}\n\nexport const createChecklistsClient = (client: ClickUpClient): ChecklistsClient => {\n  return new ChecklistsClient(client);\n};\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6CA,OAAM,MAAOA,gBAAgB;EAG3BC,YAAYC,MAAqB;IAAA;IAAAC,cAAA,GAAAC,CAAA;IAAAD,cAAA,GAAAE,CAAA;IAC/B,IAAI,CAACH,MAAM,GAAGA,MAAM;EACtB;EAEA;;;;;;EAMA,MAAMI,eAAeA,CAACC,MAAc,EAAEC,MAA6B;IAAA;IAAAL,cAAA,GAAAC,CAAA;IAAAD,cAAA,GAAAE,CAAA;IACjE,OAAO,IAAI,CAACH,MAAM,CAACO,IAAI,CAAC,SAASF,MAAM,YAAY,EAAEC,MAAM,CAAC;EAC9D;EAEA;;;;;;EAMA,MAAME,eAAeA,CAACC,WAAmB,EAAEH,MAA6B;IAAA;IAAAL,cAAA,GAAAC,CAAA;IAAAD,cAAA,GAAAE,CAAA;IACtE,OAAO,IAAI,CAACH,MAAM,CAACU,GAAG,CAAC,cAAcD,WAAW,EAAE,EAAEH,MAAM,CAAC;EAC7D;EAEA;;;;;EAKA,MAAMK,eAAeA,CAACF,WAAmB;IAAA;IAAAR,cAAA,GAAAC,CAAA;IAAAD,cAAA,GAAAE,CAAA;IACvC,OAAO,IAAI,CAACH,MAAM,CAACY,MAAM,CAAC,cAAcH,WAAW,EAAE,CAAC;EACxD;EAEA;;;;;;EAMA,MAAMI,mBAAmBA,CAACJ,WAAmB,EAAEH,MAAiC;IAAA;IAAAL,cAAA,GAAAC,CAAA;IAAAD,cAAA,GAAAE,CAAA;IAC9E,OAAO,IAAI,CAACH,MAAM,CAACO,IAAI,CAAC,cAAcE,WAAW,iBAAiB,EAAEH,MAAM,CAAC;EAC7E;EAEA;;;;;;;EAOA,MAAMQ,mBAAmBA,CAACL,WAAmB,EAAEM,eAAuB,EAAET,MAAiC;IAAA;IAAAL,cAAA,GAAAC,CAAA;IAAAD,cAAA,GAAAE,CAAA;IACvG,OAAO,IAAI,CAACH,MAAM,CAACU,GAAG,CAAC,cAAcD,WAAW,mBAAmBM,eAAe,EAAE,EAAET,MAAM,CAAC;EAC/F;EAEA;;;;;;EAMA,MAAMU,mBAAmBA,CAACP,WAAmB,EAAEM,eAAuB;IAAA;IAAAd,cAAA,GAAAC,CAAA;IAAAD,cAAA,GAAAE,CAAA;IACpE,OAAO,IAAI,CAACH,MAAM,CAACY,MAAM,CAAC,cAAcH,WAAW,mBAAmBM,eAAe,EAAE,CAAC;EAC1F;;AACD;AAAAd,cAAA,GAAAE,CAAA;AAED,OAAO,MAAMc,sBAAsB,GAAIjB,MAAqB,IAAsB;EAAA;EAAAC,cAAA,GAAAC,CAAA;EAAAD,cAAA,GAAAE,CAAA;EAChF,OAAO,IAAIL,gBAAgB,CAACE,MAAM,CAAC;AACrC,CAAC","ignoreList":[]}
ed7a29dc3913c6692db0d6f241cc9e68
/* istanbul ignore next */
function cov_1ek2b13nc9() {
  var path = "/Users/peterkrzyzek/Development/clickup-mcp-server/src/tools/dependencies-tools-setup.ts";
  var hash = "60dbbb455fbdaf7a5518c5fa0e39c187ef1631bb";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/peterkrzyzek/Development/clickup-mcp-server/src/tools/dependencies-tools-setup.ts",
    statementMap: {
      "0": {
        start: {
          line: 6,
          column: 22
        },
        end: {
          line: 6,
          column: 43
        }
      },
      "1": {
        start: {
          line: 7,
          column: 27
        },
        end: {
          line: 7,
          column: 88
        }
      },
      "2": {
        start: {
          line: 12,
          column: 4
        },
        end: {
          line: 37,
          column: 7
        }
      },
      "3": {
        start: {
          line: 18,
          column: 8
        },
        end: {
          line: 36,
          column: 9
        }
      },
      "4": {
        start: {
          line: 19,
          column: 28
        },
        end: {
          line: 19,
          column: 62
        }
      },
      "5": {
        start: {
          line: 20,
          column: 27
        },
        end: {
          line: 20,
          column: 77
        }
      },
      "6": {
        start: {
          line: 21,
          column: 12
        },
        end: {
          line: 26,
          column: 14
        }
      },
      "7": {
        start: {
          line: 29,
          column: 12
        },
        end: {
          line: 35,
          column: 14
        }
      },
      "8": {
        start: {
          line: 38,
          column: 4
        },
        end: {
          line: 63,
          column: 7
        }
      },
      "9": {
        start: {
          line: 44,
          column: 8
        },
        end: {
          line: 62,
          column: 9
        }
      },
      "10": {
        start: {
          line: 45,
          column: 27
        },
        end: {
          line: 45,
          column: 66
        }
      },
      "11": {
        start: {
          line: 46,
          column: 27
        },
        end: {
          line: 46,
          column: 79
        }
      },
      "12": {
        start: {
          line: 47,
          column: 12
        },
        end: {
          line: 52,
          column: 14
        }
      },
      "13": {
        start: {
          line: 55,
          column: 12
        },
        end: {
          line: 61,
          column: 14
        }
      },
      "14": {
        start: {
          line: 64,
          column: 4
        },
        end: {
          line: 88,
          column: 7
        }
      },
      "15": {
        start: {
          line: 69,
          column: 8
        },
        end: {
          line: 87,
          column: 9
        }
      },
      "16": {
        start: {
          line: 70,
          column: 28
        },
        end: {
          line: 70,
          column: 62
        }
      },
      "17": {
        start: {
          line: 71,
          column: 27
        },
        end: {
          line: 71,
          column: 77
        }
      },
      "18": {
        start: {
          line: 72,
          column: 12
        },
        end: {
          line: 77,
          column: 14
        }
      },
      "19": {
        start: {
          line: 80,
          column: 12
        },
        end: {
          line: 86,
          column: 14
        }
      },
      "20": {
        start: {
          line: 89,
          column: 4
        },
        end: {
          line: 110,
          column: 7
        }
      },
      "21": {
        start: {
          line: 92,
          column: 8
        },
        end: {
          line: 109,
          column: 9
        }
      },
      "22": {
        start: {
          line: 93,
          column: 27
        },
        end: {
          line: 93,
          column: 88
        }
      },
      "23": {
        start: {
          line: 94,
          column: 12
        },
        end: {
          line: 99,
          column: 14
        }
      },
      "24": {
        start: {
          line: 102,
          column: 12
        },
        end: {
          line: 108,
          column: 14
        }
      },
      "25": {
        start: {
          line: 111,
          column: 4
        },
        end: {
          line: 137,
          column: 7
        }
      },
      "26": {
        start: {
          line: 118,
          column: 8
        },
        end: {
          line: 136,
          column: 9
        }
      },
      "27": {
        start: {
          line: 119,
          column: 28
        },
        end: {
          line: 119,
          column: 68
        }
      },
      "28": {
        start: {
          line: 120,
          column: 27
        },
        end: {
          line: 120,
          column: 79
        }
      },
      "29": {
        start: {
          line: 121,
          column: 12
        },
        end: {
          line: 126,
          column: 14
        }
      },
      "30": {
        start: {
          line: 129,
          column: 12
        },
        end: {
          line: 135,
          column: 14
        }
      },
      "31": {
        start: {
          line: 138,
          column: 4
        },
        end: {
          line: 164,
          column: 7
        }
      },
      "32": {
        start: {
          line: 145,
          column: 8
        },
        end: {
          line: 163,
          column: 9
        }
      },
      "33": {
        start: {
          line: 146,
          column: 26
        },
        end: {
          line: 146,
          column: 67
        }
      },
      "34": {
        start: {
          line: 147,
          column: 27
        },
        end: {
          line: 147,
          column: 83
        }
      },
      "35": {
        start: {
          line: 148,
          column: 12
        },
        end: {
          line: 153,
          column: 14
        }
      },
      "36": {
        start: {
          line: 156,
          column: 12
        },
        end: {
          line: 162,
          column: 14
        }
      },
      "37": {
        start: {
          line: 168,
          column: 4
        },
        end: {
          line: 198,
          column: 7
        }
      },
      "38": {
        start: {
          line: 175,
          column: 8
        },
        end: {
          line: 197,
          column: 9
        }
      },
      "39": {
        start: {
          line: 176,
          column: 27
        },
        end: {
          line: 181,
          column: 14
        }
      },
      "40": {
        start: {
          line: 182,
          column: 12
        },
        end: {
          line: 187,
          column: 14
        }
      },
      "41": {
        start: {
          line: 190,
          column: 12
        },
        end: {
          line: 196,
          column: 14
        }
      },
      "42": {
        start: {
          line: 199,
          column: 4
        },
        end: {
          line: 220,
          column: 7
        }
      },
      "43": {
        start: {
          line: 202,
          column: 8
        },
        end: {
          line: 219,
          column: 9
        }
      },
      "44": {
        start: {
          line: 203,
          column: 27
        },
        end: {
          line: 203,
          column: 89
        }
      },
      "45": {
        start: {
          line: 204,
          column: 12
        },
        end: {
          line: 209,
          column: 14
        }
      },
      "46": {
        start: {
          line: 212,
          column: 12
        },
        end: {
          line: 218,
          column: 14
        }
      },
      "47": {
        start: {
          line: 221,
          column: 4
        },
        end: {
          line: 249,
          column: 7
        }
      },
      "48": {
        start: {
          line: 227,
          column: 8
        },
        end: {
          line: 248,
          column: 9
        }
      },
      "49": {
        start: {
          line: 228,
          column: 27
        },
        end: {
          line: 232,
          column: 14
        }
      },
      "50": {
        start: {
          line: 233,
          column: 12
        },
        end: {
          line: 238,
          column: 14
        }
      },
      "51": {
        start: {
          line: 241,
          column: 12
        },
        end: {
          line: 247,
          column: 14
        }
      },
      "52": {
        start: {
          line: 250,
          column: 4
        },
        end: {
          line: 271,
          column: 7
        }
      },
      "53": {
        start: {
          line: 253,
          column: 8
        },
        end: {
          line: 270,
          column: 9
        }
      },
      "54": {
        start: {
          line: 254,
          column: 27
        },
        end: {
          line: 254,
          column: 93
        }
      },
      "55": {
        start: {
          line: 255,
          column: 12
        },
        end: {
          line: 260,
          column: 14
        }
      },
      "56": {
        start: {
          line: 263,
          column: 12
        },
        end: {
          line: 269,
          column: 14
        }
      },
      "57": {
        start: {
          line: 272,
          column: 4
        },
        end: {
          line: 295,
          column: 7
        }
      },
      "58": {
        start: {
          line: 276,
          column: 8
        },
        end: {
          line: 294,
          column: 9
        }
      },
      "59": {
        start: {
          line: 277,
          column: 30
        },
        end: {
          line: 277,
          column: 71
        }
      },
      "60": {
        start: {
          line: 278,
          column: 27
        },
        end: {
          line: 278,
          column: 87
        }
      },
      "61": {
        start: {
          line: 279,
          column: 12
        },
        end: {
          line: 284,
          column: 14
        }
      },
      "62": {
        start: {
          line: 287,
          column: 12
        },
        end: {
          line: 293,
          column: 14
        }
      },
      "63": {
        start: {
          line: 296,
          column: 4
        },
        end: {
          line: 318,
          column: 7
        }
      },
      "64": {
        start: {
          line: 300,
          column: 8
        },
        end: {
          line: 317,
          column: 9
        }
      },
      "65": {
        start: {
          line: 301,
          column: 27
        },
        end: {
          line: 301,
          column: 100
        }
      },
      "66": {
        start: {
          line: 302,
          column: 12
        },
        end: {
          line: 307,
          column: 14
        }
      },
      "67": {
        start: {
          line: 310,
          column: 12
        },
        end: {
          line: 316,
          column: 14
        }
      }
    },
    fnMap: {
      "0": {
        name: "setupDependenciesTools",
        decl: {
          start: {
            line: 8,
            column: 16
          },
          end: {
            line: 8,
            column: 38
          }
        },
        loc: {
          start: {
            line: 8,
            column: 47
          },
          end: {
            line: 319,
            column: 1
          }
        },
        line: 8
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 17,
            column: 7
          },
          end: {
            line: 17,
            column: 8
          }
        },
        loc: {
          start: {
            line: 17,
            column: 23
          },
          end: {
            line: 37,
            column: 5
          }
        },
        line: 17
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 43,
            column: 7
          },
          end: {
            line: 43,
            column: 8
          }
        },
        loc: {
          start: {
            line: 43,
            column: 23
          },
          end: {
            line: 63,
            column: 5
          }
        },
        line: 43
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 68,
            column: 7
          },
          end: {
            line: 68,
            column: 8
          }
        },
        loc: {
          start: {
            line: 68,
            column: 23
          },
          end: {
            line: 88,
            column: 5
          }
        },
        line: 68
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 91,
            column: 7
          },
          end: {
            line: 91,
            column: 8
          }
        },
        loc: {
          start: {
            line: 91,
            column: 23
          },
          end: {
            line: 110,
            column: 5
          }
        },
        line: 91
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 117,
            column: 7
          },
          end: {
            line: 117,
            column: 8
          }
        },
        loc: {
          start: {
            line: 117,
            column: 23
          },
          end: {
            line: 137,
            column: 5
          }
        },
        line: 117
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 144,
            column: 7
          },
          end: {
            line: 144,
            column: 8
          }
        },
        loc: {
          start: {
            line: 144,
            column: 23
          },
          end: {
            line: 164,
            column: 5
          }
        },
        line: 144
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 174,
            column: 7
          },
          end: {
            line: 174,
            column: 8
          }
        },
        loc: {
          start: {
            line: 174,
            column: 23
          },
          end: {
            line: 198,
            column: 5
          }
        },
        line: 174
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 201,
            column: 7
          },
          end: {
            line: 201,
            column: 8
          }
        },
        loc: {
          start: {
            line: 201,
            column: 23
          },
          end: {
            line: 220,
            column: 5
          }
        },
        line: 201
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 226,
            column: 7
          },
          end: {
            line: 226,
            column: 8
          }
        },
        loc: {
          start: {
            line: 226,
            column: 23
          },
          end: {
            line: 249,
            column: 5
          }
        },
        line: 226
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 252,
            column: 7
          },
          end: {
            line: 252,
            column: 8
          }
        },
        loc: {
          start: {
            line: 252,
            column: 23
          },
          end: {
            line: 271,
            column: 5
          }
        },
        line: 252
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 275,
            column: 7
          },
          end: {
            line: 275,
            column: 8
          }
        },
        loc: {
          start: {
            line: 275,
            column: 23
          },
          end: {
            line: 295,
            column: 5
          }
        },
        line: 275
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 299,
            column: 7
          },
          end: {
            line: 299,
            column: 8
          }
        },
        loc: {
          start: {
            line: 299,
            column: 23
          },
          end: {
            line: 318,
            column: 5
          }
        },
        line: 299
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 32,
            column: 60
          },
          end: {
            line: 32,
            column: 116
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 32,
            column: 85
          },
          end: {
            line: 32,
            column: 98
          }
        }, {
          start: {
            line: 32,
            column: 101
          },
          end: {
            line: 32,
            column: 116
          }
        }],
        line: 32
      },
      "1": {
        loc: {
          start: {
            line: 58,
            column: 66
          },
          end: {
            line: 58,
            column: 122
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 58,
            column: 91
          },
          end: {
            line: 58,
            column: 104
          }
        }, {
          start: {
            line: 58,
            column: 107
          },
          end: {
            line: 58,
            column: 122
          }
        }],
        line: 58
      },
      "2": {
        loc: {
          start: {
            line: 83,
            column: 60
          },
          end: {
            line: 83,
            column: 116
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 83,
            column: 85
          },
          end: {
            line: 83,
            column: 98
          }
        }, {
          start: {
            line: 83,
            column: 101
          },
          end: {
            line: 83,
            column: 116
          }
        }],
        line: 83
      },
      "3": {
        loc: {
          start: {
            line: 105,
            column: 60
          },
          end: {
            line: 105,
            column: 116
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 105,
            column: 85
          },
          end: {
            line: 105,
            column: 98
          }
        }, {
          start: {
            line: 105,
            column: 101
          },
          end: {
            line: 105,
            column: 116
          }
        }],
        line: 105
      },
      "4": {
        loc: {
          start: {
            line: 132,
            column: 65
          },
          end: {
            line: 132,
            column: 121
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 132,
            column: 90
          },
          end: {
            line: 132,
            column: 103
          }
        }, {
          start: {
            line: 132,
            column: 106
          },
          end: {
            line: 132,
            column: 121
          }
        }],
        line: 132
      },
      "5": {
        loc: {
          start: {
            line: 159,
            column: 70
          },
          end: {
            line: 159,
            column: 126
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 159,
            column: 95
          },
          end: {
            line: 159,
            column: 108
          }
        }, {
          start: {
            line: 159,
            column: 111
          },
          end: {
            line: 159,
            column: 126
          }
        }],
        line: 159
      },
      "6": {
        loc: {
          start: {
            line: 193,
            column: 71
          },
          end: {
            line: 193,
            column: 127
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 193,
            column: 96
          },
          end: {
            line: 193,
            column: 109
          }
        }, {
          start: {
            line: 193,
            column: 112
          },
          end: {
            line: 193,
            column: 127
          }
        }],
        line: 193
      },
      "7": {
        loc: {
          start: {
            line: 215,
            column: 70
          },
          end: {
            line: 215,
            column: 126
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 215,
            column: 95
          },
          end: {
            line: 215,
            column: 108
          }
        }, {
          start: {
            line: 215,
            column: 111
          },
          end: {
            line: 215,
            column: 126
          }
        }],
        line: 215
      },
      "8": {
        loc: {
          start: {
            line: 244,
            column: 71
          },
          end: {
            line: 244,
            column: 127
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 244,
            column: 96
          },
          end: {
            line: 244,
            column: 109
          }
        }, {
          start: {
            line: 244,
            column: 112
          },
          end: {
            line: 244,
            column: 127
          }
        }],
        line: 244
      },
      "9": {
        loc: {
          start: {
            line: 266,
            column: 77
          },
          end: {
            line: 266,
            column: 133
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 266,
            column: 102
          },
          end: {
            line: 266,
            column: 115
          }
        }, {
          start: {
            line: 266,
            column: 118
          },
          end: {
            line: 266,
            column: 133
          }
        }],
        line: 266
      },
      "10": {
        loc: {
          start: {
            line: 290,
            column: 78
          },
          end: {
            line: 290,
            column: 134
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 290,
            column: 103
          },
          end: {
            line: 290,
            column: 116
          }
        }, {
          start: {
            line: 290,
            column: 119
          },
          end: {
            line: 290,
            column: 134
          }
        }],
        line: 290
      },
      "11": {
        loc: {
          start: {
            line: 313,
            column: 67
          },
          end: {
            line: 313,
            column: 123
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 313,
            column: 92
          },
          end: {
            line: 313,
            column: 105
          }
        }, {
          start: {
            line: 313,
            column: 108
          },
          end: {
            line: 313,
            column: 123
          }
        }],
        line: 313
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0]
    },
    inputSourceMap: {
      file: "/Users/peterkrzyzek/Development/clickup-mcp-server/src/tools/dependencies-tools-setup.ts",
      mappings: "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",
      names: [],
      sources: ["/Users/peterkrzyzek/Development/clickup-mcp-server/src/tools/dependencies-tools-setup.ts"],
      sourcesContent: ["import { McpServer } from '@modelcontextprotocol/sdk/server/mcp.js';\nimport { z } from 'zod';\nimport { createClickUpClient } from '../clickup-client/index.js';\nimport { DependenciesEnhancedClient } from '../clickup-client/dependencies-enhanced.js';\nimport {\n  CreateDependencySchema,\n  UpdateDependencySchema,\n  GetDependenciesFilterSchema,\n  DependencyGraphOptionsSchema,\n  DependencyConflictCheckSchema,\n  BulkDependencyOperationSchema,\n  DependencyTypeSchema,\n  DependencyStatusSchema\n} from '../schemas/dependencies-schemas.js';\n\n// Create clients\nconst clickUpClient = createClickUpClient();\nconst dependenciesClient = new DependenciesEnhancedClient(process.env.CLICKUP_API_TOKEN!);\n\nexport function setupDependenciesTools(server: McpServer): void {\n\n  // ========================================\n  // DEPENDENCY MANAGEMENT OPERATIONS\n  // ========================================\n\n  server.tool(\n    'create_dependency',\n    'Create a new dependency relationship between two tasks. Dependencies define task execution order and blocking relationships.',\n    {\n      task_id: z.string().min(1).describe('The ID of the task that depends on another'),\n      depends_on: z.string().min(1).describe('The ID of the task that this task depends on'),\n      type: DependencyTypeSchema.default('blocking').describe('The type of dependency relationship'),\n      link_id: z.string().optional().describe('Optional link ID for grouping related dependencies')\n    },\n    async (args) => {\n      try {\n        const request = CreateDependencySchema.parse(args);\n        const result = await dependenciesClient.createDependency(request);\n        \n        return {\n          content: [{ \n            type: 'text', \n            text: `Dependency created successfully:\\n\\n${JSON.stringify(result, null, 2)}` \n          }]\n        };\n      } catch (error) {\n        return {\n          content: [{ \n            type: 'text', \n            text: `Error creating dependency: ${error instanceof Error ? error.message : 'Unknown error'}` \n          }],\n          isError: true\n        };\n      }\n    }\n  );\n\n  server.tool(\n    'get_task_dependencies',\n    'Get all dependencies for a specific task with optional filtering by type and status.',\n    {\n      task_id: z.string().min(1).describe('The ID of the task to get dependencies for'),\n      type: DependencyTypeSchema.optional().describe('Filter by dependency type'),\n      status: DependencyStatusSchema.optional().describe('Filter by dependency status'),\n      include_resolved: z.boolean().default(false).describe('Whether to include resolved dependencies')\n    },\n    async (args) => {\n      try {\n        const filter = GetDependenciesFilterSchema.parse(args);\n        const result = await dependenciesClient.getTaskDependencies(filter);\n        \n        return {\n          content: [{ \n            type: 'text', \n            text: `Dependencies for task ${args.task_id}:\\n\\n${JSON.stringify(result, null, 2)}` \n          }]\n        };\n      } catch (error) {\n        return {\n          content: [{ \n            type: 'text', \n            text: `Error getting task dependencies: ${error instanceof Error ? error.message : 'Unknown error'}` \n          }],\n          isError: true\n        };\n      }\n    }\n  );\n\n  server.tool(\n    'update_dependency',\n    'Update an existing dependency\\'s type or status.',\n    {\n      dependency_id: z.string().min(1).describe('The ID of the dependency to update'),\n      type: DependencyTypeSchema.optional().describe('New dependency type'),\n      status: DependencyStatusSchema.optional().describe('New dependency status')\n    },\n    async (args) => {\n      try {\n        const request = UpdateDependencySchema.parse(args);\n        const result = await dependenciesClient.updateDependency(request);\n        \n        return {\n          content: [{ \n            type: 'text', \n            text: `Dependency updated successfully:\\n\\n${JSON.stringify(result, null, 2)}` \n          }]\n        };\n      } catch (error) {\n        return {\n          content: [{ \n            type: 'text', \n            text: `Error updating dependency: ${error instanceof Error ? error.message : 'Unknown error'}` \n          }],\n          isError: true\n        };\n      }\n    }\n  );\n\n  server.tool(\n    'delete_dependency',\n    'Delete a dependency relationship between tasks.',\n    {\n      dependency_id: z.string().min(1).describe('The ID of the dependency to delete')\n    },\n    async (args) => {\n      try {\n        const result = await dependenciesClient.deleteDependency(args.dependency_id);\n        \n        return {\n          content: [{ \n            type: 'text', \n            text: `Dependency deleted successfully: ${JSON.stringify(result, null, 2)}` \n          }]\n        };\n      } catch (error) {\n        return {\n          content: [{ \n            type: 'text', \n            text: `Error deleting dependency: ${error instanceof Error ? error.message : 'Unknown error'}` \n          }],\n          isError: true\n        };\n      }\n    }\n  );\n\n  server.tool(\n    'get_dependency_graph',\n    'Get a comprehensive dependency graph for a task showing all related dependencies and relationships.',\n    {\n      task_id: z.string().min(1).describe('The root task ID for the dependency graph'),\n      depth: z.number().min(1).max(10).default(3).describe('Maximum depth to traverse in the graph'),\n      direction: z.enum(['upstream', 'downstream', 'both']).default('both').describe('Direction to traverse dependencies'),\n      include_resolved: z.boolean().default(false).describe('Whether to include resolved dependencies'),\n      include_broken: z.boolean().default(true).describe('Whether to include broken dependencies')\n    },\n    async (args) => {\n      try {\n        const options = DependencyGraphOptionsSchema.parse(args);\n        const result = await dependenciesClient.getDependencyGraph(options);\n        \n        return {\n          content: [{ \n            type: 'text', \n            text: `Dependency graph for task ${args.task_id}:\\n\\n${JSON.stringify(result, null, 2)}` \n          }]\n        };\n      } catch (error) {\n        return {\n          content: [{ \n            type: 'text', \n            text: `Error getting dependency graph: ${error instanceof Error ? error.message : 'Unknown error'}` \n          }],\n          isError: true\n        };\n      }\n    }\n  );\n\n  server.tool(\n    'check_dependency_conflicts',\n    'Check for potential conflicts in task dependencies including circular dependencies and invalid relationships.',\n    {\n      task_id: z.string().min(1).describe('The task ID to check for conflicts'),\n      proposed_dependencies: z.array(z.object({\n        depends_on: z.string(),\n        type: DependencyTypeSchema\n      })).optional().describe('Proposed new dependencies to check for conflicts')\n    },\n    async (args) => {\n      try {\n        const check = DependencyConflictCheckSchema.parse(args);\n        const result = await dependenciesClient.checkDependencyConflicts(check);\n        \n        return {\n          content: [{ \n            type: 'text', \n            text: `Dependency conflict check results:\\n\\n${JSON.stringify(result, null, 2)}` \n          }]\n        };\n      } catch (error) {\n        return {\n          content: [{ \n            type: 'text', \n            text: `Error checking dependency conflicts: ${error instanceof Error ? error.message : 'Unknown error'}` \n          }],\n          isError: true\n        };\n      }\n    }\n  );\n\n  // ========================================\n  // ADVANCED DEPENDENCY OPERATIONS\n  // ========================================\n\n  server.tool(\n    'get_workspace_dependencies',\n    'Get all dependencies in a workspace with filtering and pagination options.',\n    {\n      workspace_id: z.string().min(1).describe('The ID of the workspace'),\n      status: DependencyStatusSchema.optional().describe('Filter by dependency status'),\n      type: DependencyTypeSchema.optional().describe('Filter by dependency type'),\n      limit: z.number().positive().optional().describe('Maximum number of dependencies to return'),\n      offset: z.number().min(0).optional().describe('Number of dependencies to skip for pagination')\n    },\n    async (args) => {\n      try {\n        const result = await dependenciesClient.getWorkspaceDependencies(args.workspace_id, {\n          status: args.status,\n          type: args.type,\n          limit: args.limit,\n          offset: args.offset\n        });\n        \n        return {\n          content: [{ \n            type: 'text', \n            text: `Workspace dependencies:\\n\\n${JSON.stringify(result, null, 2)}` \n          }]\n        };\n      } catch (error) {\n        return {\n          content: [{ \n            type: 'text', \n            text: `Error getting workspace dependencies: ${error instanceof Error ? error.message : 'Unknown error'}` \n          }],\n          isError: true\n        };\n      }\n    }\n  );\n\n  server.tool(\n    'get_dependency_stats',\n    'Get comprehensive statistics about dependencies in a workspace.',\n    {\n      workspace_id: z.string().min(1).describe('The ID of the workspace')\n    },\n    async (args) => {\n      try {\n        const result = await dependenciesClient.getDependencyStats(args.workspace_id);\n        \n        return {\n          content: [{ \n            type: 'text', \n            text: `Dependency statistics for workspace ${args.workspace_id}:\\n\\n${JSON.stringify(result, null, 2)}` \n          }]\n        };\n      } catch (error) {\n        return {\n          content: [{ \n            type: 'text', \n            text: `Error getting dependency statistics: ${error instanceof Error ? error.message : 'Unknown error'}` \n          }],\n          isError: true\n        };\n      }\n    }\n  );\n\n  server.tool(\n    'resolve_dependency_conflicts',\n    'Automatically resolve dependency conflicts such as circular dependencies and invalid statuses.',\n    {\n      task_id: z.string().min(1).describe('The task ID to resolve conflicts for'),\n      break_cycles: z.boolean().default(true).describe('Whether to break circular dependencies'),\n      remove_duplicates: z.boolean().default(true).describe('Whether to remove duplicate dependencies'),\n      update_invalid_statuses: z.boolean().default(true).describe('Whether to update invalid dependency statuses')\n    },\n    async (args) => {\n      try {\n        const result = await dependenciesClient.resolveDependencyConflicts(args.task_id, {\n          break_cycles: args.break_cycles,\n          remove_duplicates: args.remove_duplicates,\n          update_invalid_statuses: args.update_invalid_statuses\n        });\n        \n        return {\n          content: [{ \n            type: 'text', \n            text: `Dependency conflicts resolution results:\\n\\n${JSON.stringify(result, null, 2)}` \n          }]\n        };\n      } catch (error) {\n        return {\n          content: [{ \n            type: 'text', \n            text: `Error resolving dependency conflicts: ${error instanceof Error ? error.message : 'Unknown error'}` \n          }],\n          isError: true\n        };\n      }\n    }\n  );\n\n  server.tool(\n    'get_dependency_timeline_impact',\n    'Analyze how dependencies affect task timelines and identify critical path impacts.',\n    {\n      task_id: z.string().min(1).describe('The task ID to analyze timeline impact for')\n    },\n    async (args) => {\n      try {\n        const result = await dependenciesClient.getDependencyTimelineImpact(args.task_id);\n        \n        return {\n          content: [{ \n            type: 'text', \n            text: `Dependency timeline impact analysis:\\n\\n${JSON.stringify(result, null, 2)}` \n          }]\n        };\n      } catch (error) {\n        return {\n          content: [{ \n            type: 'text', \n            text: `Error analyzing dependency timeline impact: ${error instanceof Error ? error.message : 'Unknown error'}` \n          }],\n          isError: true\n        };\n      }\n    }\n  );\n\n  server.tool(\n    'bulk_dependency_operations',\n    'Perform multiple dependency operations in a single request for efficiency.',\n    {\n      operation: z.enum(['create', 'delete', 'update']).describe('The bulk operation to perform'),\n      dependencies: z.array(z.any()).describe('Array of dependency operations to perform')\n    },\n    async (args) => {\n      try {\n        const operation = BulkDependencyOperationSchema.parse(args);\n        const result = await dependenciesClient.bulkDependencyOperations(operation);\n        \n        return {\n          content: [{ \n            type: 'text', \n            text: `Bulk dependency operations results:\\n\\n${JSON.stringify(result, null, 2)}` \n          }]\n        };\n      } catch (error) {\n        return {\n          content: [{ \n            type: 'text', \n            text: `Error performing bulk dependency operations: ${error instanceof Error ? error.message : 'Unknown error'}` \n          }],\n          isError: true\n        };\n      }\n    }\n  );\n\n  server.tool(\n    'export_dependency_graph',\n    'Export dependency graph data in various formats for external analysis or backup.',\n    {\n      task_id: z.string().min(1).describe('The root task ID for the dependency graph to export'),\n      format: z.enum(['json', 'csv', 'graphml']).default('json').describe('Export format')\n    },\n    async (args) => {\n      try {\n        const result = await dependenciesClient.exportDependencyGraph(args.task_id, args.format);\n        \n        return {\n          content: [{ \n            type: 'text', \n            text: `Dependency graph export:\\n\\n${JSON.stringify(result, null, 2)}` \n          }]\n        };\n      } catch (error) {\n        return {\n          content: [{ \n            type: 'text', \n            text: `Error exporting dependency graph: ${error instanceof Error ? error.message : 'Unknown error'}` \n          }],\n          isError: true\n        };\n      }\n    }\n  );\n}\n"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "60dbbb455fbdaf7a5518c5fa0e39c187ef1631bb"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_1ek2b13nc9 = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_1ek2b13nc9();
import { z } from 'zod';
import { createClickUpClient } from '../clickup-client/index.js';
import { DependenciesEnhancedClient } from '../clickup-client/dependencies-enhanced.js';
import { CreateDependencySchema, UpdateDependencySchema, GetDependenciesFilterSchema, DependencyGraphOptionsSchema, DependencyConflictCheckSchema, BulkDependencyOperationSchema, DependencyTypeSchema, DependencyStatusSchema } from '../schemas/dependencies-schemas.js';
// Create clients
const clickUpClient =
/* istanbul ignore next */
(cov_1ek2b13nc9().s[0]++, createClickUpClient());
const dependenciesClient =
/* istanbul ignore next */
(cov_1ek2b13nc9().s[1]++, new DependenciesEnhancedClient(process.env.CLICKUP_API_TOKEN));
export function setupDependenciesTools(server) {
  /* istanbul ignore next */
  cov_1ek2b13nc9().f[0]++;
  cov_1ek2b13nc9().s[2]++;
  // ========================================
  // DEPENDENCY MANAGEMENT OPERATIONS
  // ========================================
  server.tool('create_dependency', 'Create a new dependency relationship between two tasks. Dependencies define task execution order and blocking relationships.', {
    task_id: z.string().min(1).describe('The ID of the task that depends on another'),
    depends_on: z.string().min(1).describe('The ID of the task that this task depends on'),
    type: DependencyTypeSchema.default('blocking').describe('The type of dependency relationship'),
    link_id: z.string().optional().describe('Optional link ID for grouping related dependencies')
  }, async args => {
    /* istanbul ignore next */
    cov_1ek2b13nc9().f[1]++;
    cov_1ek2b13nc9().s[3]++;
    try {
      const request =
      /* istanbul ignore next */
      (cov_1ek2b13nc9().s[4]++, CreateDependencySchema.parse(args));
      const result =
      /* istanbul ignore next */
      (cov_1ek2b13nc9().s[5]++, await dependenciesClient.createDependency(request));
      /* istanbul ignore next */
      cov_1ek2b13nc9().s[6]++;
      return {
        content: [{
          type: 'text',
          text: `Dependency created successfully:\n\n${JSON.stringify(result, null, 2)}`
        }]
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_1ek2b13nc9().s[7]++;
      return {
        content: [{
          type: 'text',
          text: `Error creating dependency: ${error instanceof Error ?
          /* istanbul ignore next */
          (cov_1ek2b13nc9().b[0][0]++, error.message) :
          /* istanbul ignore next */
          (cov_1ek2b13nc9().b[0][1]++, 'Unknown error')}`
        }],
        isError: true
      };
    }
  });
  /* istanbul ignore next */
  cov_1ek2b13nc9().s[8]++;
  server.tool('get_task_dependencies', 'Get all dependencies for a specific task with optional filtering by type and status.', {
    task_id: z.string().min(1).describe('The ID of the task to get dependencies for'),
    type: DependencyTypeSchema.optional().describe('Filter by dependency type'),
    status: DependencyStatusSchema.optional().describe('Filter by dependency status'),
    include_resolved: z.boolean().default(false).describe('Whether to include resolved dependencies')
  }, async args => {
    /* istanbul ignore next */
    cov_1ek2b13nc9().f[2]++;
    cov_1ek2b13nc9().s[9]++;
    try {
      const filter =
      /* istanbul ignore next */
      (cov_1ek2b13nc9().s[10]++, GetDependenciesFilterSchema.parse(args));
      const result =
      /* istanbul ignore next */
      (cov_1ek2b13nc9().s[11]++, await dependenciesClient.getTaskDependencies(filter));
      /* istanbul ignore next */
      cov_1ek2b13nc9().s[12]++;
      return {
        content: [{
          type: 'text',
          text: `Dependencies for task ${args.task_id}:\n\n${JSON.stringify(result, null, 2)}`
        }]
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_1ek2b13nc9().s[13]++;
      return {
        content: [{
          type: 'text',
          text: `Error getting task dependencies: ${error instanceof Error ?
          /* istanbul ignore next */
          (cov_1ek2b13nc9().b[1][0]++, error.message) :
          /* istanbul ignore next */
          (cov_1ek2b13nc9().b[1][1]++, 'Unknown error')}`
        }],
        isError: true
      };
    }
  });
  /* istanbul ignore next */
  cov_1ek2b13nc9().s[14]++;
  server.tool('update_dependency', 'Update an existing dependency\'s type or status.', {
    dependency_id: z.string().min(1).describe('The ID of the dependency to update'),
    type: DependencyTypeSchema.optional().describe('New dependency type'),
    status: DependencyStatusSchema.optional().describe('New dependency status')
  }, async args => {
    /* istanbul ignore next */
    cov_1ek2b13nc9().f[3]++;
    cov_1ek2b13nc9().s[15]++;
    try {
      const request =
      /* istanbul ignore next */
      (cov_1ek2b13nc9().s[16]++, UpdateDependencySchema.parse(args));
      const result =
      /* istanbul ignore next */
      (cov_1ek2b13nc9().s[17]++, await dependenciesClient.updateDependency(request));
      /* istanbul ignore next */
      cov_1ek2b13nc9().s[18]++;
      return {
        content: [{
          type: 'text',
          text: `Dependency updated successfully:\n\n${JSON.stringify(result, null, 2)}`
        }]
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_1ek2b13nc9().s[19]++;
      return {
        content: [{
          type: 'text',
          text: `Error updating dependency: ${error instanceof Error ?
          /* istanbul ignore next */
          (cov_1ek2b13nc9().b[2][0]++, error.message) :
          /* istanbul ignore next */
          (cov_1ek2b13nc9().b[2][1]++, 'Unknown error')}`
        }],
        isError: true
      };
    }
  });
  /* istanbul ignore next */
  cov_1ek2b13nc9().s[20]++;
  server.tool('delete_dependency', 'Delete a dependency relationship between tasks.', {
    dependency_id: z.string().min(1).describe('The ID of the dependency to delete')
  }, async args => {
    /* istanbul ignore next */
    cov_1ek2b13nc9().f[4]++;
    cov_1ek2b13nc9().s[21]++;
    try {
      const result =
      /* istanbul ignore next */
      (cov_1ek2b13nc9().s[22]++, await dependenciesClient.deleteDependency(args.dependency_id));
      /* istanbul ignore next */
      cov_1ek2b13nc9().s[23]++;
      return {
        content: [{
          type: 'text',
          text: `Dependency deleted successfully: ${JSON.stringify(result, null, 2)}`
        }]
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_1ek2b13nc9().s[24]++;
      return {
        content: [{
          type: 'text',
          text: `Error deleting dependency: ${error instanceof Error ?
          /* istanbul ignore next */
          (cov_1ek2b13nc9().b[3][0]++, error.message) :
          /* istanbul ignore next */
          (cov_1ek2b13nc9().b[3][1]++, 'Unknown error')}`
        }],
        isError: true
      };
    }
  });
  /* istanbul ignore next */
  cov_1ek2b13nc9().s[25]++;
  server.tool('get_dependency_graph', 'Get a comprehensive dependency graph for a task showing all related dependencies and relationships.', {
    task_id: z.string().min(1).describe('The root task ID for the dependency graph'),
    depth: z.number().min(1).max(10).default(3).describe('Maximum depth to traverse in the graph'),
    direction: z.enum(['upstream', 'downstream', 'both']).default('both').describe('Direction to traverse dependencies'),
    include_resolved: z.boolean().default(false).describe('Whether to include resolved dependencies'),
    include_broken: z.boolean().default(true).describe('Whether to include broken dependencies')
  }, async args => {
    /* istanbul ignore next */
    cov_1ek2b13nc9().f[5]++;
    cov_1ek2b13nc9().s[26]++;
    try {
      const options =
      /* istanbul ignore next */
      (cov_1ek2b13nc9().s[27]++, DependencyGraphOptionsSchema.parse(args));
      const result =
      /* istanbul ignore next */
      (cov_1ek2b13nc9().s[28]++, await dependenciesClient.getDependencyGraph(options));
      /* istanbul ignore next */
      cov_1ek2b13nc9().s[29]++;
      return {
        content: [{
          type: 'text',
          text: `Dependency graph for task ${args.task_id}:\n\n${JSON.stringify(result, null, 2)}`
        }]
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_1ek2b13nc9().s[30]++;
      return {
        content: [{
          type: 'text',
          text: `Error getting dependency graph: ${error instanceof Error ?
          /* istanbul ignore next */
          (cov_1ek2b13nc9().b[4][0]++, error.message) :
          /* istanbul ignore next */
          (cov_1ek2b13nc9().b[4][1]++, 'Unknown error')}`
        }],
        isError: true
      };
    }
  });
  /* istanbul ignore next */
  cov_1ek2b13nc9().s[31]++;
  server.tool('check_dependency_conflicts', 'Check for potential conflicts in task dependencies including circular dependencies and invalid relationships.', {
    task_id: z.string().min(1).describe('The task ID to check for conflicts'),
    proposed_dependencies: z.array(z.object({
      depends_on: z.string(),
      type: DependencyTypeSchema
    })).optional().describe('Proposed new dependencies to check for conflicts')
  }, async args => {
    /* istanbul ignore next */
    cov_1ek2b13nc9().f[6]++;
    cov_1ek2b13nc9().s[32]++;
    try {
      const check =
      /* istanbul ignore next */
      (cov_1ek2b13nc9().s[33]++, DependencyConflictCheckSchema.parse(args));
      const result =
      /* istanbul ignore next */
      (cov_1ek2b13nc9().s[34]++, await dependenciesClient.checkDependencyConflicts(check));
      /* istanbul ignore next */
      cov_1ek2b13nc9().s[35]++;
      return {
        content: [{
          type: 'text',
          text: `Dependency conflict check results:\n\n${JSON.stringify(result, null, 2)}`
        }]
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_1ek2b13nc9().s[36]++;
      return {
        content: [{
          type: 'text',
          text: `Error checking dependency conflicts: ${error instanceof Error ?
          /* istanbul ignore next */
          (cov_1ek2b13nc9().b[5][0]++, error.message) :
          /* istanbul ignore next */
          (cov_1ek2b13nc9().b[5][1]++, 'Unknown error')}`
        }],
        isError: true
      };
    }
  });
  // ========================================
  // ADVANCED DEPENDENCY OPERATIONS
  // ========================================
  /* istanbul ignore next */
  cov_1ek2b13nc9().s[37]++;
  server.tool('get_workspace_dependencies', 'Get all dependencies in a workspace with filtering and pagination options.', {
    workspace_id: z.string().min(1).describe('The ID of the workspace'),
    status: DependencyStatusSchema.optional().describe('Filter by dependency status'),
    type: DependencyTypeSchema.optional().describe('Filter by dependency type'),
    limit: z.number().positive().optional().describe('Maximum number of dependencies to return'),
    offset: z.number().min(0).optional().describe('Number of dependencies to skip for pagination')
  }, async args => {
    /* istanbul ignore next */
    cov_1ek2b13nc9().f[7]++;
    cov_1ek2b13nc9().s[38]++;
    try {
      const result =
      /* istanbul ignore next */
      (cov_1ek2b13nc9().s[39]++, await dependenciesClient.getWorkspaceDependencies(args.workspace_id, {
        status: args.status,
        type: args.type,
        limit: args.limit,
        offset: args.offset
      }));
      /* istanbul ignore next */
      cov_1ek2b13nc9().s[40]++;
      return {
        content: [{
          type: 'text',
          text: `Workspace dependencies:\n\n${JSON.stringify(result, null, 2)}`
        }]
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_1ek2b13nc9().s[41]++;
      return {
        content: [{
          type: 'text',
          text: `Error getting workspace dependencies: ${error instanceof Error ?
          /* istanbul ignore next */
          (cov_1ek2b13nc9().b[6][0]++, error.message) :
          /* istanbul ignore next */
          (cov_1ek2b13nc9().b[6][1]++, 'Unknown error')}`
        }],
        isError: true
      };
    }
  });
  /* istanbul ignore next */
  cov_1ek2b13nc9().s[42]++;
  server.tool('get_dependency_stats', 'Get comprehensive statistics about dependencies in a workspace.', {
    workspace_id: z.string().min(1).describe('The ID of the workspace')
  }, async args => {
    /* istanbul ignore next */
    cov_1ek2b13nc9().f[8]++;
    cov_1ek2b13nc9().s[43]++;
    try {
      const result =
      /* istanbul ignore next */
      (cov_1ek2b13nc9().s[44]++, await dependenciesClient.getDependencyStats(args.workspace_id));
      /* istanbul ignore next */
      cov_1ek2b13nc9().s[45]++;
      return {
        content: [{
          type: 'text',
          text: `Dependency statistics for workspace ${args.workspace_id}:\n\n${JSON.stringify(result, null, 2)}`
        }]
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_1ek2b13nc9().s[46]++;
      return {
        content: [{
          type: 'text',
          text: `Error getting dependency statistics: ${error instanceof Error ?
          /* istanbul ignore next */
          (cov_1ek2b13nc9().b[7][0]++, error.message) :
          /* istanbul ignore next */
          (cov_1ek2b13nc9().b[7][1]++, 'Unknown error')}`
        }],
        isError: true
      };
    }
  });
  /* istanbul ignore next */
  cov_1ek2b13nc9().s[47]++;
  server.tool('resolve_dependency_conflicts', 'Automatically resolve dependency conflicts such as circular dependencies and invalid statuses.', {
    task_id: z.string().min(1).describe('The task ID to resolve conflicts for'),
    break_cycles: z.boolean().default(true).describe('Whether to break circular dependencies'),
    remove_duplicates: z.boolean().default(true).describe('Whether to remove duplicate dependencies'),
    update_invalid_statuses: z.boolean().default(true).describe('Whether to update invalid dependency statuses')
  }, async args => {
    /* istanbul ignore next */
    cov_1ek2b13nc9().f[9]++;
    cov_1ek2b13nc9().s[48]++;
    try {
      const result =
      /* istanbul ignore next */
      (cov_1ek2b13nc9().s[49]++, await dependenciesClient.resolveDependencyConflicts(args.task_id, {
        break_cycles: args.break_cycles,
        remove_duplicates: args.remove_duplicates,
        update_invalid_statuses: args.update_invalid_statuses
      }));
      /* istanbul ignore next */
      cov_1ek2b13nc9().s[50]++;
      return {
        content: [{
          type: 'text',
          text: `Dependency conflicts resolution results:\n\n${JSON.stringify(result, null, 2)}`
        }]
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_1ek2b13nc9().s[51]++;
      return {
        content: [{
          type: 'text',
          text: `Error resolving dependency conflicts: ${error instanceof Error ?
          /* istanbul ignore next */
          (cov_1ek2b13nc9().b[8][0]++, error.message) :
          /* istanbul ignore next */
          (cov_1ek2b13nc9().b[8][1]++, 'Unknown error')}`
        }],
        isError: true
      };
    }
  });
  /* istanbul ignore next */
  cov_1ek2b13nc9().s[52]++;
  server.tool('get_dependency_timeline_impact', 'Analyze how dependencies affect task timelines and identify critical path impacts.', {
    task_id: z.string().min(1).describe('The task ID to analyze timeline impact for')
  }, async args => {
    /* istanbul ignore next */
    cov_1ek2b13nc9().f[10]++;
    cov_1ek2b13nc9().s[53]++;
    try {
      const result =
      /* istanbul ignore next */
      (cov_1ek2b13nc9().s[54]++, await dependenciesClient.getDependencyTimelineImpact(args.task_id));
      /* istanbul ignore next */
      cov_1ek2b13nc9().s[55]++;
      return {
        content: [{
          type: 'text',
          text: `Dependency timeline impact analysis:\n\n${JSON.stringify(result, null, 2)}`
        }]
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_1ek2b13nc9().s[56]++;
      return {
        content: [{
          type: 'text',
          text: `Error analyzing dependency timeline impact: ${error instanceof Error ?
          /* istanbul ignore next */
          (cov_1ek2b13nc9().b[9][0]++, error.message) :
          /* istanbul ignore next */
          (cov_1ek2b13nc9().b[9][1]++, 'Unknown error')}`
        }],
        isError: true
      };
    }
  });
  /* istanbul ignore next */
  cov_1ek2b13nc9().s[57]++;
  server.tool('bulk_dependency_operations', 'Perform multiple dependency operations in a single request for efficiency.', {
    operation: z.enum(['create', 'delete', 'update']).describe('The bulk operation to perform'),
    dependencies: z.array(z.any()).describe('Array of dependency operations to perform')
  }, async args => {
    /* istanbul ignore next */
    cov_1ek2b13nc9().f[11]++;
    cov_1ek2b13nc9().s[58]++;
    try {
      const operation =
      /* istanbul ignore next */
      (cov_1ek2b13nc9().s[59]++, BulkDependencyOperationSchema.parse(args));
      const result =
      /* istanbul ignore next */
      (cov_1ek2b13nc9().s[60]++, await dependenciesClient.bulkDependencyOperations(operation));
      /* istanbul ignore next */
      cov_1ek2b13nc9().s[61]++;
      return {
        content: [{
          type: 'text',
          text: `Bulk dependency operations results:\n\n${JSON.stringify(result, null, 2)}`
        }]
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_1ek2b13nc9().s[62]++;
      return {
        content: [{
          type: 'text',
          text: `Error performing bulk dependency operations: ${error instanceof Error ?
          /* istanbul ignore next */
          (cov_1ek2b13nc9().b[10][0]++, error.message) :
          /* istanbul ignore next */
          (cov_1ek2b13nc9().b[10][1]++, 'Unknown error')}`
        }],
        isError: true
      };
    }
  });
  /* istanbul ignore next */
  cov_1ek2b13nc9().s[63]++;
  server.tool('export_dependency_graph', 'Export dependency graph data in various formats for external analysis or backup.', {
    task_id: z.string().min(1).describe('The root task ID for the dependency graph to export'),
    format: z.enum(['json', 'csv', 'graphml']).default('json').describe('Export format')
  }, async args => {
    /* istanbul ignore next */
    cov_1ek2b13nc9().f[12]++;
    cov_1ek2b13nc9().s[64]++;
    try {
      const result =
      /* istanbul ignore next */
      (cov_1ek2b13nc9().s[65]++, await dependenciesClient.exportDependencyGraph(args.task_id, args.format));
      /* istanbul ignore next */
      cov_1ek2b13nc9().s[66]++;
      return {
        content: [{
          type: 'text',
          text: `Dependency graph export:\n\n${JSON.stringify(result, null, 2)}`
        }]
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_1ek2b13nc9().s[67]++;
      return {
        content: [{
          type: 'text',
          text: `Error exporting dependency graph: ${error instanceof Error ?
          /* istanbul ignore next */
          (cov_1ek2b13nc9().b[11][0]++, error.message) :
          /* istanbul ignore next */
          (cov_1ek2b13nc9().b[11][1]++, 'Unknown error')}`
        }],
        isError: true
      };
    }
  });
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
e9c7618b4fbd21bebe4fc7bf75fcc6b9
/* istanbul ignore next */
function cov_2gzql2q6t1() {
  var path = "/Users/peterkrzyzek/Development/clickup-mcp-server/src/clickup-client/comments.ts";
  var hash = "afe68c992d857f9bb311e1f0c347e431d5909b49";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/peterkrzyzek/Development/clickup-mcp-server/src/clickup-client/comments.ts",
    statementMap: {
      "0": {
        start: {
          line: 5,
          column: 8
        },
        end: {
          line: 5,
          column: 29
        }
      },
      "1": {
        start: {
          line: 14,
          column: 23
        },
        end: {
          line: 14,
          column: 79
        }
      },
      "2": {
        start: {
          line: 16,
          column: 8
        },
        end: {
          line: 30,
          column: 9
        }
      },
      "3": {
        start: {
          line: 17,
          column: 12
        },
        end: {
          line: 29,
          column: 15
        }
      },
      "4": {
        start: {
          line: 18,
          column: 34
        },
        end: {
          line: 18,
          column: 65
        }
      },
      "5": {
        start: {
          line: 20,
          column: 16
        },
        end: {
          line: 27,
          column: 17
        }
      },
      "6": {
        start: {
          line: 21,
          column: 20
        },
        end: {
          line: 26,
          column: 21
        }
      },
      "7": {
        start: {
          line: 22,
          column: 24
        },
        end: {
          line: 22,
          column: 110
        }
      },
      "8": {
        start: {
          line: 25,
          column: 24
        },
        end: {
          line: 25,
          column: 94
        }
      },
      "9": {
        start: {
          line: 28,
          column: 16
        },
        end: {
          line: 28,
          column: 33
        }
      },
      "10": {
        start: {
          line: 31,
          column: 8
        },
        end: {
          line: 31,
          column: 22
        }
      },
      "11": {
        start: {
          line: 38,
          column: 8
        },
        end: {
          line: 66,
          column: 9
        }
      },
      "12": {
        start: {
          line: 39,
          column: 30
        },
        end: {
          line: 39,
          column: 77
        }
      },
      "13": {
        start: {
          line: 41,
          column: 12
        },
        end: {
          line: 65,
          column: 13
        }
      },
      "14": {
        start: {
          line: 44,
          column: 42
        },
        end: {
          line: 47,
          column: 49
        }
      },
      "15": {
        start: {
          line: 48,
          column: 16
        },
        end: {
          line: 64,
          column: 17
        }
      },
      "16": {
        start: {
          line: 50,
          column: 20
        },
        end: {
          line: 50,
          column: 71
        }
      },
      "17": {
        start: {
          line: 52,
          column: 20
        },
        end: {
          line: 54,
          column: 21
        }
      },
      "18": {
        start: {
          line: 53,
          column: 24
        },
        end: {
          line: 53,
          column: 107
        }
      },
      "19": {
        start: {
          line: 56,
          column: 20
        },
        end: {
          line: 63,
          column: 21
        }
      },
      "20": {
        start: {
          line: 57,
          column: 24
        },
        end: {
          line: 62,
          column: 25
        }
      },
      "21": {
        start: {
          line: 58,
          column: 28
        },
        end: {
          line: 58,
          column: 114
        }
      },
      "22": {
        start: {
          line: 61,
          column: 28
        },
        end: {
          line: 61,
          column: 96
        }
      },
      "23": {
        start: {
          line: 67,
          column: 8
        },
        end: {
          line: 67,
          column: 25
        }
      },
      "24": {
        start: {
          line: 77,
          column: 32
        },
        end: {
          line: 77,
          column: 45
        }
      },
      "25": {
        start: {
          line: 78,
          column: 8
        },
        end: {
          line: 86,
          column: 9
        }
      },
      "26": {
        start: {
          line: 79,
          column: 32
        },
        end: {
          line: 79,
          column: 77
        }
      },
      "27": {
        start: {
          line: 81,
          column: 12
        },
        end: {
          line: 81,
          column: 48
        }
      },
      "28": {
        start: {
          line: 82,
          column: 12
        },
        end: {
          line: 82,
          column: 58
        }
      },
      "29": {
        start: {
          line: 84,
          column: 12
        },
        end: {
          line: 84,
          column: 40
        }
      },
      "30": {
        start: {
          line: 85,
          column: 12
        },
        end: {
          line: 85,
          column: 47
        }
      },
      "31": {
        start: {
          line: 87,
          column: 23
        },
        end: {
          line: 87,
          column: 89
        }
      },
      "32": {
        start: {
          line: 89,
          column: 24
        },
        end: {
          line: 89,
          column: 54
        }
      },
      "33": {
        start: {
          line: 91,
          column: 8
        },
        end: {
          line: 91,
          column: 59
        }
      },
      "34": {
        start: {
          line: 92,
          column: 8
        },
        end: {
          line: 92,
          column: 25
        }
      },
      "35": {
        start: {
          line: 101,
          column: 23
        },
        end: {
          line: 101,
          column: 79
        }
      },
      "36": {
        start: {
          line: 103,
          column: 8
        },
        end: {
          line: 117,
          column: 9
        }
      },
      "37": {
        start: {
          line: 104,
          column: 12
        },
        end: {
          line: 116,
          column: 15
        }
      },
      "38": {
        start: {
          line: 105,
          column: 34
        },
        end: {
          line: 105,
          column: 65
        }
      },
      "39": {
        start: {
          line: 107,
          column: 16
        },
        end: {
          line: 114,
          column: 17
        }
      },
      "40": {
        start: {
          line: 108,
          column: 20
        },
        end: {
          line: 113,
          column: 21
        }
      },
      "41": {
        start: {
          line: 109,
          column: 24
        },
        end: {
          line: 109,
          column: 110
        }
      },
      "42": {
        start: {
          line: 112,
          column: 24
        },
        end: {
          line: 112,
          column: 94
        }
      },
      "43": {
        start: {
          line: 115,
          column: 16
        },
        end: {
          line: 115,
          column: 33
        }
      },
      "44": {
        start: {
          line: 118,
          column: 8
        },
        end: {
          line: 118,
          column: 22
        }
      },
      "45": {
        start: {
          line: 128,
          column: 32
        },
        end: {
          line: 128,
          column: 45
        }
      },
      "46": {
        start: {
          line: 129,
          column: 8
        },
        end: {
          line: 137,
          column: 9
        }
      },
      "47": {
        start: {
          line: 130,
          column: 32
        },
        end: {
          line: 130,
          column: 77
        }
      },
      "48": {
        start: {
          line: 132,
          column: 12
        },
        end: {
          line: 132,
          column: 48
        }
      },
      "49": {
        start: {
          line: 133,
          column: 12
        },
        end: {
          line: 133,
          column: 58
        }
      },
      "50": {
        start: {
          line: 135,
          column: 12
        },
        end: {
          line: 135,
          column: 40
        }
      },
      "51": {
        start: {
          line: 136,
          column: 12
        },
        end: {
          line: 136,
          column: 47
        }
      },
      "52": {
        start: {
          line: 138,
          column: 23
        },
        end: {
          line: 138,
          column: 89
        }
      },
      "53": {
        start: {
          line: 140,
          column: 26
        },
        end: {
          line: 140,
          column: 56
        }
      },
      "54": {
        start: {
          line: 142,
          column: 8
        },
        end: {
          line: 149,
          column: 9
        }
      },
      "55": {
        start: {
          line: 143,
          column: 12
        },
        end: {
          line: 148,
          column: 13
        }
      },
      "56": {
        start: {
          line: 144,
          column: 16
        },
        end: {
          line: 144,
          column: 102
        }
      },
      "57": {
        start: {
          line: 147,
          column: 16
        },
        end: {
          line: 147,
          column: 86
        }
      },
      "58": {
        start: {
          line: 150,
          column: 8
        },
        end: {
          line: 150,
          column: 25
        }
      },
      "59": {
        start: {
          line: 159,
          column: 23
        },
        end: {
          line: 159,
          column: 79
        }
      },
      "60": {
        start: {
          line: 161,
          column: 8
        },
        end: {
          line: 175,
          column: 9
        }
      },
      "61": {
        start: {
          line: 162,
          column: 12
        },
        end: {
          line: 174,
          column: 15
        }
      },
      "62": {
        start: {
          line: 163,
          column: 34
        },
        end: {
          line: 163,
          column: 65
        }
      },
      "63": {
        start: {
          line: 165,
          column: 16
        },
        end: {
          line: 172,
          column: 17
        }
      },
      "64": {
        start: {
          line: 166,
          column: 20
        },
        end: {
          line: 171,
          column: 21
        }
      },
      "65": {
        start: {
          line: 167,
          column: 24
        },
        end: {
          line: 167,
          column: 110
        }
      },
      "66": {
        start: {
          line: 170,
          column: 24
        },
        end: {
          line: 170,
          column: 94
        }
      },
      "67": {
        start: {
          line: 173,
          column: 16
        },
        end: {
          line: 173,
          column: 33
        }
      },
      "68": {
        start: {
          line: 176,
          column: 8
        },
        end: {
          line: 176,
          column: 22
        }
      },
      "69": {
        start: {
          line: 186,
          column: 32
        },
        end: {
          line: 186,
          column: 45
        }
      },
      "70": {
        start: {
          line: 187,
          column: 8
        },
        end: {
          line: 195,
          column: 9
        }
      },
      "71": {
        start: {
          line: 188,
          column: 32
        },
        end: {
          line: 188,
          column: 77
        }
      },
      "72": {
        start: {
          line: 190,
          column: 12
        },
        end: {
          line: 190,
          column: 48
        }
      },
      "73": {
        start: {
          line: 191,
          column: 12
        },
        end: {
          line: 191,
          column: 58
        }
      },
      "74": {
        start: {
          line: 193,
          column: 12
        },
        end: {
          line: 193,
          column: 40
        }
      },
      "75": {
        start: {
          line: 194,
          column: 12
        },
        end: {
          line: 194,
          column: 47
        }
      },
      "76": {
        start: {
          line: 196,
          column: 23
        },
        end: {
          line: 196,
          column: 89
        }
      },
      "77": {
        start: {
          line: 198,
          column: 26
        },
        end: {
          line: 198,
          column: 56
        }
      },
      "78": {
        start: {
          line: 200,
          column: 8
        },
        end: {
          line: 207,
          column: 9
        }
      },
      "79": {
        start: {
          line: 201,
          column: 12
        },
        end: {
          line: 206,
          column: 13
        }
      },
      "80": {
        start: {
          line: 202,
          column: 16
        },
        end: {
          line: 202,
          column: 102
        }
      },
      "81": {
        start: {
          line: 205,
          column: 16
        },
        end: {
          line: 205,
          column: 86
        }
      },
      "82": {
        start: {
          line: 208,
          column: 8
        },
        end: {
          line: 208,
          column: 25
        }
      },
      "83": {
        start: {
          line: 218,
          column: 32
        },
        end: {
          line: 218,
          column: 45
        }
      },
      "84": {
        start: {
          line: 219,
          column: 8
        },
        end: {
          line: 227,
          column: 9
        }
      },
      "85": {
        start: {
          line: 220,
          column: 32
        },
        end: {
          line: 220,
          column: 77
        }
      },
      "86": {
        start: {
          line: 222,
          column: 12
        },
        end: {
          line: 222,
          column: 48
        }
      },
      "87": {
        start: {
          line: 223,
          column: 12
        },
        end: {
          line: 223,
          column: 58
        }
      },
      "88": {
        start: {
          line: 225,
          column: 12
        },
        end: {
          line: 225,
          column: 40
        }
      },
      "89": {
        start: {
          line: 226,
          column: 12
        },
        end: {
          line: 226,
          column: 47
        }
      },
      "90": {
        start: {
          line: 228,
          column: 23
        },
        end: {
          line: 228,
          column: 86
        }
      },
      "91": {
        start: {
          line: 230,
          column: 26
        },
        end: {
          line: 230,
          column: 56
        }
      },
      "92": {
        start: {
          line: 232,
          column: 8
        },
        end: {
          line: 239,
          column: 9
        }
      },
      "93": {
        start: {
          line: 233,
          column: 12
        },
        end: {
          line: 238,
          column: 13
        }
      },
      "94": {
        start: {
          line: 234,
          column: 16
        },
        end: {
          line: 234,
          column: 102
        }
      },
      "95": {
        start: {
          line: 237,
          column: 16
        },
        end: {
          line: 237,
          column: 86
        }
      },
      "96": {
        start: {
          line: 240,
          column: 8
        },
        end: {
          line: 240,
          column: 25
        }
      },
      "97": {
        start: {
          line: 248,
          column: 8
        },
        end: {
          line: 248,
          column: 59
        }
      },
      "98": {
        start: {
          line: 257,
          column: 23
        },
        end: {
          line: 257,
          column: 83
        }
      },
      "99": {
        start: {
          line: 259,
          column: 8
        },
        end: {
          line: 273,
          column: 9
        }
      },
      "100": {
        start: {
          line: 260,
          column: 12
        },
        end: {
          line: 272,
          column: 15
        }
      },
      "101": {
        start: {
          line: 261,
          column: 34
        },
        end: {
          line: 261,
          column: 65
        }
      },
      "102": {
        start: {
          line: 263,
          column: 16
        },
        end: {
          line: 270,
          column: 17
        }
      },
      "103": {
        start: {
          line: 264,
          column: 20
        },
        end: {
          line: 269,
          column: 21
        }
      },
      "104": {
        start: {
          line: 265,
          column: 24
        },
        end: {
          line: 265,
          column: 110
        }
      },
      "105": {
        start: {
          line: 268,
          column: 24
        },
        end: {
          line: 268,
          column: 94
        }
      },
      "106": {
        start: {
          line: 271,
          column: 16
        },
        end: {
          line: 271,
          column: 33
        }
      },
      "107": {
        start: {
          line: 274,
          column: 8
        },
        end: {
          line: 274,
          column: 22
        }
      },
      "108": {
        start: {
          line: 284,
          column: 32
        },
        end: {
          line: 284,
          column: 45
        }
      },
      "109": {
        start: {
          line: 285,
          column: 8
        },
        end: {
          line: 293,
          column: 9
        }
      },
      "110": {
        start: {
          line: 286,
          column: 32
        },
        end: {
          line: 286,
          column: 77
        }
      },
      "111": {
        start: {
          line: 288,
          column: 12
        },
        end: {
          line: 288,
          column: 48
        }
      },
      "112": {
        start: {
          line: 289,
          column: 12
        },
        end: {
          line: 289,
          column: 58
        }
      },
      "113": {
        start: {
          line: 291,
          column: 12
        },
        end: {
          line: 291,
          column: 40
        }
      },
      "114": {
        start: {
          line: 292,
          column: 12
        },
        end: {
          line: 292,
          column: 47
        }
      },
      "115": {
        start: {
          line: 294,
          column: 23
        },
        end: {
          line: 294,
          column: 93
        }
      },
      "116": {
        start: {
          line: 296,
          column: 26
        },
        end: {
          line: 296,
          column: 56
        }
      },
      "117": {
        start: {
          line: 298,
          column: 8
        },
        end: {
          line: 305,
          column: 9
        }
      },
      "118": {
        start: {
          line: 299,
          column: 12
        },
        end: {
          line: 304,
          column: 13
        }
      },
      "119": {
        start: {
          line: 300,
          column: 16
        },
        end: {
          line: 300,
          column: 102
        }
      },
      "120": {
        start: {
          line: 303,
          column: 16
        },
        end: {
          line: 303,
          column: 86
        }
      },
      "121": {
        start: {
          line: 306,
          column: 8
        },
        end: {
          line: 306,
          column: 25
        }
      },
      "122": {
        start: {
          line: 309,
          column: 36
        },
        end: {
          line: 311,
          column: 1
        }
      },
      "123": {
        start: {
          line: 310,
          column: 4
        },
        end: {
          line: 310,
          column: 38
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 4,
            column: 4
          },
          end: {
            line: 4,
            column: 5
          }
        },
        loc: {
          start: {
            line: 4,
            column: 24
          },
          end: {
            line: 6,
            column: 5
          }
        },
        line: 4
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 13,
            column: 4
          },
          end: {
            line: 13,
            column: 5
          }
        },
        loc: {
          start: {
            line: 13,
            column: 42
          },
          end: {
            line: 32,
            column: 5
          }
        },
        line: 13
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 17,
            column: 50
          },
          end: {
            line: 17,
            column: 51
          }
        },
        loc: {
          start: {
            line: 17,
            column: 63
          },
          end: {
            line: 29,
            column: 13
          }
        },
        line: 17
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 37,
            column: 4
          },
          end: {
            line: 37,
            column: 5
          }
        },
        loc: {
          start: {
            line: 37,
            column: 38
          },
          end: {
            line: 68,
            column: 5
          }
        },
        line: 37
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 75,
            column: 4
          },
          end: {
            line: 75,
            column: 5
          }
        },
        loc: {
          start: {
            line: 75,
            column: 44
          },
          end: {
            line: 93,
            column: 5
          }
        },
        line: 75
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 100,
            column: 4
          },
          end: {
            line: 100,
            column: 5
          }
        },
        loc: {
          start: {
            line: 100,
            column: 46
          },
          end: {
            line: 119,
            column: 5
          }
        },
        line: 100
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 104,
            column: 50
          },
          end: {
            line: 104,
            column: 51
          }
        },
        loc: {
          start: {
            line: 104,
            column: 63
          },
          end: {
            line: 116,
            column: 13
          }
        },
        line: 104
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 126,
            column: 4
          },
          end: {
            line: 126,
            column: 5
          }
        },
        loc: {
          start: {
            line: 126,
            column: 48
          },
          end: {
            line: 151,
            column: 5
          }
        },
        line: 126
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 158,
            column: 4
          },
          end: {
            line: 158,
            column: 5
          }
        },
        loc: {
          start: {
            line: 158,
            column: 42
          },
          end: {
            line: 177,
            column: 5
          }
        },
        line: 158
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 162,
            column: 50
          },
          end: {
            line: 162,
            column: 51
          }
        },
        loc: {
          start: {
            line: 162,
            column: 63
          },
          end: {
            line: 174,
            column: 13
          }
        },
        line: 162
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 184,
            column: 4
          },
          end: {
            line: 184,
            column: 5
          }
        },
        loc: {
          start: {
            line: 184,
            column: 44
          },
          end: {
            line: 209,
            column: 5
          }
        },
        line: 184
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 216,
            column: 4
          },
          end: {
            line: 216,
            column: 5
          }
        },
        loc: {
          start: {
            line: 216,
            column: 43
          },
          end: {
            line: 241,
            column: 5
          }
        },
        line: 216
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 247,
            column: 4
          },
          end: {
            line: 247,
            column: 5
          }
        },
        loc: {
          start: {
            line: 247,
            column: 35
          },
          end: {
            line: 249,
            column: 5
          }
        },
        line: 247
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 256,
            column: 4
          },
          end: {
            line: 256,
            column: 5
          }
        },
        loc: {
          start: {
            line: 256,
            column: 49
          },
          end: {
            line: 275,
            column: 5
          }
        },
        line: 256
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 260,
            column: 50
          },
          end: {
            line: 260,
            column: 51
          }
        },
        loc: {
          start: {
            line: 260,
            column: 63
          },
          end: {
            line: 272,
            column: 13
          }
        },
        line: 260
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 282,
            column: 4
          },
          end: {
            line: 282,
            column: 5
          }
        },
        loc: {
          start: {
            line: 282,
            column: 51
          },
          end: {
            line: 307,
            column: 5
          }
        },
        line: 282
      },
      "16": {
        name: "(anonymous_16)",
        decl: {
          start: {
            line: 309,
            column: 36
          },
          end: {
            line: 309,
            column: 37
          }
        },
        loc: {
          start: {
            line: 309,
            column: 48
          },
          end: {
            line: 311,
            column: 1
          }
        },
        line: 309
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 16,
            column: 8
          },
          end: {
            line: 30,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 16,
            column: 8
          },
          end: {
            line: 30,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 16
      },
      "1": {
        loc: {
          start: {
            line: 16,
            column: 12
          },
          end: {
            line: 16,
            column: 61
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 16,
            column: 12
          },
          end: {
            line: 16,
            column: 27
          }
        }, {
          start: {
            line: 16,
            column: 31
          },
          end: {
            line: 16,
            column: 61
          }
        }],
        line: 16
      },
      "2": {
        loc: {
          start: {
            line: 20,
            column: 16
          },
          end: {
            line: 27,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 20,
            column: 16
          },
          end: {
            line: 27,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 20
      },
      "3": {
        loc: {
          start: {
            line: 20,
            column: 20
          },
          end: {
            line: 20,
            column: 73
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 20,
            column: 20
          },
          end: {
            line: 20,
            column: 37
          }
        }, {
          start: {
            line: 20,
            column: 41
          },
          end: {
            line: 20,
            column: 73
          }
        }],
        line: 20
      },
      "4": {
        loc: {
          start: {
            line: 38,
            column: 8
          },
          end: {
            line: 66,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 38,
            column: 8
          },
          end: {
            line: 66,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 38
      },
      "5": {
        loc: {
          start: {
            line: 38,
            column: 12
          },
          end: {
            line: 38,
            column: 97
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 38,
            column: 12
          },
          end: {
            line: 38,
            column: 29
          }
        }, {
          start: {
            line: 38,
            column: 33
          },
          end: {
            line: 38,
            column: 65
          }
        }, {
          start: {
            line: 38,
            column: 69
          },
          end: {
            line: 38,
            column: 97
          }
        }],
        line: 38
      },
      "6": {
        loc: {
          start: {
            line: 41,
            column: 12
          },
          end: {
            line: 65,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 41,
            column: 12
          },
          end: {
            line: 65,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 41
      },
      "7": {
        loc: {
          start: {
            line: 41,
            column: 16
          },
          end: {
            line: 42,
            column: 89
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 41,
            column: 16
          },
          end: {
            line: 41,
            column: 25
          }
        }, {
          start: {
            line: 41,
            column: 29
          },
          end: {
            line: 41,
            column: 63
          }
        }, {
          start: {
            line: 42,
            column: 17
          },
          end: {
            line: 42,
            column: 38
          }
        }, {
          start: {
            line: 42,
            column: 42
          },
          end: {
            line: 42,
            column: 88
          }
        }],
        line: 41
      },
      "8": {
        loc: {
          start: {
            line: 44,
            column: 42
          },
          end: {
            line: 47,
            column: 49
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 44,
            column: 42
          },
          end: {
            line: 44,
            column: 79
          }
        }, {
          start: {
            line: 45,
            column: 20
          },
          end: {
            line: 45,
            column: 50
          }
        }, {
          start: {
            line: 46,
            column: 20
          },
          end: {
            line: 46,
            column: 49
          }
        }, {
          start: {
            line: 47,
            column: 20
          },
          end: {
            line: 47,
            column: 49
          }
        }],
        line: 44
      },
      "9": {
        loc: {
          start: {
            line: 48,
            column: 16
          },
          end: {
            line: 64,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 48,
            column: 16
          },
          end: {
            line: 64,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 48
      },
      "10": {
        loc: {
          start: {
            line: 48,
            column: 20
          },
          end: {
            line: 48,
            column: 67
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 48,
            column: 20
          },
          end: {
            line: 48,
            column: 37
          }
        }, {
          start: {
            line: 48,
            column: 41
          },
          end: {
            line: 48,
            column: 67
          }
        }],
        line: 48
      },
      "11": {
        loc: {
          start: {
            line: 52,
            column: 20
          },
          end: {
            line: 54,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 52,
            column: 20
          },
          end: {
            line: 54,
            column: 21
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 52
      },
      "12": {
        loc: {
          start: {
            line: 52,
            column: 24
          },
          end: {
            line: 52,
            column: 97
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 52,
            column: 24
          },
          end: {
            line: 52,
            column: 46
          }
        }, {
          start: {
            line: 52,
            column: 50
          },
          end: {
            line: 52,
            column: 97
          }
        }],
        line: 52
      },
      "13": {
        loc: {
          start: {
            line: 56,
            column: 20
          },
          end: {
            line: 63,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 56,
            column: 20
          },
          end: {
            line: 63,
            column: 21
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 56
      },
      "14": {
        loc: {
          start: {
            line: 56,
            column: 24
          },
          end: {
            line: 56,
            column: 77
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 56,
            column: 24
          },
          end: {
            line: 56,
            column: 41
          }
        }, {
          start: {
            line: 56,
            column: 45
          },
          end: {
            line: 56,
            column: 77
          }
        }],
        line: 56
      },
      "15": {
        loc: {
          start: {
            line: 78,
            column: 8
          },
          end: {
            line: 86,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 78,
            column: 8
          },
          end: {
            line: 86,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 78
      },
      "16": {
        loc: {
          start: {
            line: 103,
            column: 8
          },
          end: {
            line: 117,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 103,
            column: 8
          },
          end: {
            line: 117,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 103
      },
      "17": {
        loc: {
          start: {
            line: 103,
            column: 12
          },
          end: {
            line: 103,
            column: 61
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 103,
            column: 12
          },
          end: {
            line: 103,
            column: 27
          }
        }, {
          start: {
            line: 103,
            column: 31
          },
          end: {
            line: 103,
            column: 61
          }
        }],
        line: 103
      },
      "18": {
        loc: {
          start: {
            line: 107,
            column: 16
          },
          end: {
            line: 114,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 107,
            column: 16
          },
          end: {
            line: 114,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 107
      },
      "19": {
        loc: {
          start: {
            line: 107,
            column: 20
          },
          end: {
            line: 107,
            column: 73
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 107,
            column: 20
          },
          end: {
            line: 107,
            column: 37
          }
        }, {
          start: {
            line: 107,
            column: 41
          },
          end: {
            line: 107,
            column: 73
          }
        }],
        line: 107
      },
      "20": {
        loc: {
          start: {
            line: 129,
            column: 8
          },
          end: {
            line: 137,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 129,
            column: 8
          },
          end: {
            line: 137,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 129
      },
      "21": {
        loc: {
          start: {
            line: 142,
            column: 8
          },
          end: {
            line: 149,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 142,
            column: 8
          },
          end: {
            line: 149,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 142
      },
      "22": {
        loc: {
          start: {
            line: 142,
            column: 12
          },
          end: {
            line: 142,
            column: 65
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 142,
            column: 12
          },
          end: {
            line: 142,
            column: 29
          }
        }, {
          start: {
            line: 142,
            column: 33
          },
          end: {
            line: 142,
            column: 65
          }
        }],
        line: 142
      },
      "23": {
        loc: {
          start: {
            line: 161,
            column: 8
          },
          end: {
            line: 175,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 161,
            column: 8
          },
          end: {
            line: 175,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 161
      },
      "24": {
        loc: {
          start: {
            line: 161,
            column: 12
          },
          end: {
            line: 161,
            column: 61
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 161,
            column: 12
          },
          end: {
            line: 161,
            column: 27
          }
        }, {
          start: {
            line: 161,
            column: 31
          },
          end: {
            line: 161,
            column: 61
          }
        }],
        line: 161
      },
      "25": {
        loc: {
          start: {
            line: 165,
            column: 16
          },
          end: {
            line: 172,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 165,
            column: 16
          },
          end: {
            line: 172,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 165
      },
      "26": {
        loc: {
          start: {
            line: 165,
            column: 20
          },
          end: {
            line: 165,
            column: 73
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 165,
            column: 20
          },
          end: {
            line: 165,
            column: 37
          }
        }, {
          start: {
            line: 165,
            column: 41
          },
          end: {
            line: 165,
            column: 73
          }
        }],
        line: 165
      },
      "27": {
        loc: {
          start: {
            line: 187,
            column: 8
          },
          end: {
            line: 195,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 187,
            column: 8
          },
          end: {
            line: 195,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 187
      },
      "28": {
        loc: {
          start: {
            line: 200,
            column: 8
          },
          end: {
            line: 207,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 200,
            column: 8
          },
          end: {
            line: 207,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 200
      },
      "29": {
        loc: {
          start: {
            line: 200,
            column: 12
          },
          end: {
            line: 200,
            column: 65
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 200,
            column: 12
          },
          end: {
            line: 200,
            column: 29
          }
        }, {
          start: {
            line: 200,
            column: 33
          },
          end: {
            line: 200,
            column: 65
          }
        }],
        line: 200
      },
      "30": {
        loc: {
          start: {
            line: 219,
            column: 8
          },
          end: {
            line: 227,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 219,
            column: 8
          },
          end: {
            line: 227,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 219
      },
      "31": {
        loc: {
          start: {
            line: 232,
            column: 8
          },
          end: {
            line: 239,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 232,
            column: 8
          },
          end: {
            line: 239,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 232
      },
      "32": {
        loc: {
          start: {
            line: 232,
            column: 12
          },
          end: {
            line: 232,
            column: 65
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 232,
            column: 12
          },
          end: {
            line: 232,
            column: 29
          }
        }, {
          start: {
            line: 232,
            column: 33
          },
          end: {
            line: 232,
            column: 65
          }
        }],
        line: 232
      },
      "33": {
        loc: {
          start: {
            line: 259,
            column: 8
          },
          end: {
            line: 273,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 259,
            column: 8
          },
          end: {
            line: 273,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 259
      },
      "34": {
        loc: {
          start: {
            line: 259,
            column: 12
          },
          end: {
            line: 259,
            column: 61
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 259,
            column: 12
          },
          end: {
            line: 259,
            column: 27
          }
        }, {
          start: {
            line: 259,
            column: 31
          },
          end: {
            line: 259,
            column: 61
          }
        }],
        line: 259
      },
      "35": {
        loc: {
          start: {
            line: 263,
            column: 16
          },
          end: {
            line: 270,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 263,
            column: 16
          },
          end: {
            line: 270,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 263
      },
      "36": {
        loc: {
          start: {
            line: 263,
            column: 20
          },
          end: {
            line: 263,
            column: 73
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 263,
            column: 20
          },
          end: {
            line: 263,
            column: 37
          }
        }, {
          start: {
            line: 263,
            column: 41
          },
          end: {
            line: 263,
            column: 73
          }
        }],
        line: 263
      },
      "37": {
        loc: {
          start: {
            line: 285,
            column: 8
          },
          end: {
            line: 293,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 285,
            column: 8
          },
          end: {
            line: 293,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 285
      },
      "38": {
        loc: {
          start: {
            line: 298,
            column: 8
          },
          end: {
            line: 305,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 298,
            column: 8
          },
          end: {
            line: 305,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 298
      },
      "39": {
        loc: {
          start: {
            line: 298,
            column: 12
          },
          end: {
            line: 298,
            column: 65
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 298,
            column: 12
          },
          end: {
            line: 298,
            column: 29
          }
        }, {
          start: {
            line: 298,
            column: 33
          },
          end: {
            line: 298,
            column: 65
          }
        }],
        line: 298
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0,
      "105": 0,
      "106": 0,
      "107": 0,
      "108": 0,
      "109": 0,
      "110": 0,
      "111": 0,
      "112": 0,
      "113": 0,
      "114": 0,
      "115": 0,
      "116": 0,
      "117": 0,
      "118": 0,
      "119": 0,
      "120": 0,
      "121": 0,
      "122": 0,
      "123": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0, 0],
      "6": [0, 0],
      "7": [0, 0, 0, 0],
      "8": [0, 0, 0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0],
      "19": [0, 0],
      "20": [0, 0],
      "21": [0, 0],
      "22": [0, 0],
      "23": [0, 0],
      "24": [0, 0],
      "25": [0, 0],
      "26": [0, 0],
      "27": [0, 0],
      "28": [0, 0],
      "29": [0, 0],
      "30": [0, 0],
      "31": [0, 0],
      "32": [0, 0],
      "33": [0, 0],
      "34": [0, 0],
      "35": [0, 0],
      "36": [0, 0],
      "37": [0, 0],
      "38": [0, 0],
      "39": [0, 0]
    },
    inputSourceMap: {
      file: "/Users/peterkrzyzek/Development/clickup-mcp-server/src/clickup-client/comments.ts",
      mappings: "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",
      names: [],
      sources: ["/Users/peterkrzyzek/Development/clickup-mcp-server/src/clickup-client/comments.ts"],
      sourcesContent: ["import { ClickUpClient } from './index.js';\nimport { processClickUpResponse } from '../utils/markdown.js';\nimport { prepareCommentForClickUp, clickUpCommentToMarkdown, ClickUpCommentBlock } from '../utils/clickup-comment-formatter.js';\n\nexport interface Comment {\n  id: string;\n  comment: ClickUpCommentBlock[]; // ClickUp's structured comment format\n  comment_text: string; // Plain text representation\n  comment_markdown?: string; // Markdown version for display\n  user: {\n    id: number;\n    username: string;\n    email: string;\n    color: string;\n    profilePicture?: string;\n  };\n  resolved: boolean;\n  assignee?: {\n    id: number;\n    username: string;\n    email: string;\n    color: string;\n    profilePicture?: string;\n  };\n  assigned_by?: {\n    id: number;\n    username: string;\n    email: string;\n    color: string;\n    profilePicture?: string;\n  };\n  reactions?: {\n    [key: string]: {\n      count: number;\n      users: Array<{\n        id: number;\n        username: string;\n        email: string;\n      }>;\n    };\n  };\n  date: string;\n  start_date?: string;\n  due_date?: string;\n  parent?: string;\n  replies_count?: number;\n}\n\nexport interface GetTaskCommentsParams {\n  start?: number;\n  start_id?: string;\n}\n\nexport interface CreateTaskCommentParams {\n  comment_text?: string; // Make optional since we'll be using comment array\n  assignee?: number;\n  notify_all?: boolean;\n}\n\nexport interface GetChatViewCommentsParams {\n  start?: number;\n  start_id?: string;\n}\n\nexport interface CreateChatViewCommentParams {\n  comment_text?: string; // Make optional since we'll be using comment array\n  notify_all?: boolean;\n}\n\nexport interface GetListCommentsParams {\n  start?: number;\n  start_id?: string;\n}\n\nexport interface CreateListCommentParams {\n  comment_text?: string; // Make optional since we'll be using comment array\n  assignee?: number;\n  notify_all?: boolean;\n}\n\nexport interface UpdateCommentParams {\n  comment_text?: string; // Make optional since we'll be using comment array\n  assignee?: number;\n  resolved?: boolean;\n}\n\nexport interface GetThreadedCommentsParams {\n  start?: number;\n  start_id?: string;\n}\n\nexport interface CreateThreadedCommentParams {\n  comment_text?: string; // Make optional since we'll be using comment array\n  notify_all?: boolean;\n}\n\nexport class CommentsClient {\n  private client: ClickUpClient;\n\n  constructor(client: ClickUpClient) {\n    this.client = client;\n  }\n\n  /**\n   * Get comments for a specific task\n   * @param taskId The ID of the task to get comments for\n   * @param params Optional parameters for pagination\n   * @returns A list of comments with processed content\n   */\n  async getTaskComments(taskId: string, params?: GetTaskCommentsParams): Promise<{ comments: Comment[] }> {\n    const result = await this.client.get(`/task/${taskId}/comment`, params);\n    \n    // Process each comment's content\n    if (result.comments && Array.isArray(result.comments)) {\n      result.comments = result.comments.map((comment: any) => {\n        const processed = processClickUpResponse(comment);\n        \n        // Convert ClickUp comment format to markdown for display\n        if (processed.comment && Array.isArray(processed.comment)) {\n          try {\n            processed.comment_markdown = clickUpCommentToMarkdown({ comment: processed.comment });\n          } catch (error) {\n            console.warn('Failed to convert ClickUp comment to markdown:', error);\n          }\n        }\n        \n        return processed;\n      });\n    }\n    \n    return result;\n  }\n\n  /**\n   * Clean up ClickUp comment response by removing duplicate text blocks\n   * ClickUp automatically appends original text as final block - we remove it\n   */\n  private cleanupCommentResponse(processed: any): any {\n    if (processed.comment && Array.isArray(processed.comment) && processed.comment.length > 1) {\n      const lastBlock = processed.comment[processed.comment.length - 1];\n      \n      // Check if the last block is a duplicate of the original markdown\n      if (lastBlock && typeof lastBlock.text === 'string' && \n          (!lastBlock.attributes || Object.keys(lastBlock.attributes).length === 0)) {\n        \n        // If the last block contains markdown syntax, it's likely the duplicate\n        const hasMarkdownSyntax = /[*_`#\\[\\]()>-]/.test(lastBlock.text) || \n                                  lastBlock.text.includes('```') ||\n                                  lastBlock.text.includes('**') ||\n                                  lastBlock.text.includes('##');\n        \n        if (hasMarkdownSyntax && lastBlock.text.length > 50) {\n          // Remove the duplicate block\n          processed.comment = processed.comment.slice(0, -1);\n          \n          // Also clean up the comment_text field\n          if (processed.comment_text && processed.comment_text.includes(lastBlock.text)) {\n            processed.comment_text = processed.comment_text.replace(lastBlock.text, '').trim();\n          }\n          \n          // Regenerate clean comment_markdown\n          if (processed.comment && Array.isArray(processed.comment)) {\n            try {\n              processed.comment_markdown = clickUpCommentToMarkdown({ comment: processed.comment });\n            } catch (error) {\n              console.warn('Failed to regenerate clean comment markdown:', error);\n            }\n          }\n        }\n      }\n    }\n    \n    return processed;\n  }\n\n  /**\n   * Create a new comment on a task\n   * @param taskId The ID of the task to comment on\n   * @param params The comment parameters (supports markdown in comment_text)\n   * @returns The created comment with processed content\n   */\n  async createTaskComment(taskId: string, params: CreateTaskCommentParams): Promise<Comment> {\n    // Use ONLY structured format - no comment_text to avoid duplication\n    const processedParams: any = { ...params };\n    \n    if (params.comment_text) {\n      const commentData = prepareCommentForClickUp(params.comment_text);\n      \n      // Send ONLY structured format - remove comment_text completely\n      delete processedParams.comment_text;\n      processedParams.comment = commentData.comment;\n      \n      // Remove any other text fields to prevent conflicts\n      delete processedParams.text;\n      delete processedParams.description;\n    }\n    \n    const result = await this.client.post(`/task/${taskId}/comment`, processedParams);\n    \n    // Process the response\n    let processed = processClickUpResponse(result);\n    \n    // Clean up ClickUp's duplicate text blocks\n    processed = this.cleanupCommentResponse(processed);\n    \n    return processed;\n  }\n\n  /**\n   * Get comments for a chat view\n   * @param viewId The ID of the chat view to get comments for\n   * @param params Optional parameters for pagination\n   * @returns A list of comments with processed content\n   */\n  async getChatViewComments(viewId: string, params?: GetChatViewCommentsParams): Promise<{ comments: Comment[] }> {\n    const result = await this.client.get(`/view/${viewId}/comment`, params);\n    \n    // Process each comment's content\n    if (result.comments && Array.isArray(result.comments)) {\n      result.comments = result.comments.map((comment: any) => {\n        const processed = processClickUpResponse(comment);\n        \n        // Convert ClickUp comment format to markdown for display\n        if (processed.comment && Array.isArray(processed.comment)) {\n          try {\n            processed.comment_markdown = clickUpCommentToMarkdown({ comment: processed.comment });\n          } catch (error) {\n            console.warn('Failed to convert ClickUp comment to markdown:', error);\n          }\n        }\n        \n        return processed;\n      });\n    }\n    \n    return result;\n  }\n\n  /**\n   * Create a new comment on a chat view\n   * @param viewId The ID of the chat view to comment on\n   * @param params The comment parameters (supports markdown in comment_text)\n   * @returns The created comment with processed content\n   */\n  async createChatViewComment(viewId: string, params: CreateChatViewCommentParams): Promise<Comment> {\n    // Use ONLY structured format - no comment_text to avoid duplication\n    const processedParams: any = { ...params };\n    \n    if (params.comment_text) {\n      const commentData = prepareCommentForClickUp(params.comment_text);\n      \n      // Send ONLY structured format - remove comment_text completely\n      delete processedParams.comment_text;\n      processedParams.comment = commentData.comment;\n      \n      // Remove any other text fields to prevent conflicts\n      delete processedParams.text;\n      delete processedParams.description;\n    }\n    \n    const result = await this.client.post(`/view/${viewId}/comment`, processedParams);\n    \n    // Process the response\n    const processed = processClickUpResponse(result);\n    \n    // Convert ClickUp comment format to markdown for display\n    if (processed.comment && Array.isArray(processed.comment)) {\n      try {\n        processed.comment_markdown = clickUpCommentToMarkdown({ comment: processed.comment });\n      } catch (error) {\n        console.warn('Failed to convert ClickUp comment to markdown:', error);\n      }\n    }\n    \n    return processed;\n  }\n\n  /**\n   * Get comments for a list\n   * @param listId The ID of the list to get comments for\n   * @param params Optional parameters for pagination\n   * @returns A list of comments with processed content\n   */\n  async getListComments(listId: string, params?: GetListCommentsParams): Promise<{ comments: Comment[] }> {\n    const result = await this.client.get(`/list/${listId}/comment`, params);\n    \n    // Process each comment's content\n    if (result.comments && Array.isArray(result.comments)) {\n      result.comments = result.comments.map((comment: any) => {\n        const processed = processClickUpResponse(comment);\n        \n        // Convert ClickUp comment format to markdown for display\n        if (processed.comment && Array.isArray(processed.comment)) {\n          try {\n            processed.comment_markdown = clickUpCommentToMarkdown({ comment: processed.comment });\n          } catch (error) {\n            console.warn('Failed to convert ClickUp comment to markdown:', error);\n          }\n        }\n        \n        return processed;\n      });\n    }\n    \n    return result;\n  }\n\n  /**\n   * Create a new comment on a list\n   * @param listId The ID of the list to comment on\n   * @param params The comment parameters (supports markdown in comment_text)\n   * @returns The created comment with processed content\n   */\n  async createListComment(listId: string, params: CreateListCommentParams): Promise<Comment> {\n    // Use ONLY structured format - no comment_text to avoid duplication\n    const processedParams: any = { ...params };\n    \n    if (params.comment_text) {\n      const commentData = prepareCommentForClickUp(params.comment_text);\n      \n      // Send ONLY structured format - remove comment_text completely\n      delete processedParams.comment_text;\n      processedParams.comment = commentData.comment;\n      \n      // Remove any other text fields to prevent conflicts\n      delete processedParams.text;\n      delete processedParams.description;\n    }\n    \n    const result = await this.client.post(`/list/${listId}/comment`, processedParams);\n    \n    // Process the response\n    const processed = processClickUpResponse(result);\n    \n    // Convert ClickUp comment format to markdown for display\n    if (processed.comment && Array.isArray(processed.comment)) {\n      try {\n        processed.comment_markdown = clickUpCommentToMarkdown({ comment: processed.comment });\n      } catch (error) {\n        console.warn('Failed to convert ClickUp comment to markdown:', error);\n      }\n    }\n    \n    return processed;\n  }\n\n  /**\n   * Update an existing comment\n   * @param commentId The ID of the comment to update\n   * @param params The comment parameters to update (supports markdown in comment_text)\n   * @returns The updated comment with processed content\n   */\n  async updateComment(commentId: string, params: UpdateCommentParams): Promise<Comment> {\n    // Use ONLY structured format - no comment_text to avoid duplication\n    const processedParams: any = { ...params };\n    \n    if (params.comment_text) {\n      const commentData = prepareCommentForClickUp(params.comment_text);\n      \n      // Send ONLY structured format - remove comment_text completely\n      delete processedParams.comment_text;\n      processedParams.comment = commentData.comment;\n      \n      // Remove any other text fields to prevent conflicts\n      delete processedParams.text;\n      delete processedParams.description;\n    }\n    \n    const result = await this.client.put(`/comment/${commentId}`, processedParams);\n    \n    // Process the response\n    const processed = processClickUpResponse(result);\n    \n    // Convert ClickUp comment format to markdown for display\n    if (processed.comment && Array.isArray(processed.comment)) {\n      try {\n        processed.comment_markdown = clickUpCommentToMarkdown({ comment: processed.comment });\n      } catch (error) {\n        console.warn('Failed to convert ClickUp comment to markdown:', error);\n      }\n    }\n    \n    return processed;\n  }\n\n  /**\n   * Delete a comment\n   * @param commentId The ID of the comment to delete\n   * @returns Success message\n   */\n  async deleteComment(commentId: string): Promise<{ success: boolean }> {\n    return this.client.delete(`/comment/${commentId}`);\n  }\n\n  /**\n   * Get threaded comments for a parent comment\n   * @param commentId The ID of the parent comment\n   * @param params Optional parameters for pagination\n   * @returns A list of threaded comments with processed content\n   */\n  async getThreadedComments(commentId: string, params?: GetThreadedCommentsParams): Promise<{ comments: Comment[] }> {\n    const result = await this.client.get(`/comment/${commentId}/reply`, params);\n    \n    // Process each comment's content\n    if (result.comments && Array.isArray(result.comments)) {\n      result.comments = result.comments.map((comment: any) => {\n        const processed = processClickUpResponse(comment);\n        \n        // Convert ClickUp comment format to markdown for display\n        if (processed.comment && Array.isArray(processed.comment)) {\n          try {\n            processed.comment_markdown = clickUpCommentToMarkdown({ comment: processed.comment });\n          } catch (error) {\n            console.warn('Failed to convert ClickUp comment to markdown:', error);\n          }\n        }\n        \n        return processed;\n      });\n    }\n    \n    return result;\n  }\n\n  /**\n   * Create a new threaded comment on a parent comment\n   * @param commentId The ID of the parent comment\n   * @param params The comment parameters (supports markdown in comment_text)\n   * @returns The created threaded comment with processed content\n   */\n  async createThreadedComment(commentId: string, params: CreateThreadedCommentParams): Promise<Comment> {\n    // Process comment text for ClickUp's structured format ONLY\n    const processedParams: any = { ...params };\n    if (params.comment_text) {\n      const commentData = prepareCommentForClickUp(params.comment_text);\n      \n      // Use ONLY ClickUp's structured comment format - no comment_text at all\n      delete processedParams.comment_text;\n      processedParams.comment = commentData.comment;\n      \n      // Remove any other text fields to prevent ClickUp auto-detection\n      delete processedParams.text;\n      delete processedParams.description;\n    }\n    \n    const result = await this.client.post(`/comment/${commentId}/reply`, processedParams);\n    \n    // Process the response\n    const processed = processClickUpResponse(result);\n    \n    // Convert ClickUp comment format to markdown for display\n    if (processed.comment && Array.isArray(processed.comment)) {\n      try {\n        processed.comment_markdown = clickUpCommentToMarkdown({ comment: processed.comment });\n      } catch (error) {\n        console.warn('Failed to convert ClickUp comment to markdown:', error);\n      }\n    }\n    \n    return processed;\n  }\n}\n\nexport const createCommentsClient = (client: ClickUpClient): CommentsClient => {\n  return new CommentsClient(client);\n};\n"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "afe68c992d857f9bb311e1f0c347e431d5909b49"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_2gzql2q6t1 = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_2gzql2q6t1();
import { processClickUpResponse } from '../utils/markdown.js';
import { prepareCommentForClickUp, clickUpCommentToMarkdown } from '../utils/clickup-comment-formatter.js';
export class CommentsClient {
  constructor(client) {
    /* istanbul ignore next */
    cov_2gzql2q6t1().f[0]++;
    cov_2gzql2q6t1().s[0]++;
    this.client = client;
  }
  /**
   * Get comments for a specific task
   * @param taskId The ID of the task to get comments for
   * @param params Optional parameters for pagination
   * @returns A list of comments with processed content
   */
  async getTaskComments(taskId, params) {
    /* istanbul ignore next */
    cov_2gzql2q6t1().f[1]++;
    const result =
    /* istanbul ignore next */
    (cov_2gzql2q6t1().s[1]++, await this.client.get(`/task/${taskId}/comment`, params));
    // Process each comment's content
    /* istanbul ignore next */
    cov_2gzql2q6t1().s[2]++;
    if (
    /* istanbul ignore next */
    (cov_2gzql2q6t1().b[1][0]++, result.comments) &&
    /* istanbul ignore next */
    (cov_2gzql2q6t1().b[1][1]++, Array.isArray(result.comments))) {
      /* istanbul ignore next */
      cov_2gzql2q6t1().b[0][0]++;
      cov_2gzql2q6t1().s[3]++;
      result.comments = result.comments.map(comment => {
        /* istanbul ignore next */
        cov_2gzql2q6t1().f[2]++;
        const processed =
        /* istanbul ignore next */
        (cov_2gzql2q6t1().s[4]++, processClickUpResponse(comment));
        // Convert ClickUp comment format to markdown for display
        /* istanbul ignore next */
        cov_2gzql2q6t1().s[5]++;
        if (
        /* istanbul ignore next */
        (cov_2gzql2q6t1().b[3][0]++, processed.comment) &&
        /* istanbul ignore next */
        (cov_2gzql2q6t1().b[3][1]++, Array.isArray(processed.comment))) {
          /* istanbul ignore next */
          cov_2gzql2q6t1().b[2][0]++;
          cov_2gzql2q6t1().s[6]++;
          try {
            /* istanbul ignore next */
            cov_2gzql2q6t1().s[7]++;
            processed.comment_markdown = clickUpCommentToMarkdown({
              comment: processed.comment
            });
          } catch (error) {
            /* istanbul ignore next */
            cov_2gzql2q6t1().s[8]++;
            console.warn('Failed to convert ClickUp comment to markdown:', error);
          }
        } else
        /* istanbul ignore next */
        {
          cov_2gzql2q6t1().b[2][1]++;
        }
        cov_2gzql2q6t1().s[9]++;
        return processed;
      });
    } else
    /* istanbul ignore next */
    {
      cov_2gzql2q6t1().b[0][1]++;
    }
    cov_2gzql2q6t1().s[10]++;
    return result;
  }
  /**
   * Clean up ClickUp comment response by removing duplicate text blocks
   * ClickUp automatically appends original text as final block - we remove it
   */
  cleanupCommentResponse(processed) {
    /* istanbul ignore next */
    cov_2gzql2q6t1().f[3]++;
    cov_2gzql2q6t1().s[11]++;
    if (
    /* istanbul ignore next */
    (cov_2gzql2q6t1().b[5][0]++, processed.comment) &&
    /* istanbul ignore next */
    (cov_2gzql2q6t1().b[5][1]++, Array.isArray(processed.comment)) &&
    /* istanbul ignore next */
    (cov_2gzql2q6t1().b[5][2]++, processed.comment.length > 1)) {
      /* istanbul ignore next */
      cov_2gzql2q6t1().b[4][0]++;
      const lastBlock =
      /* istanbul ignore next */
      (cov_2gzql2q6t1().s[12]++, processed.comment[processed.comment.length - 1]);
      // Check if the last block is a duplicate of the original markdown
      /* istanbul ignore next */
      cov_2gzql2q6t1().s[13]++;
      if (
      /* istanbul ignore next */
      (cov_2gzql2q6t1().b[7][0]++, lastBlock) &&
      /* istanbul ignore next */
      (cov_2gzql2q6t1().b[7][1]++, typeof lastBlock.text === 'string') && (
      /* istanbul ignore next */
      (cov_2gzql2q6t1().b[7][2]++, !lastBlock.attributes) ||
      /* istanbul ignore next */
      (cov_2gzql2q6t1().b[7][3]++, Object.keys(lastBlock.attributes).length === 0))) {
        /* istanbul ignore next */
        cov_2gzql2q6t1().b[6][0]++;
        // If the last block contains markdown syntax, it's likely the duplicate
        const hasMarkdownSyntax =
        /* istanbul ignore next */
        (cov_2gzql2q6t1().s[14]++,
        /* istanbul ignore next */
        (cov_2gzql2q6t1().b[8][0]++, /[*_`#\[\]()>-]/.test(lastBlock.text)) ||
        /* istanbul ignore next */
        (cov_2gzql2q6t1().b[8][1]++, lastBlock.text.includes('```')) ||
        /* istanbul ignore next */
        (cov_2gzql2q6t1().b[8][2]++, lastBlock.text.includes('**')) ||
        /* istanbul ignore next */
        (cov_2gzql2q6t1().b[8][3]++, lastBlock.text.includes('##')));
        /* istanbul ignore next */
        cov_2gzql2q6t1().s[15]++;
        if (
        /* istanbul ignore next */
        (cov_2gzql2q6t1().b[10][0]++, hasMarkdownSyntax) &&
        /* istanbul ignore next */
        (cov_2gzql2q6t1().b[10][1]++, lastBlock.text.length > 50)) {
          /* istanbul ignore next */
          cov_2gzql2q6t1().b[9][0]++;
          cov_2gzql2q6t1().s[16]++;
          // Remove the duplicate block
          processed.comment = processed.comment.slice(0, -1);
          // Also clean up the comment_text field
          /* istanbul ignore next */
          cov_2gzql2q6t1().s[17]++;
          if (
          /* istanbul ignore next */
          (cov_2gzql2q6t1().b[12][0]++, processed.comment_text) &&
          /* istanbul ignore next */
          (cov_2gzql2q6t1().b[12][1]++, processed.comment_text.includes(lastBlock.text))) {
            /* istanbul ignore next */
            cov_2gzql2q6t1().b[11][0]++;
            cov_2gzql2q6t1().s[18]++;
            processed.comment_text = processed.comment_text.replace(lastBlock.text, '').trim();
          } else
          /* istanbul ignore next */
          {
            cov_2gzql2q6t1().b[11][1]++;
          }
          // Regenerate clean comment_markdown
          cov_2gzql2q6t1().s[19]++;
          if (
          /* istanbul ignore next */
          (cov_2gzql2q6t1().b[14][0]++, processed.comment) &&
          /* istanbul ignore next */
          (cov_2gzql2q6t1().b[14][1]++, Array.isArray(processed.comment))) {
            /* istanbul ignore next */
            cov_2gzql2q6t1().b[13][0]++;
            cov_2gzql2q6t1().s[20]++;
            try {
              /* istanbul ignore next */
              cov_2gzql2q6t1().s[21]++;
              processed.comment_markdown = clickUpCommentToMarkdown({
                comment: processed.comment
              });
            } catch (error) {
              /* istanbul ignore next */
              cov_2gzql2q6t1().s[22]++;
              console.warn('Failed to regenerate clean comment markdown:', error);
            }
          } else
          /* istanbul ignore next */
          {
            cov_2gzql2q6t1().b[13][1]++;
          }
        } else
        /* istanbul ignore next */
        {
          cov_2gzql2q6t1().b[9][1]++;
        }
      } else
      /* istanbul ignore next */
      {
        cov_2gzql2q6t1().b[6][1]++;
      }
    } else
    /* istanbul ignore next */
    {
      cov_2gzql2q6t1().b[4][1]++;
    }
    cov_2gzql2q6t1().s[23]++;
    return processed;
  }
  /**
   * Create a new comment on a task
   * @param taskId The ID of the task to comment on
   * @param params The comment parameters (supports markdown in comment_text)
   * @returns The created comment with processed content
   */
  async createTaskComment(taskId, params) {
    /* istanbul ignore next */
    cov_2gzql2q6t1().f[4]++;
    // Use ONLY structured format - no comment_text to avoid duplication
    const processedParams =
    /* istanbul ignore next */
    (cov_2gzql2q6t1().s[24]++, {
      ...params
    });
    /* istanbul ignore next */
    cov_2gzql2q6t1().s[25]++;
    if (params.comment_text) {
      /* istanbul ignore next */
      cov_2gzql2q6t1().b[15][0]++;
      const commentData =
      /* istanbul ignore next */
      (cov_2gzql2q6t1().s[26]++, prepareCommentForClickUp(params.comment_text));
      // Send ONLY structured format - remove comment_text completely
      /* istanbul ignore next */
      cov_2gzql2q6t1().s[27]++;
      delete processedParams.comment_text;
      /* istanbul ignore next */
      cov_2gzql2q6t1().s[28]++;
      processedParams.comment = commentData.comment;
      // Remove any other text fields to prevent conflicts
      /* istanbul ignore next */
      cov_2gzql2q6t1().s[29]++;
      delete processedParams.text;
      /* istanbul ignore next */
      cov_2gzql2q6t1().s[30]++;
      delete processedParams.description;
    } else
    /* istanbul ignore next */
    {
      cov_2gzql2q6t1().b[15][1]++;
    }
    const result =
    /* istanbul ignore next */
    (cov_2gzql2q6t1().s[31]++, await this.client.post(`/task/${taskId}/comment`, processedParams));
    // Process the response
    let processed =
    /* istanbul ignore next */
    (cov_2gzql2q6t1().s[32]++, processClickUpResponse(result));
    // Clean up ClickUp's duplicate text blocks
    /* istanbul ignore next */
    cov_2gzql2q6t1().s[33]++;
    processed = this.cleanupCommentResponse(processed);
    /* istanbul ignore next */
    cov_2gzql2q6t1().s[34]++;
    return processed;
  }
  /**
   * Get comments for a chat view
   * @param viewId The ID of the chat view to get comments for
   * @param params Optional parameters for pagination
   * @returns A list of comments with processed content
   */
  async getChatViewComments(viewId, params) {
    /* istanbul ignore next */
    cov_2gzql2q6t1().f[5]++;
    const result =
    /* istanbul ignore next */
    (cov_2gzql2q6t1().s[35]++, await this.client.get(`/view/${viewId}/comment`, params));
    // Process each comment's content
    /* istanbul ignore next */
    cov_2gzql2q6t1().s[36]++;
    if (
    /* istanbul ignore next */
    (cov_2gzql2q6t1().b[17][0]++, result.comments) &&
    /* istanbul ignore next */
    (cov_2gzql2q6t1().b[17][1]++, Array.isArray(result.comments))) {
      /* istanbul ignore next */
      cov_2gzql2q6t1().b[16][0]++;
      cov_2gzql2q6t1().s[37]++;
      result.comments = result.comments.map(comment => {
        /* istanbul ignore next */
        cov_2gzql2q6t1().f[6]++;
        const processed =
        /* istanbul ignore next */
        (cov_2gzql2q6t1().s[38]++, processClickUpResponse(comment));
        // Convert ClickUp comment format to markdown for display
        /* istanbul ignore next */
        cov_2gzql2q6t1().s[39]++;
        if (
        /* istanbul ignore next */
        (cov_2gzql2q6t1().b[19][0]++, processed.comment) &&
        /* istanbul ignore next */
        (cov_2gzql2q6t1().b[19][1]++, Array.isArray(processed.comment))) {
          /* istanbul ignore next */
          cov_2gzql2q6t1().b[18][0]++;
          cov_2gzql2q6t1().s[40]++;
          try {
            /* istanbul ignore next */
            cov_2gzql2q6t1().s[41]++;
            processed.comment_markdown = clickUpCommentToMarkdown({
              comment: processed.comment
            });
          } catch (error) {
            /* istanbul ignore next */
            cov_2gzql2q6t1().s[42]++;
            console.warn('Failed to convert ClickUp comment to markdown:', error);
          }
        } else
        /* istanbul ignore next */
        {
          cov_2gzql2q6t1().b[18][1]++;
        }
        cov_2gzql2q6t1().s[43]++;
        return processed;
      });
    } else
    /* istanbul ignore next */
    {
      cov_2gzql2q6t1().b[16][1]++;
    }
    cov_2gzql2q6t1().s[44]++;
    return result;
  }
  /**
   * Create a new comment on a chat view
   * @param viewId The ID of the chat view to comment on
   * @param params The comment parameters (supports markdown in comment_text)
   * @returns The created comment with processed content
   */
  async createChatViewComment(viewId, params) {
    /* istanbul ignore next */
    cov_2gzql2q6t1().f[7]++;
    // Use ONLY structured format - no comment_text to avoid duplication
    const processedParams =
    /* istanbul ignore next */
    (cov_2gzql2q6t1().s[45]++, {
      ...params
    });
    /* istanbul ignore next */
    cov_2gzql2q6t1().s[46]++;
    if (params.comment_text) {
      /* istanbul ignore next */
      cov_2gzql2q6t1().b[20][0]++;
      const commentData =
      /* istanbul ignore next */
      (cov_2gzql2q6t1().s[47]++, prepareCommentForClickUp(params.comment_text));
      // Send ONLY structured format - remove comment_text completely
      /* istanbul ignore next */
      cov_2gzql2q6t1().s[48]++;
      delete processedParams.comment_text;
      /* istanbul ignore next */
      cov_2gzql2q6t1().s[49]++;
      processedParams.comment = commentData.comment;
      // Remove any other text fields to prevent conflicts
      /* istanbul ignore next */
      cov_2gzql2q6t1().s[50]++;
      delete processedParams.text;
      /* istanbul ignore next */
      cov_2gzql2q6t1().s[51]++;
      delete processedParams.description;
    } else
    /* istanbul ignore next */
    {
      cov_2gzql2q6t1().b[20][1]++;
    }
    const result =
    /* istanbul ignore next */
    (cov_2gzql2q6t1().s[52]++, await this.client.post(`/view/${viewId}/comment`, processedParams));
    // Process the response
    const processed =
    /* istanbul ignore next */
    (cov_2gzql2q6t1().s[53]++, processClickUpResponse(result));
    // Convert ClickUp comment format to markdown for display
    /* istanbul ignore next */
    cov_2gzql2q6t1().s[54]++;
    if (
    /* istanbul ignore next */
    (cov_2gzql2q6t1().b[22][0]++, processed.comment) &&
    /* istanbul ignore next */
    (cov_2gzql2q6t1().b[22][1]++, Array.isArray(processed.comment))) {
      /* istanbul ignore next */
      cov_2gzql2q6t1().b[21][0]++;
      cov_2gzql2q6t1().s[55]++;
      try {
        /* istanbul ignore next */
        cov_2gzql2q6t1().s[56]++;
        processed.comment_markdown = clickUpCommentToMarkdown({
          comment: processed.comment
        });
      } catch (error) {
        /* istanbul ignore next */
        cov_2gzql2q6t1().s[57]++;
        console.warn('Failed to convert ClickUp comment to markdown:', error);
      }
    } else
    /* istanbul ignore next */
    {
      cov_2gzql2q6t1().b[21][1]++;
    }
    cov_2gzql2q6t1().s[58]++;
    return processed;
  }
  /**
   * Get comments for a list
   * @param listId The ID of the list to get comments for
   * @param params Optional parameters for pagination
   * @returns A list of comments with processed content
   */
  async getListComments(listId, params) {
    /* istanbul ignore next */
    cov_2gzql2q6t1().f[8]++;
    const result =
    /* istanbul ignore next */
    (cov_2gzql2q6t1().s[59]++, await this.client.get(`/list/${listId}/comment`, params));
    // Process each comment's content
    /* istanbul ignore next */
    cov_2gzql2q6t1().s[60]++;
    if (
    /* istanbul ignore next */
    (cov_2gzql2q6t1().b[24][0]++, result.comments) &&
    /* istanbul ignore next */
    (cov_2gzql2q6t1().b[24][1]++, Array.isArray(result.comments))) {
      /* istanbul ignore next */
      cov_2gzql2q6t1().b[23][0]++;
      cov_2gzql2q6t1().s[61]++;
      result.comments = result.comments.map(comment => {
        /* istanbul ignore next */
        cov_2gzql2q6t1().f[9]++;
        const processed =
        /* istanbul ignore next */
        (cov_2gzql2q6t1().s[62]++, processClickUpResponse(comment));
        // Convert ClickUp comment format to markdown for display
        /* istanbul ignore next */
        cov_2gzql2q6t1().s[63]++;
        if (
        /* istanbul ignore next */
        (cov_2gzql2q6t1().b[26][0]++, processed.comment) &&
        /* istanbul ignore next */
        (cov_2gzql2q6t1().b[26][1]++, Array.isArray(processed.comment))) {
          /* istanbul ignore next */
          cov_2gzql2q6t1().b[25][0]++;
          cov_2gzql2q6t1().s[64]++;
          try {
            /* istanbul ignore next */
            cov_2gzql2q6t1().s[65]++;
            processed.comment_markdown = clickUpCommentToMarkdown({
              comment: processed.comment
            });
          } catch (error) {
            /* istanbul ignore next */
            cov_2gzql2q6t1().s[66]++;
            console.warn('Failed to convert ClickUp comment to markdown:', error);
          }
        } else
        /* istanbul ignore next */
        {
          cov_2gzql2q6t1().b[25][1]++;
        }
        cov_2gzql2q6t1().s[67]++;
        return processed;
      });
    } else
    /* istanbul ignore next */
    {
      cov_2gzql2q6t1().b[23][1]++;
    }
    cov_2gzql2q6t1().s[68]++;
    return result;
  }
  /**
   * Create a new comment on a list
   * @param listId The ID of the list to comment on
   * @param params The comment parameters (supports markdown in comment_text)
   * @returns The created comment with processed content
   */
  async createListComment(listId, params) {
    /* istanbul ignore next */
    cov_2gzql2q6t1().f[10]++;
    // Use ONLY structured format - no comment_text to avoid duplication
    const processedParams =
    /* istanbul ignore next */
    (cov_2gzql2q6t1().s[69]++, {
      ...params
    });
    /* istanbul ignore next */
    cov_2gzql2q6t1().s[70]++;
    if (params.comment_text) {
      /* istanbul ignore next */
      cov_2gzql2q6t1().b[27][0]++;
      const commentData =
      /* istanbul ignore next */
      (cov_2gzql2q6t1().s[71]++, prepareCommentForClickUp(params.comment_text));
      // Send ONLY structured format - remove comment_text completely
      /* istanbul ignore next */
      cov_2gzql2q6t1().s[72]++;
      delete processedParams.comment_text;
      /* istanbul ignore next */
      cov_2gzql2q6t1().s[73]++;
      processedParams.comment = commentData.comment;
      // Remove any other text fields to prevent conflicts
      /* istanbul ignore next */
      cov_2gzql2q6t1().s[74]++;
      delete processedParams.text;
      /* istanbul ignore next */
      cov_2gzql2q6t1().s[75]++;
      delete processedParams.description;
    } else
    /* istanbul ignore next */
    {
      cov_2gzql2q6t1().b[27][1]++;
    }
    const result =
    /* istanbul ignore next */
    (cov_2gzql2q6t1().s[76]++, await this.client.post(`/list/${listId}/comment`, processedParams));
    // Process the response
    const processed =
    /* istanbul ignore next */
    (cov_2gzql2q6t1().s[77]++, processClickUpResponse(result));
    // Convert ClickUp comment format to markdown for display
    /* istanbul ignore next */
    cov_2gzql2q6t1().s[78]++;
    if (
    /* istanbul ignore next */
    (cov_2gzql2q6t1().b[29][0]++, processed.comment) &&
    /* istanbul ignore next */
    (cov_2gzql2q6t1().b[29][1]++, Array.isArray(processed.comment))) {
      /* istanbul ignore next */
      cov_2gzql2q6t1().b[28][0]++;
      cov_2gzql2q6t1().s[79]++;
      try {
        /* istanbul ignore next */
        cov_2gzql2q6t1().s[80]++;
        processed.comment_markdown = clickUpCommentToMarkdown({
          comment: processed.comment
        });
      } catch (error) {
        /* istanbul ignore next */
        cov_2gzql2q6t1().s[81]++;
        console.warn('Failed to convert ClickUp comment to markdown:', error);
      }
    } else
    /* istanbul ignore next */
    {
      cov_2gzql2q6t1().b[28][1]++;
    }
    cov_2gzql2q6t1().s[82]++;
    return processed;
  }
  /**
   * Update an existing comment
   * @param commentId The ID of the comment to update
   * @param params The comment parameters to update (supports markdown in comment_text)
   * @returns The updated comment with processed content
   */
  async updateComment(commentId, params) {
    /* istanbul ignore next */
    cov_2gzql2q6t1().f[11]++;
    // Use ONLY structured format - no comment_text to avoid duplication
    const processedParams =
    /* istanbul ignore next */
    (cov_2gzql2q6t1().s[83]++, {
      ...params
    });
    /* istanbul ignore next */
    cov_2gzql2q6t1().s[84]++;
    if (params.comment_text) {
      /* istanbul ignore next */
      cov_2gzql2q6t1().b[30][0]++;
      const commentData =
      /* istanbul ignore next */
      (cov_2gzql2q6t1().s[85]++, prepareCommentForClickUp(params.comment_text));
      // Send ONLY structured format - remove comment_text completely
      /* istanbul ignore next */
      cov_2gzql2q6t1().s[86]++;
      delete processedParams.comment_text;
      /* istanbul ignore next */
      cov_2gzql2q6t1().s[87]++;
      processedParams.comment = commentData.comment;
      // Remove any other text fields to prevent conflicts
      /* istanbul ignore next */
      cov_2gzql2q6t1().s[88]++;
      delete processedParams.text;
      /* istanbul ignore next */
      cov_2gzql2q6t1().s[89]++;
      delete processedParams.description;
    } else
    /* istanbul ignore next */
    {
      cov_2gzql2q6t1().b[30][1]++;
    }
    const result =
    /* istanbul ignore next */
    (cov_2gzql2q6t1().s[90]++, await this.client.put(`/comment/${commentId}`, processedParams));
    // Process the response
    const processed =
    /* istanbul ignore next */
    (cov_2gzql2q6t1().s[91]++, processClickUpResponse(result));
    // Convert ClickUp comment format to markdown for display
    /* istanbul ignore next */
    cov_2gzql2q6t1().s[92]++;
    if (
    /* istanbul ignore next */
    (cov_2gzql2q6t1().b[32][0]++, processed.comment) &&
    /* istanbul ignore next */
    (cov_2gzql2q6t1().b[32][1]++, Array.isArray(processed.comment))) {
      /* istanbul ignore next */
      cov_2gzql2q6t1().b[31][0]++;
      cov_2gzql2q6t1().s[93]++;
      try {
        /* istanbul ignore next */
        cov_2gzql2q6t1().s[94]++;
        processed.comment_markdown = clickUpCommentToMarkdown({
          comment: processed.comment
        });
      } catch (error) {
        /* istanbul ignore next */
        cov_2gzql2q6t1().s[95]++;
        console.warn('Failed to convert ClickUp comment to markdown:', error);
      }
    } else
    /* istanbul ignore next */
    {
      cov_2gzql2q6t1().b[31][1]++;
    }
    cov_2gzql2q6t1().s[96]++;
    return processed;
  }
  /**
   * Delete a comment
   * @param commentId The ID of the comment to delete
   * @returns Success message
   */
  async deleteComment(commentId) {
    /* istanbul ignore next */
    cov_2gzql2q6t1().f[12]++;
    cov_2gzql2q6t1().s[97]++;
    return this.client.delete(`/comment/${commentId}`);
  }
  /**
   * Get threaded comments for a parent comment
   * @param commentId The ID of the parent comment
   * @param params Optional parameters for pagination
   * @returns A list of threaded comments with processed content
   */
  async getThreadedComments(commentId, params) {
    /* istanbul ignore next */
    cov_2gzql2q6t1().f[13]++;
    const result =
    /* istanbul ignore next */
    (cov_2gzql2q6t1().s[98]++, await this.client.get(`/comment/${commentId}/reply`, params));
    // Process each comment's content
    /* istanbul ignore next */
    cov_2gzql2q6t1().s[99]++;
    if (
    /* istanbul ignore next */
    (cov_2gzql2q6t1().b[34][0]++, result.comments) &&
    /* istanbul ignore next */
    (cov_2gzql2q6t1().b[34][1]++, Array.isArray(result.comments))) {
      /* istanbul ignore next */
      cov_2gzql2q6t1().b[33][0]++;
      cov_2gzql2q6t1().s[100]++;
      result.comments = result.comments.map(comment => {
        /* istanbul ignore next */
        cov_2gzql2q6t1().f[14]++;
        const processed =
        /* istanbul ignore next */
        (cov_2gzql2q6t1().s[101]++, processClickUpResponse(comment));
        // Convert ClickUp comment format to markdown for display
        /* istanbul ignore next */
        cov_2gzql2q6t1().s[102]++;
        if (
        /* istanbul ignore next */
        (cov_2gzql2q6t1().b[36][0]++, processed.comment) &&
        /* istanbul ignore next */
        (cov_2gzql2q6t1().b[36][1]++, Array.isArray(processed.comment))) {
          /* istanbul ignore next */
          cov_2gzql2q6t1().b[35][0]++;
          cov_2gzql2q6t1().s[103]++;
          try {
            /* istanbul ignore next */
            cov_2gzql2q6t1().s[104]++;
            processed.comment_markdown = clickUpCommentToMarkdown({
              comment: processed.comment
            });
          } catch (error) {
            /* istanbul ignore next */
            cov_2gzql2q6t1().s[105]++;
            console.warn('Failed to convert ClickUp comment to markdown:', error);
          }
        } else
        /* istanbul ignore next */
        {
          cov_2gzql2q6t1().b[35][1]++;
        }
        cov_2gzql2q6t1().s[106]++;
        return processed;
      });
    } else
    /* istanbul ignore next */
    {
      cov_2gzql2q6t1().b[33][1]++;
    }
    cov_2gzql2q6t1().s[107]++;
    return result;
  }
  /**
   * Create a new threaded comment on a parent comment
   * @param commentId The ID of the parent comment
   * @param params The comment parameters (supports markdown in comment_text)
   * @returns The created threaded comment with processed content
   */
  async createThreadedComment(commentId, params) {
    /* istanbul ignore next */
    cov_2gzql2q6t1().f[15]++;
    // Process comment text for ClickUp's structured format ONLY
    const processedParams =
    /* istanbul ignore next */
    (cov_2gzql2q6t1().s[108]++, {
      ...params
    });
    /* istanbul ignore next */
    cov_2gzql2q6t1().s[109]++;
    if (params.comment_text) {
      /* istanbul ignore next */
      cov_2gzql2q6t1().b[37][0]++;
      const commentData =
      /* istanbul ignore next */
      (cov_2gzql2q6t1().s[110]++, prepareCommentForClickUp(params.comment_text));
      // Use ONLY ClickUp's structured comment format - no comment_text at all
      /* istanbul ignore next */
      cov_2gzql2q6t1().s[111]++;
      delete processedParams.comment_text;
      /* istanbul ignore next */
      cov_2gzql2q6t1().s[112]++;
      processedParams.comment = commentData.comment;
      // Remove any other text fields to prevent ClickUp auto-detection
      /* istanbul ignore next */
      cov_2gzql2q6t1().s[113]++;
      delete processedParams.text;
      /* istanbul ignore next */
      cov_2gzql2q6t1().s[114]++;
      delete processedParams.description;
    } else
    /* istanbul ignore next */
    {
      cov_2gzql2q6t1().b[37][1]++;
    }
    const result =
    /* istanbul ignore next */
    (cov_2gzql2q6t1().s[115]++, await this.client.post(`/comment/${commentId}/reply`, processedParams));
    // Process the response
    const processed =
    /* istanbul ignore next */
    (cov_2gzql2q6t1().s[116]++, processClickUpResponse(result));
    // Convert ClickUp comment format to markdown for display
    /* istanbul ignore next */
    cov_2gzql2q6t1().s[117]++;
    if (
    /* istanbul ignore next */
    (cov_2gzql2q6t1().b[39][0]++, processed.comment) &&
    /* istanbul ignore next */
    (cov_2gzql2q6t1().b[39][1]++, Array.isArray(processed.comment))) {
      /* istanbul ignore next */
      cov_2gzql2q6t1().b[38][0]++;
      cov_2gzql2q6t1().s[118]++;
      try {
        /* istanbul ignore next */
        cov_2gzql2q6t1().s[119]++;
        processed.comment_markdown = clickUpCommentToMarkdown({
          comment: processed.comment
        });
      } catch (error) {
        /* istanbul ignore next */
        cov_2gzql2q6t1().s[120]++;
        console.warn('Failed to convert ClickUp comment to markdown:', error);
      }
    } else
    /* istanbul ignore next */
    {
      cov_2gzql2q6t1().b[38][1]++;
    }
    cov_2gzql2q6t1().s[121]++;
    return processed;
  }
}
/* istanbul ignore next */
cov_2gzql2q6t1().s[122]++;
export const createCommentsClient = client => {
  /* istanbul ignore next */
  cov_2gzql2q6t1().f[16]++;
  cov_2gzql2q6t1().s[123]++;
  return new CommentsClient(client);
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
3c1044f0a391d056d98bce395f8dd1f1
/* istanbul ignore next */
function cov_1xg3uou5zd() {
  var path = "/Users/peterkrzyzek/Development/clickup-mcp-server/src/resources/checklist-resources.ts";
  var hash = "96782dfc71441f3e2482870ce3780a445c7ccc6b";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/peterkrzyzek/Development/clickup-mcp-server/src/resources/checklist-resources.ts",
    statementMap: {
      "0": {
        start: {
          line: 6,
          column: 22
        },
        end: {
          line: 6,
          column: 43
        }
      },
      "1": {
        start: {
          line: 7,
          column: 20
        },
        end: {
          line: 7,
          column: 52
        }
      },
      "2": {
        start: {
          line: 8,
          column: 25
        },
        end: {
          line: 8,
          column: 62
        }
      },
      "3": {
        start: {
          line: 11,
          column: 4
        },
        end: {
          line: 43,
          column: 7
        }
      },
      "4": {
        start: {
          line: 14,
          column: 8
        },
        end: {
          line: 42,
          column: 9
        }
      },
      "5": {
        start: {
          line: 15,
          column: 28
        },
        end: {
          line: 15,
          column: 42
        }
      },
      "6": {
        start: {
          line: 17,
          column: 25
        },
        end: {
          line: 17,
          column: 59
        }
      },
      "7": {
        start: {
          line: 22,
          column: 31
        },
        end: {
          line: 22,
          column: 33
        }
      },
      "8": {
        start: {
          line: 25,
          column: 12
        },
        end: {
          line: 37,
          column: 14
        }
      },
      "9": {
        start: {
          line: 40,
          column: 12
        },
        end: {
          line: 40,
          column: 84
        }
      },
      "10": {
        start: {
          line: 41,
          column: 12
        },
        end: {
          line: 41,
          column: 75
        }
      },
      "11": {
        start: {
          line: 45,
          column: 4
        },
        end: {
          line: 72,
          column: 7
        }
      },
      "12": {
        start: {
          line: 48,
          column: 8
        },
        end: {
          line: 71,
          column: 9
        }
      },
      "13": {
        start: {
          line: 49,
          column: 33
        },
        end: {
          line: 49,
          column: 52
        }
      },
      "14": {
        start: {
          line: 54,
          column: 35
        },
        end: {
          line: 57,
          column: 13
        }
      },
      "15": {
        start: {
          line: 58,
          column: 12
        },
        end: {
          line: 66,
          column: 14
        }
      },
      "16": {
        start: {
          line: 69,
          column: 12
        },
        end: {
          line: 69,
          column: 89
        }
      },
      "17": {
        start: {
          line: 70,
          column: 12
        },
        end: {
          line: 70,
          column: 80
        }
      },
      "18": {
        start: {
          line: 74,
          column: 4
        },
        end: {
          line: 101,
          column: 7
        }
      },
      "19": {
        start: {
          line: 77,
          column: 8
        },
        end: {
          line: 100,
          column: 9
        }
      },
      "20": {
        start: {
          line: 78,
          column: 28
        },
        end: {
          line: 78,
          column: 39
        }
      },
      "21": {
        start: {
          line: 80,
          column: 25
        },
        end: {
          line: 80,
          column: 59
        }
      },
      "22": {
        start: {
          line: 82,
          column: 31
        },
        end: {
          line: 82,
          column: 33
        }
      },
      "23": {
        start: {
          line: 83,
          column: 12
        },
        end: {
          line: 95,
          column: 14
        }
      },
      "24": {
        start: {
          line: 98,
          column: 12
        },
        end: {
          line: 98,
          column: 92
        }
      },
      "25": {
        start: {
          line: 99,
          column: 12
        },
        end: {
          line: 99,
          column: 83
        }
      }
    },
    fnMap: {
      "0": {
        name: "setupChecklistResources",
        decl: {
          start: {
            line: 9,
            column: 16
          },
          end: {
            line: 9,
            column: 39
          }
        },
        loc: {
          start: {
            line: 9,
            column: 48
          },
          end: {
            line: 102,
            column: 1
          }
        },
        line: 9
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 13,
            column: 7
          },
          end: {
            line: 13,
            column: 8
          }
        },
        loc: {
          start: {
            line: 13,
            column: 30
          },
          end: {
            line: 43,
            column: 5
          }
        },
        line: 13
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 47,
            column: 7
          },
          end: {
            line: 47,
            column: 8
          }
        },
        loc: {
          start: {
            line: 47,
            column: 30
          },
          end: {
            line: 72,
            column: 5
          }
        },
        line: 47
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 76,
            column: 7
          },
          end: {
            line: 76,
            column: 8
          }
        },
        loc: {
          start: {
            line: 76,
            column: 22
          },
          end: {
            line: 101,
            column: 5
          }
        },
        line: 76
      }
    },
    branchMap: {},
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0
    },
    b: {},
    inputSourceMap: {
      file: "/Users/peterkrzyzek/Development/clickup-mcp-server/src/resources/checklist-resources.ts",
      mappings: "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",
      names: [],
      sources: ["/Users/peterkrzyzek/Development/clickup-mcp-server/src/resources/checklist-resources.ts"],
      sourcesContent: ["import { McpServer, ResourceTemplate } from '@modelcontextprotocol/sdk/server/mcp.js';\nimport { createClickUpClient } from '../clickup-client/index.js';\nimport { createTasksClient } from '../clickup-client/tasks.js';\nimport { createChecklistsClient, Checklist } from '../clickup-client/checklists.js';\n\n// Create clients\nconst clickUpClient = createClickUpClient();\nconst tasksClient = createTasksClient(clickUpClient);\nconst checklistsClient = createChecklistsClient(clickUpClient);\n\nexport function setupChecklistResources(server: McpServer): void {\n  // Register task checklists resource\n  server.resource(\n    'task-checklists',\n    new ResourceTemplate('clickup://task/{task_id}/checklist', { list: undefined }),\n    {\n      description: 'Get all checklists for a specific ClickUp task, including their names, items, and completion status.'\n    },\n    async (uri, params) => {\n      try {\n        const task_id = params.task_id as string;\n        \n        // Get the task details\n        const task = await tasksClient.getTask(task_id);\n        \n        // Note: The ClickUp API doesn't return checklists directly with task data\n        // We would need to make a separate call to get checklists for a task\n        // This would need to be implemented in the checklistsClient if API supports it\n        \n        // For now, return an empty array with proper typing\n        const checklists: Checklist[] = [];\n        \n        // In a real implementation, we might do something like:\n        // const checklists = await checklistsClient.getChecklistsForTask(task_id);\n        \n        return {\n          contents: [\n            {\n              uri: uri.toString(),\n              mimeType: 'application/json',\n              text: JSON.stringify({\n                task_id: task_id,\n                task_name: task.name,\n                checklists: checklists\n              }, null, 2),\n            },\n          ],\n        };\n      } catch (error: any) {\n        console.error('[ChecklistResources] Error fetching checklists:', error);\n        throw new Error(`Error fetching checklists: ${error.message}`);\n      }\n    }\n  );\n\n  // Register checklist items resource\n  server.resource(\n    'checklist-items',\n    new ResourceTemplate('clickup://checklist/{checklist_id}/items', { list: undefined }),\n    {\n      description: 'Get all items in a specific ClickUp checklist, including their names, assignees, and completion status.'\n    },\n    async (uri, params) => {\n      try {\n        const checklist_id = params.checklist_id as string;\n        \n        // For now, this is a placeholder as we'd need to implement a method\n        // to get all items for a checklist - we'll need to implement this endpoint\n        // or extract this data from the checklist details\n        \n        // Placeholder for response format\n        const checklistItems = {\n          checklist_id: checklist_id,\n          items: []\n        };\n        \n        return {\n          contents: [\n            {\n              uri: uri.toString(),\n              mimeType: 'application/json',\n              text: JSON.stringify(checklistItems, null, 2),\n            },\n          ],\n        };\n      } catch (error: any) {\n        console.error('[ChecklistResources] Error fetching checklist items:', error);\n        throw new Error(`Error fetching checklist items: ${error.message}`);\n      }\n    }\n  );\n\n  // Add some example static resources for discoverability\n  server.resource(\n    'example-task-checklists',\n    'clickup://task/86rkjvttt/checklist',\n    {\n      description: 'An example task checklists resource demonstrating the checklist data format.'\n    },\n    async (uri) => {\n      try {\n        const task_id = '86rkjvttt';\n        \n        // Get the task details\n        const task = await tasksClient.getTask(task_id);\n        \n        // Placeholder for checklists\n        const checklists: Checklist[] = [];\n        \n        return {\n          contents: [\n            {\n              uri: uri.toString(),\n              mimeType: 'application/json',\n              text: JSON.stringify({\n                task_id: task_id,\n                task_name: task.name,\n                checklists: checklists\n              }, null, 2),\n            },\n          ],\n        };\n      } catch (error: any) {\n        console.error('[ChecklistResources] Error fetching example checklists:', error);\n        throw new Error(`Error fetching example checklists: ${error.message}`);\n      }\n    }\n  );\n}\n"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "96782dfc71441f3e2482870ce3780a445c7ccc6b"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_1xg3uou5zd = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_1xg3uou5zd();
import { ResourceTemplate } from '@modelcontextprotocol/sdk/server/mcp.js';
import { createClickUpClient } from '../clickup-client/index.js';
import { createTasksClient } from '../clickup-client/tasks.js';
import { createChecklistsClient } from '../clickup-client/checklists.js';
// Create clients
const clickUpClient =
/* istanbul ignore next */
(cov_1xg3uou5zd().s[0]++, createClickUpClient());
const tasksClient =
/* istanbul ignore next */
(cov_1xg3uou5zd().s[1]++, createTasksClient(clickUpClient));
const checklistsClient =
/* istanbul ignore next */
(cov_1xg3uou5zd().s[2]++, createChecklistsClient(clickUpClient));
export function setupChecklistResources(server) {
  /* istanbul ignore next */
  cov_1xg3uou5zd().f[0]++;
  cov_1xg3uou5zd().s[3]++;
  // Register task checklists resource
  server.resource('task-checklists', new ResourceTemplate('clickup://task/{task_id}/checklist', {
    list: undefined
  }), {
    description: 'Get all checklists for a specific ClickUp task, including their names, items, and completion status.'
  }, async (uri, params) => {
    /* istanbul ignore next */
    cov_1xg3uou5zd().f[1]++;
    cov_1xg3uou5zd().s[4]++;
    try {
      const task_id =
      /* istanbul ignore next */
      (cov_1xg3uou5zd().s[5]++, params.task_id);
      // Get the task details
      const task =
      /* istanbul ignore next */
      (cov_1xg3uou5zd().s[6]++, await tasksClient.getTask(task_id));
      // Note: The ClickUp API doesn't return checklists directly with task data
      // We would need to make a separate call to get checklists for a task
      // This would need to be implemented in the checklistsClient if API supports it
      // For now, return an empty array with proper typing
      const checklists =
      /* istanbul ignore next */
      (cov_1xg3uou5zd().s[7]++, []);
      // In a real implementation, we might do something like:
      // const checklists = await checklistsClient.getChecklistsForTask(task_id);
      /* istanbul ignore next */
      cov_1xg3uou5zd().s[8]++;
      return {
        contents: [{
          uri: uri.toString(),
          mimeType: 'application/json',
          text: JSON.stringify({
            task_id: task_id,
            task_name: task.name,
            checklists: checklists
          }, null, 2)
        }]
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_1xg3uou5zd().s[9]++;
      console.error('[ChecklistResources] Error fetching checklists:', error);
      /* istanbul ignore next */
      cov_1xg3uou5zd().s[10]++;
      throw new Error(`Error fetching checklists: ${error.message}`);
    }
  });
  // Register checklist items resource
  /* istanbul ignore next */
  cov_1xg3uou5zd().s[11]++;
  server.resource('checklist-items', new ResourceTemplate('clickup://checklist/{checklist_id}/items', {
    list: undefined
  }), {
    description: 'Get all items in a specific ClickUp checklist, including their names, assignees, and completion status.'
  }, async (uri, params) => {
    /* istanbul ignore next */
    cov_1xg3uou5zd().f[2]++;
    cov_1xg3uou5zd().s[12]++;
    try {
      const checklist_id =
      /* istanbul ignore next */
      (cov_1xg3uou5zd().s[13]++, params.checklist_id);
      // For now, this is a placeholder as we'd need to implement a method
      // to get all items for a checklist - we'll need to implement this endpoint
      // or extract this data from the checklist details
      // Placeholder for response format
      const checklistItems =
      /* istanbul ignore next */
      (cov_1xg3uou5zd().s[14]++, {
        checklist_id: checklist_id,
        items: []
      });
      /* istanbul ignore next */
      cov_1xg3uou5zd().s[15]++;
      return {
        contents: [{
          uri: uri.toString(),
          mimeType: 'application/json',
          text: JSON.stringify(checklistItems, null, 2)
        }]
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_1xg3uou5zd().s[16]++;
      console.error('[ChecklistResources] Error fetching checklist items:', error);
      /* istanbul ignore next */
      cov_1xg3uou5zd().s[17]++;
      throw new Error(`Error fetching checklist items: ${error.message}`);
    }
  });
  // Add some example static resources for discoverability
  /* istanbul ignore next */
  cov_1xg3uou5zd().s[18]++;
  server.resource('example-task-checklists', 'clickup://task/86rkjvttt/checklist', {
    description: 'An example task checklists resource demonstrating the checklist data format.'
  }, async uri => {
    /* istanbul ignore next */
    cov_1xg3uou5zd().f[3]++;
    cov_1xg3uou5zd().s[19]++;
    try {
      const task_id =
      /* istanbul ignore next */
      (cov_1xg3uou5zd().s[20]++, '86rkjvttt');
      // Get the task details
      const task =
      /* istanbul ignore next */
      (cov_1xg3uou5zd().s[21]++, await tasksClient.getTask(task_id));
      // Placeholder for checklists
      const checklists =
      /* istanbul ignore next */
      (cov_1xg3uou5zd().s[22]++, []);
      /* istanbul ignore next */
      cov_1xg3uou5zd().s[23]++;
      return {
        contents: [{
          uri: uri.toString(),
          mimeType: 'application/json',
          text: JSON.stringify({
            task_id: task_id,
            task_name: task.name,
            checklists: checklists
          }, null, 2)
        }]
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_1xg3uou5zd().s[24]++;
      console.error('[ChecklistResources] Error fetching example checklists:', error);
      /* istanbul ignore next */
      cov_1xg3uou5zd().s[25]++;
      throw new Error(`Error fetching example checklists: ${error.message}`);
    }
  });
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
{"version":3,"names":["cov_x2k5pwmeq","actualCoverage","axios","DocsClient","constructor","client","f","s","getDocsFromWorkspace","workspaceId","params","apiToken","process","env","CLICKUP_API_TOKEN","url","headers","response","get","data","error","console","getDocPages","docId","contentFormat","b","max_page_depth","content_format","searchDocs","queryParams","doc_name","query","cursor","startsWith","spaceId","substring","space_id","createDocInList","listId","title","content","axiosInstance","getAxiosInstance","post","name","createDocInFolder","folderId","updateDoc","undefined","put","createDocsClient"],"sources":["/Users/peterkrzyzek/Development/clickup-mcp-server/src/clickup-client/docs.ts"],"sourcesContent":["import { ClickUpClient } from './index.js';\nimport axios from 'axios';\n\n// Updated Doc interface based on v3 API response\nexport interface Doc {\n  id: string;\n  name: string;\n  date_created: number;\n  date_updated: number;\n  parent?: {\n    id: string;\n    type: number;\n  };\n  public: boolean;\n  workspace_id: number;\n  creator: number;\n  deleted: boolean;\n  type: number;\n  content?: string;\n}\n\nexport interface GetDocsParams {\n  cursor?: string;\n  deleted?: boolean;\n  archived?: boolean;\n  limit?: number;\n}\n\nexport interface SearchDocsParams {\n  query: string;\n  cursor?: string;\n}\n\nexport class DocsClient {\n  private client: ClickUpClient;\n\n  constructor(client: ClickUpClient) {\n    this.client = client;\n  }\n\n  /**\n   * Get docs from a specific workspace\n   * @param workspaceId The ID of the workspace to get docs from\n   * @param params Optional parameters for filtering docs\n   * @returns A list of docs\n   */\n  async getDocsFromWorkspace(workspaceId: string, params?: GetDocsParams): Promise<{ docs: Doc[], next_cursor: string }> {\n    // Get the API token directly from the environment variable\n    const apiToken = process.env.CLICKUP_API_TOKEN;\n    \n    try {\n      const url = `https://api.clickup.com/api/v3/workspaces/${workspaceId}/docs`;\n      \n      // Use the exact same headers that worked in the successful request\n      const headers = {\n        'Authorization': apiToken,\n        'Accept': 'application/json'\n      };\n      \n      const response = await axios.get(url, {\n        headers,\n        params\n      });\n      \n      return response.data;\n    } catch (error) {\n      console.error('Error getting docs:', error);\n      throw error;\n    }\n  }\n\n\n  /**\n   * Get the pages of a doc\n   * @param workspaceId The ID of the workspace\n   * @param docId The ID of the doc\n   * @param contentFormat The format to return the content in (text/md or text/plain)\n   * @returns The pages of the doc\n   */\n  async getDocPages(workspaceId: string, docId: string, contentFormat: string = 'text/md'): Promise<any> {\n    // Get the API token directly from the environment variable\n    const apiToken = process.env.CLICKUP_API_TOKEN;\n    \n    try {\n      const url = `https://api.clickup.com/api/v3/workspaces/${workspaceId}/docs/${docId}/pages`;\n      \n      // Use the exact same parameters that worked in the successful request\n      const params = { \n        max_page_depth: -1,\n        content_format: contentFormat\n      };\n      \n      // Use the exact same headers that worked in the successful request\n      const headers = {\n        'Authorization': apiToken,\n        'Accept': 'application/json'\n      };\n      \n      const response = await axios.get(url, {\n        headers,\n        params\n      });\n      \n      return response.data;\n    } catch (error) {\n      console.error('Error getting doc pages:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Search for docs in a workspace\n   * @param workspaceId The ID of the workspace to search in\n   * @param params The search parameters\n   * @returns A list of docs matching the search query\n   */\n  async searchDocs(workspaceId: string, params: SearchDocsParams): Promise<{ docs: Doc[], next_cursor: string }> {\n    // Get the API token directly from the environment variable\n    const apiToken = process.env.CLICKUP_API_TOKEN;\n    \n    try {\n      // According to the ClickUp API documentation, the endpoint is:\n      // GET /api/v2/team/{team_id}/docs/search\n      // where team_id is the workspace ID\n      const url = `https://api.clickup.com/api/v2/team/${workspaceId}/docs/search`;\n      \n      // Use the exact same headers that worked in the successful request\n      const headers = {\n        'Authorization': apiToken,\n        'Accept': 'application/json'\n      };\n      \n      // According to the ClickUp API documentation, this should be a GET request\n      // with the parameters as query parameters\n      const queryParams: any = {\n        doc_name: params.query,\n        cursor: params.cursor\n      };\n      \n      // If the query is a space ID, use it as a space_id parameter\n      if (params.query.startsWith('space:')) {\n        const spaceId = params.query.substring(6);\n        queryParams.space_id = spaceId;\n        delete queryParams.doc_name;\n      }\n      \n      const response = await axios.get(url, {\n        headers,\n        params: queryParams\n      });\n      \n      return response.data;\n    } catch (error) {\n      console.error('Error searching docs:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Create a new doc in a list\n   * @param listId The ID of the list to create the doc in\n   * @param title The title of the doc\n   * @param content The content of the doc (HTML format)\n   * @returns The created doc\n   */\n  async createDocInList(listId: string, title: string, content: string): Promise<Doc> {\n    // Create a custom axios instance for v3 API\n    const axiosInstance = this.client.getAxiosInstance();\n    const response = await axiosInstance.post(`https://api.clickup.com/api/v3/lists/${listId}/docs`, { name: title, content });\n    return response.data;\n  }\n\n  /**\n   * Create a new doc in a folder\n   * @param folderId The ID of the folder to create the doc in\n   * @param title The title of the doc\n   * @param content The content of the doc (HTML format)\n   * @returns The created doc\n   */\n  async createDocInFolder(folderId: string, title: string, content: string): Promise<Doc> {\n    // Create a custom axios instance for v3 API\n    const axiosInstance = this.client.getAxiosInstance();\n    const response = await axiosInstance.post(`https://api.clickup.com/api/v3/folders/${folderId}/docs`, { name: title, content });\n    return response.data;\n  }\n\n  /**\n   * Update an existing doc\n   * @param docId The ID of the doc to update\n   * @param title The new title of the doc\n   * @param content The new content of the doc (HTML format)\n   * @returns The updated doc\n   */\n  async updateDoc(docId: string, title?: string, content?: string): Promise<Doc> {\n    const params: any = {};\n    if (title !== undefined) params.name = title;\n    if (content !== undefined) params.content = content;\n    \n    // Create a custom axios instance for v3 API\n    const axiosInstance = this.client.getAxiosInstance();\n    const response = await axiosInstance.put(`https://api.clickup.com/api/v3/docs/${docId}`, params);\n    return response.data;\n  }\n}\n\nexport const createDocsClient = (client: ClickUpClient): DocsClient => {\n  return new DocsClient(client);\n};\n"],"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","ignoreList":[]}
bedf40e8f6036da58d63f0dc3a4dbbd0
/* istanbul ignore next */
function cov_232tl6798q() {
  var path = "/Users/peterkrzyzek/Development/clickup-mcp-server/src/resources/folder-resources.ts";
  var hash = "520c8c43db2995b4cb49e5d8d24abe404a2d3326";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/peterkrzyzek/Development/clickup-mcp-server/src/resources/folder-resources.ts",
    statementMap: {
      "0": {
        start: {
          line: 5,
          column: 22
        },
        end: {
          line: 5,
          column: 43
        }
      },
      "1": {
        start: {
          line: 6,
          column: 22
        },
        end: {
          line: 6,
          column: 56
        }
      },
      "2": {
        start: {
          line: 9,
          column: 4
        },
        end: {
          line: 31,
          column: 7
        }
      },
      "3": {
        start: {
          line: 12,
          column: 8
        },
        end: {
          line: 30,
          column: 9
        }
      },
      "4": {
        start: {
          line: 13,
          column: 29
        },
        end: {
          line: 13,
          column: 44
        }
      },
      "5": {
        start: {
          line: 14,
          column: 12
        },
        end: {
          line: 14,
          column: 83
        }
      },
      "6": {
        start: {
          line: 15,
          column: 36
        },
        end: {
          line: 15,
          column: 85
        }
      },
      "7": {
        start: {
          line: 16,
          column: 12
        },
        end: {
          line: 16,
          column: 75
        }
      },
      "8": {
        start: {
          line: 17,
          column: 12
        },
        end: {
          line: 25,
          column: 14
        }
      },
      "9": {
        start: {
          line: 28,
          column: 12
        },
        end: {
          line: 28,
          column: 84
        }
      },
      "10": {
        start: {
          line: 29,
          column: 12
        },
        end: {
          line: 29,
          column: 78
        }
      },
      "11": {
        start: {
          line: 33,
          column: 4
        },
        end: {
          line: 61,
          column: 7
        }
      },
      "12": {
        start: {
          line: 36,
          column: 8
        },
        end: {
          line: 60,
          column: 9
        }
      },
      "13": {
        start: {
          line: 37,
          column: 30
        },
        end: {
          line: 37,
          column: 46
        }
      },
      "14": {
        start: {
          line: 38,
          column: 12
        },
        end: {
          line: 38,
          column: 73
        }
      },
      "15": {
        start: {
          line: 43,
          column: 27
        },
        end: {
          line: 46,
          column: 13
        }
      },
      "16": {
        start: {
          line: 47,
          column: 12
        },
        end: {
          line: 55,
          column: 14
        }
      },
      "17": {
        start: {
          line: 58,
          column: 12
        },
        end: {
          line: 58,
          column: 77
        }
      },
      "18": {
        start: {
          line: 59,
          column: 12
        },
        end: {
          line: 59,
          column: 71
        }
      },
      "19": {
        start: {
          line: 63,
          column: 4
        },
        end: {
          line: 85,
          column: 7
        }
      },
      "20": {
        start: {
          line: 66,
          column: 8
        },
        end: {
          line: 84,
          column: 9
        }
      },
      "21": {
        start: {
          line: 67,
          column: 30
        },
        end: {
          line: 67,
          column: 46
        }
      },
      "22": {
        start: {
          line: 68,
          column: 12
        },
        end: {
          line: 68,
          column: 83
        }
      },
      "23": {
        start: {
          line: 69,
          column: 26
        },
        end: {
          line: 69,
          column: 75
        }
      },
      "24": {
        start: {
          line: 70,
          column: 12
        },
        end: {
          line: 70,
          column: 63
        }
      },
      "25": {
        start: {
          line: 71,
          column: 12
        },
        end: {
          line: 79,
          column: 14
        }
      },
      "26": {
        start: {
          line: 82,
          column: 12
        },
        end: {
          line: 82,
          column: 83
        }
      },
      "27": {
        start: {
          line: 83,
          column: 12
        },
        end: {
          line: 83,
          column: 77
        }
      },
      "28": {
        start: {
          line: 87,
          column: 4
        },
        end: {
          line: 109,
          column: 7
        }
      },
      "29": {
        start: {
          line: 90,
          column: 8
        },
        end: {
          line: 108,
          column: 9
        }
      },
      "30": {
        start: {
          line: 91,
          column: 29
        },
        end: {
          line: 91,
          column: 42
        }
      },
      "31": {
        start: {
          line: 92,
          column: 12
        },
        end: {
          line: 92,
          column: 91
        }
      },
      "32": {
        start: {
          line: 93,
          column: 36
        },
        end: {
          line: 93,
          column: 85
        }
      },
      "33": {
        start: {
          line: 94,
          column: 12
        },
        end: {
          line: 94,
          column: 75
        }
      },
      "34": {
        start: {
          line: 95,
          column: 12
        },
        end: {
          line: 103,
          column: 14
        }
      },
      "35": {
        start: {
          line: 106,
          column: 12
        },
        end: {
          line: 106,
          column: 92
        }
      },
      "36": {
        start: {
          line: 107,
          column: 12
        },
        end: {
          line: 107,
          column: 86
        }
      },
      "37": {
        start: {
          line: 110,
          column: 4
        },
        end: {
          line: 135,
          column: 7
        }
      },
      "38": {
        start: {
          line: 113,
          column: 8
        },
        end: {
          line: 134,
          column: 9
        }
      },
      "39": {
        start: {
          line: 114,
          column: 30
        },
        end: {
          line: 114,
          column: 43
        }
      },
      "40": {
        start: {
          line: 115,
          column: 12
        },
        end: {
          line: 115,
          column: 81
        }
      },
      "41": {
        start: {
          line: 117,
          column: 27
        },
        end: {
          line: 120,
          column: 13
        }
      },
      "42": {
        start: {
          line: 121,
          column: 12
        },
        end: {
          line: 129,
          column: 14
        }
      },
      "43": {
        start: {
          line: 132,
          column: 12
        },
        end: {
          line: 132,
          column: 85
        }
      },
      "44": {
        start: {
          line: 133,
          column: 12
        },
        end: {
          line: 133,
          column: 79
        }
      },
      "45": {
        start: {
          line: 136,
          column: 4
        },
        end: {
          line: 158,
          column: 7
        }
      },
      "46": {
        start: {
          line: 139,
          column: 8
        },
        end: {
          line: 157,
          column: 9
        }
      },
      "47": {
        start: {
          line: 140,
          column: 30
        },
        end: {
          line: 140,
          column: 43
        }
      },
      "48": {
        start: {
          line: 141,
          column: 12
        },
        end: {
          line: 141,
          column: 91
        }
      },
      "49": {
        start: {
          line: 142,
          column: 26
        },
        end: {
          line: 142,
          column: 75
        }
      },
      "50": {
        start: {
          line: 143,
          column: 12
        },
        end: {
          line: 143,
          column: 63
        }
      },
      "51": {
        start: {
          line: 144,
          column: 12
        },
        end: {
          line: 152,
          column: 14
        }
      },
      "52": {
        start: {
          line: 155,
          column: 12
        },
        end: {
          line: 155,
          column: 91
        }
      },
      "53": {
        start: {
          line: 156,
          column: 12
        },
        end: {
          line: 156,
          column: 85
        }
      }
    },
    fnMap: {
      "0": {
        name: "setupFolderResources",
        decl: {
          start: {
            line: 7,
            column: 16
          },
          end: {
            line: 7,
            column: 36
          }
        },
        loc: {
          start: {
            line: 7,
            column: 45
          },
          end: {
            line: 159,
            column: 1
          }
        },
        line: 7
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 11,
            column: 7
          },
          end: {
            line: 11,
            column: 8
          }
        },
        loc: {
          start: {
            line: 11,
            column: 30
          },
          end: {
            line: 31,
            column: 5
          }
        },
        line: 11
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 35,
            column: 7
          },
          end: {
            line: 35,
            column: 8
          }
        },
        loc: {
          start: {
            line: 35,
            column: 30
          },
          end: {
            line: 61,
            column: 5
          }
        },
        line: 35
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 65,
            column: 7
          },
          end: {
            line: 65,
            column: 8
          }
        },
        loc: {
          start: {
            line: 65,
            column: 30
          },
          end: {
            line: 85,
            column: 5
          }
        },
        line: 65
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 89,
            column: 7
          },
          end: {
            line: 89,
            column: 8
          }
        },
        loc: {
          start: {
            line: 89,
            column: 22
          },
          end: {
            line: 109,
            column: 5
          }
        },
        line: 89
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 112,
            column: 7
          },
          end: {
            line: 112,
            column: 8
          }
        },
        loc: {
          start: {
            line: 112,
            column: 22
          },
          end: {
            line: 135,
            column: 5
          }
        },
        line: 112
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 138,
            column: 7
          },
          end: {
            line: 138,
            column: 8
          }
        },
        loc: {
          start: {
            line: 138,
            column: 22
          },
          end: {
            line: 158,
            column: 5
          }
        },
        line: 138
      }
    },
    branchMap: {},
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0
    },
    b: {},
    inputSourceMap: {
      file: "/Users/peterkrzyzek/Development/clickup-mcp-server/src/resources/folder-resources.ts",
      mappings: "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",
      names: [],
      sources: ["/Users/peterkrzyzek/Development/clickup-mcp-server/src/resources/folder-resources.ts"],
      sourcesContent: ["import { McpServer, ResourceTemplate } from '@modelcontextprotocol/sdk/server/mcp.js';\nimport { createClickUpClient } from '../clickup-client/index.js';\nimport { createFoldersClient } from '../clickup-client/folders.js';\n\n// Create clients\nconst clickUpClient = createClickUpClient();\nconst foldersClient = createFoldersClient(clickUpClient);\n\nexport function setupFolderResources(server: McpServer): void {\n  // Register space folders resource\n  server.resource(\n    'space-folders',\n    new ResourceTemplate('clickup://space/{space_id}/folders', { list: undefined }),\n    {\n      description: 'Get all folders in a ClickUp space, including their names, settings, and contained lists.'\n    },\n    async (uri, params) => {\n      try {\n        const space_id = params.space_id as string;\n        console.log('[FolderResources] Fetching folders for space:', space_id);\n        const foldersResponse = await foldersClient.getFoldersFromSpace(space_id);\n        console.log('[FolderResources] Got folders:', foldersResponse);\n        \n        return {\n          contents: [\n            {\n              uri: uri.toString(),\n              mimeType: 'application/json',\n              text: JSON.stringify(foldersResponse, null, 2),\n            },\n          ],\n        };\n      } catch (error: any) {\n        console.error('[FolderResources] Error fetching space folders:', error);\n        throw new Error(`Error fetching space folders: ${error.message}`);\n      }\n    }\n  );\n\n  // Register folder details resource\n  server.resource(\n    'folder-details',\n    new ResourceTemplate('clickup://folder/{folder_id}', { list: undefined }),\n    {\n      description: 'Get detailed information about a specific ClickUp folder, including its name, settings, and metadata.'\n    },\n    async (uri, params) => {\n      try {\n        const folder_id = params.folder_id as string;\n        console.log('[FolderResources] Fetching folder:', folder_id);\n        \n        // Note: The ClickUp API doesn't have a direct endpoint to get folder details\n        // We would need to implement this in the foldersClient if API supports it\n        // For now, return a placeholder response\n        \n        // Create a folder object with the ID and a message\n        const folder = {\n          id: folder_id,\n          message: \"Folder details endpoint not available in ClickUp API\"\n        };\n        \n        return {\n          contents: [\n            {\n              uri: uri.toString(),\n              mimeType: 'application/json',\n              text: JSON.stringify(folder, null, 2),\n            },\n          ],\n        };\n      } catch (error: any) {\n        console.error('[FolderResources] Error fetching folder:', error);\n        throw new Error(`Error fetching folder: ${error.message}`);\n      }\n    }\n  );\n\n  // Register folder lists resource\n  server.resource(\n    'folder-lists',\n    new ResourceTemplate('clickup://folder/{folder_id}/lists', { list: undefined }),\n    {\n      description: 'Get all lists contained within a specific ClickUp folder, including their names and settings.'\n    },\n    async (uri, params) => {\n      try {\n        const folder_id = params.folder_id as string;\n        console.log('[FolderResources] Fetching lists for folder:', folder_id);\n        const lists = await foldersClient.getListsFromFolder(folder_id);\n        console.log('[FolderResources] Got lists:', lists);\n        \n        return {\n          contents: [\n            {\n              uri: uri.toString(),\n              mimeType: 'application/json',\n              text: JSON.stringify(lists, null, 2),\n            },\n          ],\n        };\n      } catch (error: any) {\n        console.error('[FolderResources] Error fetching folder lists:', error);\n        throw new Error(`Error fetching folder lists: ${error.message}`);\n      }\n    }\n  );\n\n  // Add some example static resources for discoverability\n  server.resource(\n    'example-space-folders',\n    'clickup://space/90113637923/folders',\n    {\n      description: 'An example space folders resource demonstrating the folder list format.'\n    },\n    async (uri) => {\n      try {\n        const space_id = '90113637923';\n        console.log('[FolderResources] Fetching folders for example space:', space_id);\n        const foldersResponse = await foldersClient.getFoldersFromSpace(space_id);\n        console.log('[FolderResources] Got folders:', foldersResponse);\n        \n        return {\n          contents: [\n            {\n              uri: uri.toString(),\n              mimeType: 'application/json',\n              text: JSON.stringify(foldersResponse, null, 2),\n            },\n          ],\n        };\n      } catch (error: any) {\n        console.error('[FolderResources] Error fetching example space folders:', error);\n        throw new Error(`Error fetching example space folders: ${error.message}`);\n      }\n    }\n  );\n\n  server.resource(\n    'example-folder',\n    'clickup://folder/90115795569',\n    {\n      description: 'An example folder resource demonstrating the folder details format.'\n    },\n    async (uri) => {\n      try {\n        const folder_id = '90115795569';\n        console.log('[FolderResources] Fetching example folder:', folder_id);\n        \n        // Create a folder object with the ID and a message\n        const folder = {\n          id: folder_id,\n          message: \"Folder details endpoint not available in ClickUp API\"\n        };\n        \n        return {\n          contents: [\n            {\n              uri: uri.toString(),\n              mimeType: 'application/json',\n              text: JSON.stringify(folder, null, 2),\n            },\n          ],\n        };\n      } catch (error: any) {\n        console.error('[FolderResources] Error fetching example folder:', error);\n        throw new Error(`Error fetching example folder: ${error.message}`);\n      }\n    }\n  );\n\n  server.resource(\n    'example-folder-lists',\n    'clickup://folder/90115795569/lists',\n    {\n      description: 'An example folder lists resource demonstrating the list data format.'\n    },\n    async (uri) => {\n      try {\n        const folder_id = '90115795569';\n        console.log('[FolderResources] Fetching lists for example folder:', folder_id);\n        const lists = await foldersClient.getListsFromFolder(folder_id);\n        console.log('[FolderResources] Got lists:', lists);\n        \n        return {\n          contents: [\n            {\n              uri: uri.toString(),\n              mimeType: 'application/json',\n              text: JSON.stringify(lists, null, 2),\n            },\n          ],\n        };\n      } catch (error: any) {\n        console.error('[FolderResources] Error fetching example folder lists:', error);\n        throw new Error(`Error fetching example folder lists: ${error.message}`);\n      }\n    }\n  );\n}\n"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "520c8c43db2995b4cb49e5d8d24abe404a2d3326"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_232tl6798q = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_232tl6798q();
import { ResourceTemplate } from '@modelcontextprotocol/sdk/server/mcp.js';
import { createClickUpClient } from '../clickup-client/index.js';
import { createFoldersClient } from '../clickup-client/folders.js';
// Create clients
const clickUpClient =
/* istanbul ignore next */
(cov_232tl6798q().s[0]++, createClickUpClient());
const foldersClient =
/* istanbul ignore next */
(cov_232tl6798q().s[1]++, createFoldersClient(clickUpClient));
export function setupFolderResources(server) {
  /* istanbul ignore next */
  cov_232tl6798q().f[0]++;
  cov_232tl6798q().s[2]++;
  // Register space folders resource
  server.resource('space-folders', new ResourceTemplate('clickup://space/{space_id}/folders', {
    list: undefined
  }), {
    description: 'Get all folders in a ClickUp space, including their names, settings, and contained lists.'
  }, async (uri, params) => {
    /* istanbul ignore next */
    cov_232tl6798q().f[1]++;
    cov_232tl6798q().s[3]++;
    try {
      const space_id =
      /* istanbul ignore next */
      (cov_232tl6798q().s[4]++, params.space_id);
      /* istanbul ignore next */
      cov_232tl6798q().s[5]++;
      console.log('[FolderResources] Fetching folders for space:', space_id);
      const foldersResponse =
      /* istanbul ignore next */
      (cov_232tl6798q().s[6]++, await foldersClient.getFoldersFromSpace(space_id));
      /* istanbul ignore next */
      cov_232tl6798q().s[7]++;
      console.log('[FolderResources] Got folders:', foldersResponse);
      /* istanbul ignore next */
      cov_232tl6798q().s[8]++;
      return {
        contents: [{
          uri: uri.toString(),
          mimeType: 'application/json',
          text: JSON.stringify(foldersResponse, null, 2)
        }]
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_232tl6798q().s[9]++;
      console.error('[FolderResources] Error fetching space folders:', error);
      /* istanbul ignore next */
      cov_232tl6798q().s[10]++;
      throw new Error(`Error fetching space folders: ${error.message}`);
    }
  });
  // Register folder details resource
  /* istanbul ignore next */
  cov_232tl6798q().s[11]++;
  server.resource('folder-details', new ResourceTemplate('clickup://folder/{folder_id}', {
    list: undefined
  }), {
    description: 'Get detailed information about a specific ClickUp folder, including its name, settings, and metadata.'
  }, async (uri, params) => {
    /* istanbul ignore next */
    cov_232tl6798q().f[2]++;
    cov_232tl6798q().s[12]++;
    try {
      const folder_id =
      /* istanbul ignore next */
      (cov_232tl6798q().s[13]++, params.folder_id);
      /* istanbul ignore next */
      cov_232tl6798q().s[14]++;
      console.log('[FolderResources] Fetching folder:', folder_id);
      // Note: The ClickUp API doesn't have a direct endpoint to get folder details
      // We would need to implement this in the foldersClient if API supports it
      // For now, return a placeholder response
      // Create a folder object with the ID and a message
      const folder =
      /* istanbul ignore next */
      (cov_232tl6798q().s[15]++, {
        id: folder_id,
        message: "Folder details endpoint not available in ClickUp API"
      });
      /* istanbul ignore next */
      cov_232tl6798q().s[16]++;
      return {
        contents: [{
          uri: uri.toString(),
          mimeType: 'application/json',
          text: JSON.stringify(folder, null, 2)
        }]
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_232tl6798q().s[17]++;
      console.error('[FolderResources] Error fetching folder:', error);
      /* istanbul ignore next */
      cov_232tl6798q().s[18]++;
      throw new Error(`Error fetching folder: ${error.message}`);
    }
  });
  // Register folder lists resource
  /* istanbul ignore next */
  cov_232tl6798q().s[19]++;
  server.resource('folder-lists', new ResourceTemplate('clickup://folder/{folder_id}/lists', {
    list: undefined
  }), {
    description: 'Get all lists contained within a specific ClickUp folder, including their names and settings.'
  }, async (uri, params) => {
    /* istanbul ignore next */
    cov_232tl6798q().f[3]++;
    cov_232tl6798q().s[20]++;
    try {
      const folder_id =
      /* istanbul ignore next */
      (cov_232tl6798q().s[21]++, params.folder_id);
      /* istanbul ignore next */
      cov_232tl6798q().s[22]++;
      console.log('[FolderResources] Fetching lists for folder:', folder_id);
      const lists =
      /* istanbul ignore next */
      (cov_232tl6798q().s[23]++, await foldersClient.getListsFromFolder(folder_id));
      /* istanbul ignore next */
      cov_232tl6798q().s[24]++;
      console.log('[FolderResources] Got lists:', lists);
      /* istanbul ignore next */
      cov_232tl6798q().s[25]++;
      return {
        contents: [{
          uri: uri.toString(),
          mimeType: 'application/json',
          text: JSON.stringify(lists, null, 2)
        }]
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_232tl6798q().s[26]++;
      console.error('[FolderResources] Error fetching folder lists:', error);
      /* istanbul ignore next */
      cov_232tl6798q().s[27]++;
      throw new Error(`Error fetching folder lists: ${error.message}`);
    }
  });
  // Add some example static resources for discoverability
  /* istanbul ignore next */
  cov_232tl6798q().s[28]++;
  server.resource('example-space-folders', 'clickup://space/90113637923/folders', {
    description: 'An example space folders resource demonstrating the folder list format.'
  }, async uri => {
    /* istanbul ignore next */
    cov_232tl6798q().f[4]++;
    cov_232tl6798q().s[29]++;
    try {
      const space_id =
      /* istanbul ignore next */
      (cov_232tl6798q().s[30]++, '90113637923');
      /* istanbul ignore next */
      cov_232tl6798q().s[31]++;
      console.log('[FolderResources] Fetching folders for example space:', space_id);
      const foldersResponse =
      /* istanbul ignore next */
      (cov_232tl6798q().s[32]++, await foldersClient.getFoldersFromSpace(space_id));
      /* istanbul ignore next */
      cov_232tl6798q().s[33]++;
      console.log('[FolderResources] Got folders:', foldersResponse);
      /* istanbul ignore next */
      cov_232tl6798q().s[34]++;
      return {
        contents: [{
          uri: uri.toString(),
          mimeType: 'application/json',
          text: JSON.stringify(foldersResponse, null, 2)
        }]
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_232tl6798q().s[35]++;
      console.error('[FolderResources] Error fetching example space folders:', error);
      /* istanbul ignore next */
      cov_232tl6798q().s[36]++;
      throw new Error(`Error fetching example space folders: ${error.message}`);
    }
  });
  /* istanbul ignore next */
  cov_232tl6798q().s[37]++;
  server.resource('example-folder', 'clickup://folder/90115795569', {
    description: 'An example folder resource demonstrating the folder details format.'
  }, async uri => {
    /* istanbul ignore next */
    cov_232tl6798q().f[5]++;
    cov_232tl6798q().s[38]++;
    try {
      const folder_id =
      /* istanbul ignore next */
      (cov_232tl6798q().s[39]++, '90115795569');
      /* istanbul ignore next */
      cov_232tl6798q().s[40]++;
      console.log('[FolderResources] Fetching example folder:', folder_id);
      // Create a folder object with the ID and a message
      const folder =
      /* istanbul ignore next */
      (cov_232tl6798q().s[41]++, {
        id: folder_id,
        message: "Folder details endpoint not available in ClickUp API"
      });
      /* istanbul ignore next */
      cov_232tl6798q().s[42]++;
      return {
        contents: [{
          uri: uri.toString(),
          mimeType: 'application/json',
          text: JSON.stringify(folder, null, 2)
        }]
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_232tl6798q().s[43]++;
      console.error('[FolderResources] Error fetching example folder:', error);
      /* istanbul ignore next */
      cov_232tl6798q().s[44]++;
      throw new Error(`Error fetching example folder: ${error.message}`);
    }
  });
  /* istanbul ignore next */
  cov_232tl6798q().s[45]++;
  server.resource('example-folder-lists', 'clickup://folder/90115795569/lists', {
    description: 'An example folder lists resource demonstrating the list data format.'
  }, async uri => {
    /* istanbul ignore next */
    cov_232tl6798q().f[6]++;
    cov_232tl6798q().s[46]++;
    try {
      const folder_id =
      /* istanbul ignore next */
      (cov_232tl6798q().s[47]++, '90115795569');
      /* istanbul ignore next */
      cov_232tl6798q().s[48]++;
      console.log('[FolderResources] Fetching lists for example folder:', folder_id);
      const lists =
      /* istanbul ignore next */
      (cov_232tl6798q().s[49]++, await foldersClient.getListsFromFolder(folder_id));
      /* istanbul ignore next */
      cov_232tl6798q().s[50]++;
      console.log('[FolderResources] Got lists:', lists);
      /* istanbul ignore next */
      cov_232tl6798q().s[51]++;
      return {
        contents: [{
          uri: uri.toString(),
          mimeType: 'application/json',
          text: JSON.stringify(lists, null, 2)
        }]
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_232tl6798q().s[52]++;
      console.error('[FolderResources] Error fetching example folder lists:', error);
      /* istanbul ignore next */
      cov_232tl6798q().s[53]++;
      throw new Error(`Error fetching example folder lists: ${error.message}`);
    }
  });
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
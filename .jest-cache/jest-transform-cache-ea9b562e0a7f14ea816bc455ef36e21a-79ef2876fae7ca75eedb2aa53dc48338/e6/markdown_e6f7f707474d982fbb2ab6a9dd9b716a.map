{"version":3,"names":["cov_15os8cs0qs","actualCoverage","marked_1","s","require","turndown_1","__importDefault","marked","setOptions","gfm","breaks","turndownService","default","headingStyle","codeBlockStyle","fence","emDelimiter","strongDelimiter","linkStyle","linkReferenceStyle","addRule","filter","replacement","content","f","markdownToHtml","markdown","b","result","parse","error","console","warn","exports","htmlToMarkdown","html","turndown","replace","markdownToPlainText","htmlResult","trim","isMarkdown","markdownPatterns","some","pattern","test","isHtml","formatContent","targetFormat","isCurrentlyHtml","isCurrentlyMarkdown","prepareContentForClickUp","description","plainText","text_content","processClickUpResponse","response","processed","description_markdown","comment_text","comment","Array","isArray","htmlContent","map","block","text","join","comment_markdown"],"sources":["/Users/peterkrzyzek/Development/clickup-mcp-server/src/utils/markdown.ts"],"sourcesContent":["import { marked } from 'marked';\nimport TurndownService from 'turndown';\n\n/**\n * Markdown processing utilities for ClickUp content\n * Handles conversion between markdown, HTML, and plain text formats\n */\n\n// Configure marked for ClickUp-compatible HTML output\nmarked.setOptions({\n  gfm: true, // GitHub Flavored Markdown\n  breaks: true, // Convert line breaks to <br>\n});\n\n// Configure Turndown for ClickUp HTML to markdown conversion\nconst turndownService = new TurndownService({\n  headingStyle: 'atx', // Use # for headers\n  codeBlockStyle: 'fenced', // Use ``` for code blocks\n  fence: '```', // Use ``` for code fences\n  emDelimiter: '*', // Use * for emphasis\n  strongDelimiter: '**', // Use ** for strong\n  linkStyle: 'inlined', // Use [text](url) for links\n  linkReferenceStyle: 'full', // Use full reference links\n});\n\n// Add custom rules for ClickUp-specific elements\nturndownService.addRule('strikethrough', {\n  filter: ['del', 's'],\n  replacement: (content) => `~~${content}~~`\n});\n\nturndownService.addRule('underline', {\n  filter: 'u',\n  replacement: (content) => `<u>${content}</u>` // Keep underline as HTML since markdown doesn't support it\n});\n\nturndownService.addRule('highlight', {\n  filter: 'mark',\n  replacement: (content) => `==${content}==` // Use highlight syntax\n});\n\n/**\n * Convert markdown to HTML for ClickUp API submission\n * @param markdown The markdown content to convert\n * @returns HTML string suitable for ClickUp API\n */\nexport function markdownToHtml(markdown: string): string {\n  if (!markdown || typeof markdown !== 'string') {\n    return '';\n  }\n  \n  try {\n    const result = marked.parse(markdown);\n    return typeof result === 'string' ? result : '';\n  } catch (error) {\n    console.warn('Failed to parse markdown, returning as plain text:', error);\n    return markdown;\n  }\n}\n\n/**\n * Convert HTML to markdown for display/editing\n * @param html The HTML content to convert\n * @returns Markdown string\n */\nexport function htmlToMarkdown(html: string): string {\n  if (!html || typeof html !== 'string') {\n    return '';\n  }\n  \n  try {\n    return turndownService.turndown(html);\n  } catch (error) {\n    console.warn('Failed to convert HTML to markdown, returning as plain text:', error);\n    // Strip HTML tags as fallback\n    return html.replace(/<[^>]*>/g, '');\n  }\n}\n\n/**\n * Convert markdown to plain text by stripping formatting\n * @param markdown The markdown content to convert\n * @returns Plain text string\n */\nexport function markdownToPlainText(markdown: string): string {\n  if (!markdown || typeof markdown !== 'string') {\n    return '';\n  }\n  \n  try {\n    // First convert to HTML, then strip tags\n    const htmlResult = marked.parse(markdown);\n    const html = typeof htmlResult === 'string' ? htmlResult : '';\n    return html.replace(/<[^>]*>/g, '').replace(/\\n\\s*\\n/g, '\\n').trim();\n  } catch (error) {\n    console.warn('Failed to convert markdown to plain text:', error);\n    // Fallback: basic markdown stripping\n    return markdown\n      .replace(/#{1,6}\\s+/g, '') // Remove headers\n      .replace(/\\*\\*(.*?)\\*\\*/g, '$1') // Remove bold\n      .replace(/\\*(.*?)\\*/g, '$1') // Remove italic\n      .replace(/`(.*?)`/g, '$1') // Remove inline code\n      .replace(/```[\\s\\S]*?```/g, '') // Remove code blocks\n      .replace(/\\[([^\\]]+)\\]\\([^)]+\\)/g, '$1') // Convert links to text\n      .replace(/!\\[([^\\]]*)\\]\\([^)]+\\)/g, '$1') // Convert images to alt text\n      .trim();\n  }\n}\n\n/**\n * Detect if content contains markdown formatting\n * @param content The content to check\n * @returns True if content appears to contain markdown\n */\nexport function isMarkdown(content: string): boolean {\n  if (!content || typeof content !== 'string') {\n    return false;\n  }\n  \n  // Check for common markdown patterns\n  const markdownPatterns = [\n    /#{1,6}\\s+/, // Headers\n    /\\*\\*.*?\\*\\*/, // Bold\n    /\\*.*?\\*/, // Italic\n    /`.*?`/, // Inline code\n    /```[\\s\\S]*?```/, // Code blocks\n    /\\[.*?\\]\\(.*?\\)/, // Links\n    /!\\[.*?\\]\\(.*?\\)/, // Images\n    /^\\s*[-*+]\\s+/m, // Unordered lists\n    /^\\s*\\d+\\.\\s+/m, // Ordered lists\n    /^\\s*>\\s+/m, // Blockquotes\n    /~~.*?~~/, // Strikethrough\n    /==[^=]+==/, // Highlight\n  ];\n  \n  return markdownPatterns.some(pattern => pattern.test(content));\n}\n\n/**\n * Detect if content contains HTML formatting\n * @param content The content to check\n * @returns True if content appears to contain HTML\n */\nexport function isHtml(content: string): boolean {\n  if (!content || typeof content !== 'string') {\n    return false;\n  }\n  \n  // Check for HTML tags\n  return /<[^>]+>/g.test(content);\n}\n\n/**\n * Smart content formatter that detects format and converts appropriately\n * @param content The content to format\n * @param targetFormat The desired output format\n * @returns Formatted content\n */\nexport function formatContent(\n  content: string, \n  targetFormat: 'html' | 'markdown' | 'plain'\n): string {\n  if (!content || typeof content !== 'string') {\n    return '';\n  }\n  \n  // Detect current format\n  const isCurrentlyHtml = isHtml(content);\n  const isCurrentlyMarkdown = !isCurrentlyHtml && isMarkdown(content);\n  \n  switch (targetFormat) {\n    case 'html':\n      if (isCurrentlyHtml) return content;\n      if (isCurrentlyMarkdown) return markdownToHtml(content);\n      return content; // Plain text, return as-is\n      \n    case 'markdown':\n      if (isCurrentlyMarkdown) return content;\n      if (isCurrentlyHtml) return htmlToMarkdown(content);\n      return content; // Plain text, return as-is\n      \n    case 'plain':\n      if (isCurrentlyMarkdown) return markdownToPlainText(content);\n      if (isCurrentlyHtml) return htmlToMarkdown(content).replace(/[*_`#\\[\\]()]/g, '');\n      return content; // Already plain text\n      \n    default:\n      return content;\n  }\n}\n\n/**\n * Prepare content for ClickUp API submission\n * Converts markdown to HTML and provides both formats\n * @param content The content to prepare (markdown or plain text)\n * @returns Object with both HTML and plain text versions\n */\nexport function prepareContentForClickUp(content: string): {\n  description: string; // HTML version for rich text\n  text_content?: string; // Plain text version for compatibility\n} {\n  if (!content || typeof content !== 'string') {\n    return { description: '' };\n  }\n  \n  // If content looks like markdown, convert to HTML\n  if (isMarkdown(content)) {\n    const html = markdownToHtml(content);\n    const plainText = markdownToPlainText(content);\n    \n    return {\n      description: html,\n      text_content: plainText\n    };\n  }\n  \n  // If content is already HTML, use as-is\n  if (isHtml(content)) {\n    const plainText = htmlToMarkdown(content);\n    \n    return {\n      description: content,\n      text_content: markdownToPlainText(plainText)\n    };\n  }\n  \n  // Plain text content\n  return {\n    description: content,\n    text_content: content\n  };\n}\n\n/**\n * Process ClickUp response content for display\n * Converts HTML to markdown for better readability\n * @param response ClickUp API response with description/text_content\n * @returns Processed content with markdown formatting\n */\nexport function processClickUpResponse(response: any): any {\n  if (!response || typeof response !== 'object') {\n    return response;\n  }\n  \n  const processed = { ...response };\n  \n  // Process description field\n  if (processed.description && isHtml(processed.description)) {\n    processed.description_markdown = htmlToMarkdown(processed.description);\n  }\n  \n  // Process comment fields\n  if (processed.comment_text && processed.comment && Array.isArray(processed.comment)) {\n    // ClickUp comments come as rich text blocks, try to convert to markdown\n    try {\n      const htmlContent = processed.comment.map((block: any) => {\n        if (typeof block === 'string') return block;\n        if (block.text) return block.text;\n        return '';\n      }).join('');\n      \n      if (htmlContent && isHtml(htmlContent)) {\n        processed.comment_markdown = htmlToMarkdown(htmlContent);\n      }\n    } catch (error) {\n      console.warn('Failed to process comment blocks:', error);\n    }\n  }\n  \n  return processed;\n}\n"],"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","ignoreList":[]}
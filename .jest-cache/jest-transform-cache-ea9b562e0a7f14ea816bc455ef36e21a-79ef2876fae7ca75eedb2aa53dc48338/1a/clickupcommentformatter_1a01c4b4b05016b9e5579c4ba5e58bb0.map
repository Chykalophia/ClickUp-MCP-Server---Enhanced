{"version":3,"names":["cov_1uyad1546v","actualCoverage","markdownToClickUpComment","markdown","f","s","b","comment","text","attributes","blocks","parts","split","i","length","part","startsWith","endsWith","slice","push","bold","italic","underline","strikethrough","code","match","linkText","url","link","trim","clickUpCommentToMarkdown","commentFormat","Array","isArray","map","block","attrs","join","createPlainTextComment","createBoldComment","createItalicComment","createCodeComment","createLinkComment","combineCommentBlocks","parseMarkdownToClickUpComment","lines","line","level","headerText","replace","listText","converted","quoteText","codeLines","markdownToPlainText","plainText","cleanDuplicateCommentText","commentText","markdownPatterns","pattern","matches","RegExp","source","firstMatch","indexOf","lastMatch","lastIndexOf","splitPoint","substring","totalLines","Math","floor","beforeSplit","afterSplit","includes","midPoint","firstHalf","secondHalf","firstLines","secondLines","similarity","min","cleanClickUpCommentResponse","cleaned","comment_text","comment_markdown","ensureCodeBlockSeparation","processedBlocks","currentBlock","previousBlock","isCodeBlock","previousText","endsWithNewline","updatedPreviousBlock","prepareCommentForClickUp","content","hasMarkdown","test","formatted","processCommentBlocks","normalizedBlocks"],"sources":["/Users/peterkrzyzek/Development/clickup-mcp-server/src/utils/clickup-comment-formatter.ts"],"sourcesContent":["/**\n * ClickUp Comment Formatting Utility\n * Handles ClickUp's specific comment format structure with text blocks and attributes\n * Based on: https://developer.clickup.com/docs/comment-formatting\n */\n\nexport interface ClickUpCommentBlock {\n  text: string;\n  attributes?: {\n    bold?: boolean;\n    italic?: boolean;\n    underline?: boolean;\n    strikethrough?: boolean;\n    code?: boolean;\n    color?: string;\n    background_color?: string;\n    link?: {\n      url: string;\n    };\n    'code-block'?: {\n      'code-block': string;\n    };\n  };\n}\n\nexport interface ClickUpCommentFormat {\n  comment: ClickUpCommentBlock[];\n}\n\n/**\n * Convert markdown text to ClickUp's structured comment format\n * @param markdown The markdown text to convert\n * @returns ClickUp comment format structure\n */\nexport function markdownToClickUpComment(markdown: string): ClickUpCommentFormat {\n  if (!markdown || typeof markdown !== 'string') {\n    return { comment: [{ text: '', attributes: {} }] };\n  }\n\n  const blocks: ClickUpCommentBlock[] = [];\n  \n  // Improved regex pattern that properly captures links\n  const parts = markdown.split(/(\\*\\*[^*]+\\*\\*|\\*[^*]+\\*|`[^`]+`|~~[^~]+~~|__[^_]+__|_[^_]+_|\\[([^\\]]+)\\]\\(([^)]+)\\))/g);\n  \n  for (let i = 0; i < parts.length; i++) {\n    const part = parts[i];\n    if (!part) continue;\n    \n    // Bold text: **text**\n    if (part.startsWith('**') && part.endsWith('**')) {\n      const text = part.slice(2, -2);\n      blocks.push({\n        text,\n        attributes: { bold: true }\n      });\n    }\n    // Italic text: *text* or _text_\n    else if ((part.startsWith('*') && part.endsWith('*') && !part.startsWith('**')) ||\n             (part.startsWith('_') && part.endsWith('_') && !part.startsWith('__'))) {\n      const text = part.slice(1, -1);\n      blocks.push({\n        text,\n        attributes: { italic: true }\n      });\n    }\n    // Underline: __text__\n    else if (part.startsWith('__') && part.endsWith('__')) {\n      const text = part.slice(2, -2);\n      blocks.push({\n        text,\n        attributes: { underline: true }\n      });\n    }\n    // Strikethrough: ~~text~~\n    else if (part.startsWith('~~') && part.endsWith('~~')) {\n      const text = part.slice(2, -2);\n      blocks.push({\n        text,\n        attributes: { strikethrough: true }\n      });\n    }\n    // Inline code: `text`\n    else if (part.startsWith('`') && part.endsWith('`')) {\n      const text = part.slice(1, -1);\n      blocks.push({\n        text,\n        attributes: { code: true }\n      });\n    }\n    // Links: [text](url) - check if this is a link match\n    else if (part.match(/^\\[([^\\]]+)\\]\\(([^)]+)\\)$/)) {\n      const match = part.match(/^\\[([^\\]]+)\\]\\(([^)]+)\\)$/);\n      if (match) {\n        const [, linkText, url] = match;\n        blocks.push({\n          text: linkText,\n          attributes: { link: { url } }\n        });\n      }\n    }\n    // Check if this is a captured group from link regex (skip these)\n    else if (i > 0 && parts[i-1] && parts[i-1].match(/^\\[([^\\]]+)\\]\\(([^)]+)\\)$/)) {\n      // This is a captured group from the link regex, skip it\n      continue;\n    }\n    // Plain text\n    else {\n      if (part.trim()) {\n        blocks.push({\n          text: part,\n          attributes: {}\n        });\n      }\n    }\n  }\n\n  // If no blocks were created, add the original text as plain text\n  if (blocks.length === 0) {\n    blocks.push({\n      text: markdown,\n      attributes: {}\n    });\n  }\n\n  return { comment: blocks };\n}\n\n/**\n * Convert ClickUp comment format back to markdown\n * @param commentFormat ClickUp comment format structure\n * @returns Markdown string\n */\nexport function clickUpCommentToMarkdown(commentFormat: ClickUpCommentFormat): string {\n  if (!commentFormat?.comment || !Array.isArray(commentFormat.comment)) {\n    return '';\n  }\n\n  return commentFormat.comment.map(block => {\n    let text = block.text || '';\n    const attrs = block.attributes || {};\n\n    // Apply formatting based on attributes\n    if (attrs.bold) {\n      text = `**${text}**`;\n    }\n    if (attrs.italic) {\n      text = `*${text}*`;\n    }\n    if (attrs.underline) {\n      text = `__${text}__`;\n    }\n    if (attrs.strikethrough) {\n      text = `~~${text}~~`;\n    }\n    if (attrs.code) {\n      text = `\\`${text}\\``;\n    }\n    if (attrs.link) {\n      text = `[${text}](${attrs.link.url})`;\n    }\n\n    return text;\n  }).join('');\n}\n\n/**\n * Create a simple plain text comment in ClickUp format\n * @param text Plain text content\n * @returns ClickUp comment format structure\n */\nexport function createPlainTextComment(text: string): ClickUpCommentFormat {\n  return {\n    comment: [{\n      text: text || '',\n      attributes: {}\n    }]\n  };\n}\n\n/**\n * Create a bold text comment in ClickUp format\n * @param text Text to make bold\n * @returns ClickUp comment format structure\n */\nexport function createBoldComment(text: string): ClickUpCommentFormat {\n  return {\n    comment: [{\n      text: text || '',\n      attributes: { bold: true }\n    }]\n  };\n}\n\n/**\n * Create an italic text comment in ClickUp format\n * @param text Text to make italic\n * @returns ClickUp comment format structure\n */\nexport function createItalicComment(text: string): ClickUpCommentFormat {\n  return {\n    comment: [{\n      text: text || '',\n      attributes: { italic: true }\n    }]\n  };\n}\n\n/**\n * Create a code text comment in ClickUp format\n * @param text Text to format as code\n * @returns ClickUp comment format structure\n */\nexport function createCodeComment(text: string): ClickUpCommentFormat {\n  return {\n    comment: [{\n      text: text || '',\n      attributes: { code: true }\n    }]\n  };\n}\n\n/**\n * Create a link comment in ClickUp format\n * @param text Link text\n * @param url Link URL\n * @returns ClickUp comment format structure\n */\nexport function createLinkComment(text: string, url: string): ClickUpCommentFormat {\n  return {\n    comment: [{\n      text: text || '',\n      attributes: { link: { url } }\n    }]\n  };\n}\n\n/**\n * Combine multiple comment blocks into a single comment\n * @param blocks Array of comment blocks\n * @returns ClickUp comment format structure\n */\nexport function combineCommentBlocks(blocks: ClickUpCommentBlock[]): ClickUpCommentFormat {\n  return { comment: blocks };\n}\n\n/**\n * Parse complex markdown and convert to ClickUp comment format\n * This handles more complex scenarios like mixed formatting\n * @param markdown Markdown text\n * @returns ClickUp comment format structure\n */\nexport function parseMarkdownToClickUpComment(markdown: string): ClickUpCommentFormat {\n  if (!markdown || typeof markdown !== 'string') {\n    return createPlainTextComment('');\n  }\n\n  // Handle line breaks and paragraphs\n  const lines = markdown.split('\\n');\n  const blocks: ClickUpCommentBlock[] = [];\n\n  for (let i = 0; i < lines.length; i++) {\n    const line = lines[i].trim();\n    \n    if (!line) {\n      // Add line break for empty lines (except at the end)\n      if (i < lines.length - 1) {\n        blocks.push({ text: '\\n', attributes: {} });\n      }\n      continue;\n    }\n\n    // Handle headers\n    if (line.startsWith('#')) {\n      const level = line.match(/^#+/)?.[0].length || 1;\n      const headerText = line.replace(/^#+\\s*/, '');\n      blocks.push({\n        text: headerText,\n        attributes: { bold: true } // ClickUp doesn't have header formatting, use bold\n      });\n      blocks.push({ text: '\\n', attributes: {} });\n      continue;\n    }\n\n    // Handle list items\n    if (line.match(/^[-*+]\\s+/) || line.match(/^\\d+\\.\\s+/)) {\n      const listText = line.replace(/^[-*+\\d.]\\s*/, 'â€¢ ');\n      const converted = markdownToClickUpComment(listText);\n      blocks.push(...converted.comment);\n      blocks.push({ text: '\\n', attributes: {} });\n      continue;\n    }\n\n    // Handle blockquotes\n    if (line.startsWith('>')) {\n      const quoteText = line.replace(/^>\\s*/, '');\n      blocks.push({ text: '> ', attributes: {} });\n      const converted = markdownToClickUpComment(quoteText);\n      blocks.push(...converted.comment);\n      blocks.push({ text: '\\n', attributes: {} });\n      continue;\n    }\n\n    // Handle code blocks\n    if (line.startsWith('```')) {\n      // For code blocks, we'll treat the content as code\n      const codeLines = [];\n      i++; // Skip the opening ```\n      while (i < lines.length && !lines[i].trim().startsWith('```')) {\n        codeLines.push(lines[i]);\n        i++;\n      }\n      \n      if (codeLines.length > 0) {\n        blocks.push({\n          text: codeLines.join('\\n'),\n          attributes: { code: true }\n        });\n        blocks.push({ text: '\\n', attributes: {} });\n      }\n      continue;\n    }\n\n    // Handle regular text with inline formatting\n    const converted = markdownToClickUpComment(line);\n    blocks.push(...converted.comment);\n    \n    // Add line break if not the last line\n    if (i < lines.length - 1) {\n      blocks.push({ text: '\\n', attributes: {} });\n    }\n  }\n\n  return { comment: blocks };\n}\n\n/**\n * Convert markdown text to plain text by stripping all markdown formatting\n * @param markdown The markdown text to convert\n * @returns Plain text without any markdown formatting\n */\nexport function markdownToPlainText(markdown: string): string {\n  if (!markdown || typeof markdown !== 'string') {\n    return '';\n  }\n\n  let plainText = markdown;\n\n  // Remove headers\n  plainText = plainText.replace(/^#{1,6}\\s+/gm, '');\n  \n  // Remove bold and italic\n  plainText = plainText.replace(/\\*\\*([^*]+)\\*\\*/g, '$1');\n  plainText = plainText.replace(/\\*([^*]+)\\*/g, '$1');\n  plainText = plainText.replace(/__([^_]+)__/g, '$1');\n  plainText = plainText.replace(/_([^_]+)_/g, '$1');\n  \n  // Remove strikethrough\n  plainText = plainText.replace(/~~([^~]+)~~/g, '$1');\n  \n  // Remove inline code\n  plainText = plainText.replace(/`([^`]+)`/g, '$1');\n  \n  // Remove code blocks\n  plainText = plainText.replace(/```[\\s\\S]*?```/g, (match) => {\n    // Extract just the code content, remove the ``` markers\n    const lines = match.split('\\n');\n    return lines.slice(1, -1).join('\\n');\n  });\n  \n  // Remove links, keep just the text\n  plainText = plainText.replace(/\\[([^\\]]+)\\]\\([^)]+\\)/g, '$1');\n  \n  // Remove blockquotes\n  plainText = plainText.replace(/^>\\s*/gm, '');\n  \n  // Convert list items to simple bullets\n  plainText = plainText.replace(/^[-*+]\\s+/gm, 'â€¢ ');\n  plainText = plainText.replace(/^\\d+\\.\\s+/gm, 'â€¢ ');\n  \n  // Clean up extra whitespace\n  plainText = plainText.replace(/\\n{3,}/g, '\\n\\n');\n  plainText = plainText.trim();\n  \n  return plainText;\n}\n\n/**\n * Clean up duplicate content in ClickUp's comment_text field\n * ClickUp sometimes duplicates content when processing structured comments\n * @param commentText The comment_text field from ClickUp API response\n * @returns Cleaned comment text without duplication\n */\nexport function cleanDuplicateCommentText(commentText: string): string {\n  if (!commentText || typeof commentText !== 'string') {\n    return commentText;\n  }\n\n  // ClickUp often appends the original markdown at the end after the processed text\n  // Look for patterns where the same content appears twice\n  \n  // First, try to find if there's a clear markdown pattern at the end\n  // ClickUp typically appends content that starts with markdown headers or formatting\n  const markdownPatterns = [\n    /ðŸŽ‰ \\*\\*.*?\\*\\*/,  // Emoji + bold pattern\n    /ðŸ”§ \\*\\*.*?\\*\\*/,  // Emoji + bold pattern\n    /ðŸŽ¯ \\*\\*.*?\\*\\*/,  // Emoji + bold pattern\n    /### .*?\\*\\*/,     // Header + bold pattern\n    /## .*?\\*\\*/,      // Header + bold pattern\n    /# .*?\\*\\*/        // Header + bold pattern\n  ];\n  \n  for (const pattern of markdownPatterns) {\n    const matches = commentText.match(new RegExp(pattern.source, 'g'));\n    if (matches && matches.length >= 2) {\n      // Found duplicate pattern, try to find the split point\n      const firstMatch = commentText.indexOf(matches[0]);\n      const lastMatch = commentText.lastIndexOf(matches[matches.length - 1]);\n      \n      if (firstMatch !== lastMatch) {\n        // There are multiple occurrences, likely a duplication\n        // Keep everything up to the last occurrence of the first match\n        const splitPoint = commentText.indexOf(matches[0], firstMatch + 1);\n        if (splitPoint > 0) {\n          return commentText.substring(0, splitPoint).trim();\n        }\n      }\n    }\n  }\n  \n  // Alternative approach: look for the pattern where content is repeated\n  // Split by common separators and look for duplicates\n  const lines = commentText.split('\\n');\n  const totalLines = lines.length;\n  \n  if (totalLines > 6) {\n    // Look for a point where content starts repeating\n    for (let i = Math.floor(totalLines / 3); i < Math.floor(totalLines * 2 / 3); i++) {\n      const beforeSplit = lines.slice(0, i).join('\\n');\n      const afterSplit = lines.slice(i).join('\\n');\n      \n      // Check if the after split contains similar content to before split\n      if (afterSplit.length > beforeSplit.length * 0.5 && \n          beforeSplit.length > 50 && \n          afterSplit.includes(lines[0]) && \n          afterSplit.includes(lines[1])) {\n        return beforeSplit.trim();\n      }\n    }\n  }\n  \n  // Last resort: check for exact duplicates by splitting in half\n  const length = commentText.length;\n  if (length > 100) {\n    const midPoint = Math.floor(length / 2);\n    const firstHalf = commentText.substring(0, midPoint);\n    const secondHalf = commentText.substring(midPoint);\n    \n    // Check if second half starts with similar content to first half\n    const firstLines = firstHalf.split('\\n').slice(0, 3);\n    const secondLines = secondHalf.split('\\n').slice(0, 3);\n    \n    let similarity = 0;\n    for (let i = 0; i < Math.min(firstLines.length, secondLines.length); i++) {\n      if (firstLines[i].trim() && secondLines[i].includes(firstLines[i].trim().substring(0, 20))) {\n        similarity++;\n      }\n    }\n    \n    if (similarity >= 2) {\n      return firstHalf.trim();\n    }\n  }\n  \n  return commentText;\n}\n\n/**\n * Process a comment response from ClickUp to clean up any duplication issues\n * @param comment The comment object from ClickUp API\n * @returns Cleaned comment object\n */\nexport function cleanClickUpCommentResponse(comment: any): any {\n  if (!comment || typeof comment !== 'object') {\n    return comment;\n  }\n\n  const cleaned = { ...comment };\n  \n  // Clean up comment_text field if it exists\n  if (cleaned.comment_text && typeof cleaned.comment_text === 'string') {\n    cleaned.comment_text = cleanDuplicateCommentText(cleaned.comment_text);\n  }\n  \n  // Clean up comment_markdown field if it exists\n  if (cleaned.comment_markdown && typeof cleaned.comment_markdown === 'string') {\n    cleaned.comment_markdown = cleanDuplicateCommentText(cleaned.comment_markdown);\n  }\n  \n  return cleaned;\n}\n\n/**\n * Ensure proper newline separation before code blocks\n * ClickUp requires a newline before code blocks to prevent them from being merged with previous text\n * @param blocks Array of comment blocks to process\n * @returns Processed array with proper newline separation\n */\nexport function ensureCodeBlockSeparation(blocks: ClickUpCommentBlock[]): ClickUpCommentBlock[] {\n  if (!blocks || !Array.isArray(blocks) || blocks.length === 0) {\n    return blocks;\n  }\n\n  const processedBlocks: ClickUpCommentBlock[] = [];\n\n  for (let i = 0; i < blocks.length; i++) {\n    const currentBlock = blocks[i];\n    const previousBlock = i > 0 ? blocks[i - 1] : null;\n\n    // Check if current block is a code block\n    const isCodeBlock = currentBlock.attributes && \n      (currentBlock.attributes['code-block'] || currentBlock.attributes.code);\n\n    // If this is a code block and there's a previous block\n    if (isCodeBlock && previousBlock) {\n      // Check if the previous block ends with a newline\n      const previousText = previousBlock.text || '';\n      const endsWithNewline = previousText.endsWith('\\n');\n\n      if (!endsWithNewline) {\n        // Add newline to the previous block's text\n        const updatedPreviousBlock = {\n          ...previousBlock,\n          text: previousText + '\\n',\n          attributes: previousBlock.attributes || {}\n        };\n        \n        // Replace the previous block in our processed array\n        if (processedBlocks.length > 0) {\n          processedBlocks[processedBlocks.length - 1] = updatedPreviousBlock;\n        }\n      }\n    }\n\n    processedBlocks.push({\n      ...currentBlock,\n      attributes: currentBlock.attributes || {}\n    });\n  }\n\n  return processedBlocks;\n}\n\n/**\n * Prepare comment content for ClickUp API submission\n * Supports both simple text and markdown input\n * @param content The content to prepare (markdown or plain text)\n * @returns Object with ONLY structured comment format (no comment_text to avoid duplication)\n */\nexport function prepareCommentForClickUp(content: string): {\n  comment: ClickUpCommentBlock[];\n} {\n  if (!content || typeof content !== 'string') {\n    return { \n      comment: [{ text: '', attributes: {} }]\n    };\n  }\n\n  // Check if content contains markdown formatting\n  const hasMarkdown = /[*_`~#\\[\\]()>-]/.test(content) || content.includes('```');\n  \n  if (hasMarkdown) {\n    const formatted = parseMarkdownToClickUpComment(content);\n    return {\n      comment: ensureCodeBlockSeparation(formatted.comment)\n    };\n  } else {\n    // Simple plain text\n    return {\n      comment: [{ text: content, attributes: {} }]\n    };\n  }\n}\n\n/**\n * Process structured comment blocks to ensure proper code block separation\n * This function should be called on any structured comment array before sending to ClickUp\n * @param blocks Array of comment blocks\n * @returns Processed array with proper newline separation before code blocks\n */\nexport function processCommentBlocks(blocks: ClickUpCommentBlock[]): ClickUpCommentBlock[] {\n  if (!blocks || !Array.isArray(blocks) || blocks.length === 0) {\n    return blocks;\n  }\n\n  // First, ensure all blocks have attributes (even if empty)\n  const normalizedBlocks = blocks.map(block => ({\n    ...block,\n    attributes: block.attributes || {}\n  }));\n\n  return ensureCodeBlockSeparation(normalizedBlocks);\n}\n"],"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","ignoreList":[]}
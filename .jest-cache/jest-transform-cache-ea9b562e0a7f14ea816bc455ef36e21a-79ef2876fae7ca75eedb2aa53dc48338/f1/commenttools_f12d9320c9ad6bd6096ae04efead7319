10f4e0daa0a87b9fc82fabcef10b56f5
/* istanbul ignore next */
function cov_14kyauhe9z() {
  var path = "/Users/peterkrzyzek/Development/clickup-mcp-server/src/tools/comment-tools.ts";
  var hash = "72b13264facb8c30ccc4ebf44c67c5e872e02188";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/peterkrzyzek/Development/clickup-mcp-server/src/tools/comment-tools.ts",
    statementMap: {
      "0": {
        start: {
          line: 5,
          column: 22
        },
        end: {
          line: 5,
          column: 43
        }
      },
      "1": {
        start: {
          line: 6,
          column: 23
        },
        end: {
          line: 6,
          column: 58
        }
      },
      "2": {
        start: {
          line: 9,
          column: 4
        },
        end: {
          line: 27,
          column: 7
        }
      },
      "3": {
        start: {
          line: 14,
          column: 8
        },
        end: {
          line: 26,
          column: 9
        }
      },
      "4": {
        start: {
          line: 15,
          column: 27
        },
        end: {
          line: 15,
          column: 80
        }
      },
      "5": {
        start: {
          line: 16,
          column: 12
        },
        end: {
          line: 18,
          column: 14
        }
      },
      "6": {
        start: {
          line: 21,
          column: 12
        },
        end: {
          line: 21,
          column: 65
        }
      },
      "7": {
        start: {
          line: 22,
          column: 12
        },
        end: {
          line: 25,
          column: 14
        }
      },
      "8": {
        start: {
          line: 29,
          column: 4
        },
        end: {
          line: 48,
          column: 7
        }
      },
      "9": {
        start: {
          line: 35,
          column: 8
        },
        end: {
          line: 47,
          column: 9
        }
      },
      "10": {
        start: {
          line: 36,
          column: 27
        },
        end: {
          line: 36,
          column: 89
        }
      },
      "11": {
        start: {
          line: 37,
          column: 12
        },
        end: {
          line: 39,
          column: 14
        }
      },
      "12": {
        start: {
          line: 42,
          column: 12
        },
        end: {
          line: 42,
          column: 65
        }
      },
      "13": {
        start: {
          line: 43,
          column: 12
        },
        end: {
          line: 46,
          column: 14
        }
      },
      "14": {
        start: {
          line: 50,
          column: 4
        },
        end: {
          line: 68,
          column: 7
        }
      },
      "15": {
        start: {
          line: 55,
          column: 8
        },
        end: {
          line: 67,
          column: 9
        }
      },
      "16": {
        start: {
          line: 56,
          column: 27
        },
        end: {
          line: 56,
          column: 84
        }
      },
      "17": {
        start: {
          line: 57,
          column: 12
        },
        end: {
          line: 59,
          column: 14
        }
      },
      "18": {
        start: {
          line: 62,
          column: 12
        },
        end: {
          line: 62,
          column: 70
        }
      },
      "19": {
        start: {
          line: 63,
          column: 12
        },
        end: {
          line: 66,
          column: 14
        }
      },
      "20": {
        start: {
          line: 70,
          column: 4
        },
        end: {
          line: 88,
          column: 7
        }
      },
      "21": {
        start: {
          line: 75,
          column: 8
        },
        end: {
          line: 87,
          column: 9
        }
      },
      "22": {
        start: {
          line: 76,
          column: 27
        },
        end: {
          line: 76,
          column: 93
        }
      },
      "23": {
        start: {
          line: 77,
          column: 12
        },
        end: {
          line: 79,
          column: 14
        }
      },
      "24": {
        start: {
          line: 82,
          column: 12
        },
        end: {
          line: 82,
          column: 70
        }
      },
      "25": {
        start: {
          line: 83,
          column: 12
        },
        end: {
          line: 86,
          column: 14
        }
      },
      "26": {
        start: {
          line: 90,
          column: 4
        },
        end: {
          line: 108,
          column: 7
        }
      },
      "27": {
        start: {
          line: 95,
          column: 8
        },
        end: {
          line: 107,
          column: 9
        }
      },
      "28": {
        start: {
          line: 96,
          column: 27
        },
        end: {
          line: 96,
          column: 80
        }
      },
      "29": {
        start: {
          line: 97,
          column: 12
        },
        end: {
          line: 99,
          column: 14
        }
      },
      "30": {
        start: {
          line: 102,
          column: 12
        },
        end: {
          line: 102,
          column: 65
        }
      },
      "31": {
        start: {
          line: 103,
          column: 12
        },
        end: {
          line: 106,
          column: 14
        }
      },
      "32": {
        start: {
          line: 110,
          column: 4
        },
        end: {
          line: 129,
          column: 7
        }
      },
      "33": {
        start: {
          line: 116,
          column: 8
        },
        end: {
          line: 128,
          column: 9
        }
      },
      "34": {
        start: {
          line: 117,
          column: 27
        },
        end: {
          line: 117,
          column: 89
        }
      },
      "35": {
        start: {
          line: 118,
          column: 12
        },
        end: {
          line: 120,
          column: 14
        }
      },
      "36": {
        start: {
          line: 123,
          column: 12
        },
        end: {
          line: 123,
          column: 65
        }
      },
      "37": {
        start: {
          line: 124,
          column: 12
        },
        end: {
          line: 127,
          column: 14
        }
      },
      "38": {
        start: {
          line: 131,
          column: 4
        },
        end: {
          line: 150,
          column: 7
        }
      },
      "39": {
        start: {
          line: 137,
          column: 8
        },
        end: {
          line: 149,
          column: 9
        }
      },
      "40": {
        start: {
          line: 138,
          column: 27
        },
        end: {
          line: 138,
          column: 88
        }
      },
      "41": {
        start: {
          line: 139,
          column: 12
        },
        end: {
          line: 141,
          column: 14
        }
      },
      "42": {
        start: {
          line: 144,
          column: 12
        },
        end: {
          line: 144,
          column: 60
        }
      },
      "43": {
        start: {
          line: 145,
          column: 12
        },
        end: {
          line: 148,
          column: 14
        }
      },
      "44": {
        start: {
          line: 152,
          column: 4
        },
        end: {
          line: 168,
          column: 7
        }
      },
      "45": {
        start: {
          line: 155,
          column: 8
        },
        end: {
          line: 167,
          column: 9
        }
      },
      "46": {
        start: {
          line: 156,
          column: 27
        },
        end: {
          line: 156,
          column: 73
        }
      },
      "47": {
        start: {
          line: 157,
          column: 12
        },
        end: {
          line: 159,
          column: 14
        }
      },
      "48": {
        start: {
          line: 162,
          column: 12
        },
        end: {
          line: 162,
          column: 60
        }
      },
      "49": {
        start: {
          line: 163,
          column: 12
        },
        end: {
          line: 166,
          column: 14
        }
      },
      "50": {
        start: {
          line: 170,
          column: 4
        },
        end: {
          line: 188,
          column: 7
        }
      },
      "51": {
        start: {
          line: 175,
          column: 8
        },
        end: {
          line: 187,
          column: 9
        }
      },
      "52": {
        start: {
          line: 176,
          column: 27
        },
        end: {
          line: 176,
          column: 87
        }
      },
      "53": {
        start: {
          line: 177,
          column: 12
        },
        end: {
          line: 179,
          column: 14
        }
      },
      "54": {
        start: {
          line: 182,
          column: 12
        },
        end: {
          line: 182,
          column: 69
        }
      },
      "55": {
        start: {
          line: 183,
          column: 12
        },
        end: {
          line: 186,
          column: 14
        }
      },
      "56": {
        start: {
          line: 190,
          column: 4
        },
        end: {
          line: 208,
          column: 7
        }
      },
      "57": {
        start: {
          line: 195,
          column: 8
        },
        end: {
          line: 207,
          column: 9
        }
      },
      "58": {
        start: {
          line: 196,
          column: 27
        },
        end: {
          line: 196,
          column: 96
        }
      },
      "59": {
        start: {
          line: 197,
          column: 12
        },
        end: {
          line: 199,
          column: 14
        }
      },
      "60": {
        start: {
          line: 202,
          column: 12
        },
        end: {
          line: 202,
          column: 69
        }
      },
      "61": {
        start: {
          line: 203,
          column: 12
        },
        end: {
          line: 206,
          column: 14
        }
      }
    },
    fnMap: {
      "0": {
        name: "setupCommentTools",
        decl: {
          start: {
            line: 7,
            column: 16
          },
          end: {
            line: 7,
            column: 33
          }
        },
        loc: {
          start: {
            line: 7,
            column: 42
          },
          end: {
            line: 209,
            column: 1
          }
        },
        line: 7
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 13,
            column: 7
          },
          end: {
            line: 13,
            column: 8
          }
        },
        loc: {
          start: {
            line: 13,
            column: 41
          },
          end: {
            line: 27,
            column: 5
          }
        },
        line: 13
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 34,
            column: 7
          },
          end: {
            line: 34,
            column: 8
          }
        },
        loc: {
          start: {
            line: 34,
            column: 48
          },
          end: {
            line: 48,
            column: 5
          }
        },
        line: 34
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 54,
            column: 7
          },
          end: {
            line: 54,
            column: 8
          }
        },
        loc: {
          start: {
            line: 54,
            column: 41
          },
          end: {
            line: 68,
            column: 5
          }
        },
        line: 54
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 74,
            column: 7
          },
          end: {
            line: 74,
            column: 8
          }
        },
        loc: {
          start: {
            line: 74,
            column: 48
          },
          end: {
            line: 88,
            column: 5
          }
        },
        line: 74
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 94,
            column: 7
          },
          end: {
            line: 94,
            column: 8
          }
        },
        loc: {
          start: {
            line: 94,
            column: 41
          },
          end: {
            line: 108,
            column: 5
          }
        },
        line: 94
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 115,
            column: 7
          },
          end: {
            line: 115,
            column: 8
          }
        },
        loc: {
          start: {
            line: 115,
            column: 48
          },
          end: {
            line: 129,
            column: 5
          }
        },
        line: 115
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 136,
            column: 7
          },
          end: {
            line: 136,
            column: 8
          }
        },
        loc: {
          start: {
            line: 136,
            column: 51
          },
          end: {
            line: 150,
            column: 5
          }
        },
        line: 136
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 154,
            column: 7
          },
          end: {
            line: 154,
            column: 8
          }
        },
        loc: {
          start: {
            line: 154,
            column: 33
          },
          end: {
            line: 168,
            column: 5
          }
        },
        line: 154
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 174,
            column: 7
          },
          end: {
            line: 174,
            column: 8
          }
        },
        loc: {
          start: {
            line: 174,
            column: 44
          },
          end: {
            line: 188,
            column: 5
          }
        },
        line: 174
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 194,
            column: 7
          },
          end: {
            line: 194,
            column: 8
          }
        },
        loc: {
          start: {
            line: 194,
            column: 51
          },
          end: {
            line: 208,
            column: 5
          }
        },
        line: 194
      }
    },
    branchMap: {},
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0
    },
    b: {},
    inputSourceMap: {
      file: "/Users/peterkrzyzek/Development/clickup-mcp-server/src/tools/comment-tools.ts",
      mappings: "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",
      names: [],
      sources: ["/Users/peterkrzyzek/Development/clickup-mcp-server/src/tools/comment-tools.ts"],
      sourcesContent: ["import { McpServer } from '@modelcontextprotocol/sdk/server/mcp.js';\nimport { z } from 'zod';\nimport { createClickUpClient } from '../clickup-client/index.js';\nimport { \n  createCommentsClient, \n  CreateTaskCommentParams, \n  CreateChatViewCommentParams,\n  CreateListCommentParams,\n  UpdateCommentParams,\n  CreateThreadedCommentParams\n} from '../clickup-client/comments.js';\n\n// Create clients\nconst clickUpClient = createClickUpClient();\nconst commentsClient = createCommentsClient(clickUpClient);\n\nexport function setupCommentTools(server: McpServer): void {\n  // Register get_task_comments tool\n  server.tool(\n    'get_task_comments',\n    'Get comments for a ClickUp task. Returns comment details including text, author, and timestamps.',\n    {\n      task_id: z.string().describe('The ID of the task to get comments for'),\n      start: z.number().optional().describe('Pagination start (timestamp)'),\n      start_id: z.string().optional().describe('Pagination start ID')\n    },\n    async ({ task_id, ...params }) => {\n      try {\n        const result = await commentsClient.getTaskComments(task_id, params);\n        return {\n          content: [{ type: 'text', text: JSON.stringify(result, null, 2) }]\n        };\n      } catch (error: any) {\n        console.error('Error getting task comments:', error);\n        return {\n          content: [{ type: 'text', text: `Error getting task comments: ${error.message}` }],\n          isError: true\n        };\n      }\n    }\n  );\n\n  // Register create_task_comment tool\n  server.tool(\n    'create_task_comment',\n    'Create a new comment on a ClickUp task. Supports optional assignee and notification settings. Supports GitHub Flavored Markdown in comment text.',\n    {\n      task_id: z.string().describe('The ID of the task to comment on'),\n      comment_text: z.string().describe('The text content of the comment (supports GitHub Flavored Markdown including headers, bold, italic, code blocks, links, lists, etc.)'),\n      assignee: z.number().optional().describe('The ID of the user to assign to the comment'),\n      notify_all: z.boolean().optional().describe('Whether to notify all assignees')\n    },\n    async ({ task_id, ...commentParams }) => {\n      try {\n        const result = await commentsClient.createTaskComment(task_id, commentParams as CreateTaskCommentParams);\n        return {\n          content: [{ type: 'text', text: JSON.stringify(result, null, 2) }]\n        };\n      } catch (error: any) {\n        console.error('Error creating task comment:', error);\n        return {\n          content: [{ type: 'text', text: `Error creating task comment: ${error.message}` }],\n          isError: true\n        };\n      }\n    }\n  );\n\n  // Register get_chat_view_comments tool\n  server.tool(\n    'get_chat_view_comments',\n    'Get comments for a ClickUp chat view. Returns comment details with pagination support.',\n    {\n      view_id: z.string().describe('The ID of the chat view to get comments for'),\n      start: z.number().optional().describe('Pagination start (timestamp)'),\n      start_id: z.string().optional().describe('Pagination start ID')\n    },\n    async ({ view_id, ...params }) => {\n      try {\n        const result = await commentsClient.getChatViewComments(view_id, params);\n        return {\n          content: [{ type: 'text', text: JSON.stringify(result, null, 2) }]\n        };\n      } catch (error: any) {\n        console.error('Error getting chat view comments:', error);\n        return {\n          content: [{ type: 'text', text: `Error getting chat view comments: ${error.message}` }],\n          isError: true\n        };\n      }\n    }\n  );\n\n  // Register create_chat_view_comment tool\n  server.tool(\n    'create_chat_view_comment',\n    'Create a new comment in a ClickUp chat view. Supports notification settings. Supports GitHub Flavored Markdown in comment text.',\n    {\n      view_id: z.string().describe('The ID of the chat view to comment on'),\n      comment_text: z.string().describe('The text content of the comment (supports GitHub Flavored Markdown including headers, bold, italic, code blocks, links, lists, etc.)'),\n      notify_all: z.boolean().optional().describe('Whether to notify all assignees')\n    },\n    async ({ view_id, ...commentParams }) => {\n      try {\n        const result = await commentsClient.createChatViewComment(view_id, commentParams as CreateChatViewCommentParams);\n        return {\n          content: [{ type: 'text', text: JSON.stringify(result, null, 2) }]\n        };\n      } catch (error: any) {\n        console.error('Error creating chat view comment:', error);\n        return {\n          content: [{ type: 'text', text: `Error creating chat view comment: ${error.message}` }],\n          isError: true\n        };\n      }\n    }\n  );\n\n  // Register get_list_comments tool\n  server.tool(\n    'get_list_comments',\n    'Get comments for a ClickUp list. Returns comment details with pagination support.',\n    {\n      list_id: z.string().describe('The ID of the list to get comments for'),\n      start: z.number().optional().describe('Pagination start (timestamp)'),\n      start_id: z.string().optional().describe('Pagination start ID')\n    },\n    async ({ list_id, ...params }) => {\n      try {\n        const result = await commentsClient.getListComments(list_id, params);\n        return {\n          content: [{ type: 'text', text: JSON.stringify(result, null, 2) }]\n        };\n      } catch (error: any) {\n        console.error('Error getting list comments:', error);\n        return {\n          content: [{ type: 'text', text: `Error getting list comments: ${error.message}` }],\n          isError: true\n        };\n      }\n    }\n  );\n\n  // Register create_list_comment tool\n  server.tool(\n    'create_list_comment',\n    'Create a new comment on a ClickUp list. Supports optional assignee and notification settings. Supports GitHub Flavored Markdown in comment text.',\n    {\n      list_id: z.string().describe('The ID of the list to comment on'),\n      comment_text: z.string().describe('The text content of the comment (supports GitHub Flavored Markdown including headers, bold, italic, code blocks, links, lists, etc.)'),\n      assignee: z.number().optional().describe('The ID of the user to assign to the comment'),\n      notify_all: z.boolean().optional().describe('Whether to notify all assignees')\n    },\n    async ({ list_id, ...commentParams }) => {\n      try {\n        const result = await commentsClient.createListComment(list_id, commentParams as CreateListCommentParams);\n        return {\n          content: [{ type: 'text', text: JSON.stringify(result, null, 2) }]\n        };\n      } catch (error: any) {\n        console.error('Error creating list comment:', error);\n        return {\n          content: [{ type: 'text', text: `Error creating list comment: ${error.message}` }],\n          isError: true\n        };\n      }\n    }\n  );\n\n  // Register update_comment tool\n  server.tool(\n    'update_comment',\n    'Update an existing ClickUp comment\\'s properties including text, assignee, and resolved status. Supports GitHub Flavored Markdown in comment text.',\n    {\n      comment_id: z.string().describe('The ID of the comment to update'),\n      comment_text: z.string().describe('The new text content of the comment (supports GitHub Flavored Markdown including headers, bold, italic, code blocks, links, lists, etc.)'),\n      assignee: z.number().optional().describe('The ID of the user to assign to the comment'),\n      resolved: z.boolean().optional().describe('Whether the comment is resolved')\n    },\n    async ({ comment_id, ...commentParams }) => {\n      try {\n        const result = await commentsClient.updateComment(comment_id, commentParams as UpdateCommentParams);\n        return {\n          content: [{ type: 'text', text: JSON.stringify(result, null, 2) }]\n        };\n      } catch (error: any) {\n        console.error('Error updating comment:', error);\n        return {\n          content: [{ type: 'text', text: `Error updating comment: ${error.message}` }],\n          isError: true\n        };\n      }\n    }\n  );\n\n  // Register delete_comment tool\n  server.tool(\n    'delete_comment',\n    'Delete a comment from ClickUp.',\n    {\n      comment_id: z.string().describe('The ID of the comment to delete')\n    },\n    async ({ comment_id }) => {\n      try {\n        const result = await commentsClient.deleteComment(comment_id);\n        return {\n          content: [{ type: 'text', text: JSON.stringify(result, null, 2) }]\n        };\n      } catch (error: any) {\n        console.error('Error deleting comment:', error);\n        return {\n          content: [{ type: 'text', text: `Error deleting comment: ${error.message}` }],\n          isError: true\n        };\n      }\n    }\n  );\n\n  // Register get_threaded_comments tool\n  server.tool(\n    'get_threaded_comments',\n    'Get threaded comments (replies) for a parent comment. Returns comment details with pagination support.',\n    {\n      comment_id: z.string().describe('The ID of the parent comment'),\n      start: z.number().optional().describe('Pagination start (timestamp)'),\n      start_id: z.string().optional().describe('Pagination start ID')\n    },\n    async ({ comment_id, ...params }) => {\n      try {\n        const result = await commentsClient.getThreadedComments(comment_id, params);\n        return {\n          content: [{ type: 'text', text: JSON.stringify(result, null, 2) }]\n        };\n      } catch (error: any) {\n        console.error('Error getting threaded comments:', error);\n        return {\n          content: [{ type: 'text', text: `Error getting threaded comments: ${error.message}` }],\n          isError: true\n        };\n      }\n    }\n  );\n\n  // Register create_threaded_comment tool\n  server.tool(\n    'create_threaded_comment',\n    'Create a new threaded comment (reply) to a parent comment. Supports notification settings. Supports GitHub Flavored Markdown in comment text.',\n    {\n      comment_id: z.string().describe('The ID of the parent comment'),\n      comment_text: z.string().describe('The text content of the comment (supports GitHub Flavored Markdown including headers, bold, italic, code blocks, links, lists, etc.)'),\n      notify_all: z.boolean().optional().describe('Whether to notify all assignees')\n    },\n    async ({ comment_id, ...commentParams }) => {\n      try {\n        const result = await commentsClient.createThreadedComment(comment_id, commentParams as CreateThreadedCommentParams);\n        return {\n          content: [{ type: 'text', text: JSON.stringify(result, null, 2) }]\n        };\n      } catch (error: any) {\n        console.error('Error creating threaded comment:', error);\n        return {\n          content: [{ type: 'text', text: `Error creating threaded comment: ${error.message}` }],\n          isError: true\n        };\n      }\n    }\n  );\n}\n"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "72b13264facb8c30ccc4ebf44c67c5e872e02188"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_14kyauhe9z = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_14kyauhe9z();
import { z } from 'zod';
import { createClickUpClient } from '../clickup-client/index.js';
import { createCommentsClient } from '../clickup-client/comments.js';
// Create clients
const clickUpClient =
/* istanbul ignore next */
(cov_14kyauhe9z().s[0]++, createClickUpClient());
const commentsClient =
/* istanbul ignore next */
(cov_14kyauhe9z().s[1]++, createCommentsClient(clickUpClient));
export function setupCommentTools(server) {
  /* istanbul ignore next */
  cov_14kyauhe9z().f[0]++;
  cov_14kyauhe9z().s[2]++;
  // Register get_task_comments tool
  server.tool('get_task_comments', 'Get comments for a ClickUp task. Returns comment details including text, author, and timestamps.', {
    task_id: z.string().describe('The ID of the task to get comments for'),
    start: z.number().optional().describe('Pagination start (timestamp)'),
    start_id: z.string().optional().describe('Pagination start ID')
  }, async ({
    task_id,
    ...params
  }) => {
    /* istanbul ignore next */
    cov_14kyauhe9z().f[1]++;
    cov_14kyauhe9z().s[3]++;
    try {
      const result =
      /* istanbul ignore next */
      (cov_14kyauhe9z().s[4]++, await commentsClient.getTaskComments(task_id, params));
      /* istanbul ignore next */
      cov_14kyauhe9z().s[5]++;
      return {
        content: [{
          type: 'text',
          text: JSON.stringify(result, null, 2)
        }]
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_14kyauhe9z().s[6]++;
      console.error('Error getting task comments:', error);
      /* istanbul ignore next */
      cov_14kyauhe9z().s[7]++;
      return {
        content: [{
          type: 'text',
          text: `Error getting task comments: ${error.message}`
        }],
        isError: true
      };
    }
  });
  // Register create_task_comment tool
  /* istanbul ignore next */
  cov_14kyauhe9z().s[8]++;
  server.tool('create_task_comment', 'Create a new comment on a ClickUp task. Supports optional assignee and notification settings. Supports GitHub Flavored Markdown in comment text.', {
    task_id: z.string().describe('The ID of the task to comment on'),
    comment_text: z.string().describe('The text content of the comment (supports GitHub Flavored Markdown including headers, bold, italic, code blocks, links, lists, etc.)'),
    assignee: z.number().optional().describe('The ID of the user to assign to the comment'),
    notify_all: z.boolean().optional().describe('Whether to notify all assignees')
  }, async ({
    task_id,
    ...commentParams
  }) => {
    /* istanbul ignore next */
    cov_14kyauhe9z().f[2]++;
    cov_14kyauhe9z().s[9]++;
    try {
      const result =
      /* istanbul ignore next */
      (cov_14kyauhe9z().s[10]++, await commentsClient.createTaskComment(task_id, commentParams));
      /* istanbul ignore next */
      cov_14kyauhe9z().s[11]++;
      return {
        content: [{
          type: 'text',
          text: JSON.stringify(result, null, 2)
        }]
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_14kyauhe9z().s[12]++;
      console.error('Error creating task comment:', error);
      /* istanbul ignore next */
      cov_14kyauhe9z().s[13]++;
      return {
        content: [{
          type: 'text',
          text: `Error creating task comment: ${error.message}`
        }],
        isError: true
      };
    }
  });
  // Register get_chat_view_comments tool
  /* istanbul ignore next */
  cov_14kyauhe9z().s[14]++;
  server.tool('get_chat_view_comments', 'Get comments for a ClickUp chat view. Returns comment details with pagination support.', {
    view_id: z.string().describe('The ID of the chat view to get comments for'),
    start: z.number().optional().describe('Pagination start (timestamp)'),
    start_id: z.string().optional().describe('Pagination start ID')
  }, async ({
    view_id,
    ...params
  }) => {
    /* istanbul ignore next */
    cov_14kyauhe9z().f[3]++;
    cov_14kyauhe9z().s[15]++;
    try {
      const result =
      /* istanbul ignore next */
      (cov_14kyauhe9z().s[16]++, await commentsClient.getChatViewComments(view_id, params));
      /* istanbul ignore next */
      cov_14kyauhe9z().s[17]++;
      return {
        content: [{
          type: 'text',
          text: JSON.stringify(result, null, 2)
        }]
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_14kyauhe9z().s[18]++;
      console.error('Error getting chat view comments:', error);
      /* istanbul ignore next */
      cov_14kyauhe9z().s[19]++;
      return {
        content: [{
          type: 'text',
          text: `Error getting chat view comments: ${error.message}`
        }],
        isError: true
      };
    }
  });
  // Register create_chat_view_comment tool
  /* istanbul ignore next */
  cov_14kyauhe9z().s[20]++;
  server.tool('create_chat_view_comment', 'Create a new comment in a ClickUp chat view. Supports notification settings. Supports GitHub Flavored Markdown in comment text.', {
    view_id: z.string().describe('The ID of the chat view to comment on'),
    comment_text: z.string().describe('The text content of the comment (supports GitHub Flavored Markdown including headers, bold, italic, code blocks, links, lists, etc.)'),
    notify_all: z.boolean().optional().describe('Whether to notify all assignees')
  }, async ({
    view_id,
    ...commentParams
  }) => {
    /* istanbul ignore next */
    cov_14kyauhe9z().f[4]++;
    cov_14kyauhe9z().s[21]++;
    try {
      const result =
      /* istanbul ignore next */
      (cov_14kyauhe9z().s[22]++, await commentsClient.createChatViewComment(view_id, commentParams));
      /* istanbul ignore next */
      cov_14kyauhe9z().s[23]++;
      return {
        content: [{
          type: 'text',
          text: JSON.stringify(result, null, 2)
        }]
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_14kyauhe9z().s[24]++;
      console.error('Error creating chat view comment:', error);
      /* istanbul ignore next */
      cov_14kyauhe9z().s[25]++;
      return {
        content: [{
          type: 'text',
          text: `Error creating chat view comment: ${error.message}`
        }],
        isError: true
      };
    }
  });
  // Register get_list_comments tool
  /* istanbul ignore next */
  cov_14kyauhe9z().s[26]++;
  server.tool('get_list_comments', 'Get comments for a ClickUp list. Returns comment details with pagination support.', {
    list_id: z.string().describe('The ID of the list to get comments for'),
    start: z.number().optional().describe('Pagination start (timestamp)'),
    start_id: z.string().optional().describe('Pagination start ID')
  }, async ({
    list_id,
    ...params
  }) => {
    /* istanbul ignore next */
    cov_14kyauhe9z().f[5]++;
    cov_14kyauhe9z().s[27]++;
    try {
      const result =
      /* istanbul ignore next */
      (cov_14kyauhe9z().s[28]++, await commentsClient.getListComments(list_id, params));
      /* istanbul ignore next */
      cov_14kyauhe9z().s[29]++;
      return {
        content: [{
          type: 'text',
          text: JSON.stringify(result, null, 2)
        }]
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_14kyauhe9z().s[30]++;
      console.error('Error getting list comments:', error);
      /* istanbul ignore next */
      cov_14kyauhe9z().s[31]++;
      return {
        content: [{
          type: 'text',
          text: `Error getting list comments: ${error.message}`
        }],
        isError: true
      };
    }
  });
  // Register create_list_comment tool
  /* istanbul ignore next */
  cov_14kyauhe9z().s[32]++;
  server.tool('create_list_comment', 'Create a new comment on a ClickUp list. Supports optional assignee and notification settings. Supports GitHub Flavored Markdown in comment text.', {
    list_id: z.string().describe('The ID of the list to comment on'),
    comment_text: z.string().describe('The text content of the comment (supports GitHub Flavored Markdown including headers, bold, italic, code blocks, links, lists, etc.)'),
    assignee: z.number().optional().describe('The ID of the user to assign to the comment'),
    notify_all: z.boolean().optional().describe('Whether to notify all assignees')
  }, async ({
    list_id,
    ...commentParams
  }) => {
    /* istanbul ignore next */
    cov_14kyauhe9z().f[6]++;
    cov_14kyauhe9z().s[33]++;
    try {
      const result =
      /* istanbul ignore next */
      (cov_14kyauhe9z().s[34]++, await commentsClient.createListComment(list_id, commentParams));
      /* istanbul ignore next */
      cov_14kyauhe9z().s[35]++;
      return {
        content: [{
          type: 'text',
          text: JSON.stringify(result, null, 2)
        }]
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_14kyauhe9z().s[36]++;
      console.error('Error creating list comment:', error);
      /* istanbul ignore next */
      cov_14kyauhe9z().s[37]++;
      return {
        content: [{
          type: 'text',
          text: `Error creating list comment: ${error.message}`
        }],
        isError: true
      };
    }
  });
  // Register update_comment tool
  /* istanbul ignore next */
  cov_14kyauhe9z().s[38]++;
  server.tool('update_comment', 'Update an existing ClickUp comment\'s properties including text, assignee, and resolved status. Supports GitHub Flavored Markdown in comment text.', {
    comment_id: z.string().describe('The ID of the comment to update'),
    comment_text: z.string().describe('The new text content of the comment (supports GitHub Flavored Markdown including headers, bold, italic, code blocks, links, lists, etc.)'),
    assignee: z.number().optional().describe('The ID of the user to assign to the comment'),
    resolved: z.boolean().optional().describe('Whether the comment is resolved')
  }, async ({
    comment_id,
    ...commentParams
  }) => {
    /* istanbul ignore next */
    cov_14kyauhe9z().f[7]++;
    cov_14kyauhe9z().s[39]++;
    try {
      const result =
      /* istanbul ignore next */
      (cov_14kyauhe9z().s[40]++, await commentsClient.updateComment(comment_id, commentParams));
      /* istanbul ignore next */
      cov_14kyauhe9z().s[41]++;
      return {
        content: [{
          type: 'text',
          text: JSON.stringify(result, null, 2)
        }]
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_14kyauhe9z().s[42]++;
      console.error('Error updating comment:', error);
      /* istanbul ignore next */
      cov_14kyauhe9z().s[43]++;
      return {
        content: [{
          type: 'text',
          text: `Error updating comment: ${error.message}`
        }],
        isError: true
      };
    }
  });
  // Register delete_comment tool
  /* istanbul ignore next */
  cov_14kyauhe9z().s[44]++;
  server.tool('delete_comment', 'Delete a comment from ClickUp.', {
    comment_id: z.string().describe('The ID of the comment to delete')
  }, async ({
    comment_id
  }) => {
    /* istanbul ignore next */
    cov_14kyauhe9z().f[8]++;
    cov_14kyauhe9z().s[45]++;
    try {
      const result =
      /* istanbul ignore next */
      (cov_14kyauhe9z().s[46]++, await commentsClient.deleteComment(comment_id));
      /* istanbul ignore next */
      cov_14kyauhe9z().s[47]++;
      return {
        content: [{
          type: 'text',
          text: JSON.stringify(result, null, 2)
        }]
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_14kyauhe9z().s[48]++;
      console.error('Error deleting comment:', error);
      /* istanbul ignore next */
      cov_14kyauhe9z().s[49]++;
      return {
        content: [{
          type: 'text',
          text: `Error deleting comment: ${error.message}`
        }],
        isError: true
      };
    }
  });
  // Register get_threaded_comments tool
  /* istanbul ignore next */
  cov_14kyauhe9z().s[50]++;
  server.tool('get_threaded_comments', 'Get threaded comments (replies) for a parent comment. Returns comment details with pagination support.', {
    comment_id: z.string().describe('The ID of the parent comment'),
    start: z.number().optional().describe('Pagination start (timestamp)'),
    start_id: z.string().optional().describe('Pagination start ID')
  }, async ({
    comment_id,
    ...params
  }) => {
    /* istanbul ignore next */
    cov_14kyauhe9z().f[9]++;
    cov_14kyauhe9z().s[51]++;
    try {
      const result =
      /* istanbul ignore next */
      (cov_14kyauhe9z().s[52]++, await commentsClient.getThreadedComments(comment_id, params));
      /* istanbul ignore next */
      cov_14kyauhe9z().s[53]++;
      return {
        content: [{
          type: 'text',
          text: JSON.stringify(result, null, 2)
        }]
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_14kyauhe9z().s[54]++;
      console.error('Error getting threaded comments:', error);
      /* istanbul ignore next */
      cov_14kyauhe9z().s[55]++;
      return {
        content: [{
          type: 'text',
          text: `Error getting threaded comments: ${error.message}`
        }],
        isError: true
      };
    }
  });
  // Register create_threaded_comment tool
  /* istanbul ignore next */
  cov_14kyauhe9z().s[56]++;
  server.tool('create_threaded_comment', 'Create a new threaded comment (reply) to a parent comment. Supports notification settings. Supports GitHub Flavored Markdown in comment text.', {
    comment_id: z.string().describe('The ID of the parent comment'),
    comment_text: z.string().describe('The text content of the comment (supports GitHub Flavored Markdown including headers, bold, italic, code blocks, links, lists, etc.)'),
    notify_all: z.boolean().optional().describe('Whether to notify all assignees')
  }, async ({
    comment_id,
    ...commentParams
  }) => {
    /* istanbul ignore next */
    cov_14kyauhe9z().f[10]++;
    cov_14kyauhe9z().s[57]++;
    try {
      const result =
      /* istanbul ignore next */
      (cov_14kyauhe9z().s[58]++, await commentsClient.createThreadedComment(comment_id, commentParams));
      /* istanbul ignore next */
      cov_14kyauhe9z().s[59]++;
      return {
        content: [{
          type: 'text',
          text: JSON.stringify(result, null, 2)
        }]
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_14kyauhe9z().s[60]++;
      console.error('Error creating threaded comment:', error);
      /* istanbul ignore next */
      cov_14kyauhe9z().s[61]++;
      return {
        content: [{
          type: 'text',
          text: `Error creating threaded comment: ${error.message}`
        }],
        isError: true
      };
    }
  });
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
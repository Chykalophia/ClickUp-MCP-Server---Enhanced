bc9cc0b6e57a74b986b8b17507083da3
/* istanbul ignore next */
function cov_2gzql2q6t1() {
  var path = "/Users/peterkrzyzek/Development/clickup-mcp-server/src/clickup-client/comments.ts";
  var hash = "92f8af0b057ed5cdb166c394fb6c04f10f3fd3b5";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/peterkrzyzek/Development/clickup-mcp-server/src/clickup-client/comments.ts",
    statementMap: {
      "0": {
        start: {
          line: 4,
          column: 8
        },
        end: {
          line: 4,
          column: 29
        }
      },
      "1": {
        start: {
          line: 13,
          column: 23
        },
        end: {
          line: 13,
          column: 79
        }
      },
      "2": {
        start: {
          line: 15,
          column: 8
        },
        end: {
          line: 17,
          column: 9
        }
      },
      "3": {
        start: {
          line: 16,
          column: 12
        },
        end: {
          line: 16,
          column: 96
        }
      },
      "4": {
        start: {
          line: 16,
          column: 63
        },
        end: {
          line: 16,
          column: 94
        }
      },
      "5": {
        start: {
          line: 18,
          column: 8
        },
        end: {
          line: 18,
          column: 22
        }
      },
      "6": {
        start: {
          line: 28,
          column: 32
        },
        end: {
          line: 28,
          column: 45
        }
      },
      "7": {
        start: {
          line: 29,
          column: 8
        },
        end: {
          line: 33,
          column: 9
        }
      },
      "8": {
        start: {
          line: 30,
          column: 32
        },
        end: {
          line: 30,
          column: 77
        }
      },
      "9": {
        start: {
          line: 32,
          column: 12
        },
        end: {
          line: 32,
          column: 67
        }
      },
      "10": {
        start: {
          line: 34,
          column: 23
        },
        end: {
          line: 34,
          column: 89
        }
      },
      "11": {
        start: {
          line: 35,
          column: 8
        },
        end: {
          line: 35,
          column: 46
        }
      },
      "12": {
        start: {
          line: 44,
          column: 23
        },
        end: {
          line: 44,
          column: 79
        }
      },
      "13": {
        start: {
          line: 46,
          column: 8
        },
        end: {
          line: 48,
          column: 9
        }
      },
      "14": {
        start: {
          line: 47,
          column: 12
        },
        end: {
          line: 47,
          column: 96
        }
      },
      "15": {
        start: {
          line: 47,
          column: 63
        },
        end: {
          line: 47,
          column: 94
        }
      },
      "16": {
        start: {
          line: 49,
          column: 8
        },
        end: {
          line: 49,
          column: 22
        }
      },
      "17": {
        start: {
          line: 59,
          column: 32
        },
        end: {
          line: 59,
          column: 45
        }
      },
      "18": {
        start: {
          line: 60,
          column: 8
        },
        end: {
          line: 63,
          column: 9
        }
      },
      "19": {
        start: {
          line: 61,
          column: 32
        },
        end: {
          line: 61,
          column: 77
        }
      },
      "20": {
        start: {
          line: 62,
          column: 12
        },
        end: {
          line: 62,
          column: 67
        }
      },
      "21": {
        start: {
          line: 64,
          column: 23
        },
        end: {
          line: 64,
          column: 89
        }
      },
      "22": {
        start: {
          line: 65,
          column: 8
        },
        end: {
          line: 65,
          column: 46
        }
      },
      "23": {
        start: {
          line: 74,
          column: 23
        },
        end: {
          line: 74,
          column: 79
        }
      },
      "24": {
        start: {
          line: 76,
          column: 8
        },
        end: {
          line: 78,
          column: 9
        }
      },
      "25": {
        start: {
          line: 77,
          column: 12
        },
        end: {
          line: 77,
          column: 96
        }
      },
      "26": {
        start: {
          line: 77,
          column: 63
        },
        end: {
          line: 77,
          column: 94
        }
      },
      "27": {
        start: {
          line: 79,
          column: 8
        },
        end: {
          line: 79,
          column: 22
        }
      },
      "28": {
        start: {
          line: 89,
          column: 32
        },
        end: {
          line: 89,
          column: 45
        }
      },
      "29": {
        start: {
          line: 90,
          column: 8
        },
        end: {
          line: 93,
          column: 9
        }
      },
      "30": {
        start: {
          line: 91,
          column: 32
        },
        end: {
          line: 91,
          column: 77
        }
      },
      "31": {
        start: {
          line: 92,
          column: 12
        },
        end: {
          line: 92,
          column: 67
        }
      },
      "32": {
        start: {
          line: 94,
          column: 23
        },
        end: {
          line: 94,
          column: 89
        }
      },
      "33": {
        start: {
          line: 95,
          column: 8
        },
        end: {
          line: 95,
          column: 46
        }
      },
      "34": {
        start: {
          line: 105,
          column: 32
        },
        end: {
          line: 105,
          column: 45
        }
      },
      "35": {
        start: {
          line: 106,
          column: 8
        },
        end: {
          line: 109,
          column: 9
        }
      },
      "36": {
        start: {
          line: 107,
          column: 32
        },
        end: {
          line: 107,
          column: 77
        }
      },
      "37": {
        start: {
          line: 108,
          column: 12
        },
        end: {
          line: 108,
          column: 67
        }
      },
      "38": {
        start: {
          line: 110,
          column: 23
        },
        end: {
          line: 110,
          column: 86
        }
      },
      "39": {
        start: {
          line: 111,
          column: 8
        },
        end: {
          line: 111,
          column: 46
        }
      },
      "40": {
        start: {
          line: 119,
          column: 8
        },
        end: {
          line: 119,
          column: 59
        }
      },
      "41": {
        start: {
          line: 128,
          column: 23
        },
        end: {
          line: 128,
          column: 83
        }
      },
      "42": {
        start: {
          line: 130,
          column: 8
        },
        end: {
          line: 132,
          column: 9
        }
      },
      "43": {
        start: {
          line: 131,
          column: 12
        },
        end: {
          line: 131,
          column: 96
        }
      },
      "44": {
        start: {
          line: 131,
          column: 63
        },
        end: {
          line: 131,
          column: 94
        }
      },
      "45": {
        start: {
          line: 133,
          column: 8
        },
        end: {
          line: 133,
          column: 22
        }
      },
      "46": {
        start: {
          line: 143,
          column: 32
        },
        end: {
          line: 143,
          column: 45
        }
      },
      "47": {
        start: {
          line: 144,
          column: 8
        },
        end: {
          line: 147,
          column: 9
        }
      },
      "48": {
        start: {
          line: 145,
          column: 32
        },
        end: {
          line: 145,
          column: 77
        }
      },
      "49": {
        start: {
          line: 146,
          column: 12
        },
        end: {
          line: 146,
          column: 67
        }
      },
      "50": {
        start: {
          line: 148,
          column: 23
        },
        end: {
          line: 148,
          column: 93
        }
      },
      "51": {
        start: {
          line: 149,
          column: 8
        },
        end: {
          line: 149,
          column: 46
        }
      },
      "52": {
        start: {
          line: 152,
          column: 36
        },
        end: {
          line: 154,
          column: 1
        }
      },
      "53": {
        start: {
          line: 153,
          column: 4
        },
        end: {
          line: 153,
          column: 38
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 3,
            column: 4
          },
          end: {
            line: 3,
            column: 5
          }
        },
        loc: {
          start: {
            line: 3,
            column: 24
          },
          end: {
            line: 5,
            column: 5
          }
        },
        line: 3
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 12,
            column: 4
          },
          end: {
            line: 12,
            column: 5
          }
        },
        loc: {
          start: {
            line: 12,
            column: 42
          },
          end: {
            line: 19,
            column: 5
          }
        },
        line: 12
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 16,
            column: 50
          },
          end: {
            line: 16,
            column: 51
          }
        },
        loc: {
          start: {
            line: 16,
            column: 63
          },
          end: {
            line: 16,
            column: 94
          }
        },
        line: 16
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 26,
            column: 4
          },
          end: {
            line: 26,
            column: 5
          }
        },
        loc: {
          start: {
            line: 26,
            column: 44
          },
          end: {
            line: 36,
            column: 5
          }
        },
        line: 26
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 43,
            column: 4
          },
          end: {
            line: 43,
            column: 5
          }
        },
        loc: {
          start: {
            line: 43,
            column: 46
          },
          end: {
            line: 50,
            column: 5
          }
        },
        line: 43
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 47,
            column: 50
          },
          end: {
            line: 47,
            column: 51
          }
        },
        loc: {
          start: {
            line: 47,
            column: 63
          },
          end: {
            line: 47,
            column: 94
          }
        },
        line: 47
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 57,
            column: 4
          },
          end: {
            line: 57,
            column: 5
          }
        },
        loc: {
          start: {
            line: 57,
            column: 48
          },
          end: {
            line: 66,
            column: 5
          }
        },
        line: 57
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 73,
            column: 4
          },
          end: {
            line: 73,
            column: 5
          }
        },
        loc: {
          start: {
            line: 73,
            column: 42
          },
          end: {
            line: 80,
            column: 5
          }
        },
        line: 73
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 77,
            column: 50
          },
          end: {
            line: 77,
            column: 51
          }
        },
        loc: {
          start: {
            line: 77,
            column: 63
          },
          end: {
            line: 77,
            column: 94
          }
        },
        line: 77
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 87,
            column: 4
          },
          end: {
            line: 87,
            column: 5
          }
        },
        loc: {
          start: {
            line: 87,
            column: 44
          },
          end: {
            line: 96,
            column: 5
          }
        },
        line: 87
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 103,
            column: 4
          },
          end: {
            line: 103,
            column: 5
          }
        },
        loc: {
          start: {
            line: 103,
            column: 43
          },
          end: {
            line: 112,
            column: 5
          }
        },
        line: 103
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 118,
            column: 4
          },
          end: {
            line: 118,
            column: 5
          }
        },
        loc: {
          start: {
            line: 118,
            column: 35
          },
          end: {
            line: 120,
            column: 5
          }
        },
        line: 118
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 127,
            column: 4
          },
          end: {
            line: 127,
            column: 5
          }
        },
        loc: {
          start: {
            line: 127,
            column: 49
          },
          end: {
            line: 134,
            column: 5
          }
        },
        line: 127
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 131,
            column: 50
          },
          end: {
            line: 131,
            column: 51
          }
        },
        loc: {
          start: {
            line: 131,
            column: 63
          },
          end: {
            line: 131,
            column: 94
          }
        },
        line: 131
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 141,
            column: 4
          },
          end: {
            line: 141,
            column: 5
          }
        },
        loc: {
          start: {
            line: 141,
            column: 51
          },
          end: {
            line: 150,
            column: 5
          }
        },
        line: 141
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 152,
            column: 36
          },
          end: {
            line: 152,
            column: 37
          }
        },
        loc: {
          start: {
            line: 152,
            column: 48
          },
          end: {
            line: 154,
            column: 1
          }
        },
        line: 152
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 15,
            column: 8
          },
          end: {
            line: 17,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 15,
            column: 8
          },
          end: {
            line: 17,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 15
      },
      "1": {
        loc: {
          start: {
            line: 15,
            column: 12
          },
          end: {
            line: 15,
            column: 61
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 15,
            column: 12
          },
          end: {
            line: 15,
            column: 27
          }
        }, {
          start: {
            line: 15,
            column: 31
          },
          end: {
            line: 15,
            column: 61
          }
        }],
        line: 15
      },
      "2": {
        loc: {
          start: {
            line: 29,
            column: 8
          },
          end: {
            line: 33,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 29,
            column: 8
          },
          end: {
            line: 33,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 29
      },
      "3": {
        loc: {
          start: {
            line: 46,
            column: 8
          },
          end: {
            line: 48,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 46,
            column: 8
          },
          end: {
            line: 48,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 46
      },
      "4": {
        loc: {
          start: {
            line: 46,
            column: 12
          },
          end: {
            line: 46,
            column: 61
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 46,
            column: 12
          },
          end: {
            line: 46,
            column: 27
          }
        }, {
          start: {
            line: 46,
            column: 31
          },
          end: {
            line: 46,
            column: 61
          }
        }],
        line: 46
      },
      "5": {
        loc: {
          start: {
            line: 60,
            column: 8
          },
          end: {
            line: 63,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 60,
            column: 8
          },
          end: {
            line: 63,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 60
      },
      "6": {
        loc: {
          start: {
            line: 76,
            column: 8
          },
          end: {
            line: 78,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 76,
            column: 8
          },
          end: {
            line: 78,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 76
      },
      "7": {
        loc: {
          start: {
            line: 76,
            column: 12
          },
          end: {
            line: 76,
            column: 61
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 76,
            column: 12
          },
          end: {
            line: 76,
            column: 27
          }
        }, {
          start: {
            line: 76,
            column: 31
          },
          end: {
            line: 76,
            column: 61
          }
        }],
        line: 76
      },
      "8": {
        loc: {
          start: {
            line: 90,
            column: 8
          },
          end: {
            line: 93,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 90,
            column: 8
          },
          end: {
            line: 93,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 90
      },
      "9": {
        loc: {
          start: {
            line: 106,
            column: 8
          },
          end: {
            line: 109,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 106,
            column: 8
          },
          end: {
            line: 109,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 106
      },
      "10": {
        loc: {
          start: {
            line: 130,
            column: 8
          },
          end: {
            line: 132,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 130,
            column: 8
          },
          end: {
            line: 132,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 130
      },
      "11": {
        loc: {
          start: {
            line: 130,
            column: 12
          },
          end: {
            line: 130,
            column: 61
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 130,
            column: 12
          },
          end: {
            line: 130,
            column: 27
          }
        }, {
          start: {
            line: 130,
            column: 31
          },
          end: {
            line: 130,
            column: 61
          }
        }],
        line: 130
      },
      "12": {
        loc: {
          start: {
            line: 144,
            column: 8
          },
          end: {
            line: 147,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 144,
            column: 8
          },
          end: {
            line: 147,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 144
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0]
    },
    inputSourceMap: {
      file: "/Users/peterkrzyzek/Development/clickup-mcp-server/src/clickup-client/comments.ts",
      mappings: "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",
      names: [],
      sources: ["/Users/peterkrzyzek/Development/clickup-mcp-server/src/clickup-client/comments.ts"],
      sourcesContent: ["import { ClickUpClient } from './index.js';\nimport { prepareContentForClickUp, processClickUpResponse } from '../utils/markdown.js';\n\nexport interface Comment {\n  id: string;\n  comment: string[];\n  comment_text: string;\n  comment_markdown?: string; // Markdown version for display\n  user: {\n    id: number;\n    username: string;\n    email: string;\n    color: string;\n    profilePicture?: string;\n  };\n  resolved: boolean;\n  assignee?: {\n    id: number;\n    username: string;\n    email: string;\n    color: string;\n    profilePicture?: string;\n  };\n  assigned_by?: {\n    id: number;\n    username: string;\n    email: string;\n    color: string;\n    profilePicture?: string;\n  };\n  reactions?: {\n    [key: string]: {\n      count: number;\n      users: Array<{\n        id: number;\n        username: string;\n        email: string;\n      }>;\n    };\n  };\n  date: string;\n  start_date?: string;\n  due_date?: string;\n  parent?: string;\n  replies_count?: number;\n}\n\nexport interface GetTaskCommentsParams {\n  start?: number;\n  start_id?: string;\n}\n\nexport interface CreateTaskCommentParams {\n  comment_text: string;\n  assignee?: number;\n  notify_all?: boolean;\n}\n\nexport interface GetChatViewCommentsParams {\n  start?: number;\n  start_id?: string;\n}\n\nexport interface CreateChatViewCommentParams {\n  comment_text: string;\n  notify_all?: boolean;\n}\n\nexport interface GetListCommentsParams {\n  start?: number;\n  start_id?: string;\n}\n\nexport interface CreateListCommentParams {\n  comment_text: string;\n  assignee?: number;\n  notify_all?: boolean;\n}\n\nexport interface UpdateCommentParams {\n  comment_text: string;\n  assignee?: number;\n  resolved?: boolean;\n}\n\nexport interface GetThreadedCommentsParams {\n  start?: number;\n  start_id?: string;\n}\n\nexport interface CreateThreadedCommentParams {\n  comment_text: string;\n  notify_all?: boolean;\n}\n\nexport class CommentsClient {\n  private client: ClickUpClient;\n\n  constructor(client: ClickUpClient) {\n    this.client = client;\n  }\n\n  /**\n   * Get comments for a specific task\n   * @param taskId The ID of the task to get comments for\n   * @param params Optional parameters for pagination\n   * @returns A list of comments with processed content\n   */\n  async getTaskComments(taskId: string, params?: GetTaskCommentsParams): Promise<{ comments: Comment[] }> {\n    const result = await this.client.get(`/task/${taskId}/comment`, params);\n    \n    // Process each comment's content\n    if (result.comments && Array.isArray(result.comments)) {\n      result.comments = result.comments.map((comment: any) => processClickUpResponse(comment));\n    }\n    \n    return result;\n  }\n\n  /**\n   * Create a new comment on a task\n   * @param taskId The ID of the task to comment on\n   * @param params The comment parameters (supports markdown in comment_text)\n   * @returns The created comment with processed content\n   */\n  async createTaskComment(taskId: string, params: CreateTaskCommentParams): Promise<Comment> {\n    // Process comment text for markdown support\n    const processedParams = { ...params };\n    if (params.comment_text) {\n      const contentData = prepareContentForClickUp(params.comment_text);\n      // For comments, ClickUp expects comment_text field with HTML\n      processedParams.comment_text = contentData.description;\n    }\n    \n    const result = await this.client.post(`/task/${taskId}/comment`, processedParams);\n    return processClickUpResponse(result);\n  }\n\n  /**\n   * Get comments for a chat view\n   * @param viewId The ID of the chat view to get comments for\n   * @param params Optional parameters for pagination\n   * @returns A list of comments with processed content\n   */\n  async getChatViewComments(viewId: string, params?: GetChatViewCommentsParams): Promise<{ comments: Comment[] }> {\n    const result = await this.client.get(`/view/${viewId}/comment`, params);\n    \n    // Process each comment's content\n    if (result.comments && Array.isArray(result.comments)) {\n      result.comments = result.comments.map((comment: any) => processClickUpResponse(comment));\n    }\n    \n    return result;\n  }\n\n  /**\n   * Create a new comment on a chat view\n   * @param viewId The ID of the chat view to comment on\n   * @param params The comment parameters (supports markdown in comment_text)\n   * @returns The created comment with processed content\n   */\n  async createChatViewComment(viewId: string, params: CreateChatViewCommentParams): Promise<Comment> {\n    // Process comment text for markdown support\n    const processedParams = { ...params };\n    if (params.comment_text) {\n      const contentData = prepareContentForClickUp(params.comment_text);\n      processedParams.comment_text = contentData.description;\n    }\n    \n    const result = await this.client.post(`/view/${viewId}/comment`, processedParams);\n    return processClickUpResponse(result);\n  }\n\n  /**\n   * Get comments for a list\n   * @param listId The ID of the list to get comments for\n   * @param params Optional parameters for pagination\n   * @returns A list of comments with processed content\n   */\n  async getListComments(listId: string, params?: GetListCommentsParams): Promise<{ comments: Comment[] }> {\n    const result = await this.client.get(`/list/${listId}/comment`, params);\n    \n    // Process each comment's content\n    if (result.comments && Array.isArray(result.comments)) {\n      result.comments = result.comments.map((comment: any) => processClickUpResponse(comment));\n    }\n    \n    return result;\n  }\n\n  /**\n   * Create a new comment on a list\n   * @param listId The ID of the list to comment on\n   * @param params The comment parameters (supports markdown in comment_text)\n   * @returns The created comment with processed content\n   */\n  async createListComment(listId: string, params: CreateListCommentParams): Promise<Comment> {\n    // Process comment text for markdown support\n    const processedParams = { ...params };\n    if (params.comment_text) {\n      const contentData = prepareContentForClickUp(params.comment_text);\n      processedParams.comment_text = contentData.description;\n    }\n    \n    const result = await this.client.post(`/list/${listId}/comment`, processedParams);\n    return processClickUpResponse(result);\n  }\n\n  /**\n   * Update an existing comment\n   * @param commentId The ID of the comment to update\n   * @param params The comment parameters to update (supports markdown in comment_text)\n   * @returns The updated comment with processed content\n   */\n  async updateComment(commentId: string, params: UpdateCommentParams): Promise<Comment> {\n    // Process comment text for markdown support\n    const processedParams = { ...params };\n    if (params.comment_text) {\n      const contentData = prepareContentForClickUp(params.comment_text);\n      processedParams.comment_text = contentData.description;\n    }\n    \n    const result = await this.client.put(`/comment/${commentId}`, processedParams);\n    return processClickUpResponse(result);\n  }\n\n  /**\n   * Delete a comment\n   * @param commentId The ID of the comment to delete\n   * @returns Success message\n   */\n  async deleteComment(commentId: string): Promise<{ success: boolean }> {\n    return this.client.delete(`/comment/${commentId}`);\n  }\n\n  /**\n   * Get threaded comments for a parent comment\n   * @param commentId The ID of the parent comment\n   * @param params Optional parameters for pagination\n   * @returns A list of threaded comments with processed content\n   */\n  async getThreadedComments(commentId: string, params?: GetThreadedCommentsParams): Promise<{ comments: Comment[] }> {\n    const result = await this.client.get(`/comment/${commentId}/reply`, params);\n    \n    // Process each comment's content\n    if (result.comments && Array.isArray(result.comments)) {\n      result.comments = result.comments.map((comment: any) => processClickUpResponse(comment));\n    }\n    \n    return result;\n  }\n\n  /**\n   * Create a new threaded comment on a parent comment\n   * @param commentId The ID of the parent comment\n   * @param params The comment parameters (supports markdown in comment_text)\n   * @returns The created threaded comment with processed content\n   */\n  async createThreadedComment(commentId: string, params: CreateThreadedCommentParams): Promise<Comment> {\n    // Process comment text for markdown support\n    const processedParams = { ...params };\n    if (params.comment_text) {\n      const contentData = prepareContentForClickUp(params.comment_text);\n      processedParams.comment_text = contentData.description;\n    }\n    \n    const result = await this.client.post(`/comment/${commentId}/reply`, processedParams);\n    return processClickUpResponse(result);\n  }\n}\n\nexport const createCommentsClient = (client: ClickUpClient): CommentsClient => {\n  return new CommentsClient(client);\n};\n"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "92f8af0b057ed5cdb166c394fb6c04f10f3fd3b5"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_2gzql2q6t1 = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_2gzql2q6t1();
import { prepareContentForClickUp, processClickUpResponse } from '../utils/markdown.js';
export class CommentsClient {
  constructor(client) {
    /* istanbul ignore next */
    cov_2gzql2q6t1().f[0]++;
    cov_2gzql2q6t1().s[0]++;
    this.client = client;
  }
  /**
   * Get comments for a specific task
   * @param taskId The ID of the task to get comments for
   * @param params Optional parameters for pagination
   * @returns A list of comments with processed content
   */
  async getTaskComments(taskId, params) {
    /* istanbul ignore next */
    cov_2gzql2q6t1().f[1]++;
    const result =
    /* istanbul ignore next */
    (cov_2gzql2q6t1().s[1]++, await this.client.get(`/task/${taskId}/comment`, params));
    // Process each comment's content
    /* istanbul ignore next */
    cov_2gzql2q6t1().s[2]++;
    if (
    /* istanbul ignore next */
    (cov_2gzql2q6t1().b[1][0]++, result.comments) &&
    /* istanbul ignore next */
    (cov_2gzql2q6t1().b[1][1]++, Array.isArray(result.comments))) {
      /* istanbul ignore next */
      cov_2gzql2q6t1().b[0][0]++;
      cov_2gzql2q6t1().s[3]++;
      result.comments = result.comments.map(comment => {
        /* istanbul ignore next */
        cov_2gzql2q6t1().f[2]++;
        cov_2gzql2q6t1().s[4]++;
        return processClickUpResponse(comment);
      });
    } else
    /* istanbul ignore next */
    {
      cov_2gzql2q6t1().b[0][1]++;
    }
    cov_2gzql2q6t1().s[5]++;
    return result;
  }
  /**
   * Create a new comment on a task
   * @param taskId The ID of the task to comment on
   * @param params The comment parameters (supports markdown in comment_text)
   * @returns The created comment with processed content
   */
  async createTaskComment(taskId, params) {
    /* istanbul ignore next */
    cov_2gzql2q6t1().f[3]++;
    // Process comment text for markdown support
    const processedParams =
    /* istanbul ignore next */
    (cov_2gzql2q6t1().s[6]++, {
      ...params
    });
    /* istanbul ignore next */
    cov_2gzql2q6t1().s[7]++;
    if (params.comment_text) {
      /* istanbul ignore next */
      cov_2gzql2q6t1().b[2][0]++;
      const contentData =
      /* istanbul ignore next */
      (cov_2gzql2q6t1().s[8]++, prepareContentForClickUp(params.comment_text));
      // For comments, ClickUp expects comment_text field with HTML
      /* istanbul ignore next */
      cov_2gzql2q6t1().s[9]++;
      processedParams.comment_text = contentData.description;
    } else
    /* istanbul ignore next */
    {
      cov_2gzql2q6t1().b[2][1]++;
    }
    const result =
    /* istanbul ignore next */
    (cov_2gzql2q6t1().s[10]++, await this.client.post(`/task/${taskId}/comment`, processedParams));
    /* istanbul ignore next */
    cov_2gzql2q6t1().s[11]++;
    return processClickUpResponse(result);
  }
  /**
   * Get comments for a chat view
   * @param viewId The ID of the chat view to get comments for
   * @param params Optional parameters for pagination
   * @returns A list of comments with processed content
   */
  async getChatViewComments(viewId, params) {
    /* istanbul ignore next */
    cov_2gzql2q6t1().f[4]++;
    const result =
    /* istanbul ignore next */
    (cov_2gzql2q6t1().s[12]++, await this.client.get(`/view/${viewId}/comment`, params));
    // Process each comment's content
    /* istanbul ignore next */
    cov_2gzql2q6t1().s[13]++;
    if (
    /* istanbul ignore next */
    (cov_2gzql2q6t1().b[4][0]++, result.comments) &&
    /* istanbul ignore next */
    (cov_2gzql2q6t1().b[4][1]++, Array.isArray(result.comments))) {
      /* istanbul ignore next */
      cov_2gzql2q6t1().b[3][0]++;
      cov_2gzql2q6t1().s[14]++;
      result.comments = result.comments.map(comment => {
        /* istanbul ignore next */
        cov_2gzql2q6t1().f[5]++;
        cov_2gzql2q6t1().s[15]++;
        return processClickUpResponse(comment);
      });
    } else
    /* istanbul ignore next */
    {
      cov_2gzql2q6t1().b[3][1]++;
    }
    cov_2gzql2q6t1().s[16]++;
    return result;
  }
  /**
   * Create a new comment on a chat view
   * @param viewId The ID of the chat view to comment on
   * @param params The comment parameters (supports markdown in comment_text)
   * @returns The created comment with processed content
   */
  async createChatViewComment(viewId, params) {
    /* istanbul ignore next */
    cov_2gzql2q6t1().f[6]++;
    // Process comment text for markdown support
    const processedParams =
    /* istanbul ignore next */
    (cov_2gzql2q6t1().s[17]++, {
      ...params
    });
    /* istanbul ignore next */
    cov_2gzql2q6t1().s[18]++;
    if (params.comment_text) {
      /* istanbul ignore next */
      cov_2gzql2q6t1().b[5][0]++;
      const contentData =
      /* istanbul ignore next */
      (cov_2gzql2q6t1().s[19]++, prepareContentForClickUp(params.comment_text));
      /* istanbul ignore next */
      cov_2gzql2q6t1().s[20]++;
      processedParams.comment_text = contentData.description;
    } else
    /* istanbul ignore next */
    {
      cov_2gzql2q6t1().b[5][1]++;
    }
    const result =
    /* istanbul ignore next */
    (cov_2gzql2q6t1().s[21]++, await this.client.post(`/view/${viewId}/comment`, processedParams));
    /* istanbul ignore next */
    cov_2gzql2q6t1().s[22]++;
    return processClickUpResponse(result);
  }
  /**
   * Get comments for a list
   * @param listId The ID of the list to get comments for
   * @param params Optional parameters for pagination
   * @returns A list of comments with processed content
   */
  async getListComments(listId, params) {
    /* istanbul ignore next */
    cov_2gzql2q6t1().f[7]++;
    const result =
    /* istanbul ignore next */
    (cov_2gzql2q6t1().s[23]++, await this.client.get(`/list/${listId}/comment`, params));
    // Process each comment's content
    /* istanbul ignore next */
    cov_2gzql2q6t1().s[24]++;
    if (
    /* istanbul ignore next */
    (cov_2gzql2q6t1().b[7][0]++, result.comments) &&
    /* istanbul ignore next */
    (cov_2gzql2q6t1().b[7][1]++, Array.isArray(result.comments))) {
      /* istanbul ignore next */
      cov_2gzql2q6t1().b[6][0]++;
      cov_2gzql2q6t1().s[25]++;
      result.comments = result.comments.map(comment => {
        /* istanbul ignore next */
        cov_2gzql2q6t1().f[8]++;
        cov_2gzql2q6t1().s[26]++;
        return processClickUpResponse(comment);
      });
    } else
    /* istanbul ignore next */
    {
      cov_2gzql2q6t1().b[6][1]++;
    }
    cov_2gzql2q6t1().s[27]++;
    return result;
  }
  /**
   * Create a new comment on a list
   * @param listId The ID of the list to comment on
   * @param params The comment parameters (supports markdown in comment_text)
   * @returns The created comment with processed content
   */
  async createListComment(listId, params) {
    /* istanbul ignore next */
    cov_2gzql2q6t1().f[9]++;
    // Process comment text for markdown support
    const processedParams =
    /* istanbul ignore next */
    (cov_2gzql2q6t1().s[28]++, {
      ...params
    });
    /* istanbul ignore next */
    cov_2gzql2q6t1().s[29]++;
    if (params.comment_text) {
      /* istanbul ignore next */
      cov_2gzql2q6t1().b[8][0]++;
      const contentData =
      /* istanbul ignore next */
      (cov_2gzql2q6t1().s[30]++, prepareContentForClickUp(params.comment_text));
      /* istanbul ignore next */
      cov_2gzql2q6t1().s[31]++;
      processedParams.comment_text = contentData.description;
    } else
    /* istanbul ignore next */
    {
      cov_2gzql2q6t1().b[8][1]++;
    }
    const result =
    /* istanbul ignore next */
    (cov_2gzql2q6t1().s[32]++, await this.client.post(`/list/${listId}/comment`, processedParams));
    /* istanbul ignore next */
    cov_2gzql2q6t1().s[33]++;
    return processClickUpResponse(result);
  }
  /**
   * Update an existing comment
   * @param commentId The ID of the comment to update
   * @param params The comment parameters to update (supports markdown in comment_text)
   * @returns The updated comment with processed content
   */
  async updateComment(commentId, params) {
    /* istanbul ignore next */
    cov_2gzql2q6t1().f[10]++;
    // Process comment text for markdown support
    const processedParams =
    /* istanbul ignore next */
    (cov_2gzql2q6t1().s[34]++, {
      ...params
    });
    /* istanbul ignore next */
    cov_2gzql2q6t1().s[35]++;
    if (params.comment_text) {
      /* istanbul ignore next */
      cov_2gzql2q6t1().b[9][0]++;
      const contentData =
      /* istanbul ignore next */
      (cov_2gzql2q6t1().s[36]++, prepareContentForClickUp(params.comment_text));
      /* istanbul ignore next */
      cov_2gzql2q6t1().s[37]++;
      processedParams.comment_text = contentData.description;
    } else
    /* istanbul ignore next */
    {
      cov_2gzql2q6t1().b[9][1]++;
    }
    const result =
    /* istanbul ignore next */
    (cov_2gzql2q6t1().s[38]++, await this.client.put(`/comment/${commentId}`, processedParams));
    /* istanbul ignore next */
    cov_2gzql2q6t1().s[39]++;
    return processClickUpResponse(result);
  }
  /**
   * Delete a comment
   * @param commentId The ID of the comment to delete
   * @returns Success message
   */
  async deleteComment(commentId) {
    /* istanbul ignore next */
    cov_2gzql2q6t1().f[11]++;
    cov_2gzql2q6t1().s[40]++;
    return this.client.delete(`/comment/${commentId}`);
  }
  /**
   * Get threaded comments for a parent comment
   * @param commentId The ID of the parent comment
   * @param params Optional parameters for pagination
   * @returns A list of threaded comments with processed content
   */
  async getThreadedComments(commentId, params) {
    /* istanbul ignore next */
    cov_2gzql2q6t1().f[12]++;
    const result =
    /* istanbul ignore next */
    (cov_2gzql2q6t1().s[41]++, await this.client.get(`/comment/${commentId}/reply`, params));
    // Process each comment's content
    /* istanbul ignore next */
    cov_2gzql2q6t1().s[42]++;
    if (
    /* istanbul ignore next */
    (cov_2gzql2q6t1().b[11][0]++, result.comments) &&
    /* istanbul ignore next */
    (cov_2gzql2q6t1().b[11][1]++, Array.isArray(result.comments))) {
      /* istanbul ignore next */
      cov_2gzql2q6t1().b[10][0]++;
      cov_2gzql2q6t1().s[43]++;
      result.comments = result.comments.map(comment => {
        /* istanbul ignore next */
        cov_2gzql2q6t1().f[13]++;
        cov_2gzql2q6t1().s[44]++;
        return processClickUpResponse(comment);
      });
    } else
    /* istanbul ignore next */
    {
      cov_2gzql2q6t1().b[10][1]++;
    }
    cov_2gzql2q6t1().s[45]++;
    return result;
  }
  /**
   * Create a new threaded comment on a parent comment
   * @param commentId The ID of the parent comment
   * @param params The comment parameters (supports markdown in comment_text)
   * @returns The created threaded comment with processed content
   */
  async createThreadedComment(commentId, params) {
    /* istanbul ignore next */
    cov_2gzql2q6t1().f[14]++;
    // Process comment text for markdown support
    const processedParams =
    /* istanbul ignore next */
    (cov_2gzql2q6t1().s[46]++, {
      ...params
    });
    /* istanbul ignore next */
    cov_2gzql2q6t1().s[47]++;
    if (params.comment_text) {
      /* istanbul ignore next */
      cov_2gzql2q6t1().b[12][0]++;
      const contentData =
      /* istanbul ignore next */
      (cov_2gzql2q6t1().s[48]++, prepareContentForClickUp(params.comment_text));
      /* istanbul ignore next */
      cov_2gzql2q6t1().s[49]++;
      processedParams.comment_text = contentData.description;
    } else
    /* istanbul ignore next */
    {
      cov_2gzql2q6t1().b[12][1]++;
    }
    const result =
    /* istanbul ignore next */
    (cov_2gzql2q6t1().s[50]++, await this.client.post(`/comment/${commentId}/reply`, processedParams));
    /* istanbul ignore next */
    cov_2gzql2q6t1().s[51]++;
    return processClickUpResponse(result);
  }
}
/* istanbul ignore next */
cov_2gzql2q6t1().s[52]++;
export const createCommentsClient = client => {
  /* istanbul ignore next */
  cov_2gzql2q6t1().f[15]++;
  cov_2gzql2q6t1().s[53]++;
  return new CommentsClient(client);
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
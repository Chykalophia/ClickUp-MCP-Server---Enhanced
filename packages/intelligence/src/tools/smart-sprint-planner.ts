import { McpServer } from '@modelcontextprotocol/sdk/server/mcp.js';
import { z } from 'zod';
import { SmartSprintPlanner } from '../planners/smart-sprint-planner.js';

export function setupSmartSprintPlanner(server: McpServer) {
  const planner = new SmartSprintPlanner();

  server.tool(
    'clickup_plan_smart_sprint',
    'Generate an AI-optimized sprint plan based on team velocity, task priorities, dependencies, and capacity constraints',
    {
      workspace_id: z.string().describe('The ClickUp workspace ID'),
      team_id: z.string().optional().describe('Optional: Specific team ID for planning'),
      sprint_duration_days: z.number().default(14).describe('Sprint duration in days (default: 14)'),
      team_capacity_hours: z.number().optional().describe('Total team capacity in hours for the sprint'),
      priority_focus: z.enum(['high_priority', 'balanced', 'quick_wins']).default('balanced').describe('Sprint planning focus strategy'),
      include_dependencies: z.boolean().default(true).describe('Whether to consider task dependencies in planning')
    },
    async (params) => {
      try {
        const sprintPlan = await planner.generateSprintPlan(params);
        
        return {
          content: [{
            type: 'text',
            text: `# Smart Sprint Plan

## Sprint Overview
- **Duration**: ${params.sprint_duration_days} days
- **Team Capacity**: ${sprintPlan.sprintCapacity} hours
- **Estimated Velocity**: ${sprintPlan.teamVelocity} story points
- **Completion Confidence**: ${sprintPlan.estimatedCompletion}

## Recommended Tasks (${sprintPlan.suggestedTasks.length} tasks)

${sprintPlan.suggestedTasks.map((task, index) => `
### ${index + 1}. ${task.name}
- **Priority**: ${task.priority || 'Normal'}
- **Status**: ${task.status}
- **Assignee**: ${task.assignees?.[0]?.username || 'Unassigned'}
- **Description**: ${task.description || 'No description'}
${task.tags?.length ? `- **Tags**: ${task.tags.join(', ')}` : ''}
`).join('\n')}

## Risk Assessment
${sprintPlan.riskAssessment}

## AI Recommendations
${sprintPlan.recommendations.map(rec => `- ðŸ¤– ${rec}`).join('\n')}

## Planning Insights
This sprint plan was generated using AI algorithms that consider:
- Historical team velocity and performance patterns
- Task complexity and effort estimation
- Dependency chains and critical path analysis
- Team member workload distribution
- Priority alignment with business objectives

*Generated by ClickUp Intelligence MCP Server*`
          }]
        };
      } catch (error: any) {
        return {
          content: [{
            type: 'text',
            text: `Error generating sprint plan: ${error.message}`
          }],
          isError: true
        };
      }
    }
  );

  server.tool(
    'clickup_optimize_sprint_capacity',
    'Optimize sprint capacity allocation based on team member skills, availability, and task requirements',
    {
      workspace_id: z.string().describe('The ClickUp workspace ID'),
      sprint_tasks: z.array(z.string()).describe('Array of task IDs to include in capacity optimization'),
      team_members: z.array(z.object({
        user_id: z.number(),
        available_hours: z.number(),
        skills: z.array(z.string()).optional()
      })).describe('Team member availability and skills')
    },
    async (params) => {
      try {
        const optimization = await planner.optimizeCapacity(params);
        
        return {
          content: [{
            type: 'text',
            text: `# Sprint Capacity Optimization

## Optimized Task Allocation

${optimization.allocations.map(allocation => `
### ${allocation.taskName}
- **Assigned to**: ${allocation.assigneeName}
- **Estimated Hours**: ${allocation.estimatedHours}
- **Skill Match**: ${allocation.skillMatch}%
- **Confidence**: ${allocation.confidence}
`).join('\n')}

## Capacity Summary
- **Total Capacity**: ${optimization.totalCapacity} hours
- **Allocated**: ${optimization.allocatedHours} hours
- **Remaining**: ${optimization.remainingCapacity} hours
- **Utilization**: ${Math.round((optimization.allocatedHours / optimization.totalCapacity) * 100)}%

## Optimization Insights
${optimization.insights.map(insight => `- ðŸ’¡ ${insight}`).join('\n')}

*Generated by ClickUp Intelligence MCP Server*`
          }]
        };
      } catch (error: any) {
        return {
          content: [{
            type: 'text',
            text: `Error optimizing sprint capacity: ${error.message}`
          }],
          isError: true
        };
      }
    }
  );
}

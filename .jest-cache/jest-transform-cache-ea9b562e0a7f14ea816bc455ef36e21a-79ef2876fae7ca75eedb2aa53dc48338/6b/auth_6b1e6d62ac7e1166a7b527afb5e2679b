e33510c0042fa717241cabc522dc58cc
/* istanbul ignore next */
function cov_1hq0a8j7dj() {
  var path = "/Users/peterkrzyzek/Development/clickup-mcp-server/src/clickup-client/auth.ts";
  var hash = "e741a9f383d3c599a30f52eb7eca5368436b196d";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/peterkrzyzek/Development/clickup-mcp-server/src/clickup-client/auth.ts",
    statementMap: {
      "0": {
        start: {
          line: 3,
          column: 8
        },
        end: {
          line: 3,
          column: 29
        }
      },
      "1": {
        start: {
          line: 10,
          column: 8
        },
        end: {
          line: 16,
          column: 9
        }
      },
      "2": {
        start: {
          line: 11,
          column: 12
        },
        end: {
          line: 11,
          column: 50
        }
      },
      "3": {
        start: {
          line: 14,
          column: 12
        },
        end: {
          line: 14,
          column: 67
        }
      },
      "4": {
        start: {
          line: 15,
          column: 12
        },
        end: {
          line: 15,
          column: 24
        }
      },
      "5": {
        start: {
          line: 23,
          column: 8
        },
        end: {
          line: 29,
          column: 9
        }
      },
      "6": {
        start: {
          line: 24,
          column: 12
        },
        end: {
          line: 24,
          column: 50
        }
      },
      "7": {
        start: {
          line: 27,
          column: 12
        },
        end: {
          line: 27,
          column: 62
        }
      },
      "8": {
        start: {
          line: 28,
          column: 12
        },
        end: {
          line: 28,
          column: 24
        }
      },
      "9": {
        start: {
          line: 37,
          column: 8
        },
        end: {
          line: 43,
          column: 9
        }
      },
      "10": {
        start: {
          line: 38,
          column: 12
        },
        end: {
          line: 38,
          column: 71
        }
      },
      "11": {
        start: {
          line: 41,
          column: 12
        },
        end: {
          line: 41,
          column: 58
        }
      },
      "12": {
        start: {
          line: 42,
          column: 12
        },
        end: {
          line: 42,
          column: 24
        }
      },
      "13": {
        start: {
          line: 51,
          column: 8
        },
        end: {
          line: 57,
          column: 9
        }
      },
      "14": {
        start: {
          line: 52,
          column: 12
        },
        end: {
          line: 52,
          column: 69
        }
      },
      "15": {
        start: {
          line: 55,
          column: 12
        },
        end: {
          line: 55,
          column: 59
        }
      },
      "16": {
        start: {
          line: 56,
          column: 12
        },
        end: {
          line: 56,
          column: 24
        }
      },
      "17": {
        start: {
          line: 65,
          column: 8
        },
        end: {
          line: 71,
          column: 9
        }
      },
      "18": {
        start: {
          line: 66,
          column: 12
        },
        end: {
          line: 66,
          column: 69
        }
      },
      "19": {
        start: {
          line: 69,
          column: 12
        },
        end: {
          line: 69,
          column: 57
        }
      },
      "20": {
        start: {
          line: 70,
          column: 12
        },
        end: {
          line: 70,
          column: 24
        }
      },
      "21": {
        start: {
          line: 79,
          column: 8
        },
        end: {
          line: 85,
          column: 9
        }
      },
      "22": {
        start: {
          line: 80,
          column: 12
        },
        end: {
          line: 80,
          column: 67
        }
      },
      "23": {
        start: {
          line: 83,
          column: 12
        },
        end: {
          line: 83,
          column: 68
        }
      },
      "24": {
        start: {
          line: 84,
          column: 12
        },
        end: {
          line: 84,
          column: 24
        }
      },
      "25": {
        start: {
          line: 93,
          column: 8
        },
        end: {
          line: 99,
          column: 9
        }
      },
      "26": {
        start: {
          line: 94,
          column: 12
        },
        end: {
          line: 94,
          column: 71
        }
      },
      "27": {
        start: {
          line: 97,
          column: 12
        },
        end: {
          line: 97,
          column: 67
        }
      },
      "28": {
        start: {
          line: 98,
          column: 12
        },
        end: {
          line: 98,
          column: 24
        }
      },
      "29": {
        start: {
          line: 102,
          column: 32
        },
        end: {
          line: 104,
          column: 1
        }
      },
      "30": {
        start: {
          line: 103,
          column: 4
        },
        end: {
          line: 103,
          column: 34
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 2,
            column: 4
          },
          end: {
            line: 2,
            column: 5
          }
        },
        loc: {
          start: {
            line: 2,
            column: 24
          },
          end: {
            line: 4,
            column: 5
          }
        },
        line: 2
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 9,
            column: 4
          },
          end: {
            line: 9,
            column: 5
          }
        },
        loc: {
          start: {
            line: 9,
            column: 30
          },
          end: {
            line: 17,
            column: 5
          }
        },
        line: 9
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 22,
            column: 4
          },
          end: {
            line: 22,
            column: 5
          }
        },
        loc: {
          start: {
            line: 22,
            column: 26
          },
          end: {
            line: 30,
            column: 5
          }
        },
        line: 22
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 36,
            column: 4
          },
          end: {
            line: 36,
            column: 5
          }
        },
        loc: {
          start: {
            line: 36,
            column: 33
          },
          end: {
            line: 44,
            column: 5
          }
        },
        line: 36
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 50,
            column: 4
          },
          end: {
            line: 50,
            column: 5
          }
        },
        loc: {
          start: {
            line: 50,
            column: 30
          },
          end: {
            line: 58,
            column: 5
          }
        },
        line: 50
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 64,
            column: 4
          },
          end: {
            line: 64,
            column: 5
          }
        },
        loc: {
          start: {
            line: 64,
            column: 29
          },
          end: {
            line: 72,
            column: 5
          }
        },
        line: 64
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 78,
            column: 4
          },
          end: {
            line: 78,
            column: 5
          }
        },
        loc: {
          start: {
            line: 78,
            column: 37
          },
          end: {
            line: 86,
            column: 5
          }
        },
        line: 78
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 92,
            column: 4
          },
          end: {
            line: 92,
            column: 5
          }
        },
        loc: {
          start: {
            line: 92,
            column: 41
          },
          end: {
            line: 100,
            column: 5
          }
        },
        line: 92
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 102,
            column: 32
          },
          end: {
            line: 102,
            column: 33
          }
        },
        loc: {
          start: {
            line: 102,
            column: 44
          },
          end: {
            line: 104,
            column: 1
          }
        },
        line: 102
      }
    },
    branchMap: {},
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0
    },
    b: {},
    inputSourceMap: {
      file: "/Users/peterkrzyzek/Development/clickup-mcp-server/src/clickup-client/auth.ts",
      mappings: "AA4BA,MAAM,OAAO,UAAU;IAGrB,YAAY,MAAqB;QAC/B,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;IACvB,CAAC;IAED;;;OAGG;IACH,KAAK,CAAC,iBAAiB;QACrB,IAAI,CAAC;YACH,OAAO,MAAM,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;QACxC,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,OAAO,CAAC,KAAK,CAAC,gCAAgC,EAAE,KAAK,CAAC,CAAC;YACvD,MAAM,KAAK,CAAC;QACd,CAAC;IACH,CAAC;IAED;;;OAGG;IACH,KAAK,CAAC,aAAa;QACjB,IAAI,CAAC;YACH,OAAO,MAAM,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;QACxC,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,OAAO,CAAC,KAAK,CAAC,2BAA2B,EAAE,KAAK,CAAC,CAAC;YAClD,MAAM,KAAK,CAAC;QACd,CAAC;IACH,CAAC;IAED;;;;OAIG;IACH,KAAK,CAAC,SAAS,CAAC,WAAmB;QA6CjC,IAAI,CAAC;YACH,OAAO,MAAM,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,SAAS,WAAW,QAAQ,CAAC,CAAC;QAC7D,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,OAAO,CAAC,KAAK,CAAC,uBAAuB,EAAE,KAAK,CAAC,CAAC;YAC9C,MAAM,KAAK,CAAC;QACd,CAAC;IACH,CAAC;IAED;;;;OAIG;IACH,KAAK,CAAC,UAAU,CAAC,OAAe;QAoD9B,IAAI,CAAC;YACH,OAAO,MAAM,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,UAAU,OAAO,SAAS,CAAC,CAAC;QAC3D,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,OAAO,CAAC,KAAK,CAAC,wBAAwB,EAAE,KAAK,CAAC,CAAC;YAC/C,MAAM,KAAK,CAAC;QACd,CAAC;IACH,CAAC;IAED;;;;OAIG;IACH,KAAK,CAAC,QAAQ,CAAC,QAAgB;QAuC7B,IAAI,CAAC;YACH,OAAO,MAAM,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,WAAW,QAAQ,OAAO,CAAC,CAAC;QAC3D,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,OAAO,CAAC,KAAK,CAAC,sBAAsB,EAAE,KAAK,CAAC,CAAC;YAC7C,MAAM,KAAK,CAAC;QACd,CAAC;IACH,CAAC;IAED;;;;OAIG;IACH,KAAK,CAAC,iBAAiB,CAAC,OAAe;QAiCrC,IAAI,CAAC;YACH,OAAO,MAAM,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,UAAU,OAAO,OAAO,CAAC,CAAC;QACzD,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,OAAO,CAAC,KAAK,CAAC,iCAAiC,EAAE,KAAK,CAAC,CAAC;YACxD,MAAM,KAAK,CAAC;QACd,CAAC;IACH,CAAC;IAED;;;;OAIG;IACH,KAAK,CAAC,iBAAiB,CAAC,WAAmB;QAUzC,IAAI,CAAC;YACH,OAAO,MAAM,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,SAAS,WAAW,QAAQ,CAAC,CAAC;QAC7D,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,OAAO,CAAC,KAAK,CAAC,gCAAgC,EAAE,KAAK,CAAC,CAAC;YACvD,MAAM,KAAK,CAAC;QACd,CAAC;IACH,CAAC;CACF;AAED,MAAM,CAAC,MAAM,gBAAgB,GAAG,CAAC,MAAqB,EAAc,EAAE;IACpE,OAAO,IAAI,UAAU,CAAC,MAAM,CAAC,CAAC;AAChC,CAAC,CAAC",
      names: [],
      sources: ["/Users/peterkrzyzek/Development/clickup-mcp-server/src/clickup-client/auth.ts"],
      sourcesContent: ["import { ClickUpClient } from './index.js';\n\nexport interface AuthorizedUser {\n  id: number;\n  username: string;\n  email: string;\n  color: string;\n  profilePicture: string;\n}\n\nexport interface Workspace {\n  id: string;\n  name: string;\n  color: string;\n  avatar: string;\n  members: Array<{\n    user: {\n      id: number;\n      username: string;\n      email: string;\n      color: string;\n      profilePicture: string;\n    };\n    role: number;\n    custom_role?: string;\n  }>;\n}\n\nexport class AuthClient {\n  private client: ClickUpClient;\n\n  constructor(client: ClickUpClient) {\n    this.client = client;\n  }\n\n  /**\n   * Get the authorized user's information\n   * @returns The authorized user's information\n   */\n  async getAuthorizedUser(): Promise<AuthorizedUser> {\n    try {\n      return await this.client.get('/user');\n    } catch (error) {\n      console.error('Error getting authorized user:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Get the workspaces (teams) that the authorized user belongs to\n   * @returns A list of workspaces\n   */\n  async getWorkspaces(): Promise<{ teams: Workspace[] }> {\n    try {\n      return await this.client.get('/team');\n    } catch (error) {\n      console.error('Error getting workspaces:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Get the spaces in a workspace\n   * @param workspaceId The ID of the workspace to get spaces from\n   * @returns A list of spaces\n   */\n  async getSpaces(workspaceId: string): Promise<{ spaces: Array<{\n    id: string;\n    name: string;\n    private: boolean;\n    statuses: Array<{\n      id: string;\n      status: string;\n      type: string;\n      orderindex: number;\n      color: string;\n    }>;\n    multiple_assignees: boolean;\n    features: {\n      due_dates: {\n        enabled: boolean;\n        start_date: boolean;\n        remap_due_dates: boolean;\n        remap_closed_due_date: boolean;\n      };\n      time_tracking: {\n        enabled: boolean;\n      };\n      tags: {\n        enabled: boolean;\n      };\n      time_estimates: {\n        enabled: boolean;\n      };\n      checklists: {\n        enabled: boolean;\n      };\n      custom_fields: {\n        enabled: boolean;\n      };\n      remap_dependencies: {\n        enabled: boolean;\n      };\n      dependency_warning: {\n        enabled: boolean;\n      };\n      portfolios: {\n        enabled: boolean;\n      };\n    };\n  }> }> {\n    try {\n      return await this.client.get(`/team/${workspaceId}/space`);\n    } catch (error) {\n      console.error('Error getting spaces:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Get the folders in a space\n   * @param spaceId The ID of the space to get folders from\n   * @returns A list of folders\n   */\n  async getFolders(spaceId: string): Promise<{ folders: Array<{\n    id: string;\n    name: string;\n    orderindex: number;\n    override_statuses: boolean;\n    hidden: boolean;\n    space: {\n      id: string;\n      name: string;\n    };\n    task_count: string;\n    lists: Array<{\n      id: string;\n      name: string;\n      orderindex: number;\n      status: {\n        status: string;\n        color: string;\n        hide_label: boolean;\n      };\n      priority: {\n        priority: string;\n        color: string;\n      };\n      assignee: {\n        id: number;\n        username: string;\n        color: string;\n        initials: string;\n        email: string;\n        profilePicture: string;\n      };\n      task_count: number;\n      due_date: string;\n      start_date: string;\n      folder: {\n        id: string;\n        name: string;\n        hidden: boolean;\n        access: boolean;\n      };\n      space: {\n        id: string;\n        name: string;\n        access: boolean;\n      };\n      archived: boolean;\n      override_statuses: boolean;\n      permission_level: string;\n    }>;\n    permission_level: string;\n  }> }> {\n    try {\n      return await this.client.get(`/space/${spaceId}/folder`);\n    } catch (error) {\n      console.error('Error getting folders:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Get the lists in a folder\n   * @param folderId The ID of the folder to get lists from\n   * @returns A list of lists\n   */\n  async getLists(folderId: string): Promise<{ lists: Array<{\n    id: string;\n    name: string;\n    orderindex: number;\n    status: {\n      status: string;\n      color: string;\n      hide_label: boolean;\n    };\n    priority: {\n      priority: string;\n      color: string;\n    };\n    assignee: {\n      id: number;\n      username: string;\n      color: string;\n      initials: string;\n      email: string;\n      profilePicture: string;\n    };\n    task_count: number;\n    due_date: string;\n    start_date: string;\n    folder: {\n      id: string;\n      name: string;\n      hidden: boolean;\n      access: boolean;\n    };\n    space: {\n      id: string;\n      name: string;\n      access: boolean;\n    };\n    archived: boolean;\n    override_statuses: boolean;\n    permission_level: string;\n  }> }> {\n    try {\n      return await this.client.get(`/folder/${folderId}/list`);\n    } catch (error) {\n      console.error('Error getting lists:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Get the lists in a space\n   * @param spaceId The ID of the space to get lists from\n   * @returns A list of lists\n   */\n  async getListsFromSpace(spaceId: string): Promise<{ lists: Array<{\n    id: string;\n    name: string;\n    orderindex: number;\n    status: {\n      status: string;\n      color: string;\n      hide_label: boolean;\n    };\n    priority: {\n      priority: string;\n      color: string;\n    };\n    assignee: {\n      id: number;\n      username: string;\n      color: string;\n      initials: string;\n      email: string;\n      profilePicture: string;\n    };\n    task_count: number;\n    due_date: string;\n    start_date: string;\n    space: {\n      id: string;\n      name: string;\n      access: boolean;\n    };\n    archived: boolean;\n    override_statuses: boolean;\n    permission_level: string;\n  }> }> {\n    try {\n      return await this.client.get(`/space/${spaceId}/list`);\n    } catch (error) {\n      console.error('Error getting lists from space:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Get the seats information for a workspace\n   * @param workspaceId The ID of the workspace to get seats information for\n   * @returns Seats information including used, total, and available seats\n   */\n  async getWorkspaceSeats(workspaceId: string): Promise<{\n    members: object;\n    filled_members_seats: number;\n    total_member_seats: number;\n    empty_member_seats: number;\n    guests: object;\n    filled_guest_seats: number;\n    total_guest_seats: number;\n    empty_guest_seats: number;\n  }> {\n    try {\n      return await this.client.get(`/team/${workspaceId}/seats`);\n    } catch (error) {\n      console.error('Error getting workspace seats:', error);\n      throw error;\n    }\n  }\n}\n\nexport const createAuthClient = (client: ClickUpClient): AuthClient => {\n  return new AuthClient(client);\n};\n"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "e741a9f383d3c599a30f52eb7eca5368436b196d"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_1hq0a8j7dj = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_1hq0a8j7dj();
export class AuthClient {
  constructor(client) {
    /* istanbul ignore next */
    cov_1hq0a8j7dj().f[0]++;
    cov_1hq0a8j7dj().s[0]++;
    this.client = client;
  }
  /**
   * Get the authorized user's information
   * @returns The authorized user's information
   */
  async getAuthorizedUser() {
    /* istanbul ignore next */
    cov_1hq0a8j7dj().f[1]++;
    cov_1hq0a8j7dj().s[1]++;
    try {
      /* istanbul ignore next */
      cov_1hq0a8j7dj().s[2]++;
      return await this.client.get('/user');
    } catch (error) {
      /* istanbul ignore next */
      cov_1hq0a8j7dj().s[3]++;
      console.error('Error getting authorized user:', error);
      /* istanbul ignore next */
      cov_1hq0a8j7dj().s[4]++;
      throw error;
    }
  }
  /**
   * Get the workspaces (teams) that the authorized user belongs to
   * @returns A list of workspaces
   */
  async getWorkspaces() {
    /* istanbul ignore next */
    cov_1hq0a8j7dj().f[2]++;
    cov_1hq0a8j7dj().s[5]++;
    try {
      /* istanbul ignore next */
      cov_1hq0a8j7dj().s[6]++;
      return await this.client.get('/team');
    } catch (error) {
      /* istanbul ignore next */
      cov_1hq0a8j7dj().s[7]++;
      console.error('Error getting workspaces:', error);
      /* istanbul ignore next */
      cov_1hq0a8j7dj().s[8]++;
      throw error;
    }
  }
  /**
   * Get the spaces in a workspace
   * @param workspaceId The ID of the workspace to get spaces from
   * @returns A list of spaces
   */
  async getSpaces(workspaceId) {
    /* istanbul ignore next */
    cov_1hq0a8j7dj().f[3]++;
    cov_1hq0a8j7dj().s[9]++;
    try {
      /* istanbul ignore next */
      cov_1hq0a8j7dj().s[10]++;
      return await this.client.get(`/team/${workspaceId}/space`);
    } catch (error) {
      /* istanbul ignore next */
      cov_1hq0a8j7dj().s[11]++;
      console.error('Error getting spaces:', error);
      /* istanbul ignore next */
      cov_1hq0a8j7dj().s[12]++;
      throw error;
    }
  }
  /**
   * Get the folders in a space
   * @param spaceId The ID of the space to get folders from
   * @returns A list of folders
   */
  async getFolders(spaceId) {
    /* istanbul ignore next */
    cov_1hq0a8j7dj().f[4]++;
    cov_1hq0a8j7dj().s[13]++;
    try {
      /* istanbul ignore next */
      cov_1hq0a8j7dj().s[14]++;
      return await this.client.get(`/space/${spaceId}/folder`);
    } catch (error) {
      /* istanbul ignore next */
      cov_1hq0a8j7dj().s[15]++;
      console.error('Error getting folders:', error);
      /* istanbul ignore next */
      cov_1hq0a8j7dj().s[16]++;
      throw error;
    }
  }
  /**
   * Get the lists in a folder
   * @param folderId The ID of the folder to get lists from
   * @returns A list of lists
   */
  async getLists(folderId) {
    /* istanbul ignore next */
    cov_1hq0a8j7dj().f[5]++;
    cov_1hq0a8j7dj().s[17]++;
    try {
      /* istanbul ignore next */
      cov_1hq0a8j7dj().s[18]++;
      return await this.client.get(`/folder/${folderId}/list`);
    } catch (error) {
      /* istanbul ignore next */
      cov_1hq0a8j7dj().s[19]++;
      console.error('Error getting lists:', error);
      /* istanbul ignore next */
      cov_1hq0a8j7dj().s[20]++;
      throw error;
    }
  }
  /**
   * Get the lists in a space
   * @param spaceId The ID of the space to get lists from
   * @returns A list of lists
   */
  async getListsFromSpace(spaceId) {
    /* istanbul ignore next */
    cov_1hq0a8j7dj().f[6]++;
    cov_1hq0a8j7dj().s[21]++;
    try {
      /* istanbul ignore next */
      cov_1hq0a8j7dj().s[22]++;
      return await this.client.get(`/space/${spaceId}/list`);
    } catch (error) {
      /* istanbul ignore next */
      cov_1hq0a8j7dj().s[23]++;
      console.error('Error getting lists from space:', error);
      /* istanbul ignore next */
      cov_1hq0a8j7dj().s[24]++;
      throw error;
    }
  }
  /**
   * Get the seats information for a workspace
   * @param workspaceId The ID of the workspace to get seats information for
   * @returns Seats information including used, total, and available seats
   */
  async getWorkspaceSeats(workspaceId) {
    /* istanbul ignore next */
    cov_1hq0a8j7dj().f[7]++;
    cov_1hq0a8j7dj().s[25]++;
    try {
      /* istanbul ignore next */
      cov_1hq0a8j7dj().s[26]++;
      return await this.client.get(`/team/${workspaceId}/seats`);
    } catch (error) {
      /* istanbul ignore next */
      cov_1hq0a8j7dj().s[27]++;
      console.error('Error getting workspace seats:', error);
      /* istanbul ignore next */
      cov_1hq0a8j7dj().s[28]++;
      throw error;
    }
  }
}
/* istanbul ignore next */
cov_1hq0a8j7dj().s[29]++;
export const createAuthClient = client => {
  /* istanbul ignore next */
  cov_1hq0a8j7dj().f[8]++;
  cov_1hq0a8j7dj().s[30]++;
  return new AuthClient(client);
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
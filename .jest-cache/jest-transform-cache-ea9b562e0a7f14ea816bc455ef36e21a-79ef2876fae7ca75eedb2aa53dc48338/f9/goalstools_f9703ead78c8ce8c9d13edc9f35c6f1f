9a3eea566d10af49cd2f9d8627661d37
/* istanbul ignore next */
function cov_1hf59zse5l() {
  var path = "/Users/peterkrzyzek/Development/clickup-mcp-server/src/tools/goals-tools.ts";
  var hash = "a39a07adc5daf42691698be4f75e41fb3d2aba04";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/peterkrzyzek/Development/clickup-mcp-server/src/tools/goals-tools.ts",
    statementMap: {
      "0": {
        start: {
          line: 5,
          column: 22
        },
        end: {
          line: 5,
          column: 43
        }
      },
      "1": {
        start: {
          line: 6,
          column: 20
        },
        end: {
          line: 6,
          column: 60
        }
      },
      "2": {
        start: {
          line: 11,
          column: 4
        },
        end: {
          line: 31,
          column: 7
        }
      },
      "3": {
        start: {
          line: 15,
          column: 8
        },
        end: {
          line: 30,
          column: 9
        }
      },
      "4": {
        start: {
          line: 16,
          column: 26
        },
        end: {
          line: 16,
          column: 80
        }
      },
      "5": {
        start: {
          line: 17,
          column: 12
        },
        end: {
          line: 22,
          column: 14
        }
      },
      "6": {
        start: {
          line: 25,
          column: 12
        },
        end: {
          line: 25,
          column: 57
        }
      },
      "7": {
        start: {
          line: 26,
          column: 12
        },
        end: {
          line: 29,
          column: 14
        }
      },
      "8": {
        start: {
          line: 32,
          column: 4
        },
        end: {
          line: 72,
          column: 7
        }
      },
      "9": {
        start: {
          line: 41,
          column: 8
        },
        end: {
          line: 71,
          column: 9
        }
      },
      "10": {
        start: {
          line: 43,
          column: 12
        },
        end: {
          line: 48,
          column: 13
        }
      },
      "11": {
        start: {
          line: 44,
          column: 16
        },
        end: {
          line: 47,
          column: 18
        }
      },
      "12": {
        start: {
          line: 49,
          column: 27
        },
        end: {
          line: 56,
          column: 13
        }
      },
      "13": {
        start: {
          line: 57,
          column: 25
        },
        end: {
          line: 57,
          column: 70
        }
      },
      "14": {
        start: {
          line: 58,
          column: 12
        },
        end: {
          line: 63,
          column: 14
        }
      },
      "15": {
        start: {
          line: 66,
          column: 12
        },
        end: {
          line: 66,
          column: 57
        }
      },
      "16": {
        start: {
          line: 67,
          column: 12
        },
        end: {
          line: 70,
          column: 14
        }
      },
      "17": {
        start: {
          line: 73,
          column: 4
        },
        end: {
          line: 113,
          column: 7
        }
      },
      "18": {
        start: {
          line: 82,
          column: 8
        },
        end: {
          line: 112,
          column: 9
        }
      },
      "19": {
        start: {
          line: 84,
          column: 12
        },
        end: {
          line: 89,
          column: 13
        }
      },
      "20": {
        start: {
          line: 85,
          column: 16
        },
        end: {
          line: 88,
          column: 18
        }
      },
      "21": {
        start: {
          line: 90,
          column: 27
        },
        end: {
          line: 97,
          column: 13
        }
      },
      "22": {
        start: {
          line: 98,
          column: 32
        },
        end: {
          line: 98,
          column: 77
        }
      },
      "23": {
        start: {
          line: 99,
          column: 12
        },
        end: {
          line: 104,
          column: 14
        }
      },
      "24": {
        start: {
          line: 107,
          column: 12
        },
        end: {
          line: 107,
          column: 57
        }
      },
      "25": {
        start: {
          line: 108,
          column: 12
        },
        end: {
          line: 111,
          column: 14
        }
      },
      "26": {
        start: {
          line: 114,
          column: 4
        },
        end: {
          line: 133,
          column: 7
        }
      },
      "27": {
        start: {
          line: 117,
          column: 8
        },
        end: {
          line: 132,
          column: 9
        }
      },
      "28": {
        start: {
          line: 118,
          column: 12
        },
        end: {
          line: 118,
          column: 50
        }
      },
      "29": {
        start: {
          line: 119,
          column: 12
        },
        end: {
          line: 124,
          column: 14
        }
      },
      "30": {
        start: {
          line: 127,
          column: 12
        },
        end: {
          line: 127,
          column: 57
        }
      },
      "31": {
        start: {
          line: 128,
          column: 12
        },
        end: {
          line: 131,
          column: 14
        }
      },
      "32": {
        start: {
          line: 134,
          column: 4
        },
        end: {
          line: 164,
          column: 7
        }
      },
      "33": {
        start: {
          line: 137,
          column: 8
        },
        end: {
          line: 163,
          column: 9
        }
      },
      "34": {
        start: {
          line: 138,
          column: 25
        },
        end: {
          line: 138,
          column: 59
        }
      },
      "35": {
        start: {
          line: 140,
          column: 34
        },
        end: {
          line: 149,
          column: 13
        }
      },
      "36": {
        start: {
          line: 147,
          column: 68
        },
        end: {
          line: 147,
          column: 79
        }
      },
      "37": {
        start: {
          line: 150,
          column: 12
        },
        end: {
          line: 155,
          column: 14
        }
      },
      "38": {
        start: {
          line: 158,
          column: 12
        },
        end: {
          line: 158,
          column: 56
        }
      },
      "39": {
        start: {
          line: 159,
          column: 12
        },
        end: {
          line: 162,
          column: 14
        }
      },
      "40": {
        start: {
          line: 168,
          column: 4
        },
        end: {
          line: 203,
          column: 7
        }
      },
      "41": {
        start: {
          line: 178,
          column: 8
        },
        end: {
          line: 202,
          column: 9
        }
      },
      "42": {
        start: {
          line: 179,
          column: 27
        },
        end: {
          line: 187,
          column: 13
        }
      },
      "43": {
        start: {
          line: 188,
          column: 27
        },
        end: {
          line: 188,
          column: 78
        }
      },
      "44": {
        start: {
          line: 189,
          column: 12
        },
        end: {
          line: 194,
          column: 14
        }
      },
      "45": {
        start: {
          line: 197,
          column: 12
        },
        end: {
          line: 197,
          column: 64
        }
      },
      "46": {
        start: {
          line: 198,
          column: 12
        },
        end: {
          line: 201,
          column: 14
        }
      },
      "47": {
        start: {
          line: 204,
          column: 4
        },
        end: {
          line: 236,
          column: 7
        }
      },
      "48": {
        start: {
          line: 213,
          column: 8
        },
        end: {
          line: 235,
          column: 9
        }
      },
      "49": {
        start: {
          line: 214,
          column: 27
        },
        end: {
          line: 220,
          column: 13
        }
      },
      "50": {
        start: {
          line: 221,
          column: 34
        },
        end: {
          line: 221,
          column: 96
        }
      },
      "51": {
        start: {
          line: 222,
          column: 12
        },
        end: {
          line: 227,
          column: 14
        }
      },
      "52": {
        start: {
          line: 230,
          column: 12
        },
        end: {
          line: 230,
          column: 64
        }
      },
      "53": {
        start: {
          line: 231,
          column: 12
        },
        end: {
          line: 234,
          column: 14
        }
      },
      "54": {
        start: {
          line: 237,
          column: 4
        },
        end: {
          line: 257,
          column: 7
        }
      },
      "55": {
        start: {
          line: 241,
          column: 8
        },
        end: {
          line: 256,
          column: 9
        }
      },
      "56": {
        start: {
          line: 242,
          column: 12
        },
        end: {
          line: 242,
          column: 67
        }
      },
      "57": {
        start: {
          line: 243,
          column: 12
        },
        end: {
          line: 248,
          column: 14
        }
      },
      "58": {
        start: {
          line: 251,
          column: 12
        },
        end: {
          line: 251,
          column: 64
        }
      },
      "59": {
        start: {
          line: 252,
          column: 12
        },
        end: {
          line: 255,
          column: 14
        }
      },
      "60": {
        start: {
          line: 261,
          column: 4
        },
        end: {
          line: 280,
          column: 7
        }
      },
      "61": {
        start: {
          line: 264,
          column: 8
        },
        end: {
          line: 279,
          column: 9
        }
      },
      "62": {
        start: {
          line: 265,
          column: 28
        },
        end: {
          line: 265,
          column: 69
        }
      },
      "63": {
        start: {
          line: 266,
          column: 12
        },
        end: {
          line: 271,
          column: 14
        }
      },
      "64": {
        start: {
          line: 274,
          column: 12
        },
        end: {
          line: 274,
          column: 64
        }
      },
      "65": {
        start: {
          line: 275,
          column: 12
        },
        end: {
          line: 278,
          column: 14
        }
      },
      "66": {
        start: {
          line: 284,
          column: 4
        },
        end: {
          line: 327,
          column: 7
        }
      },
      "67": {
        start: {
          line: 295,
          column: 8
        },
        end: {
          line: 326,
          column: 9
        }
      },
      "68": {
        start: {
          line: 297,
          column: 25
        },
        end: {
          line: 304,
          column: 14
        }
      },
      "69": {
        start: {
          line: 306,
          column: 27
        },
        end: {
          line: 312,
          column: 14
        }
      },
      "70": {
        start: {
          line: 313,
          column: 12
        },
        end: {
          line: 318,
          column: 14
        }
      },
      "71": {
        start: {
          line: 321,
          column: 12
        },
        end: {
          line: 321,
          column: 64
        }
      },
      "72": {
        start: {
          line: 322,
          column: 12
        },
        end: {
          line: 325,
          column: 14
        }
      },
      "73": {
        start: {
          line: 328,
          column: 4
        },
        end: {
          line: 373,
          column: 7
        }
      },
      "74": {
        start: {
          line: 339,
          column: 8
        },
        end: {
          line: 372,
          column: 9
        }
      },
      "75": {
        start: {
          line: 341,
          column: 25
        },
        end: {
          line: 348,
          column: 14
        }
      },
      "76": {
        start: {
          line: 350,
          column: 27
        },
        end: {
          line: 356,
          column: 14
        }
      },
      "77": {
        start: {
          line: 358,
          column: 35
        },
        end: {
          line: 358,
          column: 90
        }
      },
      "78": {
        start: {
          line: 359,
          column: 12
        },
        end: {
          line: 364,
          column: 14
        }
      },
      "79": {
        start: {
          line: 367,
          column: 12
        },
        end: {
          line: 367,
          column: 66
        }
      },
      "80": {
        start: {
          line: 368,
          column: 12
        },
        end: {
          line: 371,
          column: 14
        }
      },
      "81": {
        start: {
          line: 374,
          column: 4
        },
        end: {
          line: 420,
          column: 7
        }
      },
      "82": {
        start: {
          line: 377,
          column: 8
        },
        end: {
          line: 419,
          column: 9
        }
      },
      "83": {
        start: {
          line: 378,
          column: 25
        },
        end: {
          line: 378,
          column: 59
        }
      },
      "84": {
        start: {
          line: 379,
          column: 27
        },
        end: {
          line: 379,
          column: 91
        }
      },
      "85": {
        start: {
          line: 380,
          column: 33
        },
        end: {
          line: 380,
          column: 75
        }
      },
      "86": {
        start: {
          line: 381,
          column: 35
        },
        end: {
          line: 381,
          column: 37
        }
      },
      "87": {
        start: {
          line: 382,
          column: 12
        },
        end: {
          line: 392,
          column: 13
        }
      },
      "88": {
        start: {
          line: 383,
          column: 33
        },
        end: {
          line: 383,
          column: 131
        }
      },
      "89": {
        start: {
          line: 384,
          column: 35
        },
        end: {
          line: 384,
          column: 37
        }
      },
      "90": {
        start: {
          line: 385,
          column: 16
        },
        end: {
          line: 390,
          column: 17
        }
      },
      "91": {
        start: {
          line: 386,
          column: 20
        },
        end: {
          line: 386,
          column: 196
        }
      },
      "92": {
        start: {
          line: 389,
          column: 20
        },
        end: {
          line: 389,
          column: 200
        }
      },
      "93": {
        start: {
          line: 391,
          column: 16
        },
        end: {
          line: 391,
          column: 102
        }
      },
      "94": {
        start: {
          line: 393,
          column: 38
        },
        end: {
          line: 405,
          column: 1
        }
      },
      "95": {
        start: {
          line: 400,
          column: 34
        },
        end: {
          line: 400,
          column: 44
        }
      },
      "96": {
        start: {
          line: 406,
          column: 12
        },
        end: {
          line: 411,
          column: 14
        }
      },
      "97": {
        start: {
          line: 414,
          column: 12
        },
        end: {
          line: 414,
          column: 68
        }
      },
      "98": {
        start: {
          line: 415,
          column: 12
        },
        end: {
          line: 418,
          column: 14
        }
      }
    },
    fnMap: {
      "0": {
        name: "setupGoalsTools",
        decl: {
          start: {
            line: 7,
            column: 16
          },
          end: {
            line: 7,
            column: 31
          }
        },
        loc: {
          start: {
            line: 7,
            column: 40
          },
          end: {
            line: 421,
            column: 1
          }
        },
        line: 7
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 14,
            column: 7
          },
          end: {
            line: 14,
            column: 8
          }
        },
        loc: {
          start: {
            line: 14,
            column: 49
          },
          end: {
            line: 31,
            column: 5
          }
        },
        line: 14
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 40,
            column: 7
          },
          end: {
            line: 40,
            column: 8
          }
        },
        loc: {
          start: {
            line: 40,
            column: 91
          },
          end: {
            line: 72,
            column: 5
          }
        },
        line: 40
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 81,
            column: 7
          },
          end: {
            line: 81,
            column: 8
          }
        },
        loc: {
          start: {
            line: 81,
            column: 90
          },
          end: {
            line: 113,
            column: 5
          }
        },
        line: 81
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 116,
            column: 7
          },
          end: {
            line: 116,
            column: 8
          }
        },
        loc: {
          start: {
            line: 116,
            column: 30
          },
          end: {
            line: 133,
            column: 5
          }
        },
        line: 116
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 136,
            column: 7
          },
          end: {
            line: 136,
            column: 8
          }
        },
        loc: {
          start: {
            line: 136,
            column: 30
          },
          end: {
            line: 164,
            column: 5
          }
        },
        line: 136
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 147,
            column: 63
          },
          end: {
            line: 147,
            column: 64
          }
        },
        loc: {
          start: {
            line: 147,
            column: 68
          },
          end: {
            line: 147,
            column: 79
          }
        },
        line: 147
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 177,
            column: 7
          },
          end: {
            line: 177,
            column: 8
          }
        },
        loc: {
          start: {
            line: 177,
            column: 100
          },
          end: {
            line: 203,
            column: 5
          }
        },
        line: 177
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 212,
            column: 7
          },
          end: {
            line: 212,
            column: 8
          }
        },
        loc: {
          start: {
            line: 212,
            column: 92
          },
          end: {
            line: 236,
            column: 5
          }
        },
        line: 212
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 240,
            column: 7
          },
          end: {
            line: 240,
            column: 8
          }
        },
        loc: {
          start: {
            line: 240,
            column: 41
          },
          end: {
            line: 257,
            column: 5
          }
        },
        line: 240
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 263,
            column: 7
          },
          end: {
            line: 263,
            column: 8
          }
        },
        loc: {
          start: {
            line: 263,
            column: 30
          },
          end: {
            line: 280,
            column: 5
          }
        },
        line: 263
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 294,
            column: 7
          },
          end: {
            line: 294,
            column: 8
          }
        },
        loc: {
          start: {
            line: 294,
            column: 112
          },
          end: {
            line: 327,
            column: 5
          }
        },
        line: 294
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 338,
            column: 7
          },
          end: {
            line: 338,
            column: 8
          }
        },
        loc: {
          start: {
            line: 338,
            column: 116
          },
          end: {
            line: 373,
            column: 5
          }
        },
        line: 338
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 376,
            column: 7
          },
          end: {
            line: 376,
            column: 8
          }
        },
        loc: {
          start: {
            line: 376,
            column: 30
          },
          end: {
            line: 420,
            column: 5
          }
        },
        line: 376
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 400,
            column: 29
          },
          end: {
            line: 400,
            column: 30
          }
        },
        loc: {
          start: {
            line: 400,
            column: 34
          },
          end: {
            line: 400,
            column: 44
          }
        },
        line: 400
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 43,
            column: 12
          },
          end: {
            line: 48,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 43,
            column: 12
          },
          end: {
            line: 48,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 43
      },
      "1": {
        loc: {
          start: {
            line: 84,
            column: 12
          },
          end: {
            line: 89,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 84,
            column: 12
          },
          end: {
            line: 89,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 84
      },
      "2": {
        loc: {
          start: {
            line: 84,
            column: 16
          },
          end: {
            line: 84,
            column: 67
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 84,
            column: 16
          },
          end: {
            line: 84,
            column: 24
          }
        }, {
          start: {
            line: 84,
            column: 28
          },
          end: {
            line: 84,
            column: 67
          }
        }],
        line: 84
      },
      "3": {
        loc: {
          start: {
            line: 385,
            column: 16
          },
          end: {
            line: 390,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 385,
            column: 16
          },
          end: {
            line: 390,
            column: 17
          }
        }, {
          start: {
            line: 388,
            column: 21
          },
          end: {
            line: 390,
            column: 17
          }
        }],
        line: 385
      },
      "4": {
        loc: {
          start: {
            line: 386,
            column: 92
          },
          end: {
            line: 386,
            column: 112
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 386,
            column: 92
          },
          end: {
            line: 386,
            column: 103
          }
        }, {
          start: {
            line: 386,
            column: 107
          },
          end: {
            line: 386,
            column: 112
          }
        }],
        line: 386
      },
      "5": {
        loc: {
          start: {
            line: 386,
            column: 172
          },
          end: {
            line: 386,
            column: 192
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 386,
            column: 172
          },
          end: {
            line: 386,
            column: 183
          }
        }, {
          start: {
            line: 386,
            column: 187
          },
          end: {
            line: 386,
            column: 192
          }
        }],
        line: 386
      },
      "6": {
        loc: {
          start: {
            line: 389,
            column: 90
          },
          end: {
            line: 389,
            column: 114
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 389,
            column: 90
          },
          end: {
            line: 389,
            column: 101
          }
        }, {
          start: {
            line: 389,
            column: 105
          },
          end: {
            line: 389,
            column: 114
          }
        }],
        line: 389
      },
      "7": {
        loc: {
          start: {
            line: 389,
            column: 172
          },
          end: {
            line: 389,
            column: 196
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 389,
            column: 172
          },
          end: {
            line: 389,
            column: 183
          }
        }, {
          start: {
            line: 389,
            column: 187
          },
          end: {
            line: 389,
            column: 196
          }
        }],
        line: 389
      },
      "8": {
        loc: {
          start: {
            line: 404,
            column: 18
          },
          end: {
            line: 404,
            column: 54
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 404,
            column: 18
          },
          end: {
            line: 404,
            column: 34
          }
        }, {
          start: {
            line: 404,
            column: 38
          },
          end: {
            line: 404,
            column: 54
          }
        }],
        line: 404
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0]
    },
    inputSourceMap: {
      file: "/Users/peterkrzyzek/Development/clickup-mcp-server/src/tools/goals-tools.ts",
      mappings: "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",
      names: [],
      sources: ["/Users/peterkrzyzek/Development/clickup-mcp-server/src/tools/goals-tools.ts"],
      sourcesContent: ["import { McpServer } from '@modelcontextprotocol/sdk/server/mcp.js';\nimport { z } from 'zod';\nimport { createClickUpClient } from '../clickup-client/index.js';\nimport { createEnhancedGoalsClient } from '../clickup-client/goals-enhanced.js';\nimport { \n  TeamIdSchema, \n  GoalIdSchema, \n  TargetIdSchema,\n  CreateGoalSchema,\n  UpdateGoalSchema,\n  GoalColorSchema\n} from '../schemas/goals-schemas.js';\n\n// Create clients\nconst clickUpClient = createClickUpClient();\nconst goalsClient = createEnhancedGoalsClient(clickUpClient);\n\nexport function setupGoalsTools(server: McpServer): void {\n\n  // ========================================\n  // GOAL MANAGEMENT OPERATIONS\n  // ========================================\n\n  server.tool(\n    'get_goals',\n    'Get goals for a team with optional filtering. Returns goal details including progress, targets, and team members.',\n    {\n      team_id: z.string().min(1).describe('The ID of the team to get goals for'),\n      include_completed: z.boolean().optional().default(false).describe('Whether to include completed goals')\n    },\n    async ({ team_id, include_completed }) => {\n      try {\n        const goals = await goalsClient.getGoals(team_id, include_completed);\n\n        return {\n          content: [{ \n            type: 'text', \n            text: `Goals for team ${team_id}:\\n\\n${JSON.stringify(goals, null, 2)}` \n          }]\n        };\n      } catch (error: any) {\n        console.error('Error getting goals:', error);\n        return {\n          content: [{ type: 'text', text: `Error getting goals: ${error.message}` }],\n          isError: true\n        };\n      }\n    }\n  );\n\n  server.tool(\n    'create_goal',\n    'Create a new goal with targets and deadlines. Supports team collaboration with multiple owners.',\n    {\n      team_id: z.string().min(1).describe('The ID of the team to create the goal for'),\n      name: z.string().min(1).max(255).describe('The name of the goal'),\n      due_date: z.number().positive().describe('Goal due date (Unix timestamp)'),\n      description: z.string().optional().describe('Detailed description of the goal'),\n      multiple_owners: z.boolean().default(false).describe('Whether the goal can have multiple owners'),\n      owners: z.array(z.number().positive()).min(1).describe('Array of user IDs who own this goal'),\n      color: z.string().regex(/^#[0-9A-Fa-f]{6}$/).optional().default('#007cff').describe('Goal color (hex format)')\n    },\n    async ({ team_id, name, due_date, description, multiple_owners, owners, color }) => {\n      try {\n        // Validate due date is in the future\n        if (!goalsClient.validateGoalDate(due_date)) {\n          return {\n            content: [{ type: 'text', text: 'Error: Due date must be in the future' }],\n            isError: true\n          };\n        }\n\n        const params = {\n          name,\n          due_date,\n          description,\n          multiple_owners,\n          owners,\n          color\n        };\n\n        const goal = await goalsClient.createGoal(team_id, params);\n\n        return {\n          content: [{ \n            type: 'text', \n            text: `Goal created successfully!\\n\\n${JSON.stringify(goal, null, 2)}` \n          }]\n        };\n      } catch (error: any) {\n        console.error('Error creating goal:', error);\n        return {\n          content: [{ type: 'text', text: `Error creating goal: ${error.message}` }],\n          isError: true\n        };\n      }\n    }\n  );\n\n  server.tool(\n    'update_goal',\n    'Update an existing goal. Can modify name, description, due date, owners, and color.',\n    {\n      goal_id: z.string().min(1).describe('The ID of the goal to update'),\n      name: z.string().min(1).max(255).optional().describe('New name for the goal'),\n      due_date: z.number().positive().optional().describe('New due date (Unix timestamp)'),\n      description: z.string().optional().describe('New description for the goal'),\n      rem_owners: z.array(z.number().positive()).optional().describe('Array of user IDs to remove as owners'),\n      add_owners: z.array(z.number().positive()).optional().describe('Array of user IDs to add as owners'),\n      color: z.string().regex(/^#[0-9A-Fa-f]{6}$/).optional().describe('New goal color (hex format)')\n    },\n    async ({ goal_id, name, due_date, description, rem_owners, add_owners, color }) => {\n      try {\n        // Validate due date if provided\n        if (due_date && !goalsClient.validateGoalDate(due_date)) {\n          return {\n            content: [{ type: 'text', text: 'Error: Due date must be in the future' }],\n            isError: true\n          };\n        }\n\n        const params = {\n          name,\n          due_date,\n          description,\n          rem_owners,\n          add_owners,\n          color\n        };\n\n        const updatedGoal = await goalsClient.updateGoal(goal_id, params);\n\n        return {\n          content: [{ \n            type: 'text', \n            text: `Goal updated successfully!\\n\\n${JSON.stringify(updatedGoal, null, 2)}` \n          }]\n        };\n      } catch (error: any) {\n        console.error('Error updating goal:', error);\n        return {\n          content: [{ type: 'text', text: `Error updating goal: ${error.message}` }],\n          isError: true\n        };\n      }\n    }\n  );\n\n  server.tool(\n    'delete_goal',\n    'Delete a goal from ClickUp. This action cannot be undone and will remove all associated targets.',\n    {\n      goal_id: z.string().min(1).describe('The ID of the goal to delete')\n    },\n    async ({ goal_id }) => {\n      try {\n        await goalsClient.deleteGoal(goal_id);\n\n        return {\n          content: [{ \n            type: 'text', \n            text: `Goal ${goal_id} deleted successfully. All associated targets have been removed.` \n          }]\n        };\n      } catch (error: any) {\n        console.error('Error deleting goal:', error);\n        return {\n          content: [{ type: 'text', text: `Error deleting goal: ${error.message}` }],\n          isError: true\n        };\n      }\n    }\n  );\n\n  server.tool(\n    'get_goal',\n    'Get detailed information about a specific goal including all targets and progress data.',\n    {\n      goal_id: z.string().min(1).describe('The ID of the goal to retrieve')\n    },\n    async ({ goal_id }) => {\n      try {\n        const goal = await goalsClient.getGoal(goal_id);\n\n        // Add formatted progress information\n        const formattedGoal = {\n          ...goal,\n          progress_summary: {\n            overall_progress: `${goal.percent_completed}%`,\n            days_until_due: goalsClient.getDaysUntilDue(goal.due_date),\n            status: goalsClient.getGoalStatus(goal.percent_completed, goal.due_date),\n            targets_count: goal.key_results.length,\n            completed_targets: goal.key_results.filter(t => t.completed).length\n          }\n        };\n\n        return {\n          content: [{ \n            type: 'text', \n            text: `Goal details:\\n\\n${JSON.stringify(formattedGoal, null, 2)}` \n          }]\n        };\n      } catch (error: any) {\n        console.error('Error getting goal:', error);\n        return {\n          content: [{ type: 'text', text: `Error getting goal: ${error.message}` }],\n          isError: true\n        };\n      }\n    }\n  );\n\n  // ========================================\n  // GOAL TARGET MANAGEMENT\n  // ========================================\n\n  server.tool(\n    'create_goal_target',\n    'Create a target (key result) for a goal. Supports different target types: number, currency, boolean, task, and list.',\n    {\n      goal_id: z.string().min(1).describe('The ID of the goal to add the target to'),\n      name: z.string().min(1).max(255).describe('The name of the target'),\n      type: z.enum(['number', 'currency', 'boolean', 'task', 'list']).describe('The type of target'),\n      target_value: z.number().min(0).describe('The target value to achieve'),\n      start_value: z.number().optional().default(0).describe('The starting value (defaults to 0)'),\n      unit: z.string().optional().describe('Unit of measurement (e.g., \"USD\", \"tasks\", \"users\")'),\n      task_statuses: z.array(z.string()).optional().describe('Task statuses to track (for task type targets)'),\n      list_ids: z.array(z.string()).optional().describe('List IDs to track (for list type targets)')\n    },\n    async ({ goal_id, name, type, target_value, start_value, unit, task_statuses, list_ids }) => {\n      try {\n        const params = {\n          name,\n          type,\n          target_value,\n          start_value,\n          unit,\n          task_statuses,\n          list_ids\n        };\n\n        const target = await goalsClient.createGoalTarget(goal_id, params);\n\n        return {\n          content: [{ \n            type: 'text', \n            text: `Goal target created successfully!\\n\\n${JSON.stringify(target, null, 2)}` \n          }]\n        };\n      } catch (error: any) {\n        console.error('Error creating goal target:', error);\n        return {\n          content: [{ type: 'text', text: `Error creating goal target: ${error.message}` }],\n          isError: true\n        };\n      }\n    }\n  );\n\n  server.tool(\n    'update_goal_target',\n    'Update an existing goal target. Can modify name, target value, unit, and tracking parameters.',\n    {\n      goal_id: z.string().min(1).describe('The ID of the goal'),\n      target_id: z.string().min(1).describe('The ID of the target to update'),\n      name: z.string().min(1).max(255).optional().describe('New name for the target'),\n      target_value: z.number().min(0).optional().describe('New target value'),\n      unit: z.string().optional().describe('New unit of measurement'),\n      task_statuses: z.array(z.string()).optional().describe('New task statuses to track'),\n      list_ids: z.array(z.string()).optional().describe('New list IDs to track')\n    },\n    async ({ goal_id, target_id, name, target_value, unit, task_statuses, list_ids }) => {\n      try {\n        const params = {\n          name,\n          target_value,\n          unit,\n          task_statuses,\n          list_ids\n        };\n\n        const updatedTarget = await goalsClient.updateGoalTarget(goal_id, target_id, params);\n\n        return {\n          content: [{ \n            type: 'text', \n            text: `Goal target updated successfully!\\n\\n${JSON.stringify(updatedTarget, null, 2)}` \n          }]\n        };\n      } catch (error: any) {\n        console.error('Error updating goal target:', error);\n        return {\n          content: [{ type: 'text', text: `Error updating goal target: ${error.message}` }],\n          isError: true\n        };\n      }\n    }\n  );\n\n  server.tool(\n    'delete_goal_target',\n    'Delete a target from a goal. This action cannot be undone.',\n    {\n      goal_id: z.string().min(1).describe('The ID of the goal'),\n      target_id: z.string().min(1).describe('The ID of the target to delete')\n    },\n    async ({ goal_id, target_id }) => {\n      try {\n        await goalsClient.deleteGoalTarget(goal_id, target_id);\n\n        return {\n          content: [{ \n            type: 'text', \n            text: `Goal target ${target_id} deleted successfully from goal ${goal_id}.` \n          }]\n        };\n      } catch (error: any) {\n        console.error('Error deleting goal target:', error);\n        return {\n          content: [{ type: 'text', text: `Error deleting goal target: ${error.message}` }],\n          isError: true\n        };\n      }\n    }\n  );\n\n  // ========================================\n  // GOAL ANALYTICS & REPORTING\n  // ========================================\n\n  server.tool(\n    'get_goal_summary',\n    'Get comprehensive goal analytics and summary for a team. Includes progress statistics, status breakdown, and upcoming deadlines.',\n    {\n      team_id: z.string().min(1).describe('The ID of the team to get goal summary for')\n    },\n    async ({ team_id }) => {\n      try {\n        const summary = await goalsClient.getGoalSummary(team_id);\n\n        return {\n          content: [{ \n            type: 'text', \n            text: `Goal summary for team ${team_id}:\\n\\n${JSON.stringify(summary, null, 2)}` \n          }]\n        };\n      } catch (error: any) {\n        console.error('Error getting goal summary:', error);\n        return {\n          content: [{ type: 'text', text: `Error getting goal summary: ${error.message}` }],\n          isError: true\n        };\n      }\n    }\n  );\n\n  // ========================================\n  // HELPER TOOLS\n  // ========================================\n\n  server.tool(\n    'create_number_goal',\n    'Create a number-based goal with a target. Convenient helper for creating numeric goals like task counts or metrics.',\n    {\n      team_id: z.string().min(1).describe('The ID of the team'),\n      goal_name: z.string().min(1).max(255).describe('The name of the goal'),\n      target_name: z.string().min(1).max(255).describe('The name of the target'),\n      target_value: z.number().min(1).describe('The numeric target to achieve'),\n      unit: z.string().optional().describe('Unit of measurement (e.g., \"tasks\", \"users\", \"points\")'),\n      due_date: z.number().positive().describe('Goal due date (Unix timestamp)'),\n      description: z.string().optional().describe('Goal description'),\n      owners: z.array(z.number().positive()).min(1).describe('Array of user IDs who own this goal'),\n      color: z.string().regex(/^#[0-9A-Fa-f]{6}$/).optional().default('#007cff').describe('Goal color')\n    },\n    async ({ team_id, goal_name, target_name, target_value, unit, due_date, description, owners, color }) => {\n      try {\n        // Create the goal\n        const goal = await goalsClient.createGoal(team_id, {\n          name: goal_name,\n          due_date,\n          description,\n          multiple_owners: owners.length > 1,\n          owners,\n          color\n        });\n\n        // Create the number target\n        const target = await goalsClient.createGoalTarget(goal.id, {\n          name: target_name,\n          type: 'number',\n          target_value,\n          start_value: 0,\n          unit\n        });\n\n        return {\n          content: [{ \n            type: 'text', \n            text: `Number goal created successfully!\\n\\nGoal: ${JSON.stringify(goal, null, 2)}\\n\\nTarget: ${JSON.stringify(target, null, 2)}` \n          }]\n        };\n      } catch (error: any) {\n        console.error('Error creating number goal:', error);\n        return {\n          content: [{ type: 'text', text: `Error creating number goal: ${error.message}` }],\n          isError: true\n        };\n      }\n    }\n  );\n\n  server.tool(\n    'create_currency_goal',\n    'Create a currency-based goal with a monetary target. Convenient helper for creating revenue or budget goals.',\n    {\n      team_id: z.string().min(1).describe('The ID of the team'),\n      goal_name: z.string().min(1).max(255).describe('The name of the goal'),\n      target_name: z.string().min(1).max(255).describe('The name of the target'),\n      target_value: z.number().min(0).describe('The monetary target to achieve'),\n      currency: z.string().optional().default('USD').describe('Currency code (e.g., \"USD\", \"EUR\", \"GBP\")'),\n      due_date: z.number().positive().describe('Goal due date (Unix timestamp)'),\n      description: z.string().optional().describe('Goal description'),\n      owners: z.array(z.number().positive()).min(1).describe('Array of user IDs who own this goal'),\n      color: z.string().regex(/^#[0-9A-Fa-f]{6}$/).optional().default('#00c851').describe('Goal color')\n    },\n    async ({ team_id, goal_name, target_name, target_value, currency, due_date, description, owners, color }) => {\n      try {\n        // Create the goal\n        const goal = await goalsClient.createGoal(team_id, {\n          name: goal_name,\n          due_date,\n          description,\n          multiple_owners: owners.length > 1,\n          owners,\n          color\n        });\n\n        // Create the currency target\n        const target = await goalsClient.createGoalTarget(goal.id, {\n          name: target_name,\n          type: 'currency',\n          target_value,\n          start_value: 0,\n          unit: currency\n        });\n\n        // Format the target value for display\n        const formattedValue = goalsClient.formatCurrencyValue(target_value, currency);\n\n        return {\n          content: [{ \n            type: 'text', \n            text: `Currency goal created successfully!\\n\\nGoal: ${goal_name}\\nTarget: ${formattedValue}\\n\\nDetails:\\nGoal: ${JSON.stringify(goal, null, 2)}\\n\\nTarget: ${JSON.stringify(target, null, 2)}` \n          }]\n        };\n      } catch (error: any) {\n        console.error('Error creating currency goal:', error);\n        return {\n          content: [{ type: 'text', text: `Error creating currency goal: ${error.message}` }],\n          isError: true\n        };\n      }\n    }\n  );\n\n  server.tool(\n    'format_goal_progress',\n    'Format goal progress information for human-readable display. Useful for reporting and dashboards.',\n    {\n      goal_id: z.string().min(1).describe('The ID of the goal to format')\n    },\n    async ({ goal_id }) => {\n      try {\n        const goal = await goalsClient.getGoal(goal_id);\n        \n        const status = goalsClient.getGoalStatus(goal.percent_completed, goal.due_date);\n        const daysUntilDue = goalsClient.getDaysUntilDue(goal.due_date);\n        \n        let formattedTargets = '';\n        for (const target of goal.key_results) {\n          const progress = goalsClient.calculateTargetProgress(target.start_value, target.current_value, target.target_value);\n          let valueDisplay = '';\n          \n          if (target.type === 'currency') {\n            valueDisplay = `${goalsClient.formatCurrencyValue(target.current_value, target.unit || 'USD')} / ${goalsClient.formatCurrencyValue(target.target_value, target.unit || 'USD')}`;\n          } else {\n            valueDisplay = `${goalsClient.formatNumberValue(target.current_value, target.unit || undefined)} / ${goalsClient.formatNumberValue(target.target_value, target.unit || undefined)}`;\n          }\n          \n          formattedTargets += `\\n  \u2022 ${target.name}: ${valueDisplay} (${progress.toFixed(1)}%)`;\n        }\n\n        const formattedProgress = `\n\uD83D\uDCCA Goal Progress Report\n\n\uD83C\uDFAF Goal: ${goal.name}\n\uD83D\uDCC8 Overall Progress: ${goal.percent_completed}%\n\uD83D\uDCC5 Status: ${status.toUpperCase()}\n\u23F0 Days Until Due: ${daysUntilDue}\n\uD83D\uDC65 Owners: ${goal.owners.map(o => o.username).join(', ')}\n\n\uD83C\uDFAF Targets:${formattedTargets}\n\n\uD83D\uDCDD Description: ${goal.description || 'No description'}\n`;\n\n        return {\n          content: [{ \n            type: 'text', \n            text: formattedProgress\n          }]\n        };\n      } catch (error: any) {\n        console.error('Error formatting goal progress:', error);\n        return {\n          content: [{ type: 'text', text: `Error formatting goal progress: ${error.message}` }],\n          isError: true\n        };\n      }\n    }\n  );\n}\n"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "a39a07adc5daf42691698be4f75e41fb3d2aba04"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_1hf59zse5l = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_1hf59zse5l();
import { z } from 'zod';
import { createClickUpClient } from '../clickup-client/index.js';
import { createEnhancedGoalsClient } from '../clickup-client/goals-enhanced.js';
// Create clients
const clickUpClient =
/* istanbul ignore next */
(cov_1hf59zse5l().s[0]++, createClickUpClient());
const goalsClient =
/* istanbul ignore next */
(cov_1hf59zse5l().s[1]++, createEnhancedGoalsClient(clickUpClient));
export function setupGoalsTools(server) {
  /* istanbul ignore next */
  cov_1hf59zse5l().f[0]++;
  cov_1hf59zse5l().s[2]++;
  // ========================================
  // GOAL MANAGEMENT OPERATIONS
  // ========================================
  server.tool('get_goals', 'Get goals for a team with optional filtering. Returns goal details including progress, targets, and team members.', {
    team_id: z.string().min(1).describe('The ID of the team to get goals for'),
    include_completed: z.boolean().optional().default(false).describe('Whether to include completed goals')
  }, async ({
    team_id,
    include_completed
  }) => {
    /* istanbul ignore next */
    cov_1hf59zse5l().f[1]++;
    cov_1hf59zse5l().s[3]++;
    try {
      const goals =
      /* istanbul ignore next */
      (cov_1hf59zse5l().s[4]++, await goalsClient.getGoals(team_id, include_completed));
      /* istanbul ignore next */
      cov_1hf59zse5l().s[5]++;
      return {
        content: [{
          type: 'text',
          text: `Goals for team ${team_id}:\n\n${JSON.stringify(goals, null, 2)}`
        }]
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_1hf59zse5l().s[6]++;
      console.error('Error getting goals:', error);
      /* istanbul ignore next */
      cov_1hf59zse5l().s[7]++;
      return {
        content: [{
          type: 'text',
          text: `Error getting goals: ${error.message}`
        }],
        isError: true
      };
    }
  });
  /* istanbul ignore next */
  cov_1hf59zse5l().s[8]++;
  server.tool('create_goal', 'Create a new goal with targets and deadlines. Supports team collaboration with multiple owners.', {
    team_id: z.string().min(1).describe('The ID of the team to create the goal for'),
    name: z.string().min(1).max(255).describe('The name of the goal'),
    due_date: z.number().positive().describe('Goal due date (Unix timestamp)'),
    description: z.string().optional().describe('Detailed description of the goal'),
    multiple_owners: z.boolean().default(false).describe('Whether the goal can have multiple owners'),
    owners: z.array(z.number().positive()).min(1).describe('Array of user IDs who own this goal'),
    color: z.string().regex(/^#[0-9A-Fa-f]{6}$/).optional().default('#007cff').describe('Goal color (hex format)')
  }, async ({
    team_id,
    name,
    due_date,
    description,
    multiple_owners,
    owners,
    color
  }) => {
    /* istanbul ignore next */
    cov_1hf59zse5l().f[2]++;
    cov_1hf59zse5l().s[9]++;
    try {
      /* istanbul ignore next */
      cov_1hf59zse5l().s[10]++;
      // Validate due date is in the future
      if (!goalsClient.validateGoalDate(due_date)) {
        /* istanbul ignore next */
        cov_1hf59zse5l().b[0][0]++;
        cov_1hf59zse5l().s[11]++;
        return {
          content: [{
            type: 'text',
            text: 'Error: Due date must be in the future'
          }],
          isError: true
        };
      } else
      /* istanbul ignore next */
      {
        cov_1hf59zse5l().b[0][1]++;
      }
      const params =
      /* istanbul ignore next */
      (cov_1hf59zse5l().s[12]++, {
        name,
        due_date,
        description,
        multiple_owners,
        owners,
        color
      });
      const goal =
      /* istanbul ignore next */
      (cov_1hf59zse5l().s[13]++, await goalsClient.createGoal(team_id, params));
      /* istanbul ignore next */
      cov_1hf59zse5l().s[14]++;
      return {
        content: [{
          type: 'text',
          text: `Goal created successfully!\n\n${JSON.stringify(goal, null, 2)}`
        }]
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_1hf59zse5l().s[15]++;
      console.error('Error creating goal:', error);
      /* istanbul ignore next */
      cov_1hf59zse5l().s[16]++;
      return {
        content: [{
          type: 'text',
          text: `Error creating goal: ${error.message}`
        }],
        isError: true
      };
    }
  });
  /* istanbul ignore next */
  cov_1hf59zse5l().s[17]++;
  server.tool('update_goal', 'Update an existing goal. Can modify name, description, due date, owners, and color.', {
    goal_id: z.string().min(1).describe('The ID of the goal to update'),
    name: z.string().min(1).max(255).optional().describe('New name for the goal'),
    due_date: z.number().positive().optional().describe('New due date (Unix timestamp)'),
    description: z.string().optional().describe('New description for the goal'),
    rem_owners: z.array(z.number().positive()).optional().describe('Array of user IDs to remove as owners'),
    add_owners: z.array(z.number().positive()).optional().describe('Array of user IDs to add as owners'),
    color: z.string().regex(/^#[0-9A-Fa-f]{6}$/).optional().describe('New goal color (hex format)')
  }, async ({
    goal_id,
    name,
    due_date,
    description,
    rem_owners,
    add_owners,
    color
  }) => {
    /* istanbul ignore next */
    cov_1hf59zse5l().f[3]++;
    cov_1hf59zse5l().s[18]++;
    try {
      /* istanbul ignore next */
      cov_1hf59zse5l().s[19]++;
      // Validate due date if provided
      if (
      /* istanbul ignore next */
      (cov_1hf59zse5l().b[2][0]++, due_date) &&
      /* istanbul ignore next */
      (cov_1hf59zse5l().b[2][1]++, !goalsClient.validateGoalDate(due_date))) {
        /* istanbul ignore next */
        cov_1hf59zse5l().b[1][0]++;
        cov_1hf59zse5l().s[20]++;
        return {
          content: [{
            type: 'text',
            text: 'Error: Due date must be in the future'
          }],
          isError: true
        };
      } else
      /* istanbul ignore next */
      {
        cov_1hf59zse5l().b[1][1]++;
      }
      const params =
      /* istanbul ignore next */
      (cov_1hf59zse5l().s[21]++, {
        name,
        due_date,
        description,
        rem_owners,
        add_owners,
        color
      });
      const updatedGoal =
      /* istanbul ignore next */
      (cov_1hf59zse5l().s[22]++, await goalsClient.updateGoal(goal_id, params));
      /* istanbul ignore next */
      cov_1hf59zse5l().s[23]++;
      return {
        content: [{
          type: 'text',
          text: `Goal updated successfully!\n\n${JSON.stringify(updatedGoal, null, 2)}`
        }]
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_1hf59zse5l().s[24]++;
      console.error('Error updating goal:', error);
      /* istanbul ignore next */
      cov_1hf59zse5l().s[25]++;
      return {
        content: [{
          type: 'text',
          text: `Error updating goal: ${error.message}`
        }],
        isError: true
      };
    }
  });
  /* istanbul ignore next */
  cov_1hf59zse5l().s[26]++;
  server.tool('delete_goal', 'Delete a goal from ClickUp. This action cannot be undone and will remove all associated targets.', {
    goal_id: z.string().min(1).describe('The ID of the goal to delete')
  }, async ({
    goal_id
  }) => {
    /* istanbul ignore next */
    cov_1hf59zse5l().f[4]++;
    cov_1hf59zse5l().s[27]++;
    try {
      /* istanbul ignore next */
      cov_1hf59zse5l().s[28]++;
      await goalsClient.deleteGoal(goal_id);
      /* istanbul ignore next */
      cov_1hf59zse5l().s[29]++;
      return {
        content: [{
          type: 'text',
          text: `Goal ${goal_id} deleted successfully. All associated targets have been removed.`
        }]
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_1hf59zse5l().s[30]++;
      console.error('Error deleting goal:', error);
      /* istanbul ignore next */
      cov_1hf59zse5l().s[31]++;
      return {
        content: [{
          type: 'text',
          text: `Error deleting goal: ${error.message}`
        }],
        isError: true
      };
    }
  });
  /* istanbul ignore next */
  cov_1hf59zse5l().s[32]++;
  server.tool('get_goal', 'Get detailed information about a specific goal including all targets and progress data.', {
    goal_id: z.string().min(1).describe('The ID of the goal to retrieve')
  }, async ({
    goal_id
  }) => {
    /* istanbul ignore next */
    cov_1hf59zse5l().f[5]++;
    cov_1hf59zse5l().s[33]++;
    try {
      const goal =
      /* istanbul ignore next */
      (cov_1hf59zse5l().s[34]++, await goalsClient.getGoal(goal_id));
      // Add formatted progress information
      const formattedGoal =
      /* istanbul ignore next */
      (cov_1hf59zse5l().s[35]++, {
        ...goal,
        progress_summary: {
          overall_progress: `${goal.percent_completed}%`,
          days_until_due: goalsClient.getDaysUntilDue(goal.due_date),
          status: goalsClient.getGoalStatus(goal.percent_completed, goal.due_date),
          targets_count: goal.key_results.length,
          completed_targets: goal.key_results.filter(t => {
            /* istanbul ignore next */
            cov_1hf59zse5l().f[6]++;
            cov_1hf59zse5l().s[36]++;
            return t.completed;
          }).length
        }
      });
      /* istanbul ignore next */
      cov_1hf59zse5l().s[37]++;
      return {
        content: [{
          type: 'text',
          text: `Goal details:\n\n${JSON.stringify(formattedGoal, null, 2)}`
        }]
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_1hf59zse5l().s[38]++;
      console.error('Error getting goal:', error);
      /* istanbul ignore next */
      cov_1hf59zse5l().s[39]++;
      return {
        content: [{
          type: 'text',
          text: `Error getting goal: ${error.message}`
        }],
        isError: true
      };
    }
  });
  // ========================================
  // GOAL TARGET MANAGEMENT
  // ========================================
  /* istanbul ignore next */
  cov_1hf59zse5l().s[40]++;
  server.tool('create_goal_target', 'Create a target (key result) for a goal. Supports different target types: number, currency, boolean, task, and list.', {
    goal_id: z.string().min(1).describe('The ID of the goal to add the target to'),
    name: z.string().min(1).max(255).describe('The name of the target'),
    type: z.enum(['number', 'currency', 'boolean', 'task', 'list']).describe('The type of target'),
    target_value: z.number().min(0).describe('The target value to achieve'),
    start_value: z.number().optional().default(0).describe('The starting value (defaults to 0)'),
    unit: z.string().optional().describe('Unit of measurement (e.g., "USD", "tasks", "users")'),
    task_statuses: z.array(z.string()).optional().describe('Task statuses to track (for task type targets)'),
    list_ids: z.array(z.string()).optional().describe('List IDs to track (for list type targets)')
  }, async ({
    goal_id,
    name,
    type,
    target_value,
    start_value,
    unit,
    task_statuses,
    list_ids
  }) => {
    /* istanbul ignore next */
    cov_1hf59zse5l().f[7]++;
    cov_1hf59zse5l().s[41]++;
    try {
      const params =
      /* istanbul ignore next */
      (cov_1hf59zse5l().s[42]++, {
        name,
        type,
        target_value,
        start_value,
        unit,
        task_statuses,
        list_ids
      });
      const target =
      /* istanbul ignore next */
      (cov_1hf59zse5l().s[43]++, await goalsClient.createGoalTarget(goal_id, params));
      /* istanbul ignore next */
      cov_1hf59zse5l().s[44]++;
      return {
        content: [{
          type: 'text',
          text: `Goal target created successfully!\n\n${JSON.stringify(target, null, 2)}`
        }]
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_1hf59zse5l().s[45]++;
      console.error('Error creating goal target:', error);
      /* istanbul ignore next */
      cov_1hf59zse5l().s[46]++;
      return {
        content: [{
          type: 'text',
          text: `Error creating goal target: ${error.message}`
        }],
        isError: true
      };
    }
  });
  /* istanbul ignore next */
  cov_1hf59zse5l().s[47]++;
  server.tool('update_goal_target', 'Update an existing goal target. Can modify name, target value, unit, and tracking parameters.', {
    goal_id: z.string().min(1).describe('The ID of the goal'),
    target_id: z.string().min(1).describe('The ID of the target to update'),
    name: z.string().min(1).max(255).optional().describe('New name for the target'),
    target_value: z.number().min(0).optional().describe('New target value'),
    unit: z.string().optional().describe('New unit of measurement'),
    task_statuses: z.array(z.string()).optional().describe('New task statuses to track'),
    list_ids: z.array(z.string()).optional().describe('New list IDs to track')
  }, async ({
    goal_id,
    target_id,
    name,
    target_value,
    unit,
    task_statuses,
    list_ids
  }) => {
    /* istanbul ignore next */
    cov_1hf59zse5l().f[8]++;
    cov_1hf59zse5l().s[48]++;
    try {
      const params =
      /* istanbul ignore next */
      (cov_1hf59zse5l().s[49]++, {
        name,
        target_value,
        unit,
        task_statuses,
        list_ids
      });
      const updatedTarget =
      /* istanbul ignore next */
      (cov_1hf59zse5l().s[50]++, await goalsClient.updateGoalTarget(goal_id, target_id, params));
      /* istanbul ignore next */
      cov_1hf59zse5l().s[51]++;
      return {
        content: [{
          type: 'text',
          text: `Goal target updated successfully!\n\n${JSON.stringify(updatedTarget, null, 2)}`
        }]
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_1hf59zse5l().s[52]++;
      console.error('Error updating goal target:', error);
      /* istanbul ignore next */
      cov_1hf59zse5l().s[53]++;
      return {
        content: [{
          type: 'text',
          text: `Error updating goal target: ${error.message}`
        }],
        isError: true
      };
    }
  });
  /* istanbul ignore next */
  cov_1hf59zse5l().s[54]++;
  server.tool('delete_goal_target', 'Delete a target from a goal. This action cannot be undone.', {
    goal_id: z.string().min(1).describe('The ID of the goal'),
    target_id: z.string().min(1).describe('The ID of the target to delete')
  }, async ({
    goal_id,
    target_id
  }) => {
    /* istanbul ignore next */
    cov_1hf59zse5l().f[9]++;
    cov_1hf59zse5l().s[55]++;
    try {
      /* istanbul ignore next */
      cov_1hf59zse5l().s[56]++;
      await goalsClient.deleteGoalTarget(goal_id, target_id);
      /* istanbul ignore next */
      cov_1hf59zse5l().s[57]++;
      return {
        content: [{
          type: 'text',
          text: `Goal target ${target_id} deleted successfully from goal ${goal_id}.`
        }]
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_1hf59zse5l().s[58]++;
      console.error('Error deleting goal target:', error);
      /* istanbul ignore next */
      cov_1hf59zse5l().s[59]++;
      return {
        content: [{
          type: 'text',
          text: `Error deleting goal target: ${error.message}`
        }],
        isError: true
      };
    }
  });
  // ========================================
  // GOAL ANALYTICS & REPORTING
  // ========================================
  /* istanbul ignore next */
  cov_1hf59zse5l().s[60]++;
  server.tool('get_goal_summary', 'Get comprehensive goal analytics and summary for a team. Includes progress statistics, status breakdown, and upcoming deadlines.', {
    team_id: z.string().min(1).describe('The ID of the team to get goal summary for')
  }, async ({
    team_id
  }) => {
    /* istanbul ignore next */
    cov_1hf59zse5l().f[10]++;
    cov_1hf59zse5l().s[61]++;
    try {
      const summary =
      /* istanbul ignore next */
      (cov_1hf59zse5l().s[62]++, await goalsClient.getGoalSummary(team_id));
      /* istanbul ignore next */
      cov_1hf59zse5l().s[63]++;
      return {
        content: [{
          type: 'text',
          text: `Goal summary for team ${team_id}:\n\n${JSON.stringify(summary, null, 2)}`
        }]
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_1hf59zse5l().s[64]++;
      console.error('Error getting goal summary:', error);
      /* istanbul ignore next */
      cov_1hf59zse5l().s[65]++;
      return {
        content: [{
          type: 'text',
          text: `Error getting goal summary: ${error.message}`
        }],
        isError: true
      };
    }
  });
  // ========================================
  // HELPER TOOLS
  // ========================================
  /* istanbul ignore next */
  cov_1hf59zse5l().s[66]++;
  server.tool('create_number_goal', 'Create a number-based goal with a target. Convenient helper for creating numeric goals like task counts or metrics.', {
    team_id: z.string().min(1).describe('The ID of the team'),
    goal_name: z.string().min(1).max(255).describe('The name of the goal'),
    target_name: z.string().min(1).max(255).describe('The name of the target'),
    target_value: z.number().min(1).describe('The numeric target to achieve'),
    unit: z.string().optional().describe('Unit of measurement (e.g., "tasks", "users", "points")'),
    due_date: z.number().positive().describe('Goal due date (Unix timestamp)'),
    description: z.string().optional().describe('Goal description'),
    owners: z.array(z.number().positive()).min(1).describe('Array of user IDs who own this goal'),
    color: z.string().regex(/^#[0-9A-Fa-f]{6}$/).optional().default('#007cff').describe('Goal color')
  }, async ({
    team_id,
    goal_name,
    target_name,
    target_value,
    unit,
    due_date,
    description,
    owners,
    color
  }) => {
    /* istanbul ignore next */
    cov_1hf59zse5l().f[11]++;
    cov_1hf59zse5l().s[67]++;
    try {
      // Create the goal
      const goal =
      /* istanbul ignore next */
      (cov_1hf59zse5l().s[68]++, await goalsClient.createGoal(team_id, {
        name: goal_name,
        due_date,
        description,
        multiple_owners: owners.length > 1,
        owners,
        color
      }));
      // Create the number target
      const target =
      /* istanbul ignore next */
      (cov_1hf59zse5l().s[69]++, await goalsClient.createGoalTarget(goal.id, {
        name: target_name,
        type: 'number',
        target_value,
        start_value: 0,
        unit
      }));
      /* istanbul ignore next */
      cov_1hf59zse5l().s[70]++;
      return {
        content: [{
          type: 'text',
          text: `Number goal created successfully!\n\nGoal: ${JSON.stringify(goal, null, 2)}\n\nTarget: ${JSON.stringify(target, null, 2)}`
        }]
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_1hf59zse5l().s[71]++;
      console.error('Error creating number goal:', error);
      /* istanbul ignore next */
      cov_1hf59zse5l().s[72]++;
      return {
        content: [{
          type: 'text',
          text: `Error creating number goal: ${error.message}`
        }],
        isError: true
      };
    }
  });
  /* istanbul ignore next */
  cov_1hf59zse5l().s[73]++;
  server.tool('create_currency_goal', 'Create a currency-based goal with a monetary target. Convenient helper for creating revenue or budget goals.', {
    team_id: z.string().min(1).describe('The ID of the team'),
    goal_name: z.string().min(1).max(255).describe('The name of the goal'),
    target_name: z.string().min(1).max(255).describe('The name of the target'),
    target_value: z.number().min(0).describe('The monetary target to achieve'),
    currency: z.string().optional().default('USD').describe('Currency code (e.g., "USD", "EUR", "GBP")'),
    due_date: z.number().positive().describe('Goal due date (Unix timestamp)'),
    description: z.string().optional().describe('Goal description'),
    owners: z.array(z.number().positive()).min(1).describe('Array of user IDs who own this goal'),
    color: z.string().regex(/^#[0-9A-Fa-f]{6}$/).optional().default('#00c851').describe('Goal color')
  }, async ({
    team_id,
    goal_name,
    target_name,
    target_value,
    currency,
    due_date,
    description,
    owners,
    color
  }) => {
    /* istanbul ignore next */
    cov_1hf59zse5l().f[12]++;
    cov_1hf59zse5l().s[74]++;
    try {
      // Create the goal
      const goal =
      /* istanbul ignore next */
      (cov_1hf59zse5l().s[75]++, await goalsClient.createGoal(team_id, {
        name: goal_name,
        due_date,
        description,
        multiple_owners: owners.length > 1,
        owners,
        color
      }));
      // Create the currency target
      const target =
      /* istanbul ignore next */
      (cov_1hf59zse5l().s[76]++, await goalsClient.createGoalTarget(goal.id, {
        name: target_name,
        type: 'currency',
        target_value,
        start_value: 0,
        unit: currency
      }));
      // Format the target value for display
      const formattedValue =
      /* istanbul ignore next */
      (cov_1hf59zse5l().s[77]++, goalsClient.formatCurrencyValue(target_value, currency));
      /* istanbul ignore next */
      cov_1hf59zse5l().s[78]++;
      return {
        content: [{
          type: 'text',
          text: `Currency goal created successfully!\n\nGoal: ${goal_name}\nTarget: ${formattedValue}\n\nDetails:\nGoal: ${JSON.stringify(goal, null, 2)}\n\nTarget: ${JSON.stringify(target, null, 2)}`
        }]
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_1hf59zse5l().s[79]++;
      console.error('Error creating currency goal:', error);
      /* istanbul ignore next */
      cov_1hf59zse5l().s[80]++;
      return {
        content: [{
          type: 'text',
          text: `Error creating currency goal: ${error.message}`
        }],
        isError: true
      };
    }
  });
  /* istanbul ignore next */
  cov_1hf59zse5l().s[81]++;
  server.tool('format_goal_progress', 'Format goal progress information for human-readable display. Useful for reporting and dashboards.', {
    goal_id: z.string().min(1).describe('The ID of the goal to format')
  }, async ({
    goal_id
  }) => {
    /* istanbul ignore next */
    cov_1hf59zse5l().f[13]++;
    cov_1hf59zse5l().s[82]++;
    try {
      const goal =
      /* istanbul ignore next */
      (cov_1hf59zse5l().s[83]++, await goalsClient.getGoal(goal_id));
      const status =
      /* istanbul ignore next */
      (cov_1hf59zse5l().s[84]++, goalsClient.getGoalStatus(goal.percent_completed, goal.due_date));
      const daysUntilDue =
      /* istanbul ignore next */
      (cov_1hf59zse5l().s[85]++, goalsClient.getDaysUntilDue(goal.due_date));
      let formattedTargets =
      /* istanbul ignore next */
      (cov_1hf59zse5l().s[86]++, '');
      /* istanbul ignore next */
      cov_1hf59zse5l().s[87]++;
      for (const target of goal.key_results) {
        const progress =
        /* istanbul ignore next */
        (cov_1hf59zse5l().s[88]++, goalsClient.calculateTargetProgress(target.start_value, target.current_value, target.target_value));
        let valueDisplay =
        /* istanbul ignore next */
        (cov_1hf59zse5l().s[89]++, '');
        /* istanbul ignore next */
        cov_1hf59zse5l().s[90]++;
        if (target.type === 'currency') {
          /* istanbul ignore next */
          cov_1hf59zse5l().b[3][0]++;
          cov_1hf59zse5l().s[91]++;
          valueDisplay = `${goalsClient.formatCurrencyValue(target.current_value,
          /* istanbul ignore next */
          (cov_1hf59zse5l().b[4][0]++, target.unit) ||
          /* istanbul ignore next */
          (cov_1hf59zse5l().b[4][1]++, 'USD'))} / ${goalsClient.formatCurrencyValue(target.target_value,
          /* istanbul ignore next */
          (cov_1hf59zse5l().b[5][0]++, target.unit) ||
          /* istanbul ignore next */
          (cov_1hf59zse5l().b[5][1]++, 'USD'))}`;
        } else {
          /* istanbul ignore next */
          cov_1hf59zse5l().b[3][1]++;
          cov_1hf59zse5l().s[92]++;
          valueDisplay = `${goalsClient.formatNumberValue(target.current_value,
          /* istanbul ignore next */
          (cov_1hf59zse5l().b[6][0]++, target.unit) ||
          /* istanbul ignore next */
          (cov_1hf59zse5l().b[6][1]++, undefined))} / ${goalsClient.formatNumberValue(target.target_value,
          /* istanbul ignore next */
          (cov_1hf59zse5l().b[7][0]++, target.unit) ||
          /* istanbul ignore next */
          (cov_1hf59zse5l().b[7][1]++, undefined))}`;
        }
        /* istanbul ignore next */
        cov_1hf59zse5l().s[93]++;
        formattedTargets += `\n  • ${target.name}: ${valueDisplay} (${progress.toFixed(1)}%)`;
      }
      const formattedProgress =
      /* istanbul ignore next */
      (cov_1hf59zse5l().s[94]++, `
📊 Goal Progress Report

🎯 Goal: ${goal.name}
📈 Overall Progress: ${goal.percent_completed}%
📅 Status: ${status.toUpperCase()}
⏰ Days Until Due: ${daysUntilDue}
👥 Owners: ${goal.owners.map(o => {
        /* istanbul ignore next */
        cov_1hf59zse5l().f[14]++;
        cov_1hf59zse5l().s[95]++;
        return o.username;
      }).join(', ')}

🎯 Targets:${formattedTargets}

📝 Description: ${
      /* istanbul ignore next */
      (cov_1hf59zse5l().b[8][0]++, goal.description) ||
      /* istanbul ignore next */
      (cov_1hf59zse5l().b[8][1]++, 'No description')}
`);
      /* istanbul ignore next */
      cov_1hf59zse5l().s[96]++;
      return {
        content: [{
          type: 'text',
          text: formattedProgress
        }]
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_1hf59zse5l().s[97]++;
      console.error('Error formatting goal progress:', error);
      /* istanbul ignore next */
      cov_1hf59zse5l().s[98]++;
      return {
        content: [{
          type: 'text',
          text: `Error formatting goal progress: ${error.message}`
        }],
        isError: true
      };
    }
  });
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
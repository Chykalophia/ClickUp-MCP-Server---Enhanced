{"version":3,"names":["ListsClient","constructor","client","cov_nfwah54ej","f","s","getListsFromSpace","spaceId","params","get","getListsFromFolder","folderId","createListInFolder","post","createFolderlessList","getList","listId","updateList","put","deleteList","delete","addTaskToList","taskId","removeTaskFromList","createListFromTemplateInFolder","templateId","createListFromTemplateInSpace","createListsClient"],"sources":["/Users/peterkrzyzek/Development/clickup-mcp-server/src/clickup-client/lists.ts"],"sourcesContent":["import { ClickUpClient } from './index.js';\n\nexport interface List {\n  id: string;\n  name: string;\n  // ...other list properties...\n}\n\nexport interface GetListsParams {\n  // ...parameters for getting lists...\n}\n\nexport interface CreateListParams {\n  name: string;\n  // ...other parameters for creating a list...\n}\n\nexport interface UpdateListParams {\n  name?: string;\n  // ...other parameters for updating a list...\n}\n\nexport class ListsClient {\n  private client: ClickUpClient;\n\n  constructor(client: ClickUpClient) {\n    this.client = client;\n  }\n\n  /**\n   * Get lists from a specific space\n   * @param spaceId The ID of the space to get lists from\n   * @param params Optional parameters for filtering lists\n   * @returns A list of lists\n   */\n  async getListsFromSpace(spaceId: string, params?: GetListsParams): Promise<{ lists: List[] }> {\n    return this.client.get(`/space/${spaceId}/list`, params);\n  }\n\n  /**\n   * Get lists from a specific folder\n   * @param folderId The ID of the folder to get lists from\n   * @param params Optional parameters for filtering lists\n   * @returns A list of lists\n   */\n  async getListsFromFolder(folderId: string, params?: GetListsParams): Promise<{ lists: List[] }> {\n    return this.client.get(`/folder/${folderId}/list`, params);\n  }\n\n  /**\n   * Create a new list in a folder\n   * @param folderId The ID of the folder to create the list in\n   * @param params The list parameters\n   * @returns The created list\n   */\n  async createListInFolder(folderId: string, params: CreateListParams): Promise<List> {\n    return this.client.post(`/folder/${folderId}/list`, params);\n  }\n\n  /**\n   * Create a new folderless list in a space\n   * @param spaceId The ID of the space to create the list in\n   * @param params The list parameters\n   * @returns The created list\n   */\n  async createFolderlessList(spaceId: string, params: CreateListParams): Promise<List> {\n    return this.client.post(`/space/${spaceId}/list`, params);\n  }\n\n  /**\n   * Get a specific list by ID\n   * @param listId The ID of the list to get\n   * @returns The list details\n   */\n  async getList(listId: string): Promise<List> {\n    return this.client.get(`/list/${listId}`);\n  }\n\n  /**\n   * Update an existing list\n   * @param listId The ID of the list to update\n   * @param params The list parameters to update\n   * @returns The updated list\n   */\n  async updateList(listId: string, params: UpdateListParams): Promise<List> {\n    return this.client.put(`/list/${listId}`, params);\n  }\n\n  /**\n   * Delete a list\n   * @param listId The ID of the list to delete\n   * @returns Success message\n   */\n  async deleteList(listId: string): Promise<{ success: boolean }> {\n    return this.client.delete(`/list/${listId}`);\n  }\n\n  /**\n   * Add a task to a list\n   * @param listId The ID of the list to add the task to\n   * @param taskId The ID of the task to add\n   * @returns Success message\n   */\n  async addTaskToList(listId: string, taskId: string): Promise<{ success: boolean }> {\n    return this.client.post(`/list/${listId}/task/${taskId}`);\n  }\n\n  /**\n   * Remove a task from a list\n   * @param listId The ID of the list to remove the task from\n   * @param taskId The ID of the task to remove\n   * @returns Success message\n   */\n  async removeTaskFromList(listId: string, taskId: string): Promise<{ success: boolean }> {\n    return this.client.delete(`/list/${listId}/task/${taskId}`);\n  }\n\n  /**\n   * Create a new list from a template in a folder\n   * @param folderId The ID of the folder to create the list in\n   * @param templateId The ID of the template to use\n   * @param params The list parameters\n   * @returns The created list\n   */\n  async createListFromTemplateInFolder(folderId: string, templateId: string, params: CreateListParams): Promise<List> {\n    return this.client.post(`/folder/${folderId}/list/template/${templateId}`, params);\n  }\n\n  /**\n   * Create a new list from a template in a space\n   * @param spaceId The ID of the space to create the list in\n   * @param templateId The ID of the template to use\n   * @param params The list parameters\n   * @returns The created list\n   */\n  async createListFromTemplateInSpace(spaceId: string, templateId: string, params: CreateListParams): Promise<List> {\n    return this.client.post(`/space/${spaceId}/list/template/${templateId}`, params);\n  }\n}\n\nexport const createListsClient = (client: ClickUpClient): ListsClient => {\n  return new ListsClient(client);\n};"],"mappingssBA,OAAM,MAAOA,WAAW;EAGtBC,YAAYC,MAAqB;IAAA;IAAAC,aAAA,GAAAC,CAAA;IAAAD,aAAA,GAAAE,CAAA;IAC/B,IAAI,CAACH,MAAM,GAAGA,MAAM;EACtB;EAEA;;;;;;EAMA,MAAMI,iBAAiBA,CAACC,OAAe,EAAEC,MAAuB;IAAA;IAAAL,aAAA,GAAAC,CAAA;IAAAD,aAAA,GAAAE,CAAA;IAC9D,OAAO,IAAI,CAACH,MAAM,CAACO,GAAG,CAAC,UAAUF,OAAO,OAAO,EAAEC,MAAM,CAAC;EAC1D;EAEA;;;;;;EAMA,MAAME,kBAAkBA,CAACC,QAAgB,EAAEH,MAAuB;IAAA;IAAAL,aAAA,GAAAC,CAAA;IAAAD,aAAA,GAAAE,CAAA;IAChE,OAAO,IAAI,CAACH,MAAM,CAACO,GAAG,CAAC,WAAWE,QAAQ,OAAO,EAAEH,MAAM,CAAC;EAC5D;EAEA;;;;;;EAMA,MAAMI,kBAAkBA,CAACD,QAAgB,EAAEH,MAAwB;IAAA;IAAAL,aAAA,GAAAC,CAAA;IAAAD,aAAA,GAAAE,CAAA;IACjE,OAAO,IAAI,CAACH,MAAM,CAACW,IAAI,CAAC,WAAWF,QAAQ,OAAO,EAAEH,MAAM,CAAC;EAC7D;EAEA;;;;;;EAMA,MAAMM,oBAAoBA,CAACP,OAAe,EAAEC,MAAwB;IAAA;IAAAL,aAAA,GAAAC,CAAA;IAAAD,aAAA,GAAAE,CAAA;IAClE,OAAO,IAAI,CAACH,MAAM,CAACW,IAAI,CAAC,UAAUN,OAAO,OAAO,EAAEC,MAAM,CAAC;EAC3D;EAEA;;;;;EAKA,MAAMO,OAAOA,CAACC,MAAc;IAAA;IAAAb,aAAA,GAAAC,CAAA;IAAAD,aAAA,GAAAE,CAAA;IAC1B,OAAO,IAAI,CAACH,MAAM,CAACO,GAAG,CAAC,SAASO,MAAM,EAAE,CAAC;EAC3C;EAEA;;;;;;EAMA,MAAMC,UAAUA,CAACD,MAAc,EAAER,MAAwB;IAAA;IAAAL,aAAA,GAAAC,CAAA;IAAAD,aAAA,GAAAE,CAAA;IACvD,OAAO,IAAI,CAACH,MAAM,CAACgB,GAAG,CAAC,SAASF,MAAM,EAAE,EAAER,MAAM,CAAC;EACnD;EAEA;;;;;EAKA,MAAMW,UAAUA,CAACH,MAAc;IAAA;IAAAb,aAAA,GAAAC,CAAA;IAAAD,aAAA,GAAAE,CAAA;IAC7B,OAAO,IAAI,CAACH,MAAM,CAACkB,MAAM,CAAC,SAASJ,MAAM,EAAE,CAAC;EAC9C;EAEA;;;;;;EAMA,MAAMK,aAAaA,CAACL,MAAc,EAAEM,MAAc;IAAA;IAAAnB,aAAA,GAAAC,CAAA;IAAAD,aAAA,GAAAE,CAAA;IAChD,OAAO,IAAI,CAACH,MAAM,CAACW,IAAI,CAAC,SAASG,MAAM,SAASM,MAAM,EAAE,CAAC;EAC3D;EAEA;;;;;;EAMA,MAAMC,kBAAkBA,CAACP,MAAc,EAAEM,MAAc;IAAA;IAAAnB,aAAA,GAAAC,CAAA;IAAAD,aAAA,GAAAE,CAAA;IACrD,OAAO,IAAI,CAACH,MAAM,CAACkB,MAAM,CAAC,SAASJ,MAAM,SAASM,MAAM,EAAE,CAAC;EAC7D;EAEA;;;;;;;EAOA,MAAME,8BAA8BA,CAACb,QAAgB,EAAEc,UAAkB,EAAEjB,MAAwB;IAAA;IAAAL,aAAA,GAAAC,CAAA;IAAAD,aAAA,GAAAE,CAAA;IACjG,OAAO,IAAI,CAACH,MAAM,CAACW,IAAI,CAAC,WAAWF,QAAQ,kBAAkBc,UAAU,EAAE,EAAEjB,MAAM,CAAC;EACpF;EAEA;;;;;;;EAOA,MAAMkB,6BAA6BA,CAACnB,OAAe,EAAEkB,UAAkB,EAAEjB,MAAwB;IAAA;IAAAL,aAAA,GAAAC,CAAA;IAAAD,aAAA,GAAAE,CAAA;IAC/F,OAAO,IAAI,CAACH,MAAM,CAACW,IAAI,CAAC,UAAUN,OAAO,kBAAkBkB,UAAU,EAAE,EAAEjB,MAAM,CAAC;EAClF;;AACD;AAAAL,aAAA,GAAAE,CAAA;AAED,OAAO,MAAMsB,iBAAiB,GAAIzB,MAAqB,IAAiB;EAAA;EAAAC,aAAA,GAAAC,CAAA;EAAAD,aAAA,GAAAE,CAAA;EACtE,OAAO,IAAIL,WAAW,CAACE,MAAM,CAAC;AAChC,CAAC","ignoreList":[]}
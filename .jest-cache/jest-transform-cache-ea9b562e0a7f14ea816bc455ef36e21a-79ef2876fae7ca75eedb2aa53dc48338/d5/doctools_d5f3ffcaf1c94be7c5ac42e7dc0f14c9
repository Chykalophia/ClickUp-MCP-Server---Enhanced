b28e9cf68a5a6ef93ed9a3164cc16ea8
/* istanbul ignore next */
function cov_13obc04wnd() {
  var path = "/Users/peterkrzyzek/Development/clickup-mcp-server/src/tools/doc-tools.ts";
  var hash = "80c8c14f12a53acb9db863d4278cbcfa6305eba6";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/peterkrzyzek/Development/clickup-mcp-server/src/tools/doc-tools.ts",
    statementMap: {
      "0": {
        start: {
          line: 6,
          column: 22
        },
        end: {
          line: 6,
          column: 43
        }
      },
      "1": {
        start: {
          line: 7,
          column: 19
        },
        end: {
          line: 7,
          column: 50
        }
      },
      "2": {
        start: {
          line: 8,
          column: 19
        },
        end: {
          line: 8,
          column: 50
        }
      },
      "3": {
        start: {
          line: 11,
          column: 4
        },
        end: {
          line: 38,
          column: 7
        }
      },
      "4": {
        start: {
          line: 15,
          column: 8
        },
        end: {
          line: 37,
          column: 9
        }
      },
      "5": {
        start: {
          line: 17,
          column: 26
        },
        end: {
          line: 17,
          column: 76
        }
      },
      "6": {
        start: {
          line: 19,
          column: 34
        },
        end: {
          line: 19,
          column: 36
        }
      },
      "7": {
        start: {
          line: 20,
          column: 12
        },
        end: {
          line: 26,
          column: 13
        }
      },
      "8": {
        start: {
          line: 21,
          column: 16
        },
        end: {
          line: 25,
          column: 17
        }
      },
      "9": {
        start: {
          line: 22,
          column: 20
        },
        end: {
          line: 24,
          column: 21
        }
      },
      "10": {
        start: {
          line: 23,
          column: 24
        },
        end: {
          line: 23,
          column: 65
        }
      },
      "11": {
        start: {
          line: 27,
          column: 12
        },
        end: {
          line: 29,
          column: 14
        }
      },
      "12": {
        start: {
          line: 32,
          column: 12
        },
        end: {
          line: 32,
          column: 63
        }
      },
      "13": {
        start: {
          line: 33,
          column: 12
        },
        end: {
          line: 36,
          column: 14
        }
      },
      "14": {
        start: {
          line: 40,
          column: 4
        },
        end: {
          line: 59,
          column: 7
        }
      },
      "15": {
        start: {
          line: 45,
          column: 8
        },
        end: {
          line: 58,
          column: 9
        }
      },
      "16": {
        start: {
          line: 47,
          column: 27
        },
        end: {
          line: 47,
          column: 87
        }
      },
      "17": {
        start: {
          line: 48,
          column: 12
        },
        end: {
          line: 50,
          column: 14
        }
      },
      "18": {
        start: {
          line: 53,
          column: 12
        },
        end: {
          line: 53,
          column: 58
        }
      },
      "19": {
        start: {
          line: 54,
          column: 12
        },
        end: {
          line: 57,
          column: 14
        }
      },
      "20": {
        start: {
          line: 61,
          column: 4
        },
        end: {
          line: 87,
          column: 7
        }
      },
      "21": {
        start: {
          line: 68,
          column: 8
        },
        end: {
          line: 86,
          column: 9
        }
      },
      "22": {
        start: {
          line: 70,
          column: 27
        },
        end: {
          line: 75,
          column: 14
        }
      },
      "23": {
        start: {
          line: 76,
          column: 12
        },
        end: {
          line: 78,
          column: 14
        }
      },
      "24": {
        start: {
          line: 81,
          column: 12
        },
        end: {
          line: 81,
          column: 71
        }
      },
      "25": {
        start: {
          line: 82,
          column: 12
        },
        end: {
          line: 85,
          column: 14
        }
      },
      "26": {
        start: {
          line: 89,
          column: 4
        },
        end: {
          line: 108,
          column: 7
        }
      },
      "27": {
        start: {
          line: 94,
          column: 8
        },
        end: {
          line: 107,
          column: 9
        }
      },
      "28": {
        start: {
          line: 96,
          column: 26
        },
        end: {
          line: 96,
          column: 92
        }
      },
      "29": {
        start: {
          line: 97,
          column: 12
        },
        end: {
          line: 99,
          column: 14
        }
      },
      "30": {
        start: {
          line: 102,
          column: 12
        },
        end: {
          line: 102,
          column: 61
        }
      },
      "31": {
        start: {
          line: 103,
          column: 12
        },
        end: {
          line: 106,
          column: 14
        }
      }
    },
    fnMap: {
      "0": {
        name: "setupDocTools",
        decl: {
          start: {
            line: 9,
            column: 16
          },
          end: {
            line: 9,
            column: 29
          }
        },
        loc: {
          start: {
            line: 9,
            column: 38
          },
          end: {
            line: 109,
            column: 1
          }
        },
        line: 9
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 14,
            column: 7
          },
          end: {
            line: 14,
            column: 8
          }
        },
        loc: {
          start: {
            line: 14,
            column: 43
          },
          end: {
            line: 38,
            column: 5
          }
        },
        line: 14
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 44,
            column: 7
          },
          end: {
            line: 44,
            column: 8
          }
        },
        loc: {
          start: {
            line: 44,
            column: 50
          },
          end: {
            line: 59,
            column: 5
          }
        },
        line: 44
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 67,
            column: 7
          },
          end: {
            line: 67,
            column: 8
          }
        },
        loc: {
          start: {
            line: 67,
            column: 69
          },
          end: {
            line: 87,
            column: 5
          }
        },
        line: 67
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 93,
            column: 7
          },
          end: {
            line: 93,
            column: 8
          }
        },
        loc: {
          start: {
            line: 93,
            column: 59
          },
          end: {
            line: 108,
            column: 5
          }
        },
        line: 93
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 20,
            column: 12
          },
          end: {
            line: 26,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 20,
            column: 12
          },
          end: {
            line: 26,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 20
      },
      "1": {
        loc: {
          start: {
            line: 22,
            column: 20
          },
          end: {
            line: 24,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 22,
            column: 20
          },
          end: {
            line: 24,
            column: 21
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 22
      },
      "2": {
        loc: {
          start: {
            line: 28,
            column: 48
          },
          end: {
            line: 28,
            column: 98
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 28,
            column: 48
          },
          end: {
            line: 28,
            column: 63
          }
        }, {
          start: {
            line: 28,
            column: 67
          },
          end: {
            line: 28,
            column: 98
          }
        }],
        line: 28
      },
      "3": {
        loc: {
          start: {
            line: 72,
            column: 25
          },
          end: {
            line: 72,
            column: 64
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 72,
            column: 49
          },
          end: {
            line: 72,
            column: 56
          }
        }, {
          start: {
            line: 72,
            column: 59
          },
          end: {
            line: 72,
            column: 64
          }
        }],
        line: 72
      },
      "4": {
        loc: {
          start: {
            line: 73,
            column: 26
          },
          end: {
            line: 73,
            column: 67
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 73,
            column: 51
          },
          end: {
            line: 73,
            column: 59
          }
        }, {
          start: {
            line: 73,
            column: 62
          },
          end: {
            line: 73,
            column: 67
          }
        }],
        line: 73
      },
      "5": {
        loc: {
          start: {
            line: 74,
            column: 23
          },
          end: {
            line: 74,
            column: 34
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 74,
            column: 23
          },
          end: {
            line: 74,
            column: 28
          }
        }, {
          start: {
            line: 74,
            column: 32
          },
          end: {
            line: 74,
            column: 34
          }
        }],
        line: 74
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0]
    },
    inputSourceMap: {
      file: "/Users/peterkrzyzek/Development/clickup-mcp-server/src/tools/doc-tools.ts",
      mappings: "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",
      names: [],
      sources: ["/Users/peterkrzyzek/Development/clickup-mcp-server/src/tools/doc-tools.ts"],
      sourcesContent: ["import { McpServer } from '@modelcontextprotocol/sdk/server/mcp.js';\nimport { z } from 'zod';\nimport { createClickUpClient } from '../clickup-client/index.js';\nimport { createDocsClient } from '../clickup-client/docs.js';\nimport { createAuthClient } from '../clickup-client/auth.js';\n\n// Create clients\nconst clickUpClient = createClickUpClient();\nconst docsClient = createDocsClient(clickUpClient);\nconst authClient = createAuthClient(clickUpClient);\n\nexport function setupDocTools(server: McpServer): void {\n  // Register get_doc_content tool\n  server.tool(\n    'get_doc_content',\n    'Get the content of a specific ClickUp doc. Returns combined content from all pages in the doc.',\n    {\n      doc_id: z.string().describe('The ID of the doc to get'),\n      workspace_id: z.string().describe('The ID of the workspace containing the doc')\n    },\n    async ({ doc_id, workspace_id }) => {\n      try {\n        // Get the pages of the doc\n        const pages = await docsClient.getDocPages(workspace_id, doc_id);\n        \n        // Combine the content of all pages\n        let combinedContent = '';\n        if (Array.isArray(pages)) {\n          for (const page of pages) {\n            if (page.content) {\n              combinedContent += page.content + '\\n\\n';\n            }\n          }\n        }\n        \n        return {\n          content: [{ type: 'text', text: combinedContent || 'No content found in this doc.' }]\n        };\n      } catch (error: any) {\n        console.error('Error getting doc content:', error);\n        return {\n          content: [{ type: 'text', text: `Error getting doc content: ${error.message}` }],\n          isError: true\n        };\n      }\n    }\n  );\n\n  // Register search_docs tool\n  server.tool(\n    'search_docs',\n    'Search for docs in a ClickUp workspace using a query string. Returns matching docs with their metadata.',\n    {\n      workspace_id: z.string().describe('The ID of the workspace to search in'),\n      query: z.string().describe('The search query'),\n      cursor: z.string().optional().describe('Cursor for pagination')\n    },\n    async ({ workspace_id, query, cursor }) => {\n      try {\n        // Search for docs in the workspace\n        const result = await docsClient.searchDocs(workspace_id, { query, cursor });\n        \n        return {\n          content: [{ type: 'text', text: JSON.stringify(result.docs, null, 2) }]\n        };\n      } catch (error: any) {\n        console.error('Error searching docs:', error);\n        return {\n          content: [{ type: 'text', text: `Error searching docs: ${error.message}` }],\n          isError: true\n        };\n      }\n    }\n  );\n\n  // Register get_docs_from_workspace tool\n  server.tool(\n    'get_docs_from_workspace',\n    'Get all docs from a ClickUp workspace. Supports pagination and filtering for deleted/archived docs.',\n    {\n      workspace_id: z.string().describe('The ID of the workspace to get docs from'),\n      cursor: z.string().optional().describe('Cursor for pagination'),\n      deleted: z.boolean().optional().describe('Whether to include deleted docs'),\n      archived: z.boolean().optional().describe('Whether to include archived docs'),\n      limit: z.number().optional().describe('The maximum number of docs to return')\n    },\n    async ({ workspace_id, cursor, deleted, archived, limit }) => {\n      try {\n        // Get docs from the workspace\n        const result = await docsClient.getDocsFromWorkspace(workspace_id, { \n          cursor,\n          deleted: deleted !== undefined ? deleted : false,\n          archived: archived !== undefined ? archived : false,\n          limit: limit || 50\n        });\n        \n        return {\n          content: [{ type: 'text', text: JSON.stringify(result.docs, null, 2) }]\n        };\n      } catch (error: any) {\n        console.error('Error getting docs from workspace:', error);\n        return {\n          content: [{ type: 'text', text: `Error getting docs from workspace: ${error.message}` }],\n          isError: true\n        };\n      }\n    }\n  );\n\n  // Register get_doc_pages tool\n  server.tool(\n    'get_doc_pages',\n    'Get the pages of a specific ClickUp doc. Returns page content in the requested format (markdown or plain text).',\n    {\n      doc_id: z.string().describe('The ID of the doc to get pages from'),\n      workspace_id: z.string().describe('The ID of the workspace containing the doc'),\n      content_format: z.enum(['text/md', 'text/plain']).optional().describe('The format to return the content in')\n    },\n    async ({ doc_id, workspace_id, content_format }) => {\n      try {\n        // Get the pages of the doc\n        const pages = await docsClient.getDocPages(workspace_id, doc_id, content_format);\n        \n        return {\n          content: [{ type: 'text', text: JSON.stringify(pages, null, 2) }]\n        };\n      } catch (error: any) {\n        console.error('Error getting doc pages:', error);\n        return {\n          content: [{ type: 'text', text: `Error getting doc pages: ${error.message}` }],\n          isError: true\n        };\n      }\n    }\n  );\n}\n"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "80c8c14f12a53acb9db863d4278cbcfa6305eba6"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_13obc04wnd = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_13obc04wnd();
import { z } from 'zod';
import { createClickUpClient } from '../clickup-client/index.js';
import { createDocsClient } from '../clickup-client/docs.js';
import { createAuthClient } from '../clickup-client/auth.js';
// Create clients
const clickUpClient =
/* istanbul ignore next */
(cov_13obc04wnd().s[0]++, createClickUpClient());
const docsClient =
/* istanbul ignore next */
(cov_13obc04wnd().s[1]++, createDocsClient(clickUpClient));
const authClient =
/* istanbul ignore next */
(cov_13obc04wnd().s[2]++, createAuthClient(clickUpClient));
export function setupDocTools(server) {
  /* istanbul ignore next */
  cov_13obc04wnd().f[0]++;
  cov_13obc04wnd().s[3]++;
  // Register get_doc_content tool
  server.tool('get_doc_content', 'Get the content of a specific ClickUp doc. Returns combined content from all pages in the doc.', {
    doc_id: z.string().describe('The ID of the doc to get'),
    workspace_id: z.string().describe('The ID of the workspace containing the doc')
  }, async ({
    doc_id,
    workspace_id
  }) => {
    /* istanbul ignore next */
    cov_13obc04wnd().f[1]++;
    cov_13obc04wnd().s[4]++;
    try {
      // Get the pages of the doc
      const pages =
      /* istanbul ignore next */
      (cov_13obc04wnd().s[5]++, await docsClient.getDocPages(workspace_id, doc_id));
      // Combine the content of all pages
      let combinedContent =
      /* istanbul ignore next */
      (cov_13obc04wnd().s[6]++, '');
      /* istanbul ignore next */
      cov_13obc04wnd().s[7]++;
      if (Array.isArray(pages)) {
        /* istanbul ignore next */
        cov_13obc04wnd().b[0][0]++;
        cov_13obc04wnd().s[8]++;
        for (const page of pages) {
          /* istanbul ignore next */
          cov_13obc04wnd().s[9]++;
          if (page.content) {
            /* istanbul ignore next */
            cov_13obc04wnd().b[1][0]++;
            cov_13obc04wnd().s[10]++;
            combinedContent += page.content + '\n\n';
          } else
          /* istanbul ignore next */
          {
            cov_13obc04wnd().b[1][1]++;
          }
        }
      } else
      /* istanbul ignore next */
      {
        cov_13obc04wnd().b[0][1]++;
      }
      cov_13obc04wnd().s[11]++;
      return {
        content: [{
          type: 'text',
          text:
          /* istanbul ignore next */
          (cov_13obc04wnd().b[2][0]++, combinedContent) ||
          /* istanbul ignore next */
          (cov_13obc04wnd().b[2][1]++, 'No content found in this doc.')
        }]
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_13obc04wnd().s[12]++;
      console.error('Error getting doc content:', error);
      /* istanbul ignore next */
      cov_13obc04wnd().s[13]++;
      return {
        content: [{
          type: 'text',
          text: `Error getting doc content: ${error.message}`
        }],
        isError: true
      };
    }
  });
  // Register search_docs tool
  /* istanbul ignore next */
  cov_13obc04wnd().s[14]++;
  server.tool('search_docs', 'Search for docs in a ClickUp workspace using a query string. Returns matching docs with their metadata.', {
    workspace_id: z.string().describe('The ID of the workspace to search in'),
    query: z.string().describe('The search query'),
    cursor: z.string().optional().describe('Cursor for pagination')
  }, async ({
    workspace_id,
    query,
    cursor
  }) => {
    /* istanbul ignore next */
    cov_13obc04wnd().f[2]++;
    cov_13obc04wnd().s[15]++;
    try {
      // Search for docs in the workspace
      const result =
      /* istanbul ignore next */
      (cov_13obc04wnd().s[16]++, await docsClient.searchDocs(workspace_id, {
        query,
        cursor
      }));
      /* istanbul ignore next */
      cov_13obc04wnd().s[17]++;
      return {
        content: [{
          type: 'text',
          text: JSON.stringify(result.docs, null, 2)
        }]
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_13obc04wnd().s[18]++;
      console.error('Error searching docs:', error);
      /* istanbul ignore next */
      cov_13obc04wnd().s[19]++;
      return {
        content: [{
          type: 'text',
          text: `Error searching docs: ${error.message}`
        }],
        isError: true
      };
    }
  });
  // Register get_docs_from_workspace tool
  /* istanbul ignore next */
  cov_13obc04wnd().s[20]++;
  server.tool('get_docs_from_workspace', 'Get all docs from a ClickUp workspace. Supports pagination and filtering for deleted/archived docs.', {
    workspace_id: z.string().describe('The ID of the workspace to get docs from'),
    cursor: z.string().optional().describe('Cursor for pagination'),
    deleted: z.boolean().optional().describe('Whether to include deleted docs'),
    archived: z.boolean().optional().describe('Whether to include archived docs'),
    limit: z.number().optional().describe('The maximum number of docs to return')
  }, async ({
    workspace_id,
    cursor,
    deleted,
    archived,
    limit
  }) => {
    /* istanbul ignore next */
    cov_13obc04wnd().f[3]++;
    cov_13obc04wnd().s[21]++;
    try {
      // Get docs from the workspace
      const result =
      /* istanbul ignore next */
      (cov_13obc04wnd().s[22]++, await docsClient.getDocsFromWorkspace(workspace_id, {
        cursor,
        deleted: deleted !== undefined ?
        /* istanbul ignore next */
        (cov_13obc04wnd().b[3][0]++, deleted) :
        /* istanbul ignore next */
        (cov_13obc04wnd().b[3][1]++, false),
        archived: archived !== undefined ?
        /* istanbul ignore next */
        (cov_13obc04wnd().b[4][0]++, archived) :
        /* istanbul ignore next */
        (cov_13obc04wnd().b[4][1]++, false),
        limit:
        /* istanbul ignore next */
        (cov_13obc04wnd().b[5][0]++, limit) ||
        /* istanbul ignore next */
        (cov_13obc04wnd().b[5][1]++, 50)
      }));
      /* istanbul ignore next */
      cov_13obc04wnd().s[23]++;
      return {
        content: [{
          type: 'text',
          text: JSON.stringify(result.docs, null, 2)
        }]
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_13obc04wnd().s[24]++;
      console.error('Error getting docs from workspace:', error);
      /* istanbul ignore next */
      cov_13obc04wnd().s[25]++;
      return {
        content: [{
          type: 'text',
          text: `Error getting docs from workspace: ${error.message}`
        }],
        isError: true
      };
    }
  });
  // Register get_doc_pages tool
  /* istanbul ignore next */
  cov_13obc04wnd().s[26]++;
  server.tool('get_doc_pages', 'Get the pages of a specific ClickUp doc. Returns page content in the requested format (markdown or plain text).', {
    doc_id: z.string().describe('The ID of the doc to get pages from'),
    workspace_id: z.string().describe('The ID of the workspace containing the doc'),
    content_format: z.enum(['text/md', 'text/plain']).optional().describe('The format to return the content in')
  }, async ({
    doc_id,
    workspace_id,
    content_format
  }) => {
    /* istanbul ignore next */
    cov_13obc04wnd().f[4]++;
    cov_13obc04wnd().s[27]++;
    try {
      // Get the pages of the doc
      const pages =
      /* istanbul ignore next */
      (cov_13obc04wnd().s[28]++, await docsClient.getDocPages(workspace_id, doc_id, content_format));
      /* istanbul ignore next */
      cov_13obc04wnd().s[29]++;
      return {
        content: [{
          type: 'text',
          text: JSON.stringify(pages, null, 2)
        }]
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_13obc04wnd().s[30]++;
      console.error('Error getting doc pages:', error);
      /* istanbul ignore next */
      cov_13obc04wnd().s[31]++;
      return {
        content: [{
          type: 'text',
          text: `Error getting doc pages: ${error.message}`
        }],
        isError: true
      };
    }
  });
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
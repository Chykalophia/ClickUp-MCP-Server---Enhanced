996022ff1f92ab37af3f91e42a53ad6b
/* istanbul ignore next */
function cov_1voj0xv3vi() {
  var path = "/Users/peterkrzyzek/Development/clickup-mcp-server/src/resources/space-resources.ts";
  var hash = "f58494591556ceff772978d325648f0de1f3b426";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/peterkrzyzek/Development/clickup-mcp-server/src/resources/space-resources.ts",
    statementMap: {
      "0": {
        start: {
          line: 5,
          column: 22
        },
        end: {
          line: 5,
          column: 43
        }
      },
      "1": {
        start: {
          line: 6,
          column: 21
        },
        end: {
          line: 6,
          column: 54
        }
      },
      "2": {
        start: {
          line: 9,
          column: 4
        },
        end: {
          line: 31,
          column: 7
        }
      },
      "3": {
        start: {
          line: 12,
          column: 8
        },
        end: {
          line: 30,
          column: 9
        }
      },
      "4": {
        start: {
          line: 13,
          column: 33
        },
        end: {
          line: 13,
          column: 52
        }
      },
      "5": {
        start: {
          line: 14,
          column: 12
        },
        end: {
          line: 14,
          column: 89
        }
      },
      "6": {
        start: {
          line: 15,
          column: 27
        },
        end: {
          line: 15,
          column: 82
        }
      },
      "7": {
        start: {
          line: 16,
          column: 12
        },
        end: {
          line: 16,
          column: 77
        }
      },
      "8": {
        start: {
          line: 17,
          column: 12
        },
        end: {
          line: 25,
          column: 14
        }
      },
      "9": {
        start: {
          line: 28,
          column: 12
        },
        end: {
          line: 28,
          column: 86
        }
      },
      "10": {
        start: {
          line: 29,
          column: 12
        },
        end: {
          line: 29,
          column: 81
        }
      },
      "11": {
        start: {
          line: 33,
          column: 4
        },
        end: {
          line: 55,
          column: 7
        }
      },
      "12": {
        start: {
          line: 36,
          column: 8
        },
        end: {
          line: 54,
          column: 9
        }
      },
      "13": {
        start: {
          line: 37,
          column: 29
        },
        end: {
          line: 37,
          column: 44
        }
      },
      "14": {
        start: {
          line: 38,
          column: 12
        },
        end: {
          line: 38,
          column: 70
        }
      },
      "15": {
        start: {
          line: 39,
          column: 26
        },
        end: {
          line: 39,
          column: 63
        }
      },
      "16": {
        start: {
          line: 40,
          column: 12
        },
        end: {
          line: 40,
          column: 67
        }
      },
      "17": {
        start: {
          line: 41,
          column: 12
        },
        end: {
          line: 49,
          column: 14
        }
      },
      "18": {
        start: {
          line: 52,
          column: 12
        },
        end: {
          line: 52,
          column: 75
        }
      },
      "19": {
        start: {
          line: 53,
          column: 12
        },
        end: {
          line: 53,
          column: 70
        }
      },
      "20": {
        start: {
          line: 57,
          column: 4
        },
        end: {
          line: 79,
          column: 7
        }
      },
      "21": {
        start: {
          line: 60,
          column: 8
        },
        end: {
          line: 78,
          column: 9
        }
      },
      "22": {
        start: {
          line: 61,
          column: 33
        },
        end: {
          line: 61,
          column: 45
        }
      },
      "23": {
        start: {
          line: 62,
          column: 12
        },
        end: {
          line: 62,
          column: 97
        }
      },
      "24": {
        start: {
          line: 63,
          column: 27
        },
        end: {
          line: 63,
          column: 82
        }
      },
      "25": {
        start: {
          line: 64,
          column: 12
        },
        end: {
          line: 64,
          column: 85
        }
      },
      "26": {
        start: {
          line: 65,
          column: 12
        },
        end: {
          line: 73,
          column: 14
        }
      },
      "27": {
        start: {
          line: 76,
          column: 12
        },
        end: {
          line: 76,
          column: 94
        }
      },
      "28": {
        start: {
          line: 77,
          column: 12
        },
        end: {
          line: 77,
          column: 89
        }
      },
      "29": {
        start: {
          line: 80,
          column: 4
        },
        end: {
          line: 102,
          column: 7
        }
      },
      "30": {
        start: {
          line: 83,
          column: 8
        },
        end: {
          line: 101,
          column: 9
        }
      },
      "31": {
        start: {
          line: 84,
          column: 29
        },
        end: {
          line: 84,
          column: 42
        }
      },
      "32": {
        start: {
          line: 85,
          column: 12
        },
        end: {
          line: 85,
          column: 78
        }
      },
      "33": {
        start: {
          line: 86,
          column: 26
        },
        end: {
          line: 86,
          column: 63
        }
      },
      "34": {
        start: {
          line: 87,
          column: 12
        },
        end: {
          line: 87,
          column: 75
        }
      },
      "35": {
        start: {
          line: 88,
          column: 12
        },
        end: {
          line: 96,
          column: 14
        }
      },
      "36": {
        start: {
          line: 99,
          column: 12
        },
        end: {
          line: 99,
          column: 83
        }
      },
      "37": {
        start: {
          line: 100,
          column: 12
        },
        end: {
          line: 100,
          column: 78
        }
      }
    },
    fnMap: {
      "0": {
        name: "setupSpaceResources",
        decl: {
          start: {
            line: 7,
            column: 16
          },
          end: {
            line: 7,
            column: 35
          }
        },
        loc: {
          start: {
            line: 7,
            column: 44
          },
          end: {
            line: 103,
            column: 1
          }
        },
        line: 7
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 11,
            column: 7
          },
          end: {
            line: 11,
            column: 8
          }
        },
        loc: {
          start: {
            line: 11,
            column: 30
          },
          end: {
            line: 31,
            column: 5
          }
        },
        line: 11
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 35,
            column: 7
          },
          end: {
            line: 35,
            column: 8
          }
        },
        loc: {
          start: {
            line: 35,
            column: 30
          },
          end: {
            line: 55,
            column: 5
          }
        },
        line: 35
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 59,
            column: 7
          },
          end: {
            line: 59,
            column: 8
          }
        },
        loc: {
          start: {
            line: 59,
            column: 22
          },
          end: {
            line: 79,
            column: 5
          }
        },
        line: 59
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 82,
            column: 7
          },
          end: {
            line: 82,
            column: 8
          }
        },
        loc: {
          start: {
            line: 82,
            column: 22
          },
          end: {
            line: 102,
            column: 5
          }
        },
        line: 82
      }
    },
    branchMap: {},
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0
    },
    b: {},
    inputSourceMap: {
      file: "/Users/peterkrzyzek/Development/clickup-mcp-server/src/resources/space-resources.ts",
      mappings: "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",
      names: [],
      sources: ["/Users/peterkrzyzek/Development/clickup-mcp-server/src/resources/space-resources.ts"],
      sourcesContent: ["import { McpServer, ResourceTemplate } from '@modelcontextprotocol/sdk/server/mcp.js';\nimport { createClickUpClient } from '../clickup-client/index.js';\nimport { createSpacesClient } from '../clickup-client/spaces.js';\n\n// Create clients\nconst clickUpClient = createClickUpClient();\nconst spacesClient = createSpacesClient(clickUpClient);\n\nexport function setupSpaceResources(server: McpServer): void {\n  // Register workspace spaces resource\n  server.resource(\n    'workspace-spaces',\n    new ResourceTemplate('clickup://workspace/{workspace_id}/spaces', { list: undefined }),\n    {\n      description: 'Get all spaces in a ClickUp workspace, including their names, settings, and features.'\n    },\n    async (uri, params) => {\n      try {\n        const workspace_id = params.workspace_id as string;\n        console.log('[SpaceResources] Fetching spaces for workspace:', workspace_id);\n        const spaces = await spacesClient.getSpacesFromWorkspace(workspace_id);\n        console.log('[SpaceResources] Got spaces count:', spaces.length);\n        \n        return {\n          contents: [\n            {\n              uri: uri.toString(),\n              mimeType: 'application/json',\n              text: JSON.stringify(spaces, null, 2),\n            },\n          ],\n        };\n      } catch (error: any) {\n        console.error('[SpaceResources] Error fetching workspace spaces:', error);\n        throw new Error(`Error fetching workspace spaces: ${error.message}`);\n      }\n    }\n  );\n\n  // Register space details resource\n  server.resource(\n    'space-details',\n    new ResourceTemplate('clickup://space/{space_id}', { list: undefined }),\n    {\n      description: 'Get detailed information about a specific ClickUp space, including its name, settings, features, and metadata.'\n    },\n    async (uri, params) => {\n      try {\n        const space_id = params.space_id as string;\n        console.log('[SpaceResources] Fetching space:', space_id);\n        const space = await spacesClient.getSpace(space_id);\n        console.log('[SpaceResources] Got space:', space.name);\n        \n        return {\n          contents: [\n            {\n              uri: uri.toString(),\n              mimeType: 'application/json',\n              text: JSON.stringify(space, null, 2),\n            },\n          ],\n        };\n      } catch (error: any) {\n        console.error('[SpaceResources] Error fetching space:', error);\n        throw new Error(`Error fetching space: ${error.message}`);\n      }\n    }\n  );\n\n  // Add some example static resources for discoverability\n  server.resource(\n    'example-workspace-spaces',\n    'clickup://workspace/9011839976/spaces',\n    {\n      description: 'An example workspace spaces resource demonstrating the space list format.'\n    },\n    async (uri) => {\n      try {\n        const workspace_id = '9011839976';\n        console.log('[SpaceResources] Fetching spaces for example workspace:', workspace_id);\n        const spaces = await spacesClient.getSpacesFromWorkspace(workspace_id);\n        console.log('[SpaceResources] Got example spaces count:', spaces.length);\n        \n        return {\n          contents: [\n            {\n              uri: uri.toString(),\n              mimeType: 'application/json',\n              text: JSON.stringify(spaces, null, 2),\n            },\n          ],\n        };\n      } catch (error: any) {\n        console.error('[SpaceResources] Error fetching example workspace spaces:', error);\n        throw new Error(`Error fetching example workspace spaces: ${error.message}`);\n      }\n    }\n  );\n\n  server.resource(\n    'example-space',\n    'clickup://space/90113637923',\n    {\n      description: 'An example space resource demonstrating the space details format.'\n    },\n    async (uri) => {\n      try {\n        const space_id = '90113637923';\n        console.log('[SpaceResources] Fetching example space:', space_id);\n        const space = await spacesClient.getSpace(space_id);\n        console.log('[SpaceResources] Got example space:', space.name);\n        \n        return {\n          contents: [\n            {\n              uri: uri.toString(),\n              mimeType: 'application/json',\n              text: JSON.stringify(space, null, 2),\n            },\n          ],\n        };\n      } catch (error: any) {\n        console.error('[SpaceResources] Error fetching example space:', error);\n        throw new Error(`Error fetching example space: ${error.message}`);\n      }\n    }\n  );\n}\n"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "f58494591556ceff772978d325648f0de1f3b426"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_1voj0xv3vi = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_1voj0xv3vi();
import { ResourceTemplate } from '@modelcontextprotocol/sdk/server/mcp.js';
import { createClickUpClient } from '../clickup-client/index.js';
import { createSpacesClient } from '../clickup-client/spaces.js';
// Create clients
const clickUpClient =
/* istanbul ignore next */
(cov_1voj0xv3vi().s[0]++, createClickUpClient());
const spacesClient =
/* istanbul ignore next */
(cov_1voj0xv3vi().s[1]++, createSpacesClient(clickUpClient));
export function setupSpaceResources(server) {
  /* istanbul ignore next */
  cov_1voj0xv3vi().f[0]++;
  cov_1voj0xv3vi().s[2]++;
  // Register workspace spaces resource
  server.resource('workspace-spaces', new ResourceTemplate('clickup://workspace/{workspace_id}/spaces', {
    list: undefined
  }), {
    description: 'Get all spaces in a ClickUp workspace, including their names, settings, and features.'
  }, async (uri, params) => {
    /* istanbul ignore next */
    cov_1voj0xv3vi().f[1]++;
    cov_1voj0xv3vi().s[3]++;
    try {
      const workspace_id =
      /* istanbul ignore next */
      (cov_1voj0xv3vi().s[4]++, params.workspace_id);
      /* istanbul ignore next */
      cov_1voj0xv3vi().s[5]++;
      console.log('[SpaceResources] Fetching spaces for workspace:', workspace_id);
      const spaces =
      /* istanbul ignore next */
      (cov_1voj0xv3vi().s[6]++, await spacesClient.getSpacesFromWorkspace(workspace_id));
      /* istanbul ignore next */
      cov_1voj0xv3vi().s[7]++;
      console.log('[SpaceResources] Got spaces count:', spaces.length);
      /* istanbul ignore next */
      cov_1voj0xv3vi().s[8]++;
      return {
        contents: [{
          uri: uri.toString(),
          mimeType: 'application/json',
          text: JSON.stringify(spaces, null, 2)
        }]
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_1voj0xv3vi().s[9]++;
      console.error('[SpaceResources] Error fetching workspace spaces:', error);
      /* istanbul ignore next */
      cov_1voj0xv3vi().s[10]++;
      throw new Error(`Error fetching workspace spaces: ${error.message}`);
    }
  });
  // Register space details resource
  /* istanbul ignore next */
  cov_1voj0xv3vi().s[11]++;
  server.resource('space-details', new ResourceTemplate('clickup://space/{space_id}', {
    list: undefined
  }), {
    description: 'Get detailed information about a specific ClickUp space, including its name, settings, features, and metadata.'
  }, async (uri, params) => {
    /* istanbul ignore next */
    cov_1voj0xv3vi().f[2]++;
    cov_1voj0xv3vi().s[12]++;
    try {
      const space_id =
      /* istanbul ignore next */
      (cov_1voj0xv3vi().s[13]++, params.space_id);
      /* istanbul ignore next */
      cov_1voj0xv3vi().s[14]++;
      console.log('[SpaceResources] Fetching space:', space_id);
      const space =
      /* istanbul ignore next */
      (cov_1voj0xv3vi().s[15]++, await spacesClient.getSpace(space_id));
      /* istanbul ignore next */
      cov_1voj0xv3vi().s[16]++;
      console.log('[SpaceResources] Got space:', space.name);
      /* istanbul ignore next */
      cov_1voj0xv3vi().s[17]++;
      return {
        contents: [{
          uri: uri.toString(),
          mimeType: 'application/json',
          text: JSON.stringify(space, null, 2)
        }]
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_1voj0xv3vi().s[18]++;
      console.error('[SpaceResources] Error fetching space:', error);
      /* istanbul ignore next */
      cov_1voj0xv3vi().s[19]++;
      throw new Error(`Error fetching space: ${error.message}`);
    }
  });
  // Add some example static resources for discoverability
  /* istanbul ignore next */
  cov_1voj0xv3vi().s[20]++;
  server.resource('example-workspace-spaces', 'clickup://workspace/9011839976/spaces', {
    description: 'An example workspace spaces resource demonstrating the space list format.'
  }, async uri => {
    /* istanbul ignore next */
    cov_1voj0xv3vi().f[3]++;
    cov_1voj0xv3vi().s[21]++;
    try {
      const workspace_id =
      /* istanbul ignore next */
      (cov_1voj0xv3vi().s[22]++, '9011839976');
      /* istanbul ignore next */
      cov_1voj0xv3vi().s[23]++;
      console.log('[SpaceResources] Fetching spaces for example workspace:', workspace_id);
      const spaces =
      /* istanbul ignore next */
      (cov_1voj0xv3vi().s[24]++, await spacesClient.getSpacesFromWorkspace(workspace_id));
      /* istanbul ignore next */
      cov_1voj0xv3vi().s[25]++;
      console.log('[SpaceResources] Got example spaces count:', spaces.length);
      /* istanbul ignore next */
      cov_1voj0xv3vi().s[26]++;
      return {
        contents: [{
          uri: uri.toString(),
          mimeType: 'application/json',
          text: JSON.stringify(spaces, null, 2)
        }]
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_1voj0xv3vi().s[27]++;
      console.error('[SpaceResources] Error fetching example workspace spaces:', error);
      /* istanbul ignore next */
      cov_1voj0xv3vi().s[28]++;
      throw new Error(`Error fetching example workspace spaces: ${error.message}`);
    }
  });
  /* istanbul ignore next */
  cov_1voj0xv3vi().s[29]++;
  server.resource('example-space', 'clickup://space/90113637923', {
    description: 'An example space resource demonstrating the space details format.'
  }, async uri => {
    /* istanbul ignore next */
    cov_1voj0xv3vi().f[4]++;
    cov_1voj0xv3vi().s[30]++;
    try {
      const space_id =
      /* istanbul ignore next */
      (cov_1voj0xv3vi().s[31]++, '90113637923');
      /* istanbul ignore next */
      cov_1voj0xv3vi().s[32]++;
      console.log('[SpaceResources] Fetching example space:', space_id);
      const space =
      /* istanbul ignore next */
      (cov_1voj0xv3vi().s[33]++, await spacesClient.getSpace(space_id));
      /* istanbul ignore next */
      cov_1voj0xv3vi().s[34]++;
      console.log('[SpaceResources] Got example space:', space.name);
      /* istanbul ignore next */
      cov_1voj0xv3vi().s[35]++;
      return {
        contents: [{
          uri: uri.toString(),
          mimeType: 'application/json',
          text: JSON.stringify(space, null, 2)
        }]
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_1voj0xv3vi().s[36]++;
      console.error('[SpaceResources] Error fetching example space:', error);
      /* istanbul ignore next */
      cov_1voj0xv3vi().s[37]++;
      throw new Error(`Error fetching example space: ${error.message}`);
    }
  });
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
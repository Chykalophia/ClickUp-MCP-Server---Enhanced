{"version":3,"names":["cov_232tl6798q","actualCoverage","ResourceTemplate","createClickUpClient","createFoldersClient","clickUpClient","s","foldersClient","setupFolderResources","server","f","resource","list","undefined","description","uri","params","space_id","console","log","foldersResponse","getFoldersFromSpace","contents","toString","mimeType","text","JSON","stringify","error","Error","message","folder_id","folder","id","lists","getListsFromFolder"],"sources":["/Users/peterkrzyzek/Development/clickup-mcp-server/src/resources/folder-resources.ts"],"sourcesContent":["import { McpServer, ResourceTemplate } from '@modelcontextprotocol/sdk/server/mcp.js';\nimport { createClickUpClient } from '../clickup-client/index.js';\nimport { createFoldersClient } from '../clickup-client/folders.js';\n\n// Create clients\nconst clickUpClient = createClickUpClient();\nconst foldersClient = createFoldersClient(clickUpClient);\n\nexport function setupFolderResources(server: McpServer): void {\n  // Register space folders resource\n  server.resource(\n    'space-folders',\n    new ResourceTemplate('clickup://space/{space_id}/folders', { list: undefined }),\n    {\n      description: 'Get all folders in a ClickUp space, including their names, settings, and contained lists.'\n    },\n    async (uri, params) => {\n      try {\n        const space_id = params.space_id as string;\n        console.log('[FolderResources] Fetching folders for space:', space_id);\n        const foldersResponse = await foldersClient.getFoldersFromSpace(space_id);\n        console.log('[FolderResources] Got folders:', foldersResponse);\n        \n        return {\n          contents: [\n            {\n              uri: uri.toString(),\n              mimeType: 'application/json',\n              text: JSON.stringify(foldersResponse, null, 2),\n            },\n          ],\n        };\n      } catch (error: any) {\n        console.error('[FolderResources] Error fetching space folders:', error);\n        throw new Error(`Error fetching space folders: ${error.message}`);\n      }\n    }\n  );\n\n  // Register folder details resource\n  server.resource(\n    'folder-details',\n    new ResourceTemplate('clickup://folder/{folder_id}', { list: undefined }),\n    {\n      description: 'Get detailed information about a specific ClickUp folder, including its name, settings, and metadata.'\n    },\n    async (uri, params) => {\n      try {\n        const folder_id = params.folder_id as string;\n        console.log('[FolderResources] Fetching folder:', folder_id);\n        \n        // Note: The ClickUp API doesn't have a direct endpoint to get folder details\n        // We would need to implement this in the foldersClient if API supports it\n        // For now, return a placeholder response\n        \n        // Create a folder object with the ID and a message\n        const folder = {\n          id: folder_id,\n          message: \"Folder details endpoint not available in ClickUp API\"\n        };\n        \n        return {\n          contents: [\n            {\n              uri: uri.toString(),\n              mimeType: 'application/json',\n              text: JSON.stringify(folder, null, 2),\n            },\n          ],\n        };\n      } catch (error: any) {\n        console.error('[FolderResources] Error fetching folder:', error);\n        throw new Error(`Error fetching folder: ${error.message}`);\n      }\n    }\n  );\n\n  // Register folder lists resource\n  server.resource(\n    'folder-lists',\n    new ResourceTemplate('clickup://folder/{folder_id}/lists', { list: undefined }),\n    {\n      description: 'Get all lists contained within a specific ClickUp folder, including their names and settings.'\n    },\n    async (uri, params) => {\n      try {\n        const folder_id = params.folder_id as string;\n        console.log('[FolderResources] Fetching lists for folder:', folder_id);\n        const lists = await foldersClient.getListsFromFolder(folder_id);\n        console.log('[FolderResources] Got lists:', lists);\n        \n        return {\n          contents: [\n            {\n              uri: uri.toString(),\n              mimeType: 'application/json',\n              text: JSON.stringify(lists, null, 2),\n            },\n          ],\n        };\n      } catch (error: any) {\n        console.error('[FolderResources] Error fetching folder lists:', error);\n        throw new Error(`Error fetching folder lists: ${error.message}`);\n      }\n    }\n  );\n\n  // Add some example static resources for discoverability\n  server.resource(\n    'example-space-folders',\n    'clickup://space/90113637923/folders',\n    {\n      description: 'An example space folders resource demonstrating the folder list format.'\n    },\n    async (uri) => {\n      try {\n        const space_id = '90113637923';\n        console.log('[FolderResources] Fetching folders for example space:', space_id);\n        const foldersResponse = await foldersClient.getFoldersFromSpace(space_id);\n        console.log('[FolderResources] Got folders:', foldersResponse);\n        \n        return {\n          contents: [\n            {\n              uri: uri.toString(),\n              mimeType: 'application/json',\n              text: JSON.stringify(foldersResponse, null, 2),\n            },\n          ],\n        };\n      } catch (error: any) {\n        console.error('[FolderResources] Error fetching example space folders:', error);\n        throw new Error(`Error fetching example space folders: ${error.message}`);\n      }\n    }\n  );\n\n  server.resource(\n    'example-folder',\n    'clickup://folder/90115795569',\n    {\n      description: 'An example folder resource demonstrating the folder details format.'\n    },\n    async (uri) => {\n      try {\n        const folder_id = '90115795569';\n        console.log('[FolderResources] Fetching example folder:', folder_id);\n        \n        // Create a folder object with the ID and a message\n        const folder = {\n          id: folder_id,\n          message: \"Folder details endpoint not available in ClickUp API\"\n        };\n        \n        return {\n          contents: [\n            {\n              uri: uri.toString(),\n              mimeType: 'application/json',\n              text: JSON.stringify(folder, null, 2),\n            },\n          ],\n        };\n      } catch (error: any) {\n        console.error('[FolderResources] Error fetching example folder:', error);\n        throw new Error(`Error fetching example folder: ${error.message}`);\n      }\n    }\n  );\n\n  server.resource(\n    'example-folder-lists',\n    'clickup://folder/90115795569/lists',\n    {\n      description: 'An example folder lists resource demonstrating the list data format.'\n    },\n    async (uri) => {\n      try {\n        const folder_id = '90115795569';\n        console.log('[FolderResources] Fetching lists for example folder:', folder_id);\n        const lists = await foldersClient.getListsFromFolder(folder_id);\n        console.log('[FolderResources] Got lists:', lists);\n        \n        return {\n          contents: [\n            {\n              uri: uri.toString(),\n              mimeType: 'application/json',\n              text: JSON.stringify(lists, null, 2),\n            },\n          ],\n        };\n      } catch (error: any) {\n        console.error('[FolderResources] Error fetching example folder lists:', error);\n        throw new Error(`Error fetching example folder lists: ${error.message}`);\n      }\n    }\n  );\n}\n"],"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","ignoreList":[]}
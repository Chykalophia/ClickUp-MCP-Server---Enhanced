{"version":3,"names":["cov_10y76djwd7","actualCoverage","prepareCommentForClickUp","clickUpCommentToMarkdown","processCommentResponse","comment","f","processed","s","b","Array","isArray","comment_markdown","error","console","warn","comment_text","prepareCommentParams","params","structuredComment","notify_all","assignee","resolved","CommentsEnhancedClient","constructor","client","getTaskComments","taskId","result","get","comments","map","createTaskCommentRaw","commentText","payload","log","JSON","stringify","post","createTaskComment","getChatViewComments","viewId","createChatViewComment","getListComments","listId","createListComment","updateComment","commentId","put","deleteComment","delete","getThreadedComments","createThreadedComment","createCommentsEnhancedClient"],"sources":["/Users/peterkrzyzek/Development/clickup-mcp-server/src/clickup-client/comments-enhanced.ts"],"sourcesContent":["import { ClickUpClient } from './index.js';\nimport { processClickUpResponse } from '../utils/markdown.js';\nimport { prepareCommentForClickUp, clickUpCommentToMarkdown, ClickUpCommentBlock, cleanClickUpCommentResponse } from '../utils/clickup-comment-formatter.js';\n\nexport interface Comment {\n  id: string;\n  comment: ClickUpCommentBlock[]; // ClickUp's structured comment format\n  comment_text: string; // Plain text representation\n  comment_markdown?: string; // Markdown version for display\n  user: {\n    id: number;\n    username: string;\n    email: string;\n    color: string;\n    profilePicture?: string;\n  };\n  resolved: boolean;\n  assignee?: {\n    id: number;\n    username: string;\n    email: string;\n    color: string;\n    profilePicture?: string;\n  };\n  assigned_by?: {\n    id: number;\n    username: string;\n    email: string;\n    color: string;\n    profilePicture?: string;\n  };\n  reactions?: {\n    [key: string]: {\n      count: number;\n      users: Array<{\n        id: number;\n        username: string;\n        email: string;\n      }>;\n    };\n  };\n  date: string;\n  start_date?: string;\n  due_date?: string;\n  parent?: string;\n  replies_count?: number;\n}\n\nexport interface GetTaskCommentsParams {\n  start?: number;\n  start_id?: string;\n}\n\nexport interface CreateTaskCommentParams {\n  comment_text: string;\n  assignee?: number;\n  notify_all?: boolean;\n}\n\nexport interface GetChatViewCommentsParams {\n  start?: number;\n  start_id?: string;\n}\n\nexport interface CreateChatViewCommentParams {\n  comment_text: string;\n  notify_all?: boolean;\n}\n\nexport interface GetListCommentsParams {\n  start?: number;\n  start_id?: string;\n}\n\nexport interface CreateListCommentParams {\n  comment_text: string;\n  assignee?: number;\n  notify_all?: boolean;\n}\n\nexport interface UpdateCommentParams {\n  comment_text: string;\n  assignee?: number;\n  resolved?: boolean;\n}\n\nexport interface GetThreadedCommentsParams {\n  start?: number;\n  start_id?: string;\n}\n\nexport interface CreateThreadedCommentParams {\n  comment_text: string;\n  notify_all?: boolean;\n}\n\n/**\n * Process comment response to add markdown representation\n * SIMPLIFIED VERSION to avoid duplication issues\n */\nfunction processCommentResponse(comment: any): Comment {\n  // Skip the cleanClickUpCommentResponse and processClickUpResponse chain\n  // that was causing duplication - just return the comment as-is with minimal processing\n  \n  const processed = { ...comment };\n  \n  // Only add markdown conversion if we have structured comment data\n  if (processed.comment && Array.isArray(processed.comment)) {\n    try {\n      processed.comment_markdown = clickUpCommentToMarkdown({ comment: processed.comment });\n    } catch (error) {\n      console.warn('Failed to convert ClickUp comment to markdown:', error);\n      // Fallback to comment_text if available\n      processed.comment_markdown = processed.comment_text || '';\n    }\n  }\n  \n  return processed;\n}\n\n/**\n * Prepare comment parameters for ClickUp API using structured comment format\n * This uses ClickUp's structured comment array format for proper markdown rendering\n */\nfunction prepareCommentParams(params: any): any {\n  if (params.comment_text) {\n    // Use the structured comment format instead of plain comment_text\n    const structuredComment = prepareCommentForClickUp(params.comment_text);\n    \n    return {\n      notify_all: params.notify_all || false,\n      assignee: params.assignee,\n      resolved: params.resolved,\n      ...structuredComment // This includes the 'comment' array\n    };\n  }\n  \n  return params;\n}\n\nexport class CommentsEnhancedClient {\n  private client: ClickUpClient;\n\n  constructor(client: ClickUpClient) {\n    this.client = client;\n  }\n\n  /**\n   * Get comments for a specific task\n   * @param taskId The ID of the task to get comments for\n   * @param params Optional parameters for pagination\n   * @returns A list of comments with processed content and markdown representation\n   */\n  async getTaskComments(taskId: string, params?: GetTaskCommentsParams): Promise<{ comments: Comment[] }> {\n    const result = await this.client.get(`/task/${taskId}/comment`, params);\n    \n    // Process each comment's content\n    if (result.comments && Array.isArray(result.comments)) {\n      result.comments = result.comments.map((comment: any) => processCommentResponse(comment));\n    }\n    \n    return result;\n  }\n\n  /**\n   * Create a new comment on a task\n   * @param taskId The ID of the task to comment on\n   * @param params The comment parameters (supports markdown in comment_text)\n   * @returns The created comment with processed content\n   */\n  /**\n   * RAW API TEST - Bypass all processing and send exactly like ClickUp's official example\n   */\n  async createTaskCommentRaw(taskId: string, commentText: string): Promise<any> {\n    // Exact match to ClickUp's official Node.js example\n    const payload = {\n      notify_all: false,\n      comment_text: commentText\n    };\n    \n    console.log('=== RAW API TEST ===');\n    console.log('URL:', `/task/${taskId}/comment`);\n    console.log('Payload:', JSON.stringify(payload, null, 2));\n    console.log('===================');\n    \n    // Send raw request without any processing\n    const result = await this.client.post(`/task/${taskId}/comment`, payload);\n    \n    console.log('=== RAW API RESPONSE ===');\n    console.log('Response:', JSON.stringify(result, null, 2));\n    console.log('========================');\n    \n    // Return raw response without any processing\n    return result;\n  }\n\n  async createTaskComment(taskId: string, params: CreateTaskCommentParams): Promise<Comment> {\n    // Convert comment_text to structured array format\n    const structuredComment = prepareCommentForClickUp(params.comment_text);\n    \n    const payload = {\n      notify_all: params.notify_all || false,\n      assignee: params.assignee,\n      ...structuredComment // This adds the 'comment' array, NOT comment_text\n    };\n    \n    // DEBUG: Log exactly what we're sending to ClickUp API\n    console.log('=== DEBUG: Sending to ClickUp API ===');\n    console.log('URL:', `/task/${taskId}/comment`);\n    console.log('Payload:', JSON.stringify(payload, null, 2));\n    console.log('=====================================');\n    \n    const result = await this.client.post(`/task/${taskId}/comment`, payload);\n    \n    // DEBUG: Log what ClickUp returns\n    console.log('=== DEBUG: ClickUp API Response ===');\n    console.log('Raw Response:', JSON.stringify(result, null, 2));\n    console.log('===================================');\n    \n    return processCommentResponse(result);\n  }\n\n  /**\n   * Get comments for a chat view\n   * @param viewId The ID of the chat view to get comments for\n   * @param params Optional parameters for pagination\n   * @returns A list of comments with processed content and markdown representation\n   */\n  async getChatViewComments(viewId: string, params?: GetChatViewCommentsParams): Promise<{ comments: Comment[] }> {\n    const result = await this.client.get(`/view/${viewId}/comment`, params);\n    \n    // Process each comment's content\n    if (result.comments && Array.isArray(result.comments)) {\n      result.comments = result.comments.map((comment: any) => processCommentResponse(comment));\n    }\n    \n    return result;\n  }\n\n  /**\n   * Create a new comment on a chat view\n   * @param viewId The ID of the chat view to comment on\n   * @param params The comment parameters (supports markdown in comment_text)\n   * @returns The created comment with processed content\n   */\n  async createChatViewComment(viewId: string, params: CreateChatViewCommentParams): Promise<Comment> {\n    // Convert comment_text to structured array format\n    const structuredComment = prepareCommentForClickUp(params.comment_text);\n    \n    const payload = {\n      notify_all: params.notify_all || false,\n      ...structuredComment // This adds the 'comment' array, NOT comment_text\n    };\n    \n    const result = await this.client.post(`/view/${viewId}/comment`, payload);\n    return processCommentResponse(result);\n  }\n\n  /**\n   * Get comments for a list\n   * @param listId The ID of the list to get comments for\n   * @param params Optional parameters for pagination\n   * @returns A list of comments with processed content and markdown representation\n   */\n  async getListComments(listId: string, params?: GetListCommentsParams): Promise<{ comments: Comment[] }> {\n    const result = await this.client.get(`/list/${listId}/comment`, params);\n    \n    // Process each comment's content\n    if (result.comments && Array.isArray(result.comments)) {\n      result.comments = result.comments.map((comment: any) => processCommentResponse(comment));\n    }\n    \n    return result;\n  }\n\n  /**\n   * Create a new comment on a list\n   * @param listId The ID of the list to comment on\n   * @param params The comment parameters (supports markdown in comment_text)\n   * @returns The created comment with processed content\n   */\n  async createListComment(listId: string, params: CreateListCommentParams): Promise<Comment> {\n    // Convert comment_text to structured array format\n    const structuredComment = prepareCommentForClickUp(params.comment_text);\n    \n    const payload = {\n      notify_all: params.notify_all || false,\n      assignee: params.assignee,\n      ...structuredComment // This adds the 'comment' array, NOT comment_text\n    };\n    \n    const result = await this.client.post(`/list/${listId}/comment`, payload);\n    return processCommentResponse(result);\n  }\n\n  /**\n   * Update an existing comment\n   * @param commentId The ID of the comment to update\n   * @param params The comment parameters to update (supports markdown in comment_text)\n   * @returns The updated comment with processed content\n   */\n  async updateComment(commentId: string, params: UpdateCommentParams): Promise<Comment> {\n    // Convert comment_text to structured array format\n    const structuredComment = prepareCommentForClickUp(params.comment_text);\n    \n    const payload = {\n      assignee: params.assignee,\n      resolved: params.resolved,\n      ...structuredComment // This adds the 'comment' array, NOT comment_text\n    };\n    \n    const result = await this.client.put(`/comment/${commentId}`, payload);\n    return processCommentResponse(result);\n  }\n\n  /**\n   * Delete a comment\n   * @param commentId The ID of the comment to delete\n   * @returns Success message\n   */\n  async deleteComment(commentId: string): Promise<{ success: boolean }> {\n    return this.client.delete(`/comment/${commentId}`);\n  }\n\n  /**\n   * Get threaded comments for a parent comment\n   * @param commentId The ID of the parent comment\n   * @param params Optional parameters for pagination\n   * @returns A list of threaded comments with processed content and markdown representation\n   */\n  async getThreadedComments(commentId: string, params?: GetThreadedCommentsParams): Promise<{ comments: Comment[] }> {\n    const result = await this.client.get(`/comment/${commentId}/reply`, params);\n    \n    // Process each comment's content\n    if (result.comments && Array.isArray(result.comments)) {\n      result.comments = result.comments.map((comment: any) => processCommentResponse(comment));\n    }\n    \n    return result;\n  }\n\n  /**\n   * Create a new threaded comment on a parent comment\n   * @param commentId The ID of the parent comment\n   * @param params The comment parameters (supports markdown in comment_text)\n   * @returns The created threaded comment with processed content\n   */\n  async createThreadedComment(commentId: string, params: CreateThreadedCommentParams): Promise<Comment> {\n    // Convert comment_text to structured array format\n    const structuredComment = prepareCommentForClickUp(params.comment_text);\n    \n    const payload = {\n      notify_all: params.notify_all || false,\n      ...structuredComment // This adds the 'comment' array, NOT comment_text\n    };\n    \n    const result = await this.client.post(`/comment/${commentId}/reply`, payload);\n    return processCommentResponse(result);\n  }\n}\n\nexport const createCommentsEnhancedClient = (client: ClickUpClient): CommentsEnhancedClient => {\n  return new CommentsEnhancedClient(client);\n};\n"],"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","ignoreList":[]}
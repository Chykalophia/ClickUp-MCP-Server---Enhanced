006a20d68b8c8764dd2b45278d0ddfd3
/* istanbul ignore next */
function cov_isye2alfe() {
  var path = "/Users/peterkrzyzek/Development/clickup-mcp-server/src/schemas/dependencies-schemas.ts";
  var hash = "cf2d0b90b72cca2ac5c326a949cac61db3f32736";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/peterkrzyzek/Development/clickup-mcp-server/src/schemas/dependencies-schemas.ts",
    statementMap: {
      "0": {
        start: {
          line: 3,
          column: 36
        },
        end: {
          line: 7,
          column: 2
        }
      },
      "1": {
        start: {
          line: 9,
          column: 38
        },
        end: {
          line: 14,
          column: 2
        }
      },
      "2": {
        start: {
          line: 16,
          column: 38
        },
        end: {
          line: 21,
          column: 2
        }
      },
      "3": {
        start: {
          line: 23,
          column: 38
        },
        end: {
          line: 27,
          column: 2
        }
      },
      "4": {
        start: {
          line: 29,
          column: 43
        },
        end: {
          line: 34,
          column: 2
        }
      },
      "5": {
        start: {
          line: 36,
          column: 44
        },
        end: {
          line: 42,
          column: 2
        }
      },
      "6": {
        start: {
          line: 44,
          column: 45
        },
        end: {
          line: 50,
          column: 2
        }
      },
      "7": {
        start: {
          line: 52,
          column: 45
        },
        end: {
          line: 59,
          column: 2
        }
      },
      "8": {
        start: {
          line: 61,
          column: 38
        },
        end: {
          line: 72,
          column: 1
        }
      },
      "9": {
        start: {
          line: 62,
          column: 4
        },
        end: {
          line: 71,
          column: 5
        }
      },
      "10": {
        start: {
          line: 64,
          column: 12
        },
        end: {
          line: 64,
          column: 29
        }
      },
      "11": {
        start: {
          line: 66,
          column: 12
        },
        end: {
          line: 66,
          column: 30
        }
      },
      "12": {
        start: {
          line: 68,
          column: 12
        },
        end: {
          line: 68,
          column: 29
        }
      },
      "13": {
        start: {
          line: 70,
          column: 12
        },
        end: {
          line: 70,
          column: 29
        }
      },
      "14": {
        start: {
          line: 73,
          column: 41
        },
        end: {
          line: 84,
          column: 1
        }
      },
      "15": {
        start: {
          line: 74,
          column: 4
        },
        end: {
          line: 83,
          column: 5
        }
      },
      "16": {
        start: {
          line: 76,
          column: 12
        },
        end: {
          line: 76,
          column: 32
        }
      },
      "17": {
        start: {
          line: 78,
          column: 12
        },
        end: {
          line: 78,
          column: 30
        }
      },
      "18": {
        start: {
          line: 80,
          column: 12
        },
        end: {
          line: 80,
          column: 28
        }
      },
      "19": {
        start: {
          line: 82,
          column: 12
        },
        end: {
          line: 82,
          column: 24
        }
      },
      "20": {
        start: {
          line: 85,
          column: 39
        },
        end: {
          line: 140,
          column: 1
        }
      },
      "21": {
        start: {
          line: 86,
          column: 18
        },
        end: {
          line: 86,
          column: 27
        }
      },
      "22": {
        start: {
          line: 87,
          column: 19
        },
        end: {
          line: 87,
          column: 21
        }
      },
      "23": {
        start: {
          line: 89,
          column: 4
        },
        end: {
          line: 102,
          column: 7
        }
      },
      "24": {
        start: {
          line: 90,
          column: 8
        },
        end: {
          line: 92,
          column: 9
        }
      },
      "25": {
        start: {
          line: 91,
          column: 12
        },
        end: {
          line: 91,
          column: 46
        }
      },
      "26": {
        start: {
          line: 93,
          column: 8
        },
        end: {
          line: 95,
          column: 9
        }
      },
      "27": {
        start: {
          line: 94,
          column: 12
        },
        end: {
          line: 94,
          column: 49
        }
      },
      "28": {
        start: {
          line: 96,
          column: 8
        },
        end: {
          line: 101,
          column: 9
        }
      },
      "29": {
        start: {
          line: 97,
          column: 12
        },
        end: {
          line: 97,
          column: 56
        }
      },
      "30": {
        start: {
          line: 99,
          column: 13
        },
        end: {
          line: 101,
          column: 9
        }
      },
      "31": {
        start: {
          line: 100,
          column: 12
        },
        end: {
          line: 100,
          column: 56
        }
      },
      "32": {
        start: {
          line: 104,
          column: 19
        },
        end: {
          line: 104,
          column: 21
        }
      },
      "33": {
        start: {
          line: 105,
          column: 20
        },
        end: {
          line: 105,
          column: 29
        }
      },
      "34": {
        start: {
          line: 106,
          column: 27
        },
        end: {
          line: 106,
          column: 36
        }
      },
      "35": {
        start: {
          line: 107,
          column: 16
        },
        end: {
          line: 125,
          column: 5
        }
      },
      "36": {
        start: {
          line: 108,
          column: 8
        },
        end: {
          line: 108,
          column: 26
        }
      },
      "37": {
        start: {
          line: 109,
          column: 8
        },
        end: {
          line: 109,
          column: 33
        }
      },
      "38": {
        start: {
          line: 110,
          column: 8
        },
        end: {
          line: 110,
          column: 24
        }
      },
      "39": {
        start: {
          line: 111,
          column: 26
        },
        end: {
          line: 111,
          column: 54
        }
      },
      "40": {
        start: {
          line: 112,
          column: 8
        },
        end: {
          line: 123,
          column: 9
        }
      },
      "41": {
        start: {
          line: 113,
          column: 12
        },
        end: {
          line: 122,
          column: 13
        }
      },
      "42": {
        start: {
          line: 114,
          column: 16
        },
        end: {
          line: 114,
          column: 41
        }
      },
      "43": {
        start: {
          line: 116,
          column: 17
        },
        end: {
          line: 122,
          column: 13
        }
      },
      "44": {
        start: {
          line: 118,
          column: 35
        },
        end: {
          line: 118,
          column: 57
        }
      },
      "45": {
        start: {
          line: 119,
          column: 16
        },
        end: {
          line: 121,
          column: 17
        }
      },
      "46": {
        start: {
          line: 120,
          column: 20
        },
        end: {
          line: 120,
          column: 56
        }
      },
      "47": {
        start: {
          line: 124,
          column: 8
        },
        end: {
          line: 124,
          column: 36
        }
      },
      "48": {
        start: {
          line: 127,
          column: 4
        },
        end: {
          line: 131,
          column: 5
        }
      },
      "49": {
        start: {
          line: 128,
          column: 8
        },
        end: {
          line: 130,
          column: 9
        }
      },
      "50": {
        start: {
          line: 129,
          column: 12
        },
        end: {
          line: 129,
          column: 26
        }
      },
      "51": {
        start: {
          line: 132,
          column: 4
        },
        end: {
          line: 134,
          column: 5
        }
      },
      "52": {
        start: {
          line: 133,
          column: 8
        },
        end: {
          line: 133,
          column: 109
        }
      },
      "53": {
        start: {
          line: 133,
          column: 75
        },
        end: {
          line: 133,
          column: 93
        }
      },
      "54": {
        start: {
          line: 135,
          column: 4
        },
        end: {
          line: 139,
          column: 6
        }
      },
      "55": {
        start: {
          line: 141,
          column: 37
        },
        end: {
          line: 175,
          column: 1
        }
      },
      "56": {
        start: {
          line: 144,
          column: 20
        },
        end: {
          line: 144,
          column: 68
        }
      },
      "57": {
        start: {
          line: 144,
          column: 46
        },
        end: {
          line: 144,
          column: 66
        }
      },
      "58": {
        start: {
          line: 145,
          column: 20
        },
        end: {
          line: 145,
          column: 29
        }
      },
      "59": {
        start: {
          line: 146,
          column: 25
        },
        end: {
          line: 146,
          column: 27
        }
      },
      "60": {
        start: {
          line: 148,
          column: 28
        },
        end: {
          line: 165,
          column: 5
        }
      },
      "61": {
        start: {
          line: 149,
          column: 8
        },
        end: {
          line: 150,
          column: 31
        }
      },
      "62": {
        start: {
          line: 150,
          column: 12
        },
        end: {
          line: 150,
          column: 31
        }
      },
      "63": {
        start: {
          line: 151,
          column: 8
        },
        end: {
          line: 151,
          column: 28
        }
      },
      "64": {
        start: {
          line: 152,
          column: 21
        },
        end: {
          line: 152,
          column: 40
        }
      },
      "65": {
        start: {
          line: 153,
          column: 8
        },
        end: {
          line: 154,
          column: 31
        }
      },
      "66": {
        start: {
          line: 154,
          column: 12
        },
        end: {
          line: 154,
          column: 31
        }
      },
      "67": {
        start: {
          line: 155,
          column: 29
        },
        end: {
          line: 155,
          column: 51
        }
      },
      "68": {
        start: {
          line: 156,
          column: 26
        },
        end: {
          line: 156,
          column: 38
        }
      },
      "69": {
        start: {
          line: 158,
          column: 8
        },
        end: {
          line: 163,
          column: 9
        }
      },
      "70": {
        start: {
          line: 159,
          column: 30
        },
        end: {
          line: 159,
          column: 79
        }
      },
      "71": {
        start: {
          line: 160,
          column: 12
        },
        end: {
          line: 162,
          column: 13
        }
      },
      "72": {
        start: {
          line: 161,
          column: 16
        },
        end: {
          line: 161,
          column: 40
        }
      },
      "73": {
        start: {
          line: 164,
          column: 8
        },
        end: {
          line: 164,
          column: 27
        }
      },
      "74": {
        start: {
          line: 167,
          column: 22
        },
        end: {
          line: 167,
          column: 74
        }
      },
      "75": {
        start: {
          line: 167,
          column: 43
        },
        end: {
          line: 167,
          column: 73
        }
      },
      "76": {
        start: {
          line: 168,
          column: 4
        },
        end: {
          line: 173,
          column: 5
        }
      },
      "77": {
        start: {
          line: 169,
          column: 21
        },
        end: {
          line: 169,
          column: 58
        }
      },
      "78": {
        start: {
          line: 170,
          column: 8
        },
        end: {
          line: 172,
          column: 9
        }
      },
      "79": {
        start: {
          line: 171,
          column: 12
        },
        end: {
          line: 171,
          column: 65
        }
      },
      "80": {
        start: {
          line: 174,
          column: 4
        },
        end: {
          line: 174,
          column: 24
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 61,
            column: 38
          },
          end: {
            line: 61,
            column: 39
          }
        },
        loc: {
          start: {
            line: 61,
            column: 48
          },
          end: {
            line: 72,
            column: 1
          }
        },
        line: 61
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 73,
            column: 41
          },
          end: {
            line: 73,
            column: 42
          }
        },
        loc: {
          start: {
            line: 73,
            column: 51
          },
          end: {
            line: 84,
            column: 1
          }
        },
        line: 73
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 85,
            column: 39
          },
          end: {
            line: 85,
            column: 40
          }
        },
        loc: {
          start: {
            line: 85,
            column: 57
          },
          end: {
            line: 140,
            column: 1
          }
        },
        line: 85
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 89,
            column: 25
          },
          end: {
            line: 89,
            column: 26
          }
        },
        loc: {
          start: {
            line: 89,
            column: 32
          },
          end: {
            line: 102,
            column: 5
          }
        },
        line: 89
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 107,
            column: 16
          },
          end: {
            line: 107,
            column: 17
          }
        },
        loc: {
          start: {
            line: 107,
            column: 32
          },
          end: {
            line: 125,
            column: 5
          }
        },
        line: 107
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 133,
            column: 66
          },
          end: {
            line: 133,
            column: 67
          }
        },
        loc: {
          start: {
            line: 133,
            column: 75
          },
          end: {
            line: 133,
            column: 93
          }
        },
        line: 133
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 141,
            column: 37
          },
          end: {
            line: 141,
            column: 38
          }
        },
        loc: {
          start: {
            line: 141,
            column: 48
          },
          end: {
            line: 175,
            column: 1
          }
        },
        line: 141
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 144,
            column: 38
          },
          end: {
            line: 144,
            column: 39
          }
        },
        loc: {
          start: {
            line: 144,
            column: 46
          },
          end: {
            line: 144,
            column: 66
          }
        },
        line: 144
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 148,
            column: 28
          },
          end: {
            line: 148,
            column: 29
          }
        },
        loc: {
          start: {
            line: 148,
            column: 53
          },
          end: {
            line: 165,
            column: 5
          }
        },
        line: 148
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 167,
            column: 35
          },
          end: {
            line: 167,
            column: 36
          }
        },
        loc: {
          start: {
            line: 167,
            column: 43
          },
          end: {
            line: 167,
            column: 73
          }
        },
        line: 167
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 62,
            column: 4
          },
          end: {
            line: 71,
            column: 5
          }
        },
        type: "switch",
        locations: [{
          start: {
            line: 63,
            column: 8
          },
          end: {
            line: 64,
            column: 29
          }
        }, {
          start: {
            line: 65,
            column: 8
          },
          end: {
            line: 66,
            column: 30
          }
        }, {
          start: {
            line: 67,
            column: 8
          },
          end: {
            line: 68,
            column: 29
          }
        }, {
          start: {
            line: 69,
            column: 8
          },
          end: {
            line: 70,
            column: 29
          }
        }],
        line: 62
      },
      "1": {
        loc: {
          start: {
            line: 74,
            column: 4
          },
          end: {
            line: 83,
            column: 5
          }
        },
        type: "switch",
        locations: [{
          start: {
            line: 75,
            column: 8
          },
          end: {
            line: 76,
            column: 32
          }
        }, {
          start: {
            line: 77,
            column: 8
          },
          end: {
            line: 78,
            column: 30
          }
        }, {
          start: {
            line: 79,
            column: 8
          },
          end: {
            line: 80,
            column: 28
          }
        }, {
          start: {
            line: 81,
            column: 8
          },
          end: {
            line: 82,
            column: 24
          }
        }],
        line: 74
      },
      "2": {
        loc: {
          start: {
            line: 90,
            column: 8
          },
          end: {
            line: 92,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 90,
            column: 8
          },
          end: {
            line: 92,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 90
      },
      "3": {
        loc: {
          start: {
            line: 93,
            column: 8
          },
          end: {
            line: 95,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 93,
            column: 8
          },
          end: {
            line: 95,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 93
      },
      "4": {
        loc: {
          start: {
            line: 96,
            column: 8
          },
          end: {
            line: 101,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 96,
            column: 8
          },
          end: {
            line: 101,
            column: 9
          }
        }, {
          start: {
            line: 99,
            column: 13
          },
          end: {
            line: 101,
            column: 9
          }
        }],
        line: 96
      },
      "5": {
        loc: {
          start: {
            line: 99,
            column: 13
          },
          end: {
            line: 101,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 99,
            column: 13
          },
          end: {
            line: 101,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 99
      },
      "6": {
        loc: {
          start: {
            line: 111,
            column: 26
          },
          end: {
            line: 111,
            column: 54
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 111,
            column: 26
          },
          end: {
            line: 111,
            column: 41
          }
        }, {
          start: {
            line: 111,
            column: 45
          },
          end: {
            line: 111,
            column: 54
          }
        }],
        line: 111
      },
      "7": {
        loc: {
          start: {
            line: 113,
            column: 12
          },
          end: {
            line: 122,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 113,
            column: 12
          },
          end: {
            line: 122,
            column: 13
          }
        }, {
          start: {
            line: 116,
            column: 17
          },
          end: {
            line: 122,
            column: 13
          }
        }],
        line: 113
      },
      "8": {
        loc: {
          start: {
            line: 116,
            column: 17
          },
          end: {
            line: 122,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 116,
            column: 17
          },
          end: {
            line: 122,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 116
      },
      "9": {
        loc: {
          start: {
            line: 119,
            column: 16
          },
          end: {
            line: 121,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 119,
            column: 16
          },
          end: {
            line: 121,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 119
      },
      "10": {
        loc: {
          start: {
            line: 128,
            column: 8
          },
          end: {
            line: 130,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 128,
            column: 8
          },
          end: {
            line: 130,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 128
      },
      "11": {
        loc: {
          start: {
            line: 132,
            column: 4
          },
          end: {
            line: 134,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 132,
            column: 4
          },
          end: {
            line: 134,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 132
      },
      "12": {
        loc: {
          start: {
            line: 149,
            column: 8
          },
          end: {
            line: 150,
            column: 31
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 149,
            column: 8
          },
          end: {
            line: 150,
            column: 31
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 149
      },
      "13": {
        loc: {
          start: {
            line: 153,
            column: 8
          },
          end: {
            line: 154,
            column: 31
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 153,
            column: 8
          },
          end: {
            line: 154,
            column: 31
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 153
      },
      "14": {
        loc: {
          start: {
            line: 160,
            column: 12
          },
          end: {
            line: 162,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 160,
            column: 12
          },
          end: {
            line: 162,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 160
      },
      "15": {
        loc: {
          start: {
            line: 170,
            column: 8
          },
          end: {
            line: 172,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 170,
            column: 8
          },
          end: {
            line: 172,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 170
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0
    },
    b: {
      "0": [0, 0, 0, 0],
      "1": [0, 0, 0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0]
    },
    inputSourceMap: {
      file: "/Users/peterkrzyzek/Development/clickup-mcp-server/src/schemas/dependencies-schemas.ts",
      mappings: "AAAA,OAAO,EAAE,CAAC,EAAE,MAAM,KAAK,CAAC;AAExB,mBAAmB;AACnB,MAAM,CAAC,MAAM,oBAAoB,GAAG,CAAC,CAAC,IAAI,CAAC;IACzC,UAAU,EAAO,0DAA0D;IAC3E,YAAY,EAAK,gEAAgE;IACjF,QAAQ,CAAS,oCAAoC;CACtD,CAAC,CAAC;AAEH,oBAAoB;AACpB,MAAM,CAAC,MAAM,sBAAsB,GAAG,CAAC,CAAC,IAAI,CAAC;IAC3C,QAAQ;IACR,UAAU;IACV,QAAQ;IACR,SAAS;CACV,CAAC,CAAC;AAEH,2BAA2B;AAC3B,MAAM,CAAC,MAAM,sBAAsB,GAAG,CAAC,CAAC,MAAM,CAAC;IAC7C,OAAO,EAAE,CAAC,CAAC,MAAM,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,4CAA4C,CAAC;IACjF,UAAU,EAAE,CAAC,CAAC,MAAM,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,8CAA8C,CAAC;IACtF,IAAI,EAAE,oBAAoB,CAAC,OAAO,CAAC,UAAU,CAAC,CAAC,QAAQ,CAAC,qCAAqC,CAAC;IAC9F,OAAO,EAAE,CAAC,CAAC,MAAM,EAAE,CAAC,QAAQ,EAAE,CAAC,QAAQ,CAAC,oDAAoD,CAAC;CAC9F,CAAC,CAAC;AAEH,2BAA2B;AAC3B,MAAM,CAAC,MAAM,sBAAsB,GAAG,CAAC,CAAC,MAAM,CAAC;IAC7C,aAAa,EAAE,CAAC,CAAC,MAAM,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,oCAAoC,CAAC;IAC/E,IAAI,EAAE,oBAAoB,CAAC,QAAQ,EAAE,CAAC,QAAQ,CAAC,qBAAqB,CAAC;IACrE,MAAM,EAAE,sBAAsB,CAAC,QAAQ,EAAE,CAAC,QAAQ,CAAC,uBAAuB,CAAC;CAC5E,CAAC,CAAC;AAEH,iCAAiC;AACjC,MAAM,CAAC,MAAM,2BAA2B,GAAG,CAAC,CAAC,MAAM,CAAC;IAClD,OAAO,EAAE,CAAC,CAAC,MAAM,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,4CAA4C,CAAC;IACjF,IAAI,EAAE,oBAAoB,CAAC,QAAQ,EAAE,CAAC,QAAQ,CAAC,2BAA2B,CAAC;IAC3E,MAAM,EAAE,sBAAsB,CAAC,QAAQ,EAAE,CAAC,QAAQ,CAAC,6BAA6B,CAAC;IACjF,gBAAgB,EAAE,CAAC,CAAC,OAAO,EAAE,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,QAAQ,CAAC,0CAA0C,CAAC;CAClG,CAAC,CAAC;AAEH,kCAAkC;AAClC,MAAM,CAAC,MAAM,4BAA4B,GAAG,CAAC,CAAC,MAAM,CAAC;IACnD,OAAO,EAAE,CAAC,CAAC,MAAM,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,2CAA2C,CAAC;IAChF,KAAK,EAAE,CAAC,CAAC,MAAM,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,wCAAwC,CAAC;IAC9F,SAAS,EAAE,CAAC,CAAC,IAAI,CAAC,CAAC,UAAU,EAAE,YAAY,EAAE,MAAM,CAAC,CAAC,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,QAAQ,CAAC,oCAAoC,CAAC;IACpH,gBAAgB,EAAE,CAAC,CAAC,OAAO,EAAE,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,QAAQ,CAAC,0CAA0C,CAAC;IACjG,cAAc,EAAE,CAAC,CAAC,OAAO,EAAE,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,QAAQ,CAAC,wCAAwC,CAAC;CAC7F,CAAC,CAAC;AAEH,mCAAmC;AACnC,MAAM,CAAC,MAAM,6BAA6B,GAAG,CAAC,CAAC,MAAM,CAAC;IACpD,OAAO,EAAE,CAAC,CAAC,MAAM,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,oCAAoC,CAAC;IACzE,qBAAqB,EAAE,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,MAAM,CAAC;QACtC,UAAU,EAAE,CAAC,CAAC,MAAM,EAAE;QACtB,IAAI,EAAE,oBAAoB;KAC3B,CAAC,CAAC,CAAC,QAAQ,EAAE,CAAC,QAAQ,CAAC,kDAAkD,CAAC;CAC5E,CAAC,CAAC;AAEH,oCAAoC;AACpC,MAAM,CAAC,MAAM,6BAA6B,GAAG,CAAC,CAAC,MAAM,CAAC;IACpD,SAAS,EAAE,CAAC,CAAC,IAAI,CAAC,CAAC,QAAQ,EAAE,QAAQ,EAAE,QAAQ,CAAC,CAAC,CAAC,QAAQ,CAAC,+BAA+B,CAAC;IAC3F,YAAY,EAAE,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,KAAK,CAAC;QAC5B,sBAAsB;QACtB,CAAC,CAAC,MAAM,CAAC,EAAE,aAAa,EAAE,CAAC,CAAC,MAAM,EAAE,EAAE,CAAC,EAAE,wBAAwB;QACjE,sBAAsB;KACvB,CAAC,CAAC,CAAC,QAAQ,CAAC,2CAA2C,CAAC;CAC1D,CAAC,CAAC;AAuHH,oBAAoB;AACpB,MAAM,CAAC,MAAM,sBAAsB,GAAG,CAAC,IAAoB,EAA0B,EAAE;IACrF,QAAQ,IAAI,EAAE,CAAC;QACb,KAAK,UAAU;YACb,OAAO,SAAS,CAAC;QACnB,KAAK,YAAY;YACf,OAAO,UAAU,CAAC;QACpB,KAAK,QAAQ;YACX,OAAO,SAAS,CAAC;QACnB;YACE,OAAO,SAAS,CAAC;IACrB,CAAC;AACH,CAAC,CAAC;AAEF,MAAM,CAAC,MAAM,yBAAyB,GAAG,CAAC,IAAoB,EAAkB,EAAE;IAChF,QAAQ,IAAI,EAAE,CAAC;QACb,KAAK,UAAU;YACb,OAAO,YAAY,CAAC;QACtB,KAAK,YAAY;YACf,OAAO,UAAU,CAAC;QACpB,KAAK,QAAQ;YACX,OAAO,QAAQ,CAAC;QAClB;YACE,OAAO,IAAI,CAAC;IAChB,CAAC;AACH,CAAC,CAAC;AAEF,MAAM,CAAC,MAAM,uBAAuB,GAAG,CAAC,YAAuC,EAI7E,EAAE;IACF,MAAM,KAAK,GAAG,IAAI,GAAG,EAAuB,CAAC;IAC7C,MAAM,MAAM,GAAa,EAAE,CAAC;IAE5B,uBAAuB;IACvB,YAAY,CAAC,OAAO,CAAC,GAAG,CAAC,EAAE;QACzB,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,GAAG,CAAC,OAAO,CAAC,EAAE,CAAC;YAC5B,KAAK,CAAC,GAAG,CAAC,GAAG,CAAC,OAAO,EAAE,IAAI,GAAG,EAAE,CAAC,CAAC;QACpC,CAAC;QACD,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,GAAG,CAAC,UAAU,CAAC,EAAE,CAAC;YAC/B,KAAK,CAAC,GAAG,CAAC,GAAG,CAAC,UAAU,EAAE,IAAI,GAAG,EAAE,CAAC,CAAC;QACvC,CAAC;QAED,IAAI,GAAG,CAAC,IAAI,KAAK,UAAU,EAAE,CAAC;YAC5B,KAAK,CAAC,GAAG,CAAC,GAAG,CAAC,UAAU,CAAC,EAAE,GAAG,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;QAC9C,CAAC;aAAM,IAAI,GAAG,CAAC,IAAI,KAAK,YAAY,EAAE,CAAC;YACrC,KAAK,CAAC,GAAG,CAAC,GAAG,CAAC,OAAO,CAAC,EAAE,GAAG,CAAC,GAAG,CAAC,UAAU,CAAC,CAAC;QAC9C,CAAC;IACH,CAAC,CAAC,CAAC;IAEH,0BAA0B;IAC1B,MAAM,MAAM,GAAe,EAAE,CAAC;IAC9B,MAAM,OAAO,GAAG,IAAI,GAAG,EAAU,CAAC;IAClC,MAAM,cAAc,GAAG,IAAI,GAAG,EAAU,CAAC;IAEzC,MAAM,GAAG,GAAG,CAAC,IAAY,EAAE,IAAc,EAAQ,EAAE;QACjD,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;QAClB,cAAc,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;QACzB,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QAEhB,MAAM,SAAS,GAAG,KAAK,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI,IAAI,GAAG,EAAE,CAAC;QAC/C,KAAK,MAAM,QAAQ,IAAI,SAAS,EAAE,CAAC;YACjC,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,QAAQ,CAAC,EAAE,CAAC;gBAC3B,GAAG,CAAC,QAAQ,EAAE,CAAC,GAAG,IAAI,CAAC,CAAC,CAAC;YAC3B,CAAC;iBAAM,IAAI,cAAc,CAAC,GAAG,CAAC,QAAQ,CAAC,EAAE,CAAC;gBACxC,gBAAgB;gBAChB,MAAM,UAAU,GAAG,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC;gBAC1C,IAAI,UAAU,KAAK,CAAC,CAAC,EAAE,CAAC;oBACtB,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,UAAU,CAAC,CAAC,CAAC;gBACtC,CAAC;YACH,CAAC;QACH,CAAC;QAED,cAAc,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;IAC9B,CAAC,CAAC;IAEF,6BAA6B;IAC7B,KAAK,MAAM,IAAI,IAAI,KAAK,CAAC,IAAI,EAAE,EAAE,CAAC;QAChC,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE,CAAC;YACvB,GAAG,CAAC,IAAI,EAAE,EAAE,CAAC,CAAC;QAChB,CAAC;IACH,CAAC;IAED,IAAI,MAAM,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC;QACtB,MAAM,CAAC,IAAI,CAAC,mCAAmC,MAAM,CAAC,GAAG,CAAC,KAAK,CAAC,EAAE,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;IACvG,CAAC;IAED,OAAO;QACL,OAAO,EAAE,MAAM,CAAC,MAAM,KAAK,CAAC;QAC5B,MAAM;QACN,MAAM;KACP,CAAC;AACJ,CAAC,CAAC;AAEF,MAAM,CAAC,MAAM,qBAAqB,GAAG,CAAC,KAA4B,EAAyB,EAAE;IAC3F,uCAAuC;IACvC,yEAAyE;IACzE,MAAM,OAAO,GAAG,IAAI,GAAG,CAAC,KAAK,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,OAAO,EAAE,IAAI,CAAC,CAAC,CAAC,CAAC;IACjE,MAAM,OAAO,GAAG,IAAI,GAAG,EAAU,CAAC;IAClC,MAAM,YAAY,GAA0B,EAAE,CAAC;IAE/C,qDAAqD;IACrD,MAAM,eAAe,GAAG,CAAC,MAAc,EAAE,WAAkC,EAAyB,EAAE;QACpG,IAAI,OAAO,CAAC,GAAG,CAAC,MAAM,CAAC;YAAE,OAAO,WAAW,CAAC;QAE5C,OAAO,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC;QACpB,MAAM,IAAI,GAAG,OAAO,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC;QACjC,IAAI,CAAC,IAAI;YAAE,OAAO,WAAW,CAAC;QAE9B,MAAM,YAAY,GAAG,CAAC,GAAG,WAAW,EAAE,IAAI,CAAC,CAAC;QAC5C,IAAI,WAAW,GAAG,YAAY,CAAC;QAE/B,2BAA2B;QAC3B,KAAK,MAAM,GAAG,IAAI,IAAI,CAAC,YAAY,EAAE,CAAC;YACpC,MAAM,SAAS,GAAG,eAAe,CAAC,GAAG,CAAC,cAAc,EAAE,YAAY,CAAC,CAAC;YACpE,IAAI,SAAS,CAAC,MAAM,GAAG,WAAW,CAAC,MAAM,EAAE,CAAC;gBAC1C,WAAW,GAAG,SAAS,CAAC;YAC1B,CAAC;QACH,CAAC;QAED,OAAO,WAAW,CAAC;IACrB,CAAC,CAAC;IAEF,qDAAqD;IACrD,MAAM,SAAS,GAAG,KAAK,CAAC,MAAM,CAAC,IAAI,CAAC,EAAE,CAAC,IAAI,CAAC,YAAY,CAAC,MAAM,KAAK,CAAC,CAAC,CAAC;IAEvE,KAAK,MAAM,QAAQ,IAAI,SAAS,EAAE,CAAC;QACjC,MAAM,IAAI,GAAG,eAAe,CAAC,QAAQ,CAAC,OAAO,EAAE,EAAE,CAAC,CAAC;QACnD,IAAI,IAAI,CAAC,MAAM,GAAG,YAAY,CAAC,MAAM,EAAE,CAAC;YACtC,YAAY,CAAC,MAAM,CAAC,CAAC,EAAE,YAAY,CAAC,MAAM,EAAE,GAAG,IAAI,CAAC,CAAC;QACvD,CAAC;IACH,CAAC;IAED,OAAO,YAAY,CAAC;AACtB,CAAC,CAAC",
      names: [],
      sources: ["/Users/peterkrzyzek/Development/clickup-mcp-server/src/schemas/dependencies-schemas.ts"],
      sourcesContent: ["import { z } from 'zod';\n\n// Dependency types\nexport const DependencyTypeSchema = z.enum([\n  'blocking',      // Task A blocks Task B (A must finish before B can start)\n  'waiting_on',    // Task A is waiting on Task B (A cannot start until B finishes)\n  'linked'         // Tasks are linked but not blocking\n]);\n\n// Dependency status\nexport const DependencyStatusSchema = z.enum([\n  'active',\n  'resolved',\n  'broken',\n  'ignored'\n]);\n\n// Create dependency schema\nexport const CreateDependencySchema = z.object({\n  task_id: z.string().min(1).describe('The ID of the task that depends on another'),\n  depends_on: z.string().min(1).describe('The ID of the task that this task depends on'),\n  type: DependencyTypeSchema.default('blocking').describe('The type of dependency relationship'),\n  link_id: z.string().optional().describe('Optional link ID for grouping related dependencies')\n});\n\n// Update dependency schema\nexport const UpdateDependencySchema = z.object({\n  dependency_id: z.string().min(1).describe('The ID of the dependency to update'),\n  type: DependencyTypeSchema.optional().describe('New dependency type'),\n  status: DependencyStatusSchema.optional().describe('New dependency status')\n});\n\n// Get dependencies filter schema\nexport const GetDependenciesFilterSchema = z.object({\n  task_id: z.string().min(1).describe('The ID of the task to get dependencies for'),\n  type: DependencyTypeSchema.optional().describe('Filter by dependency type'),\n  status: DependencyStatusSchema.optional().describe('Filter by dependency status'),\n  include_resolved: z.boolean().default(false).describe('Whether to include resolved dependencies')\n});\n\n// Dependency graph options schema\nexport const DependencyGraphOptionsSchema = z.object({\n  task_id: z.string().min(1).describe('The root task ID for the dependency graph'),\n  depth: z.number().min(1).max(10).default(3).describe('Maximum depth to traverse in the graph'),\n  direction: z.enum(['upstream', 'downstream', 'both']).default('both').describe('Direction to traverse dependencies'),\n  include_resolved: z.boolean().default(false).describe('Whether to include resolved dependencies'),\n  include_broken: z.boolean().default(true).describe('Whether to include broken dependencies')\n});\n\n// Dependency conflict check schema\nexport const DependencyConflictCheckSchema = z.object({\n  task_id: z.string().min(1).describe('The task ID to check for conflicts'),\n  proposed_dependencies: z.array(z.object({\n    depends_on: z.string(),\n    type: DependencyTypeSchema\n  })).optional().describe('Proposed new dependencies to check for conflicts')\n});\n\n// Bulk dependency operations schema\nexport const BulkDependencyOperationSchema = z.object({\n  operation: z.enum(['create', 'delete', 'update']).describe('The bulk operation to perform'),\n  dependencies: z.array(z.union([\n    CreateDependencySchema,\n    z.object({ dependency_id: z.string() }), // For delete operations\n    UpdateDependencySchema\n  ])).describe('Array of dependency operations to perform')\n});\n\n// Type exports\nexport type DependencyType = z.infer<typeof DependencyTypeSchema>;\nexport type DependencyStatus = z.infer<typeof DependencyStatusSchema>;\nexport type CreateDependencyRequest = z.infer<typeof CreateDependencySchema>;\nexport type UpdateDependencyRequest = z.infer<typeof UpdateDependencySchema>;\nexport type GetDependenciesFilter = z.infer<typeof GetDependenciesFilterSchema>;\nexport type DependencyGraphOptions = z.infer<typeof DependencyGraphOptionsSchema>;\nexport type DependencyConflictCheck = z.infer<typeof DependencyConflictCheckSchema>;\nexport type BulkDependencyOperation = z.infer<typeof BulkDependencyOperationSchema>;\n\n// Dependency response interfaces\nexport interface DependencyResponse {\n  id: string;\n  task_id: string;\n  depends_on: string;\n  type: DependencyType;\n  status: DependencyStatus;\n  link_id?: string;\n  date_created: string;\n  date_updated: string;\n  created_by: {\n    id: number;\n    username: string;\n    email: string;\n  };\n  task_info: {\n    id: string;\n    name: string;\n    status: {\n      status: string;\n      color: string;\n    };\n    assignees: Array<{\n      id: number;\n      username: string;\n    }>;\n    due_date?: string;\n    url: string;\n  };\n  depends_on_info: {\n    id: string;\n    name: string;\n    status: {\n      status: string;\n      color: string;\n    };\n    assignees: Array<{\n      id: number;\n      username: string;\n    }>;\n    due_date?: string;\n    url: string;\n  };\n}\n\nexport interface DependencyListResponse {\n  dependencies: DependencyResponse[];\n  total_count: number;\n}\n\nexport interface DependencyGraphNode {\n  task_id: string;\n  task_name: string;\n  task_status: string;\n  task_url: string;\n  level: number;\n  dependencies: Array<{\n    id: string;\n    type: DependencyType;\n    status: DependencyStatus;\n    target_task_id: string;\n  }>;\n  dependents: Array<{\n    id: string;\n    type: DependencyType;\n    status: DependencyStatus;\n    source_task_id: string;\n  }>;\n}\n\nexport interface DependencyGraphResponse {\n  root_task_id: string;\n  nodes: DependencyGraphNode[];\n  edges: Array<{\n    id: string;\n    source: string;\n    target: string;\n    type: DependencyType;\n    status: DependencyStatus;\n  }>;\n  cycles: Array<{\n    cycle_id: string;\n    task_ids: string[];\n    description: string;\n  }>;\n  critical_path?: Array<{\n    task_id: string;\n    task_name: string;\n    duration_days: number;\n  }>;\n}\n\nexport interface DependencyConflictResponse {\n  has_conflicts: boolean;\n  conflicts: Array<{\n    type: 'circular' | 'duplicate' | 'invalid_status';\n    description: string;\n    affected_tasks: string[];\n    suggested_resolution: string;\n  }>;\n  warnings: Array<{\n    type: 'performance' | 'complexity' | 'timeline';\n    description: string;\n    affected_tasks: string[];\n  }>;\n}\n\n// Utility functions\nexport const getDependencyDirection = (type: DependencyType): 'forward' | 'backward' => {\n  switch (type) {\n    case 'blocking':\n      return 'forward';\n    case 'waiting_on':\n      return 'backward';\n    case 'linked':\n      return 'forward';\n    default:\n      return 'forward';\n  }\n};\n\nexport const getOppositeDependencyType = (type: DependencyType): DependencyType => {\n  switch (type) {\n    case 'blocking':\n      return 'waiting_on';\n    case 'waiting_on':\n      return 'blocking';\n    case 'linked':\n      return 'linked';\n    default:\n      return type;\n  }\n};\n\nexport const validateDependencyChain = (dependencies: CreateDependencyRequest[]): {\n  isValid: boolean;\n  cycles: string[][];\n  errors: string[];\n} => {\n  const graph = new Map<string, Set<string>>();\n  const errors: string[] = [];\n  \n  // Build adjacency list\n  dependencies.forEach(dep => {\n    if (!graph.has(dep.task_id)) {\n      graph.set(dep.task_id, new Set());\n    }\n    if (!graph.has(dep.depends_on)) {\n      graph.set(dep.depends_on, new Set());\n    }\n    \n    if (dep.type === 'blocking') {\n      graph.get(dep.depends_on)?.add(dep.task_id);\n    } else if (dep.type === 'waiting_on') {\n      graph.get(dep.task_id)?.add(dep.depends_on);\n    }\n  });\n  \n  // Detect cycles using DFS\n  const cycles: string[][] = [];\n  const visited = new Set<string>();\n  const recursionStack = new Set<string>();\n  \n  const dfs = (node: string, path: string[]): void => {\n    visited.add(node);\n    recursionStack.add(node);\n    path.push(node);\n    \n    const neighbors = graph.get(node) || new Set();\n    for (const neighbor of neighbors) {\n      if (!visited.has(neighbor)) {\n        dfs(neighbor, [...path]);\n      } else if (recursionStack.has(neighbor)) {\n        // Found a cycle\n        const cycleStart = path.indexOf(neighbor);\n        if (cycleStart !== -1) {\n          cycles.push(path.slice(cycleStart));\n        }\n      }\n    }\n    \n    recursionStack.delete(node);\n  };\n  \n  // Check all nodes for cycles\n  for (const node of graph.keys()) {\n    if (!visited.has(node)) {\n      dfs(node, []);\n    }\n  }\n  \n  if (cycles.length > 0) {\n    errors.push(`Circular dependencies detected: ${cycles.map(cycle => cycle.join(' -> ')).join(', ')}`);\n  }\n  \n  return {\n    isValid: cycles.length === 0,\n    cycles,\n    errors\n  };\n};\n\nexport const calculateCriticalPath = (nodes: DependencyGraphNode[]): DependencyGraphNode[] => {\n  // Simplified critical path calculation\n  // In a real implementation, this would consider task durations and dates\n  const nodeMap = new Map(nodes.map(node => [node.task_id, node]));\n  const visited = new Set<string>();\n  const criticalPath: DependencyGraphNode[] = [];\n  \n  // Find the longest path through the dependency graph\n  const findLongestPath = (nodeId: string, currentPath: DependencyGraphNode[]): DependencyGraphNode[] => {\n    if (visited.has(nodeId)) return currentPath;\n    \n    visited.add(nodeId);\n    const node = nodeMap.get(nodeId);\n    if (!node) return currentPath;\n    \n    const pathWithNode = [...currentPath, node];\n    let longestPath = pathWithNode;\n    \n    // Explore all dependencies\n    for (const dep of node.dependencies) {\n      const childPath = findLongestPath(dep.target_task_id, pathWithNode);\n      if (childPath.length > longestPath.length) {\n        longestPath = childPath;\n      }\n    }\n    \n    return longestPath;\n  };\n  \n  // Start from nodes with no dependencies (root nodes)\n  const rootNodes = nodes.filter(node => node.dependencies.length === 0);\n  \n  for (const rootNode of rootNodes) {\n    const path = findLongestPath(rootNode.task_id, []);\n    if (path.length > criticalPath.length) {\n      criticalPath.splice(0, criticalPath.length, ...path);\n    }\n  }\n  \n  return criticalPath;\n};\n"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "cf2d0b90b72cca2ac5c326a949cac61db3f32736"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_isye2alfe = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_isye2alfe();
import { z } from 'zod';
// Dependency types
export const DependencyTypeSchema =
/* istanbul ignore next */
(cov_isye2alfe().s[0]++, z.enum(['blocking',
// Task A blocks Task B (A must finish before B can start)
'waiting_on',
// Task A is waiting on Task B (A cannot start until B finishes)
'linked' // Tasks are linked but not blocking
]));
// Dependency status
export const DependencyStatusSchema =
/* istanbul ignore next */
(cov_isye2alfe().s[1]++, z.enum(['active', 'resolved', 'broken', 'ignored']));
// Create dependency schema
export const CreateDependencySchema =
/* istanbul ignore next */
(cov_isye2alfe().s[2]++, z.object({
  task_id: z.string().min(1).describe('The ID of the task that depends on another'),
  depends_on: z.string().min(1).describe('The ID of the task that this task depends on'),
  type: DependencyTypeSchema.default('blocking').describe('The type of dependency relationship'),
  link_id: z.string().optional().describe('Optional link ID for grouping related dependencies')
}));
// Update dependency schema
export const UpdateDependencySchema =
/* istanbul ignore next */
(cov_isye2alfe().s[3]++, z.object({
  dependency_id: z.string().min(1).describe('The ID of the dependency to update'),
  type: DependencyTypeSchema.optional().describe('New dependency type'),
  status: DependencyStatusSchema.optional().describe('New dependency status')
}));
// Get dependencies filter schema
export const GetDependenciesFilterSchema =
/* istanbul ignore next */
(cov_isye2alfe().s[4]++, z.object({
  task_id: z.string().min(1).describe('The ID of the task to get dependencies for'),
  type: DependencyTypeSchema.optional().describe('Filter by dependency type'),
  status: DependencyStatusSchema.optional().describe('Filter by dependency status'),
  include_resolved: z.boolean().default(false).describe('Whether to include resolved dependencies')
}));
// Dependency graph options schema
export const DependencyGraphOptionsSchema =
/* istanbul ignore next */
(cov_isye2alfe().s[5]++, z.object({
  task_id: z.string().min(1).describe('The root task ID for the dependency graph'),
  depth: z.number().min(1).max(10).default(3).describe('Maximum depth to traverse in the graph'),
  direction: z.enum(['upstream', 'downstream', 'both']).default('both').describe('Direction to traverse dependencies'),
  include_resolved: z.boolean().default(false).describe('Whether to include resolved dependencies'),
  include_broken: z.boolean().default(true).describe('Whether to include broken dependencies')
}));
// Dependency conflict check schema
export const DependencyConflictCheckSchema =
/* istanbul ignore next */
(cov_isye2alfe().s[6]++, z.object({
  task_id: z.string().min(1).describe('The task ID to check for conflicts'),
  proposed_dependencies: z.array(z.object({
    depends_on: z.string(),
    type: DependencyTypeSchema
  })).optional().describe('Proposed new dependencies to check for conflicts')
}));
// Bulk dependency operations schema
export const BulkDependencyOperationSchema =
/* istanbul ignore next */
(cov_isye2alfe().s[7]++, z.object({
  operation: z.enum(['create', 'delete', 'update']).describe('The bulk operation to perform'),
  dependencies: z.array(z.union([CreateDependencySchema, z.object({
    dependency_id: z.string()
  }),
  // For delete operations
  UpdateDependencySchema])).describe('Array of dependency operations to perform')
}));
// Utility functions
/* istanbul ignore next */
cov_isye2alfe().s[8]++;
export const getDependencyDirection = type => {
  /* istanbul ignore next */
  cov_isye2alfe().f[0]++;
  cov_isye2alfe().s[9]++;
  switch (type) {
    case 'blocking':
      /* istanbul ignore next */
      cov_isye2alfe().b[0][0]++;
      cov_isye2alfe().s[10]++;
      return 'forward';
    case 'waiting_on':
      /* istanbul ignore next */
      cov_isye2alfe().b[0][1]++;
      cov_isye2alfe().s[11]++;
      return 'backward';
    case 'linked':
      /* istanbul ignore next */
      cov_isye2alfe().b[0][2]++;
      cov_isye2alfe().s[12]++;
      return 'forward';
    default:
      /* istanbul ignore next */
      cov_isye2alfe().b[0][3]++;
      cov_isye2alfe().s[13]++;
      return 'forward';
  }
};
/* istanbul ignore next */
cov_isye2alfe().s[14]++;
export const getOppositeDependencyType = type => {
  /* istanbul ignore next */
  cov_isye2alfe().f[1]++;
  cov_isye2alfe().s[15]++;
  switch (type) {
    case 'blocking':
      /* istanbul ignore next */
      cov_isye2alfe().b[1][0]++;
      cov_isye2alfe().s[16]++;
      return 'waiting_on';
    case 'waiting_on':
      /* istanbul ignore next */
      cov_isye2alfe().b[1][1]++;
      cov_isye2alfe().s[17]++;
      return 'blocking';
    case 'linked':
      /* istanbul ignore next */
      cov_isye2alfe().b[1][2]++;
      cov_isye2alfe().s[18]++;
      return 'linked';
    default:
      /* istanbul ignore next */
      cov_isye2alfe().b[1][3]++;
      cov_isye2alfe().s[19]++;
      return type;
  }
};
/* istanbul ignore next */
cov_isye2alfe().s[20]++;
export const validateDependencyChain = dependencies => {
  /* istanbul ignore next */
  cov_isye2alfe().f[2]++;
  const graph =
  /* istanbul ignore next */
  (cov_isye2alfe().s[21]++, new Map());
  const errors =
  /* istanbul ignore next */
  (cov_isye2alfe().s[22]++, []);
  // Build adjacency list
  /* istanbul ignore next */
  cov_isye2alfe().s[23]++;
  dependencies.forEach(dep => {
    /* istanbul ignore next */
    cov_isye2alfe().f[3]++;
    cov_isye2alfe().s[24]++;
    if (!graph.has(dep.task_id)) {
      /* istanbul ignore next */
      cov_isye2alfe().b[2][0]++;
      cov_isye2alfe().s[25]++;
      graph.set(dep.task_id, new Set());
    } else
    /* istanbul ignore next */
    {
      cov_isye2alfe().b[2][1]++;
    }
    cov_isye2alfe().s[26]++;
    if (!graph.has(dep.depends_on)) {
      /* istanbul ignore next */
      cov_isye2alfe().b[3][0]++;
      cov_isye2alfe().s[27]++;
      graph.set(dep.depends_on, new Set());
    } else
    /* istanbul ignore next */
    {
      cov_isye2alfe().b[3][1]++;
    }
    cov_isye2alfe().s[28]++;
    if (dep.type === 'blocking') {
      /* istanbul ignore next */
      cov_isye2alfe().b[4][0]++;
      cov_isye2alfe().s[29]++;
      graph.get(dep.depends_on)?.add(dep.task_id);
    } else {
      /* istanbul ignore next */
      cov_isye2alfe().b[4][1]++;
      cov_isye2alfe().s[30]++;
      if (dep.type === 'waiting_on') {
        /* istanbul ignore next */
        cov_isye2alfe().b[5][0]++;
        cov_isye2alfe().s[31]++;
        graph.get(dep.task_id)?.add(dep.depends_on);
      } else
      /* istanbul ignore next */
      {
        cov_isye2alfe().b[5][1]++;
      }
    }
  });
  // Detect cycles using DFS
  const cycles =
  /* istanbul ignore next */
  (cov_isye2alfe().s[32]++, []);
  const visited =
  /* istanbul ignore next */
  (cov_isye2alfe().s[33]++, new Set());
  const recursionStack =
  /* istanbul ignore next */
  (cov_isye2alfe().s[34]++, new Set());
  /* istanbul ignore next */
  cov_isye2alfe().s[35]++;
  const dfs = (node, path) => {
    /* istanbul ignore next */
    cov_isye2alfe().f[4]++;
    cov_isye2alfe().s[36]++;
    visited.add(node);
    /* istanbul ignore next */
    cov_isye2alfe().s[37]++;
    recursionStack.add(node);
    /* istanbul ignore next */
    cov_isye2alfe().s[38]++;
    path.push(node);
    const neighbors =
    /* istanbul ignore next */
    (cov_isye2alfe().s[39]++,
    /* istanbul ignore next */
    (cov_isye2alfe().b[6][0]++, graph.get(node)) ||
    /* istanbul ignore next */
    (cov_isye2alfe().b[6][1]++, new Set()));
    /* istanbul ignore next */
    cov_isye2alfe().s[40]++;
    for (const neighbor of neighbors) {
      /* istanbul ignore next */
      cov_isye2alfe().s[41]++;
      if (!visited.has(neighbor)) {
        /* istanbul ignore next */
        cov_isye2alfe().b[7][0]++;
        cov_isye2alfe().s[42]++;
        dfs(neighbor, [...path]);
      } else {
        /* istanbul ignore next */
        cov_isye2alfe().b[7][1]++;
        cov_isye2alfe().s[43]++;
        if (recursionStack.has(neighbor)) {
          /* istanbul ignore next */
          cov_isye2alfe().b[8][0]++;
          // Found a cycle
          const cycleStart =
          /* istanbul ignore next */
          (cov_isye2alfe().s[44]++, path.indexOf(neighbor));
          /* istanbul ignore next */
          cov_isye2alfe().s[45]++;
          if (cycleStart !== -1) {
            /* istanbul ignore next */
            cov_isye2alfe().b[9][0]++;
            cov_isye2alfe().s[46]++;
            cycles.push(path.slice(cycleStart));
          } else
          /* istanbul ignore next */
          {
            cov_isye2alfe().b[9][1]++;
          }
        } else
        /* istanbul ignore next */
        {
          cov_isye2alfe().b[8][1]++;
        }
      }
    }
    /* istanbul ignore next */
    cov_isye2alfe().s[47]++;
    recursionStack.delete(node);
  };
  // Check all nodes for cycles
  /* istanbul ignore next */
  cov_isye2alfe().s[48]++;
  for (const node of graph.keys()) {
    /* istanbul ignore next */
    cov_isye2alfe().s[49]++;
    if (!visited.has(node)) {
      /* istanbul ignore next */
      cov_isye2alfe().b[10][0]++;
      cov_isye2alfe().s[50]++;
      dfs(node, []);
    } else
    /* istanbul ignore next */
    {
      cov_isye2alfe().b[10][1]++;
    }
  }
  /* istanbul ignore next */
  cov_isye2alfe().s[51]++;
  if (cycles.length > 0) {
    /* istanbul ignore next */
    cov_isye2alfe().b[11][0]++;
    cov_isye2alfe().s[52]++;
    errors.push(`Circular dependencies detected: ${cycles.map(cycle => {
      /* istanbul ignore next */
      cov_isye2alfe().f[5]++;
      cov_isye2alfe().s[53]++;
      return cycle.join(' -> ');
    }).join(', ')}`);
  } else
  /* istanbul ignore next */
  {
    cov_isye2alfe().b[11][1]++;
  }
  cov_isye2alfe().s[54]++;
  return {
    isValid: cycles.length === 0,
    cycles,
    errors
  };
};
/* istanbul ignore next */
cov_isye2alfe().s[55]++;
export const calculateCriticalPath = nodes => {
  /* istanbul ignore next */
  cov_isye2alfe().f[6]++;
  // Simplified critical path calculation
  // In a real implementation, this would consider task durations and dates
  const nodeMap =
  /* istanbul ignore next */
  (cov_isye2alfe().s[56]++, new Map(nodes.map(node => {
    /* istanbul ignore next */
    cov_isye2alfe().f[7]++;
    cov_isye2alfe().s[57]++;
    return [node.task_id, node];
  })));
  const visited =
  /* istanbul ignore next */
  (cov_isye2alfe().s[58]++, new Set());
  const criticalPath =
  /* istanbul ignore next */
  (cov_isye2alfe().s[59]++, []);
  // Find the longest path through the dependency graph
  /* istanbul ignore next */
  cov_isye2alfe().s[60]++;
  const findLongestPath = (nodeId, currentPath) => {
    /* istanbul ignore next */
    cov_isye2alfe().f[8]++;
    cov_isye2alfe().s[61]++;
    if (visited.has(nodeId)) {
      /* istanbul ignore next */
      cov_isye2alfe().b[12][0]++;
      cov_isye2alfe().s[62]++;
      return currentPath;
    } else
    /* istanbul ignore next */
    {
      cov_isye2alfe().b[12][1]++;
    }
    cov_isye2alfe().s[63]++;
    visited.add(nodeId);
    const node =
    /* istanbul ignore next */
    (cov_isye2alfe().s[64]++, nodeMap.get(nodeId));
    /* istanbul ignore next */
    cov_isye2alfe().s[65]++;
    if (!node) {
      /* istanbul ignore next */
      cov_isye2alfe().b[13][0]++;
      cov_isye2alfe().s[66]++;
      return currentPath;
    } else
    /* istanbul ignore next */
    {
      cov_isye2alfe().b[13][1]++;
    }
    const pathWithNode =
    /* istanbul ignore next */
    (cov_isye2alfe().s[67]++, [...currentPath, node]);
    let longestPath =
    /* istanbul ignore next */
    (cov_isye2alfe().s[68]++, pathWithNode);
    // Explore all dependencies
    /* istanbul ignore next */
    cov_isye2alfe().s[69]++;
    for (const dep of node.dependencies) {
      const childPath =
      /* istanbul ignore next */
      (cov_isye2alfe().s[70]++, findLongestPath(dep.target_task_id, pathWithNode));
      /* istanbul ignore next */
      cov_isye2alfe().s[71]++;
      if (childPath.length > longestPath.length) {
        /* istanbul ignore next */
        cov_isye2alfe().b[14][0]++;
        cov_isye2alfe().s[72]++;
        longestPath = childPath;
      } else
      /* istanbul ignore next */
      {
        cov_isye2alfe().b[14][1]++;
      }
    }
    /* istanbul ignore next */
    cov_isye2alfe().s[73]++;
    return longestPath;
  };
  // Start from nodes with no dependencies (root nodes)
  const rootNodes =
  /* istanbul ignore next */
  (cov_isye2alfe().s[74]++, nodes.filter(node => {
    /* istanbul ignore next */
    cov_isye2alfe().f[9]++;
    cov_isye2alfe().s[75]++;
    return node.dependencies.length === 0;
  }));
  /* istanbul ignore next */
  cov_isye2alfe().s[76]++;
  for (const rootNode of rootNodes) {
    const path =
    /* istanbul ignore next */
    (cov_isye2alfe().s[77]++, findLongestPath(rootNode.task_id, []));
    /* istanbul ignore next */
    cov_isye2alfe().s[78]++;
    if (path.length > criticalPath.length) {
      /* istanbul ignore next */
      cov_isye2alfe().b[15][0]++;
      cov_isye2alfe().s[79]++;
      criticalPath.splice(0, criticalPath.length, ...path);
    } else
    /* istanbul ignore next */
    {
      cov_isye2alfe().b[15][1]++;
    }
  }
  /* istanbul ignore next */
  cov_isye2alfe().s[80]++;
  return criticalPath;
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
4584b10ff05d7b86550676fefa83f2f8
/* istanbul ignore next */
function cov_1ytta4puk7() {
  var path = "/Users/peterkrzyzek/Development/clickup-mcp-server/src/clickup-client/spaces.ts";
  var hash = "9feeb3697c388adf2f32e9121eec85d1eac2ef98";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/peterkrzyzek/Development/clickup-mcp-server/src/clickup-client/spaces.ts",
    statementMap: {
      "0": {
        start: {
          line: 3,
          column: 8
        },
        end: {
          line: 3,
          column: 29
        }
      },
      "1": {
        start: {
          line: 12,
          column: 25
        },
        end: {
          line: 12,
          column: 76
        }
      },
      "2": {
        start: {
          line: 13,
          column: 8
        },
        end: {
          line: 13,
          column: 31
        }
      },
      "3": {
        start: {
          line: 21,
          column: 25
        },
        end: {
          line: 21,
          column: 67
        }
      },
      "4": {
        start: {
          line: 22,
          column: 8
        },
        end: {
          line: 22,
          column: 24
        }
      },
      "5": {
        start: {
          line: 25,
          column: 34
        },
        end: {
          line: 27,
          column: 1
        }
      },
      "6": {
        start: {
          line: 26,
          column: 4
        },
        end: {
          line: 26,
          column: 36
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 2,
            column: 4
          },
          end: {
            line: 2,
            column: 5
          }
        },
        loc: {
          start: {
            line: 2,
            column: 24
          },
          end: {
            line: 4,
            column: 5
          }
        },
        line: 2
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 10,
            column: 4
          },
          end: {
            line: 10,
            column: 5
          }
        },
        loc: {
          start: {
            line: 10,
            column: 46
          },
          end: {
            line: 14,
            column: 5
          }
        },
        line: 10
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 20,
            column: 4
          },
          end: {
            line: 20,
            column: 5
          }
        },
        loc: {
          start: {
            line: 20,
            column: 28
          },
          end: {
            line: 23,
            column: 5
          }
        },
        line: 20
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 25,
            column: 34
          },
          end: {
            line: 25,
            column: 35
          }
        },
        loc: {
          start: {
            line: 25,
            column: 46
          },
          end: {
            line: 27,
            column: 1
          }
        },
        line: 25
      }
    },
    branchMap: {},
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0
    },
    b: {},
    inputSourceMap: {
      file: "/Users/peterkrzyzek/Development/clickup-mcp-server/src/clickup-client/spaces.ts",
      mappings: "AA4CA,MAAM,OAAO,YAAY;IAGvB,YAAY,MAAqB;QAC/B,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;IACvB,CAAC;IAED;;;;OAIG;IACH,KAAK,CAAC,sBAAsB,CAAC,WAAmB;QAC9C,qCAAqC;QACrC,MAAM,QAAQ,GAAG,MAAM,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,SAAS,WAAW,QAAQ,CAAC,CAAC;QACrE,OAAO,QAAQ,CAAC,MAAM,CAAC;IACzB,CAAC;IAED;;;;OAIG;IACH,KAAK,CAAC,QAAQ,CAAC,OAAe;QAC5B,MAAM,QAAQ,GAAG,MAAM,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,UAAU,OAAO,EAAE,CAAC,CAAC;QAC5D,OAAO,QAAQ,CAAC;IAClB,CAAC;CACF;AAED,MAAM,CAAC,MAAM,kBAAkB,GAAG,CAAC,MAAqB,EAAgB,EAAE;IACxE,OAAO,IAAI,YAAY,CAAC,MAAM,CAAC,CAAC;AAClC,CAAC,CAAC",
      names: [],
      sources: ["/Users/peterkrzyzek/Development/clickup-mcp-server/src/clickup-client/spaces.ts"],
      sourcesContent: ["import { ClickUpClient } from './index.js';\n\n// Space interface based on ClickUp API response\nexport interface Space {\n  id: string;\n  name: string;\n  private: boolean;\n  statuses: any[];\n  multiple_assignees: boolean;\n  features: {\n    due_dates: {\n      enabled: boolean;\n      start_date: boolean;\n      remap_due_dates: boolean;\n      remap_closed_due_date: boolean;\n    };\n    time_tracking: {\n      enabled: boolean;\n    };\n    tags: {\n      enabled: boolean;\n    };\n    time_estimates: {\n      enabled: boolean;\n    };\n    checklists: {\n      enabled: boolean;\n    };\n    custom_fields: {\n      enabled: boolean;\n    };\n    remap_dependencies: {\n      enabled: boolean;\n    };\n    dependency_warning: {\n      enabled: boolean;\n    };\n    portfolios: {\n      enabled: boolean;\n    };\n  };\n  archived: boolean;\n}\n\nexport class SpacesClient {\n  private client: ClickUpClient;\n\n  constructor(client: ClickUpClient) {\n    this.client = client;\n  }\n\n  /**\n   * Get spaces from a specific workspace\n   * @param workspaceId The ID of the workspace to get spaces from\n   * @returns A list of spaces\n   */\n  async getSpacesFromWorkspace(workspaceId: string): Promise<Space[]> {\n    // Use the v2 API endpoint for spaces\n    const response = await this.client.get(`/team/${workspaceId}/space`);\n    return response.spaces;\n  }\n\n  /**\n   * Get a specific space by ID\n   * @param spaceId The ID of the space to get\n   * @returns The space details\n   */\n  async getSpace(spaceId: string): Promise<Space> {\n    const response = await this.client.get(`/space/${spaceId}`);\n    return response;\n  }\n}\n\nexport const createSpacesClient = (client: ClickUpClient): SpacesClient => {\n  return new SpacesClient(client);\n};\n"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "9feeb3697c388adf2f32e9121eec85d1eac2ef98"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_1ytta4puk7 = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_1ytta4puk7();
export class SpacesClient {
  constructor(client) {
    /* istanbul ignore next */
    cov_1ytta4puk7().f[0]++;
    cov_1ytta4puk7().s[0]++;
    this.client = client;
  }
  /**
   * Get spaces from a specific workspace
   * @param workspaceId The ID of the workspace to get spaces from
   * @returns A list of spaces
   */
  async getSpacesFromWorkspace(workspaceId) {
    /* istanbul ignore next */
    cov_1ytta4puk7().f[1]++;
    // Use the v2 API endpoint for spaces
    const response =
    /* istanbul ignore next */
    (cov_1ytta4puk7().s[1]++, await this.client.get(`/team/${workspaceId}/space`));
    /* istanbul ignore next */
    cov_1ytta4puk7().s[2]++;
    return response.spaces;
  }
  /**
   * Get a specific space by ID
   * @param spaceId The ID of the space to get
   * @returns The space details
   */
  async getSpace(spaceId) {
    /* istanbul ignore next */
    cov_1ytta4puk7().f[2]++;
    const response =
    /* istanbul ignore next */
    (cov_1ytta4puk7().s[3]++, await this.client.get(`/space/${spaceId}`));
    /* istanbul ignore next */
    cov_1ytta4puk7().s[4]++;
    return response;
  }
}
/* istanbul ignore next */
cov_1ytta4puk7().s[5]++;
export const createSpacesClient = client => {
  /* istanbul ignore next */
  cov_1ytta4puk7().f[3]++;
  cov_1ytta4puk7().s[6]++;
  return new SpacesClient(client);
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJTcGFjZXNDbGllbnQiLCJjb25zdHJ1Y3RvciIsImNsaWVudCIsImNvdl8xeXR0YTRwdWs3IiwiZiIsInMiLCJnZXRTcGFjZXNGcm9tV29ya3NwYWNlIiwid29ya3NwYWNlSWQiLCJyZXNwb25zZSIsImdldCIsInNwYWNlcyIsImdldFNwYWNlIiwic3BhY2VJZCIsImNyZWF0ZVNwYWNlc0NsaWVudCJdLCJzb3VyY2VzIjpbIi9Vc2Vycy9wZXRlcmtyenl6ZWsvRGV2ZWxvcG1lbnQvY2xpY2t1cC1tY3Atc2VydmVyL3NyYy9jbGlja3VwLWNsaWVudC9zcGFjZXMudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ2xpY2tVcENsaWVudCB9IGZyb20gJy4vaW5kZXguanMnO1xuXG4vLyBTcGFjZSBpbnRlcmZhY2UgYmFzZWQgb24gQ2xpY2tVcCBBUEkgcmVzcG9uc2VcbmV4cG9ydCBpbnRlcmZhY2UgU3BhY2Uge1xuICBpZDogc3RyaW5nO1xuICBuYW1lOiBzdHJpbmc7XG4gIHByaXZhdGU6IGJvb2xlYW47XG4gIHN0YXR1c2VzOiBhbnlbXTtcbiAgbXVsdGlwbGVfYXNzaWduZWVzOiBib29sZWFuO1xuICBmZWF0dXJlczoge1xuICAgIGR1ZV9kYXRlczoge1xuICAgICAgZW5hYmxlZDogYm9vbGVhbjtcbiAgICAgIHN0YXJ0X2RhdGU6IGJvb2xlYW47XG4gICAgICByZW1hcF9kdWVfZGF0ZXM6IGJvb2xlYW47XG4gICAgICByZW1hcF9jbG9zZWRfZHVlX2RhdGU6IGJvb2xlYW47XG4gICAgfTtcbiAgICB0aW1lX3RyYWNraW5nOiB7XG4gICAgICBlbmFibGVkOiBib29sZWFuO1xuICAgIH07XG4gICAgdGFnczoge1xuICAgICAgZW5hYmxlZDogYm9vbGVhbjtcbiAgICB9O1xuICAgIHRpbWVfZXN0aW1hdGVzOiB7XG4gICAgICBlbmFibGVkOiBib29sZWFuO1xuICAgIH07XG4gICAgY2hlY2tsaXN0czoge1xuICAgICAgZW5hYmxlZDogYm9vbGVhbjtcbiAgICB9O1xuICAgIGN1c3RvbV9maWVsZHM6IHtcbiAgICAgIGVuYWJsZWQ6IGJvb2xlYW47XG4gICAgfTtcbiAgICByZW1hcF9kZXBlbmRlbmNpZXM6IHtcbiAgICAgIGVuYWJsZWQ6IGJvb2xlYW47XG4gICAgfTtcbiAgICBkZXBlbmRlbmN5X3dhcm5pbmc6IHtcbiAgICAgIGVuYWJsZWQ6IGJvb2xlYW47XG4gICAgfTtcbiAgICBwb3J0Zm9saW9zOiB7XG4gICAgICBlbmFibGVkOiBib29sZWFuO1xuICAgIH07XG4gIH07XG4gIGFyY2hpdmVkOiBib29sZWFuO1xufVxuXG5leHBvcnQgY2xhc3MgU3BhY2VzQ2xpZW50IHtcbiAgcHJpdmF0ZSBjbGllbnQ6IENsaWNrVXBDbGllbnQ7XG5cbiAgY29uc3RydWN0b3IoY2xpZW50OiBDbGlja1VwQ2xpZW50KSB7XG4gICAgdGhpcy5jbGllbnQgPSBjbGllbnQ7XG4gIH1cblxuICAvKipcbiAgICogR2V0IHNwYWNlcyBmcm9tIGEgc3BlY2lmaWMgd29ya3NwYWNlXG4gICAqIEBwYXJhbSB3b3Jrc3BhY2VJZCBUaGUgSUQgb2YgdGhlIHdvcmtzcGFjZSB0byBnZXQgc3BhY2VzIGZyb21cbiAgICogQHJldHVybnMgQSBsaXN0IG9mIHNwYWNlc1xuICAgKi9cbiAgYXN5bmMgZ2V0U3BhY2VzRnJvbVdvcmtzcGFjZSh3b3Jrc3BhY2VJZDogc3RyaW5nKTogUHJvbWlzZTxTcGFjZVtdPiB7XG4gICAgLy8gVXNlIHRoZSB2MiBBUEkgZW5kcG9pbnQgZm9yIHNwYWNlc1xuICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgdGhpcy5jbGllbnQuZ2V0KGAvdGVhbS8ke3dvcmtzcGFjZUlkfS9zcGFjZWApO1xuICAgIHJldHVybiByZXNwb25zZS5zcGFjZXM7XG4gIH1cblxuICAvKipcbiAgICogR2V0IGEgc3BlY2lmaWMgc3BhY2UgYnkgSURcbiAgICogQHBhcmFtIHNwYWNlSWQgVGhlIElEIG9mIHRoZSBzcGFjZSB0byBnZXRcbiAgICogQHJldHVybnMgVGhlIHNwYWNlIGRldGFpbHNcbiAgICovXG4gIGFzeW5jIGdldFNwYWNlKHNwYWNlSWQ6IHN0cmluZyk6IFByb21pc2U8U3BhY2U+IHtcbiAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IHRoaXMuY2xpZW50LmdldChgL3NwYWNlLyR7c3BhY2VJZH1gKTtcbiAgICByZXR1cm4gcmVzcG9uc2U7XG4gIH1cbn1cblxuZXhwb3J0IGNvbnN0IGNyZWF0ZVNwYWNlc0NsaWVudCA9IChjbGllbnQ6IENsaWNrVXBDbGllbnQpOiBTcGFjZXNDbGllbnQgPT4ge1xuICByZXR1cm4gbmV3IFNwYWNlc0NsaWVudChjbGllbnQpO1xufTtcbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQTRDQSxPQUFNLE1BQU9BLFlBQVk7RUFHdkJDLFlBQVlDLE1BQXFCO0lBQUE7SUFBQUMsY0FBQSxHQUFBQyxDQUFBO0lBQUFELGNBQUEsR0FBQUUsQ0FBQTtJQUMvQixJQUFJLENBQUNILE1BQU0sR0FBR0EsTUFBTTtFQUN0QjtFQUVBOzs7OztFQUtBLE1BQU1JLHNCQUFzQkEsQ0FBQ0MsV0FBbUI7SUFBQTtJQUFBSixjQUFBLEdBQUFDLENBQUE7SUFDOUM7SUFDQSxNQUFNSSxRQUFRO0lBQUE7SUFBQSxDQUFBTCxjQUFBLEdBQUFFLENBQUEsT0FBRyxNQUFNLElBQUksQ0FBQ0gsTUFBTSxDQUFDTyxHQUFHLENBQUMsU0FBU0YsV0FBVyxRQUFRLENBQUM7SUFBQztJQUFBSixjQUFBLEdBQUFFLENBQUE7SUFDckUsT0FBT0csUUFBUSxDQUFDRSxNQUFNO0VBQ3hCO0VBRUE7Ozs7O0VBS0EsTUFBTUMsUUFBUUEsQ0FBQ0MsT0FBZTtJQUFBO0lBQUFULGNBQUEsR0FBQUMsQ0FBQTtJQUM1QixNQUFNSSxRQUFRO0lBQUE7SUFBQSxDQUFBTCxjQUFBLEdBQUFFLENBQUEsT0FBRyxNQUFNLElBQUksQ0FBQ0gsTUFBTSxDQUFDTyxHQUFHLENBQUMsVUFBVUcsT0FBTyxFQUFFLENBQUM7SUFBQztJQUFBVCxjQUFBLEdBQUFFLENBQUE7SUFDNUQsT0FBT0csUUFBUTtFQUNqQjs7QUFDRDtBQUFBTCxjQUFBLEdBQUFFLENBQUE7QUFFRCxPQUFPLE1BQU1RLGtCQUFrQixHQUFJWCxNQUFxQixJQUFrQjtFQUFBO0VBQUFDLGNBQUEsR0FBQUMsQ0FBQTtFQUFBRCxjQUFBLEdBQUFFLENBQUE7RUFDeEUsT0FBTyxJQUFJTCxZQUFZLENBQUNFLE1BQU0sQ0FBQztBQUNqQyxDQUFDIiwiaWdub3JlTGlzdCI6W119
{"version":3,"names":["cov_2gzql2q6t1","actualCoverage","processClickUpResponse","prepareCommentForClickUp","clickUpCommentToMarkdown","CommentsClient","constructor","client","f","s","getTaskComments","taskId","params","result","get","b","comments","Array","isArray","map","comment","processed","comment_markdown","error","console","warn","cleanupCommentResponse","length","lastBlock","text","attributes","Object","keys","hasMarkdownSyntax","test","includes","slice","comment_text","replace","trim","createTaskComment","processedParams","commentData","description","post","getChatViewComments","viewId","createChatViewComment","getListComments","listId","createListComment","updateComment","commentId","put","deleteComment","delete","getThreadedComments","createThreadedComment","createCommentsClient"],"sources":["/Users/peterkrzyzek/Development/clickup-mcp-server/src/clickup-client/comments.ts"],"sourcesContent":["import { ClickUpClient } from './index.js';\nimport { processClickUpResponse } from '../utils/markdown.js';\nimport { prepareCommentForClickUp, clickUpCommentToMarkdown, ClickUpCommentBlock } from '../utils/clickup-comment-formatter.js';\n\nexport interface Comment {\n  id: string;\n  comment: ClickUpCommentBlock[]; // ClickUp's structured comment format\n  comment_text: string; // Plain text representation\n  comment_markdown?: string; // Markdown version for display\n  user: {\n    id: number;\n    username: string;\n    email: string;\n    color: string;\n    profilePicture?: string;\n  };\n  resolved: boolean;\n  assignee?: {\n    id: number;\n    username: string;\n    email: string;\n    color: string;\n    profilePicture?: string;\n  };\n  assigned_by?: {\n    id: number;\n    username: string;\n    email: string;\n    color: string;\n    profilePicture?: string;\n  };\n  reactions?: {\n    [key: string]: {\n      count: number;\n      users: Array<{\n        id: number;\n        username: string;\n        email: string;\n      }>;\n    };\n  };\n  date: string;\n  start_date?: string;\n  due_date?: string;\n  parent?: string;\n  replies_count?: number;\n}\n\nexport interface GetTaskCommentsParams {\n  start?: number;\n  start_id?: string;\n}\n\nexport interface CreateTaskCommentParams {\n  comment_text?: string; // Make optional since we'll be using comment array\n  assignee?: number;\n  notify_all?: boolean;\n}\n\nexport interface GetChatViewCommentsParams {\n  start?: number;\n  start_id?: string;\n}\n\nexport interface CreateChatViewCommentParams {\n  comment_text?: string; // Make optional since we'll be using comment array\n  notify_all?: boolean;\n}\n\nexport interface GetListCommentsParams {\n  start?: number;\n  start_id?: string;\n}\n\nexport interface CreateListCommentParams {\n  comment_text?: string; // Make optional since we'll be using comment array\n  assignee?: number;\n  notify_all?: boolean;\n}\n\nexport interface UpdateCommentParams {\n  comment_text?: string; // Make optional since we'll be using comment array\n  assignee?: number;\n  resolved?: boolean;\n}\n\nexport interface GetThreadedCommentsParams {\n  start?: number;\n  start_id?: string;\n}\n\nexport interface CreateThreadedCommentParams {\n  comment_text?: string; // Make optional since we'll be using comment array\n  notify_all?: boolean;\n}\n\nexport class CommentsClient {\n  private client: ClickUpClient;\n\n  constructor(client: ClickUpClient) {\n    this.client = client;\n  }\n\n  /**\n   * Get comments for a specific task\n   * @param taskId The ID of the task to get comments for\n   * @param params Optional parameters for pagination\n   * @returns A list of comments with processed content\n   */\n  async getTaskComments(taskId: string, params?: GetTaskCommentsParams): Promise<{ comments: Comment[] }> {\n    const result = await this.client.get(`/task/${taskId}/comment`, params);\n    \n    // Process each comment's content\n    if (result.comments && Array.isArray(result.comments)) {\n      result.comments = result.comments.map((comment: any) => {\n        const processed = processClickUpResponse(comment);\n        \n        // Convert ClickUp comment format to markdown for display\n        if (processed.comment && Array.isArray(processed.comment)) {\n          try {\n            processed.comment_markdown = clickUpCommentToMarkdown({ comment: processed.comment });\n          } catch (error) {\n            console.warn('Failed to convert ClickUp comment to markdown:', error);\n          }\n        }\n        \n        return processed;\n      });\n    }\n    \n    return result;\n  }\n\n  /**\n   * Clean up ClickUp comment response by removing duplicate text blocks\n   * ClickUp automatically appends original text as final block - we remove it\n   */\n  private cleanupCommentResponse(processed: any): any {\n    if (processed.comment && Array.isArray(processed.comment) && processed.comment.length > 1) {\n      const lastBlock = processed.comment[processed.comment.length - 1];\n      \n      // Check if the last block is a duplicate of the original markdown\n      if (lastBlock && typeof lastBlock.text === 'string' && \n          (!lastBlock.attributes || Object.keys(lastBlock.attributes).length === 0)) {\n        \n        // If the last block contains markdown syntax, it's likely the duplicate\n        const hasMarkdownSyntax = /[*_`#\\[\\]()>-]/.test(lastBlock.text) || \n                                  lastBlock.text.includes('```') ||\n                                  lastBlock.text.includes('**') ||\n                                  lastBlock.text.includes('##');\n        \n        if (hasMarkdownSyntax && lastBlock.text.length > 50) {\n          // Remove the duplicate block\n          processed.comment = processed.comment.slice(0, -1);\n          \n          // Also clean up the comment_text field\n          if (processed.comment_text && processed.comment_text.includes(lastBlock.text)) {\n            processed.comment_text = processed.comment_text.replace(lastBlock.text, '').trim();\n          }\n          \n          // Regenerate clean comment_markdown\n          if (processed.comment && Array.isArray(processed.comment)) {\n            try {\n              processed.comment_markdown = clickUpCommentToMarkdown({ comment: processed.comment });\n            } catch (error) {\n              console.warn('Failed to regenerate clean comment markdown:', error);\n            }\n          }\n        }\n      }\n    }\n    \n    return processed;\n  }\n\n  /**\n   * Create a new comment on a task\n   * @param taskId The ID of the task to comment on\n   * @param params The comment parameters (supports markdown in comment_text)\n   * @returns The created comment with processed content\n   */\n  async createTaskComment(taskId: string, params: CreateTaskCommentParams): Promise<Comment> {\n    // Use ONLY structured format - no comment_text to avoid duplication\n    const processedParams: any = { ...params };\n    \n    if (params.comment_text) {\n      const commentData = prepareCommentForClickUp(params.comment_text);\n      \n      // Send ONLY structured format - remove comment_text completely\n      delete processedParams.comment_text;\n      processedParams.comment = commentData.comment;\n      \n      // Remove any other text fields to prevent conflicts\n      delete processedParams.text;\n      delete processedParams.description;\n    }\n    \n    const result = await this.client.post(`/task/${taskId}/comment`, processedParams);\n    \n    // Process the response\n    let processed = processClickUpResponse(result);\n    \n    // Clean up ClickUp's duplicate text blocks\n    processed = this.cleanupCommentResponse(processed);\n    \n    return processed;\n  }\n\n  /**\n   * Get comments for a chat view\n   * @param viewId The ID of the chat view to get comments for\n   * @param params Optional parameters for pagination\n   * @returns A list of comments with processed content\n   */\n  async getChatViewComments(viewId: string, params?: GetChatViewCommentsParams): Promise<{ comments: Comment[] }> {\n    const result = await this.client.get(`/view/${viewId}/comment`, params);\n    \n    // Process each comment's content\n    if (result.comments && Array.isArray(result.comments)) {\n      result.comments = result.comments.map((comment: any) => {\n        const processed = processClickUpResponse(comment);\n        \n        // Convert ClickUp comment format to markdown for display\n        if (processed.comment && Array.isArray(processed.comment)) {\n          try {\n            processed.comment_markdown = clickUpCommentToMarkdown({ comment: processed.comment });\n          } catch (error) {\n            console.warn('Failed to convert ClickUp comment to markdown:', error);\n          }\n        }\n        \n        return processed;\n      });\n    }\n    \n    return result;\n  }\n\n  /**\n   * Create a new comment on a chat view\n   * @param viewId The ID of the chat view to comment on\n   * @param params The comment parameters (supports markdown in comment_text)\n   * @returns The created comment with processed content\n   */\n  async createChatViewComment(viewId: string, params: CreateChatViewCommentParams): Promise<Comment> {\n    // Use ONLY structured format - no comment_text to avoid duplication\n    const processedParams: any = { ...params };\n    \n    if (params.comment_text) {\n      const commentData = prepareCommentForClickUp(params.comment_text);\n      \n      // Send ONLY structured format - remove comment_text completely\n      delete processedParams.comment_text;\n      processedParams.comment = commentData.comment;\n      \n      // Remove any other text fields to prevent conflicts\n      delete processedParams.text;\n      delete processedParams.description;\n    }\n    \n    const result = await this.client.post(`/view/${viewId}/comment`, processedParams);\n    \n    // Process the response\n    const processed = processClickUpResponse(result);\n    \n    // Convert ClickUp comment format to markdown for display\n    if (processed.comment && Array.isArray(processed.comment)) {\n      try {\n        processed.comment_markdown = clickUpCommentToMarkdown({ comment: processed.comment });\n      } catch (error) {\n        console.warn('Failed to convert ClickUp comment to markdown:', error);\n      }\n    }\n    \n    return processed;\n  }\n\n  /**\n   * Get comments for a list\n   * @param listId The ID of the list to get comments for\n   * @param params Optional parameters for pagination\n   * @returns A list of comments with processed content\n   */\n  async getListComments(listId: string, params?: GetListCommentsParams): Promise<{ comments: Comment[] }> {\n    const result = await this.client.get(`/list/${listId}/comment`, params);\n    \n    // Process each comment's content\n    if (result.comments && Array.isArray(result.comments)) {\n      result.comments = result.comments.map((comment: any) => {\n        const processed = processClickUpResponse(comment);\n        \n        // Convert ClickUp comment format to markdown for display\n        if (processed.comment && Array.isArray(processed.comment)) {\n          try {\n            processed.comment_markdown = clickUpCommentToMarkdown({ comment: processed.comment });\n          } catch (error) {\n            console.warn('Failed to convert ClickUp comment to markdown:', error);\n          }\n        }\n        \n        return processed;\n      });\n    }\n    \n    return result;\n  }\n\n  /**\n   * Create a new comment on a list\n   * @param listId The ID of the list to comment on\n   * @param params The comment parameters (supports markdown in comment_text)\n   * @returns The created comment with processed content\n   */\n  async createListComment(listId: string, params: CreateListCommentParams): Promise<Comment> {\n    // Use ONLY structured format - no comment_text to avoid duplication\n    const processedParams: any = { ...params };\n    \n    if (params.comment_text) {\n      const commentData = prepareCommentForClickUp(params.comment_text);\n      \n      // Send ONLY structured format - remove comment_text completely\n      delete processedParams.comment_text;\n      processedParams.comment = commentData.comment;\n      \n      // Remove any other text fields to prevent conflicts\n      delete processedParams.text;\n      delete processedParams.description;\n    }\n    \n    const result = await this.client.post(`/list/${listId}/comment`, processedParams);\n    \n    // Process the response\n    const processed = processClickUpResponse(result);\n    \n    // Convert ClickUp comment format to markdown for display\n    if (processed.comment && Array.isArray(processed.comment)) {\n      try {\n        processed.comment_markdown = clickUpCommentToMarkdown({ comment: processed.comment });\n      } catch (error) {\n        console.warn('Failed to convert ClickUp comment to markdown:', error);\n      }\n    }\n    \n    return processed;\n  }\n\n  /**\n   * Update an existing comment\n   * @param commentId The ID of the comment to update\n   * @param params The comment parameters to update (supports markdown in comment_text)\n   * @returns The updated comment with processed content\n   */\n  async updateComment(commentId: string, params: UpdateCommentParams): Promise<Comment> {\n    // Use ONLY structured format - no comment_text to avoid duplication\n    const processedParams: any = { ...params };\n    \n    if (params.comment_text) {\n      const commentData = prepareCommentForClickUp(params.comment_text);\n      \n      // Send ONLY structured format - remove comment_text completely\n      delete processedParams.comment_text;\n      processedParams.comment = commentData.comment;\n      \n      // Remove any other text fields to prevent conflicts\n      delete processedParams.text;\n      delete processedParams.description;\n    }\n    \n    const result = await this.client.put(`/comment/${commentId}`, processedParams);\n    \n    // Process the response\n    const processed = processClickUpResponse(result);\n    \n    // Convert ClickUp comment format to markdown for display\n    if (processed.comment && Array.isArray(processed.comment)) {\n      try {\n        processed.comment_markdown = clickUpCommentToMarkdown({ comment: processed.comment });\n      } catch (error) {\n        console.warn('Failed to convert ClickUp comment to markdown:', error);\n      }\n    }\n    \n    return processed;\n  }\n\n  /**\n   * Delete a comment\n   * @param commentId The ID of the comment to delete\n   * @returns Success message\n   */\n  async deleteComment(commentId: string): Promise<{ success: boolean }> {\n    return this.client.delete(`/comment/${commentId}`);\n  }\n\n  /**\n   * Get threaded comments for a parent comment\n   * @param commentId The ID of the parent comment\n   * @param params Optional parameters for pagination\n   * @returns A list of threaded comments with processed content\n   */\n  async getThreadedComments(commentId: string, params?: GetThreadedCommentsParams): Promise<{ comments: Comment[] }> {\n    const result = await this.client.get(`/comment/${commentId}/reply`, params);\n    \n    // Process each comment's content\n    if (result.comments && Array.isArray(result.comments)) {\n      result.comments = result.comments.map((comment: any) => {\n        const processed = processClickUpResponse(comment);\n        \n        // Convert ClickUp comment format to markdown for display\n        if (processed.comment && Array.isArray(processed.comment)) {\n          try {\n            processed.comment_markdown = clickUpCommentToMarkdown({ comment: processed.comment });\n          } catch (error) {\n            console.warn('Failed to convert ClickUp comment to markdown:', error);\n          }\n        }\n        \n        return processed;\n      });\n    }\n    \n    return result;\n  }\n\n  /**\n   * Create a new threaded comment on a parent comment\n   * @param commentId The ID of the parent comment\n   * @param params The comment parameters (supports markdown in comment_text)\n   * @returns The created threaded comment with processed content\n   */\n  async createThreadedComment(commentId: string, params: CreateThreadedCommentParams): Promise<Comment> {\n    // Process comment text for ClickUp's structured format ONLY\n    const processedParams: any = { ...params };\n    if (params.comment_text) {\n      const commentData = prepareCommentForClickUp(params.comment_text);\n      \n      // Use ONLY ClickUp's structured comment format - no comment_text at all\n      delete processedParams.comment_text;\n      processedParams.comment = commentData.comment;\n      \n      // Remove any other text fields to prevent ClickUp auto-detection\n      delete processedParams.text;\n      delete processedParams.description;\n    }\n    \n    const result = await this.client.post(`/comment/${commentId}/reply`, processedParams);\n    \n    // Process the response\n    const processed = processClickUpResponse(result);\n    \n    // Convert ClickUp comment format to markdown for display\n    if (processed.comment && Array.isArray(processed.comment)) {\n      try {\n        processed.comment_markdown = clickUpCommentToMarkdown({ comment: processed.comment });\n      } catch (error) {\n        console.warn('Failed to convert ClickUp comment to markdown:', error);\n      }\n    }\n    \n    return processed;\n  }\n}\n\nexport const createCommentsClient = (client: ClickUpClient): CommentsClient => {\n  return new CommentsClient(client);\n};\n"],"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","ignoreList":[]}
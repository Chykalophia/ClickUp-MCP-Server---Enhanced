eab1af7b2af02214595bfb138fad5d89
/* istanbul ignore next */
function cov_2jg5wtj2kk() {
  var path = "/Users/peterkrzyzek/Development/clickup-mcp-server/src/clickup-client/checklists.ts";
  var hash = "87f1fdc96f35730e6237c994c5fec587afbec42c";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/peterkrzyzek/Development/clickup-mcp-server/src/clickup-client/checklists.ts",
    statementMap: {
      "0": {
        start: {
          line: 3,
          column: 8
        },
        end: {
          line: 3,
          column: 29
        }
      },
      "1": {
        start: {
          line: 12,
          column: 8
        },
        end: {
          line: 12,
          column: 69
        }
      },
      "2": {
        start: {
          line: 21,
          column: 8
        },
        end: {
          line: 21,
          column: 68
        }
      },
      "3": {
        start: {
          line: 29,
          column: 8
        },
        end: {
          line: 29,
          column: 63
        }
      },
      "4": {
        start: {
          line: 38,
          column: 8
        },
        end: {
          line: 38,
          column: 84
        }
      },
      "5": {
        start: {
          line: 48,
          column: 8
        },
        end: {
          line: 48,
          column: 102
        }
      },
      "6": {
        start: {
          line: 57,
          column: 8
        },
        end: {
          line: 57,
          column: 97
        }
      },
      "7": {
        start: {
          line: 60,
          column: 38
        },
        end: {
          line: 62,
          column: 1
        }
      },
      "8": {
        start: {
          line: 61,
          column: 4
        },
        end: {
          line: 61,
          column: 40
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 2,
            column: 4
          },
          end: {
            line: 2,
            column: 5
          }
        },
        loc: {
          start: {
            line: 2,
            column: 24
          },
          end: {
            line: 4,
            column: 5
          }
        },
        line: 2
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 11,
            column: 4
          },
          end: {
            line: 11,
            column: 5
          }
        },
        loc: {
          start: {
            line: 11,
            column: 42
          },
          end: {
            line: 13,
            column: 5
          }
        },
        line: 11
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 20,
            column: 4
          },
          end: {
            line: 20,
            column: 5
          }
        },
        loc: {
          start: {
            line: 20,
            column: 47
          },
          end: {
            line: 22,
            column: 5
          }
        },
        line: 20
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 28,
            column: 4
          },
          end: {
            line: 28,
            column: 5
          }
        },
        loc: {
          start: {
            line: 28,
            column: 39
          },
          end: {
            line: 30,
            column: 5
          }
        },
        line: 28
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 37,
            column: 4
          },
          end: {
            line: 37,
            column: 5
          }
        },
        loc: {
          start: {
            line: 37,
            column: 51
          },
          end: {
            line: 39,
            column: 5
          }
        },
        line: 37
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 47,
            column: 4
          },
          end: {
            line: 47,
            column: 5
          }
        },
        loc: {
          start: {
            line: 47,
            column: 68
          },
          end: {
            line: 49,
            column: 5
          }
        },
        line: 47
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 56,
            column: 4
          },
          end: {
            line: 56,
            column: 5
          }
        },
        loc: {
          start: {
            line: 56,
            column: 60
          },
          end: {
            line: 58,
            column: 5
          }
        },
        line: 56
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 60,
            column: 38
          },
          end: {
            line: 60,
            column: 39
          }
        },
        loc: {
          start: {
            line: 60,
            column: 50
          },
          end: {
            line: 62,
            column: 1
          }
        },
        line: 60
      }
    },
    branchMap: {},
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0
    },
    b: {},
    inputSourceMap: {
      file: "/Users/peterkrzyzek/Development/clickup-mcp-server/src/clickup-client/checklists.ts",
      mappings: "AA6CA,MAAM,OAAO,gBAAgB;IAG3B,YAAY,MAAqB;QAC/B,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;IACvB,CAAC;IAED;;;;;OAKG;IACH,KAAK,CAAC,eAAe,CAAC,MAAc,EAAE,MAA6B;QACjE,OAAO,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,SAAS,MAAM,YAAY,EAAE,MAAM,CAAC,CAAC;IAC/D,CAAC;IAED;;;;;OAKG;IACH,KAAK,CAAC,eAAe,CAAC,WAAmB,EAAE,MAA6B;QACtE,OAAO,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,cAAc,WAAW,EAAE,EAAE,MAAM,CAAC,CAAC;IAC9D,CAAC;IAED;;;;OAIG;IACH,KAAK,CAAC,eAAe,CAAC,WAAmB;QACvC,OAAO,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,cAAc,WAAW,EAAE,CAAC,CAAC;IACzD,CAAC;IAED;;;;;OAKG;IACH,KAAK,CAAC,mBAAmB,CAAC,WAAmB,EAAE,MAAiC;QAC9E,OAAO,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,cAAc,WAAW,iBAAiB,EAAE,MAAM,CAAC,CAAC;IAC9E,CAAC;IAED;;;;;;OAMG;IACH,KAAK,CAAC,mBAAmB,CAAC,WAAmB,EAAE,eAAuB,EAAE,MAAiC;QACvG,OAAO,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,cAAc,WAAW,mBAAmB,eAAe,EAAE,EAAE,MAAM,CAAC,CAAC;IAChG,CAAC;IAED;;;;;OAKG;IACH,KAAK,CAAC,mBAAmB,CAAC,WAAmB,EAAE,eAAuB;QACpE,OAAO,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,cAAc,WAAW,mBAAmB,eAAe,EAAE,CAAC,CAAC;IAC3F,CAAC;CACF;AAED,MAAM,CAAC,MAAM,sBAAsB,GAAG,CAAC,MAAqB,EAAoB,EAAE;IAChF,OAAO,IAAI,gBAAgB,CAAC,MAAM,CAAC,CAAC;AACtC,CAAC,CAAC",
      names: [],
      sources: ["/Users/peterkrzyzek/Development/clickup-mcp-server/src/clickup-client/checklists.ts"],
      sourcesContent: ["import { ClickUpClient } from './index.js';\n\nexport interface ChecklistItem {\n  id: string;\n  name: string;\n  orderindex: number;\n  resolved: boolean;\n  assignee: {\n    id: number;\n    username: string;\n    email: string;\n  } | null;\n  parent: string | null;\n}\n\nexport interface Checklist {\n  id: string;\n  task_id: string;\n  name: string;\n  orderindex: number;\n  items: ChecklistItem[];\n}\n\nexport interface CreateChecklistParams {\n  name: string;\n  // Note: The ClickUp API doesn't support creating items when creating a checklist\n  // Items must be created separately using the createChecklistItem method\n}\n\nexport interface UpdateChecklistParams {\n  name: string;\n}\n\nexport interface CreateChecklistItemParams {\n  name: string;\n  assignee?: number;\n  resolved?: boolean;\n}\n\nexport interface UpdateChecklistItemParams {\n  name?: string;\n  assignee?: number;\n  resolved?: boolean;\n}\n\nexport class ChecklistsClient {\n  private client: ClickUpClient;\n\n  constructor(client: ClickUpClient) {\n    this.client = client;\n  }\n\n  /**\n   * Create a new checklist in a task\n   * @param taskId The ID of the task to create the checklist in\n   * @param params The checklist parameters\n   * @returns The created checklist\n   */\n  async createChecklist(taskId: string, params: CreateChecklistParams): Promise<Checklist> {\n    return this.client.post(`/task/${taskId}/checklist`, params);\n  }\n\n  /**\n   * Update an existing checklist\n   * @param checklistId The ID of the checklist to update\n   * @param params The checklist parameters to update\n   * @returns The updated checklist\n   */\n  async updateChecklist(checklistId: string, params: UpdateChecklistParams): Promise<Checklist> {\n    return this.client.put(`/checklist/${checklistId}`, params);\n  }\n\n  /**\n   * Delete a checklist\n   * @param checklistId The ID of the checklist to delete\n   * @returns Success message\n   */\n  async deleteChecklist(checklistId: string): Promise<{ success: boolean }> {\n    return this.client.delete(`/checklist/${checklistId}`);\n  }\n\n  /**\n   * Create a new checklist item in a checklist\n   * @param checklistId The ID of the checklist to create the item in\n   * @param params The checklist item parameters\n   * @returns The created checklist item\n   */\n  async createChecklistItem(checklistId: string, params: CreateChecklistItemParams): Promise<ChecklistItem> {\n    return this.client.post(`/checklist/${checklistId}/checklist_item`, params);\n  }\n\n  /**\n   * Update an existing checklist item\n   * @param checklistId The ID of the checklist containing the item\n   * @param checklistItemId The ID of the checklist item to update\n   * @param params The checklist item parameters to update\n   * @returns The updated checklist item\n   */\n  async updateChecklistItem(checklistId: string, checklistItemId: string, params: UpdateChecklistItemParams): Promise<ChecklistItem> {\n    return this.client.put(`/checklist/${checklistId}/checklist_item/${checklistItemId}`, params);\n  }\n\n  /**\n   * Delete a checklist item\n   * @param checklistId The ID of the checklist containing the item\n   * @param checklistItemId The ID of the checklist item to delete\n   * @returns Success message\n   */\n  async deleteChecklistItem(checklistId: string, checklistItemId: string): Promise<{ success: boolean }> {\n    return this.client.delete(`/checklist/${checklistId}/checklist_item/${checklistItemId}`);\n  }\n}\n\nexport const createChecklistsClient = (client: ClickUpClient): ChecklistsClient => {\n  return new ChecklistsClient(client);\n};\n"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "87f1fdc96f35730e6237c994c5fec587afbec42c"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_2jg5wtj2kk = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_2jg5wtj2kk();
export class ChecklistsClient {
  constructor(client) {
    /* istanbul ignore next */
    cov_2jg5wtj2kk().f[0]++;
    cov_2jg5wtj2kk().s[0]++;
    this.client = client;
  }
  /**
   * Create a new checklist in a task
   * @param taskId The ID of the task to create the checklist in
   * @param params The checklist parameters
   * @returns The created checklist
   */
  async createChecklist(taskId, params) {
    /* istanbul ignore next */
    cov_2jg5wtj2kk().f[1]++;
    cov_2jg5wtj2kk().s[1]++;
    return this.client.post(`/task/${taskId}/checklist`, params);
  }
  /**
   * Update an existing checklist
   * @param checklistId The ID of the checklist to update
   * @param params The checklist parameters to update
   * @returns The updated checklist
   */
  async updateChecklist(checklistId, params) {
    /* istanbul ignore next */
    cov_2jg5wtj2kk().f[2]++;
    cov_2jg5wtj2kk().s[2]++;
    return this.client.put(`/checklist/${checklistId}`, params);
  }
  /**
   * Delete a checklist
   * @param checklistId The ID of the checklist to delete
   * @returns Success message
   */
  async deleteChecklist(checklistId) {
    /* istanbul ignore next */
    cov_2jg5wtj2kk().f[3]++;
    cov_2jg5wtj2kk().s[3]++;
    return this.client.delete(`/checklist/${checklistId}`);
  }
  /**
   * Create a new checklist item in a checklist
   * @param checklistId The ID of the checklist to create the item in
   * @param params The checklist item parameters
   * @returns The created checklist item
   */
  async createChecklistItem(checklistId, params) {
    /* istanbul ignore next */
    cov_2jg5wtj2kk().f[4]++;
    cov_2jg5wtj2kk().s[4]++;
    return this.client.post(`/checklist/${checklistId}/checklist_item`, params);
  }
  /**
   * Update an existing checklist item
   * @param checklistId The ID of the checklist containing the item
   * @param checklistItemId The ID of the checklist item to update
   * @param params The checklist item parameters to update
   * @returns The updated checklist item
   */
  async updateChecklistItem(checklistId, checklistItemId, params) {
    /* istanbul ignore next */
    cov_2jg5wtj2kk().f[5]++;
    cov_2jg5wtj2kk().s[5]++;
    return this.client.put(`/checklist/${checklistId}/checklist_item/${checklistItemId}`, params);
  }
  /**
   * Delete a checklist item
   * @param checklistId The ID of the checklist containing the item
   * @param checklistItemId The ID of the checklist item to delete
   * @returns Success message
   */
  async deleteChecklistItem(checklistId, checklistItemId) {
    /* istanbul ignore next */
    cov_2jg5wtj2kk().f[6]++;
    cov_2jg5wtj2kk().s[6]++;
    return this.client.delete(`/checklist/${checklistId}/checklist_item/${checklistItemId}`);
  }
}
/* istanbul ignore next */
cov_2jg5wtj2kk().s[7]++;
export const createChecklistsClient = client => {
  /* istanbul ignore next */
  cov_2jg5wtj2kk().f[7]++;
  cov_2jg5wtj2kk().s[8]++;
  return new ChecklistsClient(client);
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJDaGVja2xpc3RzQ2xpZW50IiwiY29uc3RydWN0b3IiLCJjbGllbnQiLCJjb3ZfMmpnNXd0ajJrayIsImYiLCJzIiwiY3JlYXRlQ2hlY2tsaXN0IiwidGFza0lkIiwicGFyYW1zIiwicG9zdCIsInVwZGF0ZUNoZWNrbGlzdCIsImNoZWNrbGlzdElkIiwicHV0IiwiZGVsZXRlQ2hlY2tsaXN0IiwiZGVsZXRlIiwiY3JlYXRlQ2hlY2tsaXN0SXRlbSIsInVwZGF0ZUNoZWNrbGlzdEl0ZW0iLCJjaGVja2xpc3RJdGVtSWQiLCJkZWxldGVDaGVja2xpc3RJdGVtIiwiY3JlYXRlQ2hlY2tsaXN0c0NsaWVudCJdLCJzb3VyY2VzIjpbIi9Vc2Vycy9wZXRlcmtyenl6ZWsvRGV2ZWxvcG1lbnQvY2xpY2t1cC1tY3Atc2VydmVyL3NyYy9jbGlja3VwLWNsaWVudC9jaGVja2xpc3RzLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENsaWNrVXBDbGllbnQgfSBmcm9tICcuL2luZGV4LmpzJztcblxuZXhwb3J0IGludGVyZmFjZSBDaGVja2xpc3RJdGVtIHtcbiAgaWQ6IHN0cmluZztcbiAgbmFtZTogc3RyaW5nO1xuICBvcmRlcmluZGV4OiBudW1iZXI7XG4gIHJlc29sdmVkOiBib29sZWFuO1xuICBhc3NpZ25lZToge1xuICAgIGlkOiBudW1iZXI7XG4gICAgdXNlcm5hbWU6IHN0cmluZztcbiAgICBlbWFpbDogc3RyaW5nO1xuICB9IHwgbnVsbDtcbiAgcGFyZW50OiBzdHJpbmcgfCBudWxsO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIENoZWNrbGlzdCB7XG4gIGlkOiBzdHJpbmc7XG4gIHRhc2tfaWQ6IHN0cmluZztcbiAgbmFtZTogc3RyaW5nO1xuICBvcmRlcmluZGV4OiBudW1iZXI7XG4gIGl0ZW1zOiBDaGVja2xpc3RJdGVtW107XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgQ3JlYXRlQ2hlY2tsaXN0UGFyYW1zIHtcbiAgbmFtZTogc3RyaW5nO1xuICAvLyBOb3RlOiBUaGUgQ2xpY2tVcCBBUEkgZG9lc24ndCBzdXBwb3J0IGNyZWF0aW5nIGl0ZW1zIHdoZW4gY3JlYXRpbmcgYSBjaGVja2xpc3RcbiAgLy8gSXRlbXMgbXVzdCBiZSBjcmVhdGVkIHNlcGFyYXRlbHkgdXNpbmcgdGhlIGNyZWF0ZUNoZWNrbGlzdEl0ZW0gbWV0aG9kXG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgVXBkYXRlQ2hlY2tsaXN0UGFyYW1zIHtcbiAgbmFtZTogc3RyaW5nO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIENyZWF0ZUNoZWNrbGlzdEl0ZW1QYXJhbXMge1xuICBuYW1lOiBzdHJpbmc7XG4gIGFzc2lnbmVlPzogbnVtYmVyO1xuICByZXNvbHZlZD86IGJvb2xlYW47XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgVXBkYXRlQ2hlY2tsaXN0SXRlbVBhcmFtcyB7XG4gIG5hbWU/OiBzdHJpbmc7XG4gIGFzc2lnbmVlPzogbnVtYmVyO1xuICByZXNvbHZlZD86IGJvb2xlYW47XG59XG5cbmV4cG9ydCBjbGFzcyBDaGVja2xpc3RzQ2xpZW50IHtcbiAgcHJpdmF0ZSBjbGllbnQ6IENsaWNrVXBDbGllbnQ7XG5cbiAgY29uc3RydWN0b3IoY2xpZW50OiBDbGlja1VwQ2xpZW50KSB7XG4gICAgdGhpcy5jbGllbnQgPSBjbGllbnQ7XG4gIH1cblxuICAvKipcbiAgICogQ3JlYXRlIGEgbmV3IGNoZWNrbGlzdCBpbiBhIHRhc2tcbiAgICogQHBhcmFtIHRhc2tJZCBUaGUgSUQgb2YgdGhlIHRhc2sgdG8gY3JlYXRlIHRoZSBjaGVja2xpc3QgaW5cbiAgICogQHBhcmFtIHBhcmFtcyBUaGUgY2hlY2tsaXN0IHBhcmFtZXRlcnNcbiAgICogQHJldHVybnMgVGhlIGNyZWF0ZWQgY2hlY2tsaXN0XG4gICAqL1xuICBhc3luYyBjcmVhdGVDaGVja2xpc3QodGFza0lkOiBzdHJpbmcsIHBhcmFtczogQ3JlYXRlQ2hlY2tsaXN0UGFyYW1zKTogUHJvbWlzZTxDaGVja2xpc3Q+IHtcbiAgICByZXR1cm4gdGhpcy5jbGllbnQucG9zdChgL3Rhc2svJHt0YXNrSWR9L2NoZWNrbGlzdGAsIHBhcmFtcyk7XG4gIH1cblxuICAvKipcbiAgICogVXBkYXRlIGFuIGV4aXN0aW5nIGNoZWNrbGlzdFxuICAgKiBAcGFyYW0gY2hlY2tsaXN0SWQgVGhlIElEIG9mIHRoZSBjaGVja2xpc3QgdG8gdXBkYXRlXG4gICAqIEBwYXJhbSBwYXJhbXMgVGhlIGNoZWNrbGlzdCBwYXJhbWV0ZXJzIHRvIHVwZGF0ZVxuICAgKiBAcmV0dXJucyBUaGUgdXBkYXRlZCBjaGVja2xpc3RcbiAgICovXG4gIGFzeW5jIHVwZGF0ZUNoZWNrbGlzdChjaGVja2xpc3RJZDogc3RyaW5nLCBwYXJhbXM6IFVwZGF0ZUNoZWNrbGlzdFBhcmFtcyk6IFByb21pc2U8Q2hlY2tsaXN0PiB7XG4gICAgcmV0dXJuIHRoaXMuY2xpZW50LnB1dChgL2NoZWNrbGlzdC8ke2NoZWNrbGlzdElkfWAsIHBhcmFtcyk7XG4gIH1cblxuICAvKipcbiAgICogRGVsZXRlIGEgY2hlY2tsaXN0XG4gICAqIEBwYXJhbSBjaGVja2xpc3RJZCBUaGUgSUQgb2YgdGhlIGNoZWNrbGlzdCB0byBkZWxldGVcbiAgICogQHJldHVybnMgU3VjY2VzcyBtZXNzYWdlXG4gICAqL1xuICBhc3luYyBkZWxldGVDaGVja2xpc3QoY2hlY2tsaXN0SWQ6IHN0cmluZyk6IFByb21pc2U8eyBzdWNjZXNzOiBib29sZWFuIH0+IHtcbiAgICByZXR1cm4gdGhpcy5jbGllbnQuZGVsZXRlKGAvY2hlY2tsaXN0LyR7Y2hlY2tsaXN0SWR9YCk7XG4gIH1cblxuICAvKipcbiAgICogQ3JlYXRlIGEgbmV3IGNoZWNrbGlzdCBpdGVtIGluIGEgY2hlY2tsaXN0XG4gICAqIEBwYXJhbSBjaGVja2xpc3RJZCBUaGUgSUQgb2YgdGhlIGNoZWNrbGlzdCB0byBjcmVhdGUgdGhlIGl0ZW0gaW5cbiAgICogQHBhcmFtIHBhcmFtcyBUaGUgY2hlY2tsaXN0IGl0ZW0gcGFyYW1ldGVyc1xuICAgKiBAcmV0dXJucyBUaGUgY3JlYXRlZCBjaGVja2xpc3QgaXRlbVxuICAgKi9cbiAgYXN5bmMgY3JlYXRlQ2hlY2tsaXN0SXRlbShjaGVja2xpc3RJZDogc3RyaW5nLCBwYXJhbXM6IENyZWF0ZUNoZWNrbGlzdEl0ZW1QYXJhbXMpOiBQcm9taXNlPENoZWNrbGlzdEl0ZW0+IHtcbiAgICByZXR1cm4gdGhpcy5jbGllbnQucG9zdChgL2NoZWNrbGlzdC8ke2NoZWNrbGlzdElkfS9jaGVja2xpc3RfaXRlbWAsIHBhcmFtcyk7XG4gIH1cblxuICAvKipcbiAgICogVXBkYXRlIGFuIGV4aXN0aW5nIGNoZWNrbGlzdCBpdGVtXG4gICAqIEBwYXJhbSBjaGVja2xpc3RJZCBUaGUgSUQgb2YgdGhlIGNoZWNrbGlzdCBjb250YWluaW5nIHRoZSBpdGVtXG4gICAqIEBwYXJhbSBjaGVja2xpc3RJdGVtSWQgVGhlIElEIG9mIHRoZSBjaGVja2xpc3QgaXRlbSB0byB1cGRhdGVcbiAgICogQHBhcmFtIHBhcmFtcyBUaGUgY2hlY2tsaXN0IGl0ZW0gcGFyYW1ldGVycyB0byB1cGRhdGVcbiAgICogQHJldHVybnMgVGhlIHVwZGF0ZWQgY2hlY2tsaXN0IGl0ZW1cbiAgICovXG4gIGFzeW5jIHVwZGF0ZUNoZWNrbGlzdEl0ZW0oY2hlY2tsaXN0SWQ6IHN0cmluZywgY2hlY2tsaXN0SXRlbUlkOiBzdHJpbmcsIHBhcmFtczogVXBkYXRlQ2hlY2tsaXN0SXRlbVBhcmFtcyk6IFByb21pc2U8Q2hlY2tsaXN0SXRlbT4ge1xuICAgIHJldHVybiB0aGlzLmNsaWVudC5wdXQoYC9jaGVja2xpc3QvJHtjaGVja2xpc3RJZH0vY2hlY2tsaXN0X2l0ZW0vJHtjaGVja2xpc3RJdGVtSWR9YCwgcGFyYW1zKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBEZWxldGUgYSBjaGVja2xpc3QgaXRlbVxuICAgKiBAcGFyYW0gY2hlY2tsaXN0SWQgVGhlIElEIG9mIHRoZSBjaGVja2xpc3QgY29udGFpbmluZyB0aGUgaXRlbVxuICAgKiBAcGFyYW0gY2hlY2tsaXN0SXRlbUlkIFRoZSBJRCBvZiB0aGUgY2hlY2tsaXN0IGl0ZW0gdG8gZGVsZXRlXG4gICAqIEByZXR1cm5zIFN1Y2Nlc3MgbWVzc2FnZVxuICAgKi9cbiAgYXN5bmMgZGVsZXRlQ2hlY2tsaXN0SXRlbShjaGVja2xpc3RJZDogc3RyaW5nLCBjaGVja2xpc3RJdGVtSWQ6IHN0cmluZyk6IFByb21pc2U8eyBzdWNjZXNzOiBib29sZWFuIH0+IHtcbiAgICByZXR1cm4gdGhpcy5jbGllbnQuZGVsZXRlKGAvY2hlY2tsaXN0LyR7Y2hlY2tsaXN0SWR9L2NoZWNrbGlzdF9pdGVtLyR7Y2hlY2tsaXN0SXRlbUlkfWApO1xuICB9XG59XG5cbmV4cG9ydCBjb25zdCBjcmVhdGVDaGVja2xpc3RzQ2xpZW50ID0gKGNsaWVudDogQ2xpY2tVcENsaWVudCk6IENoZWNrbGlzdHNDbGllbnQgPT4ge1xuICByZXR1cm4gbmV3IENoZWNrbGlzdHNDbGllbnQoY2xpZW50KTtcbn07XG4iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQTZDQSxPQUFNLE1BQU9BLGdCQUFnQjtFQUczQkMsWUFBWUMsTUFBcUI7SUFBQTtJQUFBQyxjQUFBLEdBQUFDLENBQUE7SUFBQUQsY0FBQSxHQUFBRSxDQUFBO0lBQy9CLElBQUksQ0FBQ0gsTUFBTSxHQUFHQSxNQUFNO0VBQ3RCO0VBRUE7Ozs7OztFQU1BLE1BQU1JLGVBQWVBLENBQUNDLE1BQWMsRUFBRUMsTUFBNkI7SUFBQTtJQUFBTCxjQUFBLEdBQUFDLENBQUE7SUFBQUQsY0FBQSxHQUFBRSxDQUFBO0lBQ2pFLE9BQU8sSUFBSSxDQUFDSCxNQUFNLENBQUNPLElBQUksQ0FBQyxTQUFTRixNQUFNLFlBQVksRUFBRUMsTUFBTSxDQUFDO0VBQzlEO0VBRUE7Ozs7OztFQU1BLE1BQU1FLGVBQWVBLENBQUNDLFdBQW1CLEVBQUVILE1BQTZCO0lBQUE7SUFBQUwsY0FBQSxHQUFBQyxDQUFBO0lBQUFELGNBQUEsR0FBQUUsQ0FBQTtJQUN0RSxPQUFPLElBQUksQ0FBQ0gsTUFBTSxDQUFDVSxHQUFHLENBQUMsY0FBY0QsV0FBVyxFQUFFLEVBQUVILE1BQU0sQ0FBQztFQUM3RDtFQUVBOzs7OztFQUtBLE1BQU1LLGVBQWVBLENBQUNGLFdBQW1CO0lBQUE7SUFBQVIsY0FBQSxHQUFBQyxDQUFBO0lBQUFELGNBQUEsR0FBQUUsQ0FBQTtJQUN2QyxPQUFPLElBQUksQ0FBQ0gsTUFBTSxDQUFDWSxNQUFNLENBQUMsY0FBY0gsV0FBVyxFQUFFLENBQUM7RUFDeEQ7RUFFQTs7Ozs7O0VBTUEsTUFBTUksbUJBQW1CQSxDQUFDSixXQUFtQixFQUFFSCxNQUFpQztJQUFBO0lBQUFMLGNBQUEsR0FBQUMsQ0FBQTtJQUFBRCxjQUFBLEdBQUFFLENBQUE7SUFDOUUsT0FBTyxJQUFJLENBQUNILE1BQU0sQ0FBQ08sSUFBSSxDQUFDLGNBQWNFLFdBQVcsaUJBQWlCLEVBQUVILE1BQU0sQ0FBQztFQUM3RTtFQUVBOzs7Ozs7O0VBT0EsTUFBTVEsbUJBQW1CQSxDQUFDTCxXQUFtQixFQUFFTSxlQUF1QixFQUFFVCxNQUFpQztJQUFBO0lBQUFMLGNBQUEsR0FBQUMsQ0FBQTtJQUFBRCxjQUFBLEdBQUFFLENBQUE7SUFDdkcsT0FBTyxJQUFJLENBQUNILE1BQU0sQ0FBQ1UsR0FBRyxDQUFDLGNBQWNELFdBQVcsbUJBQW1CTSxlQUFlLEVBQUUsRUFBRVQsTUFBTSxDQUFDO0VBQy9GO0VBRUE7Ozs7OztFQU1BLE1BQU1VLG1CQUFtQkEsQ0FBQ1AsV0FBbUIsRUFBRU0sZUFBdUI7SUFBQTtJQUFBZCxjQUFBLEdBQUFDLENBQUE7SUFBQUQsY0FBQSxHQUFBRSxDQUFBO0lBQ3BFLE9BQU8sSUFBSSxDQUFDSCxNQUFNLENBQUNZLE1BQU0sQ0FBQyxjQUFjSCxXQUFXLG1CQUFtQk0sZUFBZSxFQUFFLENBQUM7RUFDMUY7O0FBQ0Q7QUFBQWQsY0FBQSxHQUFBRSxDQUFBO0FBRUQsT0FBTyxNQUFNYyxzQkFBc0IsR0FBSWpCLE1BQXFCLElBQXNCO0VBQUE7RUFBQUMsY0FBQSxHQUFBQyxDQUFBO0VBQUFELGNBQUEsR0FBQUUsQ0FBQTtFQUNoRixPQUFPLElBQUlMLGdCQUFnQixDQUFDRSxNQUFNLENBQUM7QUFDckMsQ0FBQyIsImlnbm9yZUxpc3QiOltdfQ==
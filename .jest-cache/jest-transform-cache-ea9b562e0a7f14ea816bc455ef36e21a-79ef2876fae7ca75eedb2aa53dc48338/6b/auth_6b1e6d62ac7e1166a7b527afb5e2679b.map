{"version":3,"names":["cov_1hq0a8j7dj","actualCoverage","AuthClient","constructor","client","f","s","getAuthorizedUser","get","error","console","getWorkspaces","getSpaces","workspaceId","getFolders","spaceId","getLists","folderId","getListsFromSpace","getWorkspaceSeats","createAuthClient"],"sources":["/Users/peterkrzyzek/Development/clickup-mcp-server/src/clickup-client/auth.ts"],"sourcesContent":["import { ClickUpClient } from './index.js';\n\nexport interface AuthorizedUser {\n  id: number;\n  username: string;\n  email: string;\n  color: string;\n  profilePicture: string;\n}\n\nexport interface Workspace {\n  id: string;\n  name: string;\n  color: string;\n  avatar: string;\n  members: Array<{\n    user: {\n      id: number;\n      username: string;\n      email: string;\n      color: string;\n      profilePicture: string;\n    };\n    role: number;\n    custom_role?: string;\n  }>;\n}\n\nexport class AuthClient {\n  private client: ClickUpClient;\n\n  constructor(client: ClickUpClient) {\n    this.client = client;\n  }\n\n  /**\n   * Get the authorized user's information\n   * @returns The authorized user's information\n   */\n  async getAuthorizedUser(): Promise<AuthorizedUser> {\n    try {\n      return await this.client.get('/user');\n    } catch (error) {\n      console.error('Error getting authorized user:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Get the workspaces (teams) that the authorized user belongs to\n   * @returns A list of workspaces\n   */\n  async getWorkspaces(): Promise<{ teams: Workspace[] }> {\n    try {\n      return await this.client.get('/team');\n    } catch (error) {\n      console.error('Error getting workspaces:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Get the spaces in a workspace\n   * @param workspaceId The ID of the workspace to get spaces from\n   * @returns A list of spaces\n   */\n  async getSpaces(workspaceId: string): Promise<{ spaces: Array<{\n    id: string;\n    name: string;\n    private: boolean;\n    statuses: Array<{\n      id: string;\n      status: string;\n      type: string;\n      orderindex: number;\n      color: string;\n    }>;\n    multiple_assignees: boolean;\n    features: {\n      due_dates: {\n        enabled: boolean;\n        start_date: boolean;\n        remap_due_dates: boolean;\n        remap_closed_due_date: boolean;\n      };\n      time_tracking: {\n        enabled: boolean;\n      };\n      tags: {\n        enabled: boolean;\n      };\n      time_estimates: {\n        enabled: boolean;\n      };\n      checklists: {\n        enabled: boolean;\n      };\n      custom_fields: {\n        enabled: boolean;\n      };\n      remap_dependencies: {\n        enabled: boolean;\n      };\n      dependency_warning: {\n        enabled: boolean;\n      };\n      portfolios: {\n        enabled: boolean;\n      };\n    };\n  }> }> {\n    try {\n      return await this.client.get(`/team/${workspaceId}/space`);\n    } catch (error) {\n      console.error('Error getting spaces:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Get the folders in a space\n   * @param spaceId The ID of the space to get folders from\n   * @returns A list of folders\n   */\n  async getFolders(spaceId: string): Promise<{ folders: Array<{\n    id: string;\n    name: string;\n    orderindex: number;\n    override_statuses: boolean;\n    hidden: boolean;\n    space: {\n      id: string;\n      name: string;\n    };\n    task_count: string;\n    lists: Array<{\n      id: string;\n      name: string;\n      orderindex: number;\n      status: {\n        status: string;\n        color: string;\n        hide_label: boolean;\n      };\n      priority: {\n        priority: string;\n        color: string;\n      };\n      assignee: {\n        id: number;\n        username: string;\n        color: string;\n        initials: string;\n        email: string;\n        profilePicture: string;\n      };\n      task_count: number;\n      due_date: string;\n      start_date: string;\n      folder: {\n        id: string;\n        name: string;\n        hidden: boolean;\n        access: boolean;\n      };\n      space: {\n        id: string;\n        name: string;\n        access: boolean;\n      };\n      archived: boolean;\n      override_statuses: boolean;\n      permission_level: string;\n    }>;\n    permission_level: string;\n  }> }> {\n    try {\n      return await this.client.get(`/space/${spaceId}/folder`);\n    } catch (error) {\n      console.error('Error getting folders:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Get the lists in a folder\n   * @param folderId The ID of the folder to get lists from\n   * @returns A list of lists\n   */\n  async getLists(folderId: string): Promise<{ lists: Array<{\n    id: string;\n    name: string;\n    orderindex: number;\n    status: {\n      status: string;\n      color: string;\n      hide_label: boolean;\n    };\n    priority: {\n      priority: string;\n      color: string;\n    };\n    assignee: {\n      id: number;\n      username: string;\n      color: string;\n      initials: string;\n      email: string;\n      profilePicture: string;\n    };\n    task_count: number;\n    due_date: string;\n    start_date: string;\n    folder: {\n      id: string;\n      name: string;\n      hidden: boolean;\n      access: boolean;\n    };\n    space: {\n      id: string;\n      name: string;\n      access: boolean;\n    };\n    archived: boolean;\n    override_statuses: boolean;\n    permission_level: string;\n  }> }> {\n    try {\n      return await this.client.get(`/folder/${folderId}/list`);\n    } catch (error) {\n      console.error('Error getting lists:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Get the lists in a space\n   * @param spaceId The ID of the space to get lists from\n   * @returns A list of lists\n   */\n  async getListsFromSpace(spaceId: string): Promise<{ lists: Array<{\n    id: string;\n    name: string;\n    orderindex: number;\n    status: {\n      status: string;\n      color: string;\n      hide_label: boolean;\n    };\n    priority: {\n      priority: string;\n      color: string;\n    };\n    assignee: {\n      id: number;\n      username: string;\n      color: string;\n      initials: string;\n      email: string;\n      profilePicture: string;\n    };\n    task_count: number;\n    due_date: string;\n    start_date: string;\n    space: {\n      id: string;\n      name: string;\n      access: boolean;\n    };\n    archived: boolean;\n    override_statuses: boolean;\n    permission_level: string;\n  }> }> {\n    try {\n      return await this.client.get(`/space/${spaceId}/list`);\n    } catch (error) {\n      console.error('Error getting lists from space:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Get the seats information for a workspace\n   * @param workspaceId The ID of the workspace to get seats information for\n   * @returns Seats information including used, total, and available seats\n   */\n  async getWorkspaceSeats(workspaceId: string): Promise<{\n    members: object;\n    filled_members_seats: number;\n    total_member_seats: number;\n    empty_member_seats: number;\n    guests: object;\n    filled_guest_seats: number;\n    total_guest_seats: number;\n    empty_guest_seats: number;\n  }> {\n    try {\n      return await this.client.get(`/team/${workspaceId}/seats`);\n    } catch (error) {\n      console.error('Error getting workspace seats:', error);\n      throw error;\n    }\n  }\n}\n\nexport const createAuthClient = (client: ClickUpClient): AuthClient => {\n  return new AuthClient(client);\n};\n"],"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","ignoreList":[]}
4df6a76a382b982b552799046a292a6c
/* istanbul ignore next */
function cov_10wl53tf1o() {
  var path = "/Users/peterkrzyzek/Development/clickup-mcp-server/src/resources/comment-resources.ts";
  var hash = "ad9989122fa84141ab89aec2465e257081c83b5d";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/peterkrzyzek/Development/clickup-mcp-server/src/resources/comment-resources.ts",
    statementMap: {
      "0": {
        start: {
          line: 5,
          column: 22
        },
        end: {
          line: 5,
          column: 43
        }
      },
      "1": {
        start: {
          line: 6,
          column: 23
        },
        end: {
          line: 6,
          column: 58
        }
      },
      "2": {
        start: {
          line: 9,
          column: 4
        },
        end: {
          line: 31,
          column: 7
        }
      },
      "3": {
        start: {
          line: 12,
          column: 8
        },
        end: {
          line: 30,
          column: 9
        }
      },
      "4": {
        start: {
          line: 13,
          column: 28
        },
        end: {
          line: 13,
          column: 42
        }
      },
      "5": {
        start: {
          line: 14,
          column: 12
        },
        end: {
          line: 14,
          column: 83
        }
      },
      "6": {
        start: {
          line: 15,
          column: 29
        },
        end: {
          line: 15,
          column: 74
        }
      },
      "7": {
        start: {
          line: 16,
          column: 12
        },
        end: {
          line: 16,
          column: 70
        }
      },
      "8": {
        start: {
          line: 17,
          column: 12
        },
        end: {
          line: 25,
          column: 14
        }
      },
      "9": {
        start: {
          line: 28,
          column: 12
        },
        end: {
          line: 28,
          column: 85
        }
      },
      "10": {
        start: {
          line: 29,
          column: 12
        },
        end: {
          line: 29,
          column: 78
        }
      },
      "11": {
        start: {
          line: 33,
          column: 4
        },
        end: {
          line: 55,
          column: 7
        }
      },
      "12": {
        start: {
          line: 36,
          column: 8
        },
        end: {
          line: 54,
          column: 9
        }
      },
      "13": {
        start: {
          line: 37,
          column: 28
        },
        end: {
          line: 37,
          column: 42
        }
      },
      "14": {
        start: {
          line: 38,
          column: 12
        },
        end: {
          line: 38,
          column: 88
        }
      },
      "15": {
        start: {
          line: 39,
          column: 29
        },
        end: {
          line: 39,
          column: 78
        }
      },
      "16": {
        start: {
          line: 40,
          column: 12
        },
        end: {
          line: 40,
          column: 70
        }
      },
      "17": {
        start: {
          line: 41,
          column: 12
        },
        end: {
          line: 49,
          column: 14
        }
      },
      "18": {
        start: {
          line: 52,
          column: 12
        },
        end: {
          line: 52,
          column: 90
        }
      },
      "19": {
        start: {
          line: 53,
          column: 12
        },
        end: {
          line: 53,
          column: 83
        }
      },
      "20": {
        start: {
          line: 57,
          column: 4
        },
        end: {
          line: 79,
          column: 7
        }
      },
      "21": {
        start: {
          line: 60,
          column: 8
        },
        end: {
          line: 78,
          column: 9
        }
      },
      "22": {
        start: {
          line: 61,
          column: 28
        },
        end: {
          line: 61,
          column: 42
        }
      },
      "23": {
        start: {
          line: 62,
          column: 12
        },
        end: {
          line: 62,
          column: 83
        }
      },
      "24": {
        start: {
          line: 63,
          column: 29
        },
        end: {
          line: 63,
          column: 74
        }
      },
      "25": {
        start: {
          line: 64,
          column: 12
        },
        end: {
          line: 64,
          column: 70
        }
      },
      "26": {
        start: {
          line: 65,
          column: 12
        },
        end: {
          line: 73,
          column: 14
        }
      },
      "27": {
        start: {
          line: 76,
          column: 12
        },
        end: {
          line: 76,
          column: 85
        }
      },
      "28": {
        start: {
          line: 77,
          column: 12
        },
        end: {
          line: 77,
          column: 78
        }
      },
      "29": {
        start: {
          line: 81,
          column: 4
        },
        end: {
          line: 103,
          column: 7
        }
      },
      "30": {
        start: {
          line: 84,
          column: 8
        },
        end: {
          line: 102,
          column: 9
        }
      },
      "31": {
        start: {
          line: 85,
          column: 31
        },
        end: {
          line: 85,
          column: 48
        }
      },
      "32": {
        start: {
          line: 86,
          column: 12
        },
        end: {
          line: 86,
          column: 98
        }
      },
      "33": {
        start: {
          line: 87,
          column: 29
        },
        end: {
          line: 87,
          column: 81
        }
      },
      "34": {
        start: {
          line: 88,
          column: 12
        },
        end: {
          line: 88,
          column: 70
        }
      },
      "35": {
        start: {
          line: 89,
          column: 12
        },
        end: {
          line: 97,
          column: 14
        }
      },
      "36": {
        start: {
          line: 100,
          column: 12
        },
        end: {
          line: 100,
          column: 89
        }
      },
      "37": {
        start: {
          line: 101,
          column: 12
        },
        end: {
          line: 101,
          column: 82
        }
      },
      "38": {
        start: {
          line: 105,
          column: 4
        },
        end: {
          line: 127,
          column: 7
        }
      },
      "39": {
        start: {
          line: 108,
          column: 8
        },
        end: {
          line: 126,
          column: 9
        }
      },
      "40": {
        start: {
          line: 109,
          column: 28
        },
        end: {
          line: 109,
          column: 39
        }
      },
      "41": {
        start: {
          line: 110,
          column: 12
        },
        end: {
          line: 110,
          column: 91
        }
      },
      "42": {
        start: {
          line: 111,
          column: 29
        },
        end: {
          line: 111,
          column: 74
        }
      },
      "43": {
        start: {
          line: 112,
          column: 12
        },
        end: {
          line: 112,
          column: 70
        }
      },
      "44": {
        start: {
          line: 113,
          column: 12
        },
        end: {
          line: 121,
          column: 14
        }
      },
      "45": {
        start: {
          line: 124,
          column: 12
        },
        end: {
          line: 124,
          column: 93
        }
      },
      "46": {
        start: {
          line: 125,
          column: 12
        },
        end: {
          line: 125,
          column: 86
        }
      },
      "47": {
        start: {
          line: 128,
          column: 4
        },
        end: {
          line: 150,
          column: 7
        }
      },
      "48": {
        start: {
          line: 131,
          column: 8
        },
        end: {
          line: 149,
          column: 9
        }
      },
      "49": {
        start: {
          line: 132,
          column: 28
        },
        end: {
          line: 132,
          column: 42
        }
      },
      "50": {
        start: {
          line: 133,
          column: 12
        },
        end: {
          line: 133,
          column: 91
        }
      },
      "51": {
        start: {
          line: 134,
          column: 29
        },
        end: {
          line: 134,
          column: 74
        }
      },
      "52": {
        start: {
          line: 135,
          column: 12
        },
        end: {
          line: 135,
          column: 70
        }
      },
      "53": {
        start: {
          line: 136,
          column: 12
        },
        end: {
          line: 144,
          column: 14
        }
      },
      "54": {
        start: {
          line: 147,
          column: 12
        },
        end: {
          line: 147,
          column: 93
        }
      },
      "55": {
        start: {
          line: 148,
          column: 12
        },
        end: {
          line: 148,
          column: 86
        }
      }
    },
    fnMap: {
      "0": {
        name: "setupCommentResources",
        decl: {
          start: {
            line: 7,
            column: 16
          },
          end: {
            line: 7,
            column: 37
          }
        },
        loc: {
          start: {
            line: 7,
            column: 46
          },
          end: {
            line: 151,
            column: 1
          }
        },
        line: 7
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 11,
            column: 7
          },
          end: {
            line: 11,
            column: 8
          }
        },
        loc: {
          start: {
            line: 11,
            column: 30
          },
          end: {
            line: 31,
            column: 5
          }
        },
        line: 11
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 35,
            column: 7
          },
          end: {
            line: 35,
            column: 8
          }
        },
        loc: {
          start: {
            line: 35,
            column: 30
          },
          end: {
            line: 55,
            column: 5
          }
        },
        line: 35
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 59,
            column: 7
          },
          end: {
            line: 59,
            column: 8
          }
        },
        loc: {
          start: {
            line: 59,
            column: 30
          },
          end: {
            line: 79,
            column: 5
          }
        },
        line: 59
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 83,
            column: 7
          },
          end: {
            line: 83,
            column: 8
          }
        },
        loc: {
          start: {
            line: 83,
            column: 30
          },
          end: {
            line: 103,
            column: 5
          }
        },
        line: 83
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 107,
            column: 7
          },
          end: {
            line: 107,
            column: 8
          }
        },
        loc: {
          start: {
            line: 107,
            column: 22
          },
          end: {
            line: 127,
            column: 5
          }
        },
        line: 107
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 130,
            column: 7
          },
          end: {
            line: 130,
            column: 8
          }
        },
        loc: {
          start: {
            line: 130,
            column: 22
          },
          end: {
            line: 150,
            column: 5
          }
        },
        line: 130
      }
    },
    branchMap: {},
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0
    },
    b: {},
    inputSourceMap: {
      file: "/Users/peterkrzyzek/Development/clickup-mcp-server/src/resources/comment-resources.ts",
      mappings: "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",
      names: [],
      sources: ["/Users/peterkrzyzek/Development/clickup-mcp-server/src/resources/comment-resources.ts"],
      sourcesContent: ["import { McpServer, ResourceTemplate } from '@modelcontextprotocol/sdk/server/mcp.js';\nimport { createClickUpClient } from '../clickup-client/index.js';\nimport { createCommentsClient } from '../clickup-client/comments.js';\n\n// Create clients\nconst clickUpClient = createClickUpClient();\nconst commentsClient = createCommentsClient(clickUpClient);\n\nexport function setupCommentResources(server: McpServer): void {\n  // Register task comments resource\n  server.resource(\n    'task-comments',\n    new ResourceTemplate('clickup://task/{task_id}/comments', { list: undefined }),\n    {\n      description: 'Get comments for a ClickUp task, including text content, author information, and timestamps.'\n    },\n    async (uri, params) => {\n      try {\n        const task_id = params.task_id as string;\n        console.log('[CommentResources] Fetching comments for task:', task_id);\n        const comments = await commentsClient.getTaskComments(task_id);\n        console.log('[CommentResources] Got comments:', comments);\n        \n        return {\n          contents: [\n            {\n              uri: uri.toString(),\n              mimeType: 'application/json',\n              text: JSON.stringify(comments, null, 2),\n            },\n          ],\n        };\n      } catch (error: any) {\n        console.error('[CommentResources] Error fetching task comments:', error);\n        throw new Error(`Error fetching task comments: ${error.message}`);\n      }\n    }\n  );\n\n  // Register chat view comments resource\n  server.resource(\n    'chat-view-comments',\n    new ResourceTemplate('clickup://view/{view_id}/comments', { list: undefined }),\n    {\n      description: 'Get comments from a ClickUp chat view, with support for pagination and threaded discussions.'\n    },\n    async (uri, params) => {\n      try {\n        const view_id = params.view_id as string;\n        console.log('[CommentResources] Fetching comments for chat view:', view_id);\n        const comments = await commentsClient.getChatViewComments(view_id);\n        console.log('[CommentResources] Got comments:', comments);\n        \n        return {\n          contents: [\n            {\n              uri: uri.toString(),\n              mimeType: 'application/json',\n              text: JSON.stringify(comments, null, 2),\n            },\n          ],\n        };\n      } catch (error: any) {\n        console.error('[CommentResources] Error fetching chat view comments:', error);\n        throw new Error(`Error fetching chat view comments: ${error.message}`);\n      }\n    }\n  );\n\n  // Register list comments resource\n  server.resource(\n    'list-comments',\n    new ResourceTemplate('clickup://list/{list_id}/comments', { list: undefined }),\n    {\n      description: 'Get comments for a ClickUp list, including text content, author information, and timestamps.'\n    },\n    async (uri, params) => {\n      try {\n        const list_id = params.list_id as string;\n        console.log('[CommentResources] Fetching comments for list:', list_id);\n        const comments = await commentsClient.getListComments(list_id);\n        console.log('[CommentResources] Got comments:', comments);\n        \n        return {\n          contents: [\n            {\n              uri: uri.toString(),\n              mimeType: 'application/json',\n              text: JSON.stringify(comments, null, 2),\n            },\n          ],\n        };\n      } catch (error: any) {\n        console.error('[CommentResources] Error fetching list comments:', error);\n        throw new Error(`Error fetching list comments: ${error.message}`);\n      }\n    }\n  );\n\n  // Register threaded comments resource\n  server.resource(\n    'threaded-comments',\n    new ResourceTemplate('clickup://comment/{comment_id}/reply', { list: undefined }),\n    {\n      description: 'Get threaded replies to a specific comment, supporting nested discussions and pagination.'\n    },\n    async (uri, params) => {\n      try {\n        const comment_id = params.comment_id as string;\n        console.log('[CommentResources] Fetching threaded comments for comment:', comment_id);\n        const comments = await commentsClient.getThreadedComments(comment_id);\n        console.log('[CommentResources] Got comments:', comments);\n        \n        return {\n          contents: [\n            {\n              uri: uri.toString(),\n              mimeType: 'application/json',\n              text: JSON.stringify(comments, null, 2),\n            },\n          ],\n        };\n      } catch (error: any) {\n        console.error('[CommentResources] Error fetching threaded comments:', error);\n        throw new Error(`Error fetching threaded comments: ${error.message}`);\n      }\n    }\n  );\n\n  // Add some example static resources for discoverability\n  server.resource(\n    'example-task-comments',\n    'clickup://task/868czp2t3/comments',\n    {\n      description: 'An example task comments resource demonstrating the comment data format.'\n    },\n    async (uri) => {\n      try {\n        const task_id = '868czp2t3';\n        console.log('[CommentResources] Fetching comments for example task:', task_id);\n        const comments = await commentsClient.getTaskComments(task_id);\n        console.log('[CommentResources] Got comments:', comments);\n        \n        return {\n          contents: [\n            {\n              uri: uri.toString(),\n              mimeType: 'application/json',\n              text: JSON.stringify(comments, null, 2),\n            },\n          ],\n        };\n      } catch (error: any) {\n        console.error('[CommentResources] Error fetching example task comments:', error);\n        throw new Error(`Error fetching example task comments: ${error.message}`);\n      }\n    }\n  );\n\n  server.resource(\n    'example-list-comments',\n    'clickup://list/901109776097/comments',\n    {\n      description: 'An example list comments resource demonstrating the comment data format.'\n    },\n    async (uri) => {\n      try {\n        const list_id = '901109776097';\n        console.log('[CommentResources] Fetching comments for example list:', list_id);\n        const comments = await commentsClient.getListComments(list_id);\n        console.log('[CommentResources] Got comments:', comments);\n        \n        return {\n          contents: [\n            {\n              uri: uri.toString(),\n              mimeType: 'application/json',\n              text: JSON.stringify(comments, null, 2),\n            },\n          ],\n        };\n      } catch (error: any) {\n        console.error('[CommentResources] Error fetching example list comments:', error);\n        throw new Error(`Error fetching example list comments: ${error.message}`);\n      }\n    }\n  );\n}\n"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "ad9989122fa84141ab89aec2465e257081c83b5d"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_10wl53tf1o = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_10wl53tf1o();
import { ResourceTemplate } from '@modelcontextprotocol/sdk/server/mcp.js';
import { createClickUpClient } from '../clickup-client/index.js';
import { createCommentsClient } from '../clickup-client/comments.js';
// Create clients
const clickUpClient =
/* istanbul ignore next */
(cov_10wl53tf1o().s[0]++, createClickUpClient());
const commentsClient =
/* istanbul ignore next */
(cov_10wl53tf1o().s[1]++, createCommentsClient(clickUpClient));
export function setupCommentResources(server) {
  /* istanbul ignore next */
  cov_10wl53tf1o().f[0]++;
  cov_10wl53tf1o().s[2]++;
  // Register task comments resource
  server.resource('task-comments', new ResourceTemplate('clickup://task/{task_id}/comments', {
    list: undefined
  }), {
    description: 'Get comments for a ClickUp task, including text content, author information, and timestamps.'
  }, async (uri, params) => {
    /* istanbul ignore next */
    cov_10wl53tf1o().f[1]++;
    cov_10wl53tf1o().s[3]++;
    try {
      const task_id =
      /* istanbul ignore next */
      (cov_10wl53tf1o().s[4]++, params.task_id);
      /* istanbul ignore next */
      cov_10wl53tf1o().s[5]++;
      console.log('[CommentResources] Fetching comments for task:', task_id);
      const comments =
      /* istanbul ignore next */
      (cov_10wl53tf1o().s[6]++, await commentsClient.getTaskComments(task_id));
      /* istanbul ignore next */
      cov_10wl53tf1o().s[7]++;
      console.log('[CommentResources] Got comments:', comments);
      /* istanbul ignore next */
      cov_10wl53tf1o().s[8]++;
      return {
        contents: [{
          uri: uri.toString(),
          mimeType: 'application/json',
          text: JSON.stringify(comments, null, 2)
        }]
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_10wl53tf1o().s[9]++;
      console.error('[CommentResources] Error fetching task comments:', error);
      /* istanbul ignore next */
      cov_10wl53tf1o().s[10]++;
      throw new Error(`Error fetching task comments: ${error.message}`);
    }
  });
  // Register chat view comments resource
  /* istanbul ignore next */
  cov_10wl53tf1o().s[11]++;
  server.resource('chat-view-comments', new ResourceTemplate('clickup://view/{view_id}/comments', {
    list: undefined
  }), {
    description: 'Get comments from a ClickUp chat view, with support for pagination and threaded discussions.'
  }, async (uri, params) => {
    /* istanbul ignore next */
    cov_10wl53tf1o().f[2]++;
    cov_10wl53tf1o().s[12]++;
    try {
      const view_id =
      /* istanbul ignore next */
      (cov_10wl53tf1o().s[13]++, params.view_id);
      /* istanbul ignore next */
      cov_10wl53tf1o().s[14]++;
      console.log('[CommentResources] Fetching comments for chat view:', view_id);
      const comments =
      /* istanbul ignore next */
      (cov_10wl53tf1o().s[15]++, await commentsClient.getChatViewComments(view_id));
      /* istanbul ignore next */
      cov_10wl53tf1o().s[16]++;
      console.log('[CommentResources] Got comments:', comments);
      /* istanbul ignore next */
      cov_10wl53tf1o().s[17]++;
      return {
        contents: [{
          uri: uri.toString(),
          mimeType: 'application/json',
          text: JSON.stringify(comments, null, 2)
        }]
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_10wl53tf1o().s[18]++;
      console.error('[CommentResources] Error fetching chat view comments:', error);
      /* istanbul ignore next */
      cov_10wl53tf1o().s[19]++;
      throw new Error(`Error fetching chat view comments: ${error.message}`);
    }
  });
  // Register list comments resource
  /* istanbul ignore next */
  cov_10wl53tf1o().s[20]++;
  server.resource('list-comments', new ResourceTemplate('clickup://list/{list_id}/comments', {
    list: undefined
  }), {
    description: 'Get comments for a ClickUp list, including text content, author information, and timestamps.'
  }, async (uri, params) => {
    /* istanbul ignore next */
    cov_10wl53tf1o().f[3]++;
    cov_10wl53tf1o().s[21]++;
    try {
      const list_id =
      /* istanbul ignore next */
      (cov_10wl53tf1o().s[22]++, params.list_id);
      /* istanbul ignore next */
      cov_10wl53tf1o().s[23]++;
      console.log('[CommentResources] Fetching comments for list:', list_id);
      const comments =
      /* istanbul ignore next */
      (cov_10wl53tf1o().s[24]++, await commentsClient.getListComments(list_id));
      /* istanbul ignore next */
      cov_10wl53tf1o().s[25]++;
      console.log('[CommentResources] Got comments:', comments);
      /* istanbul ignore next */
      cov_10wl53tf1o().s[26]++;
      return {
        contents: [{
          uri: uri.toString(),
          mimeType: 'application/json',
          text: JSON.stringify(comments, null, 2)
        }]
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_10wl53tf1o().s[27]++;
      console.error('[CommentResources] Error fetching list comments:', error);
      /* istanbul ignore next */
      cov_10wl53tf1o().s[28]++;
      throw new Error(`Error fetching list comments: ${error.message}`);
    }
  });
  // Register threaded comments resource
  /* istanbul ignore next */
  cov_10wl53tf1o().s[29]++;
  server.resource('threaded-comments', new ResourceTemplate('clickup://comment/{comment_id}/reply', {
    list: undefined
  }), {
    description: 'Get threaded replies to a specific comment, supporting nested discussions and pagination.'
  }, async (uri, params) => {
    /* istanbul ignore next */
    cov_10wl53tf1o().f[4]++;
    cov_10wl53tf1o().s[30]++;
    try {
      const comment_id =
      /* istanbul ignore next */
      (cov_10wl53tf1o().s[31]++, params.comment_id);
      /* istanbul ignore next */
      cov_10wl53tf1o().s[32]++;
      console.log('[CommentResources] Fetching threaded comments for comment:', comment_id);
      const comments =
      /* istanbul ignore next */
      (cov_10wl53tf1o().s[33]++, await commentsClient.getThreadedComments(comment_id));
      /* istanbul ignore next */
      cov_10wl53tf1o().s[34]++;
      console.log('[CommentResources] Got comments:', comments);
      /* istanbul ignore next */
      cov_10wl53tf1o().s[35]++;
      return {
        contents: [{
          uri: uri.toString(),
          mimeType: 'application/json',
          text: JSON.stringify(comments, null, 2)
        }]
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_10wl53tf1o().s[36]++;
      console.error('[CommentResources] Error fetching threaded comments:', error);
      /* istanbul ignore next */
      cov_10wl53tf1o().s[37]++;
      throw new Error(`Error fetching threaded comments: ${error.message}`);
    }
  });
  // Add some example static resources for discoverability
  /* istanbul ignore next */
  cov_10wl53tf1o().s[38]++;
  server.resource('example-task-comments', 'clickup://task/868czp2t3/comments', {
    description: 'An example task comments resource demonstrating the comment data format.'
  }, async uri => {
    /* istanbul ignore next */
    cov_10wl53tf1o().f[5]++;
    cov_10wl53tf1o().s[39]++;
    try {
      const task_id =
      /* istanbul ignore next */
      (cov_10wl53tf1o().s[40]++, '868czp2t3');
      /* istanbul ignore next */
      cov_10wl53tf1o().s[41]++;
      console.log('[CommentResources] Fetching comments for example task:', task_id);
      const comments =
      /* istanbul ignore next */
      (cov_10wl53tf1o().s[42]++, await commentsClient.getTaskComments(task_id));
      /* istanbul ignore next */
      cov_10wl53tf1o().s[43]++;
      console.log('[CommentResources] Got comments:', comments);
      /* istanbul ignore next */
      cov_10wl53tf1o().s[44]++;
      return {
        contents: [{
          uri: uri.toString(),
          mimeType: 'application/json',
          text: JSON.stringify(comments, null, 2)
        }]
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_10wl53tf1o().s[45]++;
      console.error('[CommentResources] Error fetching example task comments:', error);
      /* istanbul ignore next */
      cov_10wl53tf1o().s[46]++;
      throw new Error(`Error fetching example task comments: ${error.message}`);
    }
  });
  /* istanbul ignore next */
  cov_10wl53tf1o().s[47]++;
  server.resource('example-list-comments', 'clickup://list/901109776097/comments', {
    description: 'An example list comments resource demonstrating the comment data format.'
  }, async uri => {
    /* istanbul ignore next */
    cov_10wl53tf1o().f[6]++;
    cov_10wl53tf1o().s[48]++;
    try {
      const list_id =
      /* istanbul ignore next */
      (cov_10wl53tf1o().s[49]++, '901109776097');
      /* istanbul ignore next */
      cov_10wl53tf1o().s[50]++;
      console.log('[CommentResources] Fetching comments for example list:', list_id);
      const comments =
      /* istanbul ignore next */
      (cov_10wl53tf1o().s[51]++, await commentsClient.getListComments(list_id));
      /* istanbul ignore next */
      cov_10wl53tf1o().s[52]++;
      console.log('[CommentResources] Got comments:', comments);
      /* istanbul ignore next */
      cov_10wl53tf1o().s[53]++;
      return {
        contents: [{
          uri: uri.toString(),
          mimeType: 'application/json',
          text: JSON.stringify(comments, null, 2)
        }]
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_10wl53tf1o().s[54]++;
      console.error('[CommentResources] Error fetching example list comments:', error);
      /* istanbul ignore next */
      cov_10wl53tf1o().s[55]++;
      throw new Error(`Error fetching example list comments: ${error.message}`);
    }
  });
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
{"file":"/Users/peterkrzyzek/Development/clickup-mcp-server/src/tests/markdown.test.ts","mappings":"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","names":[],"sources":["/Users/peterkrzyzek/Development/clickup-mcp-server/src/tests/markdown.test.ts"],"sourcesContent":["import {\n  markdownToHtml,\n  htmlToMarkdown,\n  markdownToPlainText,\n  isMarkdown,\n  isHtml,\n  formatContent,\n  prepareContentForClickUp,\n  processClickUpResponse\n} from '../utils/markdown';\n\ndescribe('Markdown Utilities', () => {\n  describe('markdownToHtml', () => {\n    it('should convert basic markdown to HTML', () => {\n      const markdown = '# Header\\n\\n**Bold text** and *italic text*';\n      const html = markdownToHtml(markdown);\n      \n      expect(html).toContain('<h1>Header</h1>');\n      expect(html).toContain('<strong>Bold text</strong>');\n      expect(html).toContain('<em>italic text</em>');\n    });\n\n    it('should handle code blocks', () => {\n      const markdown = '```javascript\\nconst x = 1;\\n```';\n      const html = markdownToHtml(markdown);\n      \n      expect(html).toContain('<pre><code class=\"language-javascript\">');\n      expect(html).toContain('const x = 1;');\n    });\n\n    it('should handle links and lists', () => {\n      const markdown = '- [Link](https://example.com)\\n- Item 2';\n      const html = markdownToHtml(markdown);\n      \n      expect(html).toContain('<ul>');\n      expect(html).toContain('<a href=\"https://example.com\">Link</a>');\n    });\n\n    it('should return empty string for invalid input', () => {\n      expect(markdownToHtml('')).toBe('');\n      expect(markdownToHtml(null as any)).toBe('');\n      expect(markdownToHtml(undefined as any)).toBe('');\n    });\n  });\n\n  describe('htmlToMarkdown', () => {\n    it('should convert basic HTML to markdown', () => {\n      const html = '<h1>Header</h1><p><strong>Bold</strong> and <em>italic</em></p>';\n      const markdown = htmlToMarkdown(html);\n      \n      expect(markdown).toContain('# Header');\n      expect(markdown).toContain('**Bold**');\n      expect(markdown).toContain('*italic*');\n    });\n\n    it('should handle lists and links', () => {\n      const html = '<ul><li><a href=\"https://example.com\">Link</a></li><li>Item 2</li></ul>';\n      const markdown = htmlToMarkdown(html);\n      \n      expect(markdown).toContain('- [Link](https://example.com)');\n      expect(markdown).toContain('- Item 2');\n    });\n\n    it('should return empty string for invalid input', () => {\n      expect(htmlToMarkdown('')).toBe('');\n      expect(htmlToMarkdown(null as any)).toBe('');\n      expect(htmlToMarkdown(undefined as any)).toBe('');\n    });\n  });\n\n  describe('markdownToPlainText', () => {\n    it('should strip markdown formatting', () => {\n      const markdown = '# Header\\n\\n**Bold** and *italic* text with `code`';\n      const plainText = markdownToPlainText(markdown);\n      \n      expect(plainText).not.toContain('#');\n      expect(plainText).not.toContain('**');\n      expect(plainText).not.toContain('*');\n      expect(plainText).not.toContain('`');\n      expect(plainText).toContain('Header');\n      expect(plainText).toContain('Bold');\n      expect(plainText).toContain('italic');\n      expect(plainText).toContain('code');\n    });\n\n    it('should handle links and images', () => {\n      const markdown = '[Link text](https://example.com) and ![Alt text](image.jpg)';\n      const plainText = markdownToPlainText(markdown);\n      \n      expect(plainText).toContain('Link text');\n      expect(plainText).toContain('Alt text');\n      expect(plainText).not.toContain('https://example.com');\n      expect(plainText).not.toContain('image.jpg');\n    });\n  });\n\n  describe('isMarkdown', () => {\n    it('should detect markdown content', () => {\n      expect(isMarkdown('# Header')).toBe(true);\n      expect(isMarkdown('**bold**')).toBe(true);\n      expect(isMarkdown('*italic*')).toBe(true);\n      expect(isMarkdown('`code`')).toBe(true);\n      expect(isMarkdown('[link](url)')).toBe(true);\n      expect(isMarkdown('- list item')).toBe(true);\n      expect(isMarkdown('1. numbered item')).toBe(true);\n      expect(isMarkdown('> blockquote')).toBe(true);\n    });\n\n    it('should not detect plain text as markdown', () => {\n      expect(isMarkdown('Just plain text')).toBe(false);\n      expect(isMarkdown('Some text with numbers 123')).toBe(false);\n      expect(isMarkdown('')).toBe(false);\n      expect(isMarkdown(null as any)).toBe(false);\n    });\n  });\n\n  describe('isHtml', () => {\n    it('should detect HTML content', () => {\n      expect(isHtml('<p>paragraph</p>')).toBe(true);\n      expect(isHtml('<strong>bold</strong>')).toBe(true);\n      expect(isHtml('<a href=\"url\">link</a>')).toBe(true);\n    });\n\n    it('should not detect plain text as HTML', () => {\n      expect(isHtml('Just plain text')).toBe(false);\n      expect(isHtml('Text with < and > symbols')).toBe(false);\n      expect(isHtml('')).toBe(false);\n      expect(isHtml(null as any)).toBe(false);\n    });\n  });\n\n  describe('formatContent', () => {\n    it('should convert markdown to HTML', () => {\n      const markdown = '**bold**';\n      const html = formatContent(markdown, 'html');\n      \n      expect(html).toContain('<strong>bold</strong>');\n    });\n\n    it('should convert HTML to markdown', () => {\n      const html = '<strong>bold</strong>';\n      const markdown = formatContent(html, 'markdown');\n      \n      expect(markdown).toContain('**bold**');\n    });\n\n    it('should convert to plain text', () => {\n      const markdown = '**bold**';\n      const plain = formatContent(markdown, 'plain');\n      \n      expect(plain).toContain('bold');\n      expect(plain).not.toContain('**');\n    });\n  });\n\n  describe('prepareContentForClickUp', () => {\n    it('should prepare markdown content for ClickUp API', () => {\n      const markdown = '# Header\\n\\n**Bold** text';\n      const result = prepareContentForClickUp(markdown);\n      \n      expect(result.description).toContain('<h1>Header</h1>');\n      expect(result.description).toContain('<strong>Bold</strong>');\n      expect(result.text_content).toContain('Header');\n      expect(result.text_content).toContain('Bold');\n      expect(result.text_content).not.toContain('<h1>');\n      expect(result.text_content).not.toContain('**');\n    });\n\n    it('should handle plain text content', () => {\n      const plainText = 'Just plain text';\n      const result = prepareContentForClickUp(plainText);\n      \n      expect(result.description).toBe(plainText);\n      expect(result.text_content).toBe(plainText);\n    });\n\n    it('should handle HTML content', () => {\n      const html = '<p><strong>Bold</strong> text</p>';\n      const result = prepareContentForClickUp(html);\n      \n      expect(result.description).toBe(html);\n      expect(result.text_content).toContain('Bold text');\n      expect(result.text_content).not.toContain('<p>');\n    });\n\n    it('should handle empty content', () => {\n      const result = prepareContentForClickUp('');\n      \n      expect(result.description).toBe('');\n      expect(result.text_content).toBeUndefined();\n    });\n  });\n\n  describe('processClickUpResponse', () => {\n    it('should process task response with HTML description', () => {\n      const response = {\n        id: '123',\n        name: 'Test Task',\n        description: '<h1>Header</h1><p><strong>Bold</strong> text</p>',\n        text_content: 'Header\\nBold text'\n      };\n      \n      const processed = processClickUpResponse(response);\n      \n      expect(processed.description_markdown).toContain('# Header');\n      expect(processed.description_markdown).toContain('**Bold**');\n    });\n\n    it('should process comment response with rich text blocks', () => {\n      const response = {\n        id: '456',\n        comment: ['<p>Comment with <strong>bold</strong> text</p>'],\n        comment_text: 'Comment with bold text'\n      };\n      \n      const processed = processClickUpResponse(response);\n      \n      expect(processed.comment_markdown).toContain('**bold**');\n    });\n\n    it('should handle responses without HTML content', () => {\n      const response = {\n        id: '789',\n        name: 'Plain Task',\n        description: 'Just plain text'\n      };\n      \n      const processed = processClickUpResponse(response);\n      \n      expect(processed.description_markdown).toBeUndefined();\n      expect(processed.description).toBe('Just plain text');\n    });\n\n    it('should handle null/undefined responses', () => {\n      expect(processClickUpResponse(null)).toBe(null);\n      expect(processClickUpResponse(undefined)).toBe(undefined);\n      expect(processClickUpResponse('string')).toBe('string');\n    });\n  });\n\n  describe('GitHub Flavored Markdown Support', () => {\n    it('should support strikethrough', () => {\n      const markdown = '~~strikethrough~~';\n      const html = markdownToHtml(markdown);\n      \n      expect(html).toContain('<del>strikethrough</del>');\n    });\n\n    it('should support tables', () => {\n      const markdown = '| Header 1 | Header 2 |\\n|----------|----------|\\n| Cell 1   | Cell 2   |';\n      const html = markdownToHtml(markdown);\n      \n      expect(html).toContain('<table>');\n      expect(html).toContain('<th>Header 1</th>');\n      expect(html).toContain('<td>Cell 1</td>');\n    });\n\n    it('should support task lists', () => {\n      const markdown = '- [x] Completed task\\n- [ ] Incomplete task';\n      const html = markdownToHtml(markdown);\n      \n      expect(html).toContain('type=\"checkbox\"');\n      expect(html).toContain('checked=\"\"');\n    });\n\n    it('should support fenced code blocks with language', () => {\n      const markdown = '```typescript\\nconst x: number = 1;\\n```';\n      const html = markdownToHtml(markdown);\n      \n      expect(html).toContain('class=\"language-typescript\"');\n      expect(html).toContain('const x: number = 1;');\n    });\n  });\n});\n"],"version":3}
aca726bbb2c918c199dfdb46e6d74deb
/* istanbul ignore next */
function cov_3n8lvdoec() {
  var path = "/Users/peterkrzyzek/Development/clickup-mcp-server/src/tools/task-tools.ts";
  var hash = "ed42d0cc2ec2aa2183853533f953cfd06f522edc";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/peterkrzyzek/Development/clickup-mcp-server/src/tools/task-tools.ts",
    statementMap: {
      "0": {
        start: {
          line: 8,
          column: 22
        },
        end: {
          line: 8,
          column: 43
        }
      },
      "1": {
        start: {
          line: 9,
          column: 20
        },
        end: {
          line: 9,
          column: 52
        }
      },
      "2": {
        start: {
          line: 10,
          column: 20
        },
        end: {
          line: 10,
          column: 52
        }
      },
      "3": {
        start: {
          line: 11,
          column: 22
        },
        end: {
          line: 11,
          column: 56
        }
      },
      "4": {
        start: {
          line: 12,
          column: 19
        },
        end: {
          line: 12,
          column: 50
        }
      },
      "5": {
        start: {
          line: 15,
          column: 4
        },
        end: {
          line: 29,
          column: 7
        }
      },
      "6": {
        start: {
          line: 16,
          column: 8
        },
        end: {
          line: 28,
          column: 9
        }
      },
      "7": {
        start: {
          line: 17,
          column: 27
        },
        end: {
          line: 17,
          column: 75
        }
      },
      "8": {
        start: {
          line: 18,
          column: 12
        },
        end: {
          line: 20,
          column: 14
        }
      },
      "9": {
        start: {
          line: 23,
          column: 12
        },
        end: {
          line: 23,
          column: 67
        }
      },
      "10": {
        start: {
          line: 24,
          column: 12
        },
        end: {
          line: 27,
          column: 14
        }
      },
      "11": {
        start: {
          line: 30,
          column: 4
        },
        end: {
          line: 44,
          column: 7
        }
      },
      "12": {
        start: {
          line: 31,
          column: 8
        },
        end: {
          line: 43,
          column: 9
        }
      },
      "13": {
        start: {
          line: 32,
          column: 27
        },
        end: {
          line: 32,
          column: 59
        }
      },
      "14": {
        start: {
          line: 33,
          column: 12
        },
        end: {
          line: 35,
          column: 14
        }
      },
      "15": {
        start: {
          line: 38,
          column: 12
        },
        end: {
          line: 38,
          column: 62
        }
      },
      "16": {
        start: {
          line: 39,
          column: 12
        },
        end: {
          line: 42,
          column: 14
        }
      },
      "17": {
        start: {
          line: 46,
          column: 4
        },
        end: {
          line: 67,
          column: 7
        }
      },
      "18": {
        start: {
          line: 54,
          column: 8
        },
        end: {
          line: 66,
          column: 9
        }
      },
      "19": {
        start: {
          line: 55,
          column: 27
        },
        end: {
          line: 55,
          column: 78
        }
      },
      "20": {
        start: {
          line: 56,
          column: 12
        },
        end: {
          line: 58,
          column: 14
        }
      },
      "21": {
        start: {
          line: 61,
          column: 12
        },
        end: {
          line: 61,
          column: 57
        }
      },
      "22": {
        start: {
          line: 62,
          column: 12
        },
        end: {
          line: 65,
          column: 14
        }
      },
      "23": {
        start: {
          line: 68,
          column: 4
        },
        end: {
          line: 85,
          column: 7
        }
      },
      "24": {
        start: {
          line: 72,
          column: 8
        },
        end: {
          line: 84,
          column: 9
        }
      },
      "25": {
        start: {
          line: 73,
          column: 25
        },
        end: {
          line: 73,
          column: 81
        }
      },
      "26": {
        start: {
          line: 74,
          column: 12
        },
        end: {
          line: 76,
          column: 14
        }
      },
      "27": {
        start: {
          line: 79,
          column: 12
        },
        end: {
          line: 79,
          column: 64
        }
      },
      "28": {
        start: {
          line: 80,
          column: 12
        },
        end: {
          line: 83,
          column: 14
        }
      },
      "29": {
        start: {
          line: 86,
          column: 4
        },
        end: {
          line: 115,
          column: 7
        }
      },
      "30": {
        start: {
          line: 102,
          column: 8
        },
        end: {
          line: 114,
          column: 9
        }
      },
      "31": {
        start: {
          line: 103,
          column: 27
        },
        end: {
          line: 103,
          column: 76
        }
      },
      "32": {
        start: {
          line: 104,
          column: 12
        },
        end: {
          line: 106,
          column: 14
        }
      },
      "33": {
        start: {
          line: 109,
          column: 12
        },
        end: {
          line: 109,
          column: 57
        }
      },
      "34": {
        start: {
          line: 110,
          column: 12
        },
        end: {
          line: 113,
          column: 14
        }
      },
      "35": {
        start: {
          line: 116,
          column: 4
        },
        end: {
          line: 143,
          column: 7
        }
      },
      "36": {
        start: {
          line: 130,
          column: 8
        },
        end: {
          line: 142,
          column: 9
        }
      },
      "37": {
        start: {
          line: 131,
          column: 27
        },
        end: {
          line: 131,
          column: 76
        }
      },
      "38": {
        start: {
          line: 132,
          column: 12
        },
        end: {
          line: 134,
          column: 14
        }
      },
      "39": {
        start: {
          line: 137,
          column: 12
        },
        end: {
          line: 137,
          column: 57
        }
      },
      "40": {
        start: {
          line: 138,
          column: 12
        },
        end: {
          line: 141,
          column: 14
        }
      },
      "41": {
        start: {
          line: 145,
          column: 4
        },
        end: {
          line: 171,
          column: 7
        }
      },
      "42": {
        start: {
          line: 149,
          column: 8
        },
        end: {
          line: 170,
          column: 9
        }
      },
      "43": {
        start: {
          line: 151,
          column: 12
        },
        end: {
          line: 159,
          column: 13
        }
      },
      "44": {
        start: {
          line: 152,
          column: 16
        },
        end: {
          line: 152,
          column: 78
        }
      },
      "45": {
        start: {
          line: 154,
          column: 17
        },
        end: {
          line: 159,
          column: 13
        }
      },
      "46": {
        start: {
          line: 155,
          column: 16
        },
        end: {
          line: 155,
          column: 75
        }
      },
      "47": {
        start: {
          line: 158,
          column: 16
        },
        end: {
          line: 158,
          column: 89
        }
      },
      "48": {
        start: {
          line: 160,
          column: 12
        },
        end: {
          line: 162,
          column: 14
        }
      },
      "49": {
        start: {
          line: 165,
          column: 12
        },
        end: {
          line: 165,
          column: 80
        }
      },
      "50": {
        start: {
          line: 166,
          column: 12
        },
        end: {
          line: 169,
          column: 14
        }
      },
      "51": {
        start: {
          line: 172,
          column: 4
        },
        end: {
          line: 189,
          column: 7
        }
      },
      "52": {
        start: {
          line: 176,
          column: 8
        },
        end: {
          line: 188,
          column: 9
        }
      },
      "53": {
        start: {
          line: 177,
          column: 27
        },
        end: {
          line: 177,
          column: 79
        }
      },
      "54": {
        start: {
          line: 178,
          column: 12
        },
        end: {
          line: 180,
          column: 14
        }
      },
      "55": {
        start: {
          line: 183,
          column: 12
        },
        end: {
          line: 183,
          column: 59
        }
      },
      "56": {
        start: {
          line: 184,
          column: 12
        },
        end: {
          line: 187,
          column: 14
        }
      },
      "57": {
        start: {
          line: 190,
          column: 4
        },
        end: {
          line: 207,
          column: 7
        }
      },
      "58": {
        start: {
          line: 194,
          column: 8
        },
        end: {
          line: 206,
          column: 9
        }
      },
      "59": {
        start: {
          line: 195,
          column: 27
        },
        end: {
          line: 195,
          column: 80
        }
      },
      "60": {
        start: {
          line: 196,
          column: 12
        },
        end: {
          line: 198,
          column: 14
        }
      },
      "61": {
        start: {
          line: 201,
          column: 12
        },
        end: {
          line: 201,
          column: 59
        }
      },
      "62": {
        start: {
          line: 202,
          column: 12
        },
        end: {
          line: 205,
          column: 14
        }
      },
      "63": {
        start: {
          line: 208,
          column: 4
        },
        end: {
          line: 224,
          column: 7
        }
      },
      "64": {
        start: {
          line: 211,
          column: 8
        },
        end: {
          line: 223,
          column: 9
        }
      },
      "65": {
        start: {
          line: 212,
          column: 27
        },
        end: {
          line: 212,
          column: 70
        }
      },
      "66": {
        start: {
          line: 213,
          column: 12
        },
        end: {
          line: 215,
          column: 14
        }
      },
      "67": {
        start: {
          line: 218,
          column: 12
        },
        end: {
          line: 218,
          column: 59
        }
      },
      "68": {
        start: {
          line: 219,
          column: 12
        },
        end: {
          line: 222,
          column: 14
        }
      },
      "69": {
        start: {
          line: 225,
          column: 4
        },
        end: {
          line: 241,
          column: 7
        }
      },
      "70": {
        start: {
          line: 228,
          column: 8
        },
        end: {
          line: 240,
          column: 9
        }
      },
      "71": {
        start: {
          line: 229,
          column: 27
        },
        end: {
          line: 229,
          column: 72
        }
      },
      "72": {
        start: {
          line: 230,
          column: 12
        },
        end: {
          line: 232,
          column: 14
        }
      },
      "73": {
        start: {
          line: 235,
          column: 12
        },
        end: {
          line: 235,
          column: 68
        }
      },
      "74": {
        start: {
          line: 236,
          column: 12
        },
        end: {
          line: 239,
          column: 14
        }
      },
      "75": {
        start: {
          line: 242,
          column: 4
        },
        end: {
          line: 269,
          column: 7
        }
      },
      "76": {
        start: {
          line: 247,
          column: 8
        },
        end: {
          line: 268,
          column: 9
        }
      },
      "77": {
        start: {
          line: 249,
          column: 12
        },
        end: {
          line: 257,
          column: 13
        }
      },
      "78": {
        start: {
          line: 250,
          column: 16
        },
        end: {
          line: 250,
          column: 86
        }
      },
      "79": {
        start: {
          line: 252,
          column: 17
        },
        end: {
          line: 257,
          column: 13
        }
      },
      "80": {
        start: {
          line: 253,
          column: 16
        },
        end: {
          line: 253,
          column: 88
        }
      },
      "81": {
        start: {
          line: 256,
          column: 16
        },
        end: {
          line: 256,
          column: 89
        }
      },
      "82": {
        start: {
          line: 258,
          column: 12
        },
        end: {
          line: 260,
          column: 14
        }
      },
      "83": {
        start: {
          line: 263,
          column: 12
        },
        end: {
          line: 263,
          column: 78
        }
      },
      "84": {
        start: {
          line: 264,
          column: 12
        },
        end: {
          line: 267,
          column: 14
        }
      },
      "85": {
        start: {
          line: 270,
          column: 4
        },
        end: {
          line: 287,
          column: 7
        }
      },
      "86": {
        start: {
          line: 274,
          column: 8
        },
        end: {
          line: 286,
          column: 9
        }
      },
      "87": {
        start: {
          line: 275,
          column: 27
        },
        end: {
          line: 275,
          column: 85
        }
      },
      "88": {
        start: {
          line: 276,
          column: 12
        },
        end: {
          line: 278,
          column: 14
        }
      },
      "89": {
        start: {
          line: 281,
          column: 12
        },
        end: {
          line: 281,
          column: 68
        }
      },
      "90": {
        start: {
          line: 282,
          column: 12
        },
        end: {
          line: 285,
          column: 14
        }
      },
      "91": {
        start: {
          line: 288,
          column: 4
        },
        end: {
          line: 304,
          column: 7
        }
      },
      "92": {
        start: {
          line: 291,
          column: 8
        },
        end: {
          line: 303,
          column: 9
        }
      },
      "93": {
        start: {
          line: 292,
          column: 27
        },
        end: {
          line: 292,
          column: 61
        }
      },
      "94": {
        start: {
          line: 293,
          column: 12
        },
        end: {
          line: 295,
          column: 14
        }
      },
      "95": {
        start: {
          line: 298,
          column: 12
        },
        end: {
          line: 298,
          column: 56
        }
      },
      "96": {
        start: {
          line: 299,
          column: 12
        },
        end: {
          line: 302,
          column: 14
        }
      },
      "97": {
        start: {
          line: 305,
          column: 4
        },
        end: {
          line: 322,
          column: 7
        }
      },
      "98": {
        start: {
          line: 309,
          column: 8
        },
        end: {
          line: 321,
          column: 9
        }
      },
      "99": {
        start: {
          line: 310,
          column: 27
        },
        end: {
          line: 310,
          column: 74
        }
      },
      "100": {
        start: {
          line: 311,
          column: 12
        },
        end: {
          line: 313,
          column: 14
        }
      },
      "101": {
        start: {
          line: 316,
          column: 12
        },
        end: {
          line: 316,
          column: 57
        }
      },
      "102": {
        start: {
          line: 317,
          column: 12
        },
        end: {
          line: 320,
          column: 14
        }
      },
      "103": {
        start: {
          line: 323,
          column: 4
        },
        end: {
          line: 339,
          column: 7
        }
      },
      "104": {
        start: {
          line: 326,
          column: 8
        },
        end: {
          line: 338,
          column: 9
        }
      },
      "105": {
        start: {
          line: 327,
          column: 27
        },
        end: {
          line: 327,
          column: 64
        }
      },
      "106": {
        start: {
          line: 328,
          column: 12
        },
        end: {
          line: 330,
          column: 14
        }
      },
      "107": {
        start: {
          line: 333,
          column: 12
        },
        end: {
          line: 333,
          column: 57
        }
      },
      "108": {
        start: {
          line: 334,
          column: 12
        },
        end: {
          line: 337,
          column: 14
        }
      },
      "109": {
        start: {
          line: 340,
          column: 4
        },
        end: {
          line: 357,
          column: 7
        }
      },
      "110": {
        start: {
          line: 344,
          column: 8
        },
        end: {
          line: 356,
          column: 9
        }
      },
      "111": {
        start: {
          line: 345,
          column: 27
        },
        end: {
          line: 345,
          column: 76
        }
      },
      "112": {
        start: {
          line: 346,
          column: 12
        },
        end: {
          line: 348,
          column: 14
        }
      },
      "113": {
        start: {
          line: 351,
          column: 12
        },
        end: {
          line: 351,
          column: 63
        }
      },
      "114": {
        start: {
          line: 352,
          column: 12
        },
        end: {
          line: 355,
          column: 14
        }
      },
      "115": {
        start: {
          line: 358,
          column: 4
        },
        end: {
          line: 375,
          column: 7
        }
      },
      "116": {
        start: {
          line: 362,
          column: 8
        },
        end: {
          line: 374,
          column: 9
        }
      },
      "117": {
        start: {
          line: 363,
          column: 27
        },
        end: {
          line: 363,
          column: 81
        }
      },
      "118": {
        start: {
          line: 364,
          column: 12
        },
        end: {
          line: 366,
          column: 14
        }
      },
      "119": {
        start: {
          line: 369,
          column: 12
        },
        end: {
          line: 369,
          column: 67
        }
      },
      "120": {
        start: {
          line: 370,
          column: 12
        },
        end: {
          line: 373,
          column: 14
        }
      },
      "121": {
        start: {
          line: 376,
          column: 4
        },
        end: {
          line: 394,
          column: 7
        }
      },
      "122": {
        start: {
          line: 381,
          column: 8
        },
        end: {
          line: 393,
          column: 9
        }
      },
      "123": {
        start: {
          line: 382,
          column: 27
        },
        end: {
          line: 382,
          column: 109
        }
      },
      "124": {
        start: {
          line: 383,
          column: 12
        },
        end: {
          line: 385,
          column: 14
        }
      },
      "125": {
        start: {
          line: 388,
          column: 12
        },
        end: {
          line: 388,
          column: 81
        }
      },
      "126": {
        start: {
          line: 389,
          column: 12
        },
        end: {
          line: 392,
          column: 14
        }
      },
      "127": {
        start: {
          line: 395,
          column: 4
        },
        end: {
          line: 413,
          column: 7
        }
      },
      "128": {
        start: {
          line: 400,
          column: 8
        },
        end: {
          line: 412,
          column: 9
        }
      },
      "129": {
        start: {
          line: 401,
          column: 27
        },
        end: {
          line: 401,
          column: 107
        }
      },
      "130": {
        start: {
          line: 402,
          column: 12
        },
        end: {
          line: 404,
          column: 14
        }
      },
      "131": {
        start: {
          line: 407,
          column: 12
        },
        end: {
          line: 407,
          column: 80
        }
      },
      "132": {
        start: {
          line: 408,
          column: 12
        },
        end: {
          line: 411,
          column: 14
        }
      }
    },
    fnMap: {
      "0": {
        name: "setupTaskTools",
        decl: {
          start: {
            line: 13,
            column: 16
          },
          end: {
            line: 13,
            column: 30
          }
        },
        loc: {
          start: {
            line: 13,
            column: 39
          },
          end: {
            line: 414,
            column: 1
          }
        },
        line: 13
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 15,
            column: 261
          },
          end: {
            line: 15,
            column: 262
          }
        },
        loc: {
          start: {
            line: 15,
            column: 289
          },
          end: {
            line: 29,
            column: 5
          }
        },
        line: 15
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 30,
            column: 160
          },
          end: {
            line: 30,
            column: 161
          }
        },
        loc: {
          start: {
            line: 30,
            column: 172
          },
          end: {
            line: 44,
            column: 5
          }
        },
        line: 30
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 53,
            column: 7
          },
          end: {
            line: 53,
            column: 8
          }
        },
        loc: {
          start: {
            line: 53,
            column: 41
          },
          end: {
            line: 67,
            column: 5
          }
        },
        line: 53
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 71,
            column: 7
          },
          end: {
            line: 71,
            column: 8
          }
        },
        loc: {
          start: {
            line: 71,
            column: 48
          },
          end: {
            line: 85,
            column: 5
          }
        },
        line: 71
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 101,
            column: 7
          },
          end: {
            line: 101,
            column: 8
          }
        },
        loc: {
          start: {
            line: 101,
            column: 45
          },
          end: {
            line: 115,
            column: 5
          }
        },
        line: 101
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 129,
            column: 7
          },
          end: {
            line: 129,
            column: 8
          }
        },
        loc: {
          start: {
            line: 129,
            column: 45
          },
          end: {
            line: 143,
            column: 5
          }
        },
        line: 129
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 148,
            column: 7
          },
          end: {
            line: 148,
            column: 8
          }
        },
        loc: {
          start: {
            line: 148,
            column: 51
          },
          end: {
            line: 171,
            column: 5
          }
        },
        line: 148
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 175,
            column: 7
          },
          end: {
            line: 175,
            column: 8
          }
        },
        loc: {
          start: {
            line: 175,
            column: 37
          },
          end: {
            line: 189,
            column: 5
          }
        },
        line: 175
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 193,
            column: 7
          },
          end: {
            line: 193,
            column: 8
          }
        },
        loc: {
          start: {
            line: 193,
            column: 38
          },
          end: {
            line: 207,
            column: 5
          }
        },
        line: 193
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 210,
            column: 7
          },
          end: {
            line: 210,
            column: 8
          }
        },
        loc: {
          start: {
            line: 210,
            column: 32
          },
          end: {
            line: 224,
            column: 5
          }
        },
        line: 210
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 227,
            column: 7
          },
          end: {
            line: 227,
            column: 8
          }
        },
        loc: {
          start: {
            line: 227,
            column: 31
          },
          end: {
            line: 241,
            column: 5
          }
        },
        line: 227
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 246,
            column: 7
          },
          end: {
            line: 246,
            column: 8
          }
        },
        loc: {
          start: {
            line: 246,
            column: 57
          },
          end: {
            line: 269,
            column: 5
          }
        },
        line: 246
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 273,
            column: 7
          },
          end: {
            line: 273,
            column: 8
          }
        },
        loc: {
          start: {
            line: 273,
            column: 37
          },
          end: {
            line: 287,
            column: 5
          }
        },
        line: 273
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 290,
            column: 7
          },
          end: {
            line: 290,
            column: 8
          }
        },
        loc: {
          start: {
            line: 290,
            column: 30
          },
          end: {
            line: 304,
            column: 5
          }
        },
        line: 290
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 308,
            column: 7
          },
          end: {
            line: 308,
            column: 8
          }
        },
        loc: {
          start: {
            line: 308,
            column: 36
          },
          end: {
            line: 322,
            column: 5
          }
        },
        line: 308
      },
      "16": {
        name: "(anonymous_16)",
        decl: {
          start: {
            line: 325,
            column: 7
          },
          end: {
            line: 325,
            column: 8
          }
        },
        loc: {
          start: {
            line: 325,
            column: 30
          },
          end: {
            line: 339,
            column: 5
          }
        },
        line: 325
      },
      "17": {
        name: "(anonymous_17)",
        decl: {
          start: {
            line: 343,
            column: 7
          },
          end: {
            line: 343,
            column: 8
          }
        },
        loc: {
          start: {
            line: 343,
            column: 39
          },
          end: {
            line: 357,
            column: 5
          }
        },
        line: 343
      },
      "18": {
        name: "(anonymous_18)",
        decl: {
          start: {
            line: 361,
            column: 7
          },
          end: {
            line: 361,
            column: 8
          }
        },
        loc: {
          start: {
            line: 361,
            column: 39
          },
          end: {
            line: 375,
            column: 5
          }
        },
        line: 361
      },
      "19": {
        name: "(anonymous_19)",
        decl: {
          start: {
            line: 380,
            column: 7
          },
          end: {
            line: 380,
            column: 8
          }
        },
        loc: {
          start: {
            line: 380,
            column: 51
          },
          end: {
            line: 394,
            column: 5
          }
        },
        line: 380
      },
      "20": {
        name: "(anonymous_20)",
        decl: {
          start: {
            line: 399,
            column: 7
          },
          end: {
            line: 399,
            column: 8
          }
        },
        loc: {
          start: {
            line: 399,
            column: 50
          },
          end: {
            line: 413,
            column: 5
          }
        },
        line: 399
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 151,
            column: 12
          },
          end: {
            line: 159,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 151,
            column: 12
          },
          end: {
            line: 159,
            column: 13
          }
        }, {
          start: {
            line: 154,
            column: 17
          },
          end: {
            line: 159,
            column: 13
          }
        }],
        line: 151
      },
      "1": {
        loc: {
          start: {
            line: 154,
            column: 17
          },
          end: {
            line: 159,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 154,
            column: 17
          },
          end: {
            line: 159,
            column: 13
          }
        }, {
          start: {
            line: 157,
            column: 17
          },
          end: {
            line: 159,
            column: 13
          }
        }],
        line: 154
      },
      "2": {
        loc: {
          start: {
            line: 249,
            column: 12
          },
          end: {
            line: 257,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 249,
            column: 12
          },
          end: {
            line: 257,
            column: 13
          }
        }, {
          start: {
            line: 252,
            column: 17
          },
          end: {
            line: 257,
            column: 13
          }
        }],
        line: 249
      },
      "3": {
        loc: {
          start: {
            line: 252,
            column: 17
          },
          end: {
            line: 257,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 252,
            column: 17
          },
          end: {
            line: 257,
            column: 13
          }
        }, {
          start: {
            line: 255,
            column: 17
          },
          end: {
            line: 257,
            column: 13
          }
        }],
        line: 252
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0,
      "105": 0,
      "106": 0,
      "107": 0,
      "108": 0,
      "109": 0,
      "110": 0,
      "111": 0,
      "112": 0,
      "113": 0,
      "114": 0,
      "115": 0,
      "116": 0,
      "117": 0,
      "118": 0,
      "119": 0,
      "120": 0,
      "121": 0,
      "122": 0,
      "123": 0,
      "124": 0,
      "125": 0,
      "126": 0,
      "127": 0,
      "128": 0,
      "129": 0,
      "130": 0,
      "131": 0,
      "132": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0]
    },
    inputSourceMap: {
      file: "/Users/peterkrzyzek/Development/clickup-mcp-server/src/tools/task-tools.ts",
      mappings: "AACA,OAAO,EAAE,CAAC,EAAE,MAAM,KAAK,CAAC;AACxB,OAAO,EAAE,mBAAmB,EAAE,MAAM,4BAA4B,CAAC;AACjE,OAAO,EAAE,iBAAiB,EAAsC,MAAM,4BAA4B,CAAC;AACnG,OAAO,EAAE,iBAAiB,EAAE,MAAM,4BAA4B,CAAC;AAC/D,OAAO,EAAE,mBAAmB,EAAE,MAAM,8BAA8B,CAAC;AACnE,OAAO,EAAE,gBAAgB,EAAE,MAAM,2BAA2B,CAAC;AAE7D,iBAAiB;AACjB,MAAM,aAAa,GAAG,mBAAmB,EAAE,CAAC;AAC5C,MAAM,WAAW,GAAG,iBAAiB,CAAC,aAAa,CAAC,CAAC;AACrD,MAAM,WAAW,GAAG,iBAAiB,CAAC,aAAa,CAAC,CAAC;AACrD,MAAM,aAAa,GAAG,mBAAmB,CAAC,aAAa,CAAC,CAAC;AACzD,MAAM,UAAU,GAAG,gBAAgB,CAAC,aAAa,CAAC,CAAC;AAEnD,MAAM,UAAU,cAAc,CAAC,MAAiB;IAC9C,2BAA2B;IAC3B,MAAM,CAAC,IAAI,CACT,qBAAqB,EACrB,6HAA6H,EAC7H,EAAE,YAAY,EAAE,CAAC,CAAC,MAAM,EAAE,CAAC,QAAQ,CAAC,sDAAsD,CAAC,EAAE,EAC7F,KAAK,EAAE,EAAE,YAAY,EAAE,EAAE,EAAE;QACzB,IAAI,CAAC;YACH,MAAM,MAAM,GAAG,MAAM,UAAU,CAAC,iBAAiB,CAAC,YAAY,CAAC,CAAC;YAChE,OAAO;gBACL,OAAO,EAAE,CAAC,EAAE,IAAI,EAAE,MAAM,EAAE,IAAI,EAAE,IAAI,CAAC,SAAS,CAAC,MAAM,EAAE,IAAI,EAAE,CAAC,CAAC,EAAE,CAAC;aACnE,CAAC;QACJ,CAAC;QAAC,OAAO,KAAU,EAAE,CAAC;YACpB,OAAO,CAAC,KAAK,CAAC,gCAAgC,EAAE,KAAK,CAAC,CAAC;YACvD,OAAO;gBACL,OAAO,EAAE,CAAC,EAAE,IAAI,EAAE,MAAM,EAAE,IAAI,EAAE,kCAAkC,KAAK,CAAC,OAAO,EAAE,EAAE,CAAC;gBACpF,OAAO,EAAE,IAAI;aACd,CAAC;QACJ,CAAC;IACH,CAAC,CACF,CAAC;IAEF,MAAM,CAAC,IAAI,CACT,gBAAgB,EAChB,wHAAwH,EACxH,EAAE,EACF,KAAK,IAAI,EAAE;QACT,IAAI,CAAC;YACH,MAAM,MAAM,GAAG,MAAM,UAAU,CAAC,aAAa,EAAE,CAAC;YAChD,OAAO;gBACL,OAAO,EAAE,CAAC,EAAE,IAAI,EAAE,MAAM,EAAE,IAAI,EAAE,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,KAAK,EAAE,IAAI,EAAE,CAAC,CAAC,EAAE,CAAC;aACzE,CAAC;QACJ,CAAC;QAAC,OAAO,KAAU,EAAE,CAAC;YACpB,OAAO,CAAC,KAAK,CAAC,2BAA2B,EAAE,KAAK,CAAC,CAAC;YAClD,OAAO;gBACL,OAAO,EAAE,CAAC,EAAE,IAAI,EAAE,MAAM,EAAE,IAAI,EAAE,6BAA6B,KAAK,CAAC,OAAO,EAAE,EAAE,CAAC;gBAC/E,OAAO,EAAE,IAAI;aACd,CAAC;QACJ,CAAC;IACH,CAAC,CACF,CAAC;IAEF,aAAa;IACb,MAAM,CAAC,IAAI,CACT,WAAW,EACX,yGAAyG,EACzG;QACE,OAAO,EAAE,CAAC,CAAC,MAAM,EAAE,CAAC,QAAQ,CAAC,sCAAsC,CAAC;QACpE,cAAc,EAAE,CAAC,CAAC,OAAO,EAAE,CAAC,QAAQ,EAAE,CAAC,QAAQ,CAAC,iCAAiC,CAAC;QAClF,QAAQ,EAAE,CAAC,CAAC,OAAO,EAAE,CAAC,QAAQ,EAAE,CAAC,QAAQ,CAAC,4CAA4C,CAAC;QACvF,IAAI,EAAE,CAAC,CAAC,MAAM,EAAE,CAAC,QAAQ,EAAE,CAAC,QAAQ,CAAC,wBAAwB,CAAC;QAC9D,QAAQ,EAAE,CAAC,CAAC,MAAM,EAAE,CAAC,QAAQ,EAAE,CAAC,QAAQ,CAAC,uBAAuB,CAAC;QACjE,OAAO,EAAE,CAAC,CAAC,OAAO,EAAE,CAAC,QAAQ,EAAE,CAAC,QAAQ,CAAC,8BAA8B,CAAC;KACzE,EACD,KAAK,EAAE,EAAE,OAAO,EAAE,GAAG,MAAM,EAAE,EAAE,EAAE;QAC/B,IAAI,CAAC;YACH,MAAM,MAAM,GAAG,MAAM,WAAW,CAAC,gBAAgB,CAAC,OAAO,EAAE,MAAM,CAAC,CAAC;YACnE,OAAO;gBACL,OAAO,EAAE,CAAC,EAAE,IAAI,EAAE,MAAM,EAAE,IAAI,EAAE,IAAI,CAAC,SAAS,CAAC,MAAM,EAAE,IAAI,EAAE,CAAC,CAAC,EAAE,CAAC;aACnE,CAAC;QACJ,CAAC;QAAC,OAAO,KAAU,EAAE,CAAC;YACpB,OAAO,CAAC,KAAK,CAAC,sBAAsB,EAAE,KAAK,CAAC,CAAC;YAC7C,OAAO;gBACL,OAAO,EAAE,CAAC,EAAE,IAAI,EAAE,MAAM,EAAE,IAAI,EAAE,wBAAwB,KAAK,CAAC,OAAO,EAAE,EAAE,CAAC;gBAC1E,OAAO,EAAE,IAAI;aACd,CAAC;QACJ,CAAC;IACH,CAAC,CACF,CAAC;IAEF,MAAM,CAAC,IAAI,CACT,kBAAkB,EAClB,8IAA8I,EAC9I;QACE,OAAO,EAAE,CAAC,CAAC,MAAM,EAAE,CAAC,QAAQ,CAAC,2BAA2B,CAAC;QACzD,gBAAgB,EAAE,CAAC,CAAC,OAAO,EAAE,CAAC,QAAQ,EAAE,CAAC,QAAQ,CAAC,iDAAiD,CAAC;KACrG,EACD,KAAK,EAAE,EAAE,OAAO,EAAE,gBAAgB,EAAE,EAAE,EAAE;QACtC,IAAI,CAAC;YACH,MAAM,IAAI,GAAG,MAAM,WAAW,CAAC,OAAO,CAAC,OAAO,EAAE,EAAE,gBAAgB,EAAE,CAAC,CAAC;YACtE,OAAO;gBACL,OAAO,EAAE,CAAC,EAAE,IAAI,EAAE,MAAM,EAAE,IAAI,EAAE,IAAI,CAAC,SAAS,CAAC,IAAI,EAAE,IAAI,EAAE,CAAC,CAAC,EAAE,CAAC;aACjE,CAAC;QACJ,CAAC;QAAC,OAAO,KAAU,EAAE,CAAC;YACpB,OAAO,CAAC,KAAK,CAAC,6BAA6B,EAAE,KAAK,CAAC,CAAC;YACpD,OAAO;gBACL,OAAO,EAAE,CAAC,EAAE,IAAI,EAAE,MAAM,EAAE,IAAI,EAAE,+BAA+B,KAAK,CAAC,OAAO,EAAE,EAAE,CAAC;gBACjF,OAAO,EAAE,IAAI;aACd,CAAC;QACJ,CAAC;IACH,CAAC,CACF,CAAC;IAEF,MAAM,CAAC,IAAI,CACT,aAAa,EACb,6KAA6K,EAC7K;QACE,OAAO,EAAE,CAAC,CAAC,MAAM,EAAE,CAAC,QAAQ,CAAC,0CAA0C,CAAC;QACxE,IAAI,EAAE,CAAC,CAAC,MAAM,EAAE,CAAC,QAAQ,CAAC,sBAAsB,CAAC;QACjD,WAAW,EAAE,CAAC,CAAC,MAAM,EAAE,CAAC,QAAQ,EAAE,CAAC,QAAQ,CAAC,kIAAkI,CAAC;QAC/K,SAAS,EAAE,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,MAAM,EAAE,CAAC,CAAC,QAAQ,EAAE,CAAC,QAAQ,CAAC,4CAA4C,CAAC;QAChG,IAAI,EAAE,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,MAAM,EAAE,CAAC,CAAC,QAAQ,EAAE,CAAC,QAAQ,CAAC,6BAA6B,CAAC;QAC5E,MAAM,EAAE,CAAC,CAAC,MAAM,EAAE,CAAC,QAAQ,EAAE,CAAC,QAAQ,CAAC,wBAAwB,CAAC;QAChE,QAAQ,EAAE,CAAC,CAAC,MAAM,EAAE,CAAC,QAAQ,EAAE,CAAC,QAAQ,CAAC,gCAAgC,CAAC;QAC1E,QAAQ,EAAE,CAAC,CAAC,MAAM,EAAE,CAAC,QAAQ,EAAE,CAAC,QAAQ,CAAC,2CAA2C,CAAC;QACrF,aAAa,EAAE,CAAC,CAAC,OAAO,EAAE,CAAC,QAAQ,EAAE,CAAC,QAAQ,CAAC,sCAAsC,CAAC;QACtF,aAAa,EAAE,CAAC,CAAC,MAAM,EAAE,CAAC,QAAQ,EAAE,CAAC,QAAQ,CAAC,kDAAkD,CAAC;QACjG,UAAU,EAAE,CAAC,CAAC,MAAM,EAAE,CAAC,QAAQ,EAAE,CAAC,QAAQ,CAAC,6CAA6C,CAAC;QACzF,eAAe,EAAE,CAAC,CAAC,OAAO,EAAE,CAAC,QAAQ,EAAE,CAAC,QAAQ,CAAC,wCAAwC,CAAC;QAC1F,UAAU,EAAE,CAAC,CAAC,OAAO,EAAE,CAAC,QAAQ,EAAE,CAAC,QAAQ,CAAC,iCAAiC,CAAC;QAC9E,MAAM,EAAE,CAAC,CAAC,MAAM,EAAE,CAAC,QAAQ,EAAE,CAAC,QAAQ,CAAC,2BAA2B,CAAC;KACpE,EACD,KAAK,EAAE,EAAE,OAAO,EAAE,GAAG,UAAU,EAAE,EAAE,EAAE;QACnC,IAAI,CAAC;YACH,MAAM,MAAM,GAAG,MAAM,WAAW,CAAC,UAAU,CAAC,OAAO,EAAE,UAA8B,CAAC,CAAC;YACrF,OAAO;gBACL,OAAO,EAAE,CAAC,EAAE,IAAI,EAAE,MAAM,EAAE,IAAI,EAAE,IAAI,CAAC,SAAS,CAAC,MAAM,EAAE,IAAI,EAAE,CAAC,CAAC,EAAE,CAAC;aACnE,CAAC;QACJ,CAAC;QAAC,OAAO,KAAU,EAAE,CAAC;YACpB,OAAO,CAAC,KAAK,CAAC,sBAAsB,EAAE,KAAK,CAAC,CAAC;YAC7C,OAAO;gBACL,OAAO,EAAE,CAAC,EAAE,IAAI,EAAE,MAAM,EAAE,IAAI,EAAE,wBAAwB,KAAK,CAAC,OAAO,EAAE,EAAE,CAAC;gBAC1E,OAAO,EAAE,IAAI;aACd,CAAC;QACJ,CAAC;IACH,CAAC,CACF,CAAC;IAEF,MAAM,CAAC,IAAI,CACT,aAAa,EACb,kKAAkK,EAClK;QACE,OAAO,EAAE,CAAC,CAAC,MAAM,EAAE,CAAC,QAAQ,CAAC,8BAA8B,CAAC;QAC5D,IAAI,EAAE,CAAC,CAAC,MAAM,EAAE,CAAC,QAAQ,EAAE,CAAC,QAAQ,CAAC,0BAA0B,CAAC;QAChE,WAAW,EAAE,CAAC,CAAC,MAAM,EAAE,CAAC,QAAQ,EAAE,CAAC,QAAQ,CAAC,sIAAsI,CAAC;QACnL,SAAS,EAAE,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,MAAM,EAAE,CAAC,CAAC,QAAQ,EAAE,CAAC,QAAQ,CAAC,4CAA4C,CAAC;QAChG,MAAM,EAAE,CAAC,CAAC,MAAM,EAAE,CAAC,QAAQ,EAAE,CAAC,QAAQ,CAAC,4BAA4B,CAAC;QACpE,QAAQ,EAAE,CAAC,CAAC,MAAM,EAAE,CAAC,QAAQ,EAAE,CAAC,QAAQ,CAAC,oCAAoC,CAAC;QAC9E,QAAQ,EAAE,CAAC,CAAC,MAAM,EAAE,CAAC,QAAQ,EAAE,CAAC,QAAQ,CAAC,+CAA+C,CAAC;QACzF,aAAa,EAAE,CAAC,CAAC,OAAO,EAAE,CAAC,QAAQ,EAAE,CAAC,QAAQ,CAAC,sCAAsC,CAAC;QACtF,aAAa,EAAE,CAAC,CAAC,MAAM,EAAE,CAAC,QAAQ,EAAE,CAAC,QAAQ,CAAC,sDAAsD,CAAC;QACrG,UAAU,EAAE,CAAC,CAAC,MAAM,EAAE,CAAC,QAAQ,EAAE,CAAC,QAAQ,CAAC,iDAAiD,CAAC;QAC7F,eAAe,EAAE,CAAC,CAAC,OAAO,EAAE,CAAC,QAAQ,EAAE,CAAC,QAAQ,CAAC,wCAAwC,CAAC;QAC1F,UAAU,EAAE,CAAC,CAAC,OAAO,EAAE,CAAC,QAAQ,EAAE,CAAC,QAAQ,CAAC,iCAAiC,CAAC;KAC/E,EACD,KAAK,EAAE,EAAE,OAAO,EAAE,GAAG,UAAU,EAAE,EAAE,EAAE;QACnC,IAAI,CAAC;YACH,MAAM,MAAM,GAAG,MAAM,WAAW,CAAC,UAAU,CAAC,OAAO,EAAE,UAA8B,CAAC,CAAC;YACrF,OAAO;gBACL,OAAO,EAAE,CAAC,EAAE,IAAI,EAAE,MAAM,EAAE,IAAI,EAAE,IAAI,CAAC,SAAS,CAAC,MAAM,EAAE,IAAI,EAAE,CAAC,CAAC,EAAE,CAAC;aACnE,CAAC;QACJ,CAAC;QAAC,OAAO,KAAU,EAAE,CAAC;YACpB,OAAO,CAAC,KAAK,CAAC,sBAAsB,EAAE,KAAK,CAAC,CAAC;YAC7C,OAAO;gBACL,OAAO,EAAE,CAAC,EAAE,IAAI,EAAE,MAAM,EAAE,IAAI,EAAE,wBAAwB,KAAK,CAAC,OAAO,EAAE,EAAE,CAAC;gBAC1E,OAAO,EAAE,IAAI;aACd,CAAC;QACJ,CAAC;IACH,CAAC,CACF,CAAC;IAEF,wBAAwB;IACxB,MAAM,CAAC,IAAI,CACT,WAAW,EACX,4FAA4F,EAC5F;QACE,cAAc,EAAE,CAAC,CAAC,IAAI,CAAC,CAAC,QAAQ,EAAE,OAAO,CAAC,CAAC,CAAC,QAAQ,CAAC,yCAAyC,CAAC;QAC/F,YAAY,EAAE,CAAC,CAAC,MAAM,EAAE,CAAC,QAAQ,CAAC,2CAA2C,CAAC;KAC/E,EACD,KAAK,EAAE,EAAE,cAAc,EAAE,YAAY,EAAE,EAAE,EAAE;QACzC,IAAI,CAAC;YACH,IAAI,MAAM,CAAC;YACX,IAAI,cAAc,KAAK,QAAQ,EAAE,CAAC;gBAChC,MAAM,GAAG,MAAM,aAAa,CAAC,kBAAkB,CAAC,YAAY,CAAC,CAAC;YAChE,CAAC;iBAAM,IAAI,cAAc,KAAK,OAAO,EAAE,CAAC;gBACtC,MAAM,GAAG,MAAM,WAAW,CAAC,iBAAiB,CAAC,YAAY,CAAC,CAAC;YAC7D,CAAC;iBAAM,CAAC;gBACN,MAAM,IAAI,KAAK,CAAC,uDAAuD,CAAC,CAAC;YAC3E,CAAC;YAED,OAAO;gBACL,OAAO,EAAE,CAAC,EAAE,IAAI,EAAE,MAAM,EAAE,IAAI,EAAE,IAAI,CAAC,SAAS,CAAC,MAAM,EAAE,IAAI,EAAE,CAAC,CAAC,EAAE,CAAC;aACnE,CAAC;QACJ,CAAC;QAAC,OAAO,KAAU,EAAE,CAAC;YACpB,OAAO,CAAC,KAAK,CAAC,4BAA4B,cAAc,GAAG,EAAE,KAAK,CAAC,CAAC;YACpE,OAAO;gBACL,OAAO,EAAE,CAAC,EAAE,IAAI,EAAE,MAAM,EAAE,IAAI,EAAE,wBAAwB,KAAK,CAAC,OAAO,EAAE,EAAE,CAAC;gBAC1E,OAAO,EAAE,IAAI;aACd,CAAC;QACJ,CAAC;IACH,CAAC,CACF,CAAC;IAEF,MAAM,CAAC,IAAI,CACT,eAAe,EACf,iEAAiE,EACjE;QACE,QAAQ,EAAE,CAAC,CAAC,MAAM,EAAE,CAAC,QAAQ,CAAC,6CAA6C,CAAC;QAC5E,IAAI,EAAE,CAAC,CAAC,MAAM,EAAE,CAAC,QAAQ,CAAC,wBAAwB,CAAC;KACpD,EACD,KAAK,EAAE,EAAE,QAAQ,EAAE,IAAI,EAAE,EAAE,EAAE;QAC3B,IAAI,CAAC;YACH,MAAM,MAAM,GAAG,MAAM,aAAa,CAAC,YAAY,CAAC,QAAQ,EAAE,EAAE,IAAI,EAAE,CAAC,CAAC;YACpE,OAAO;gBACL,OAAO,EAAE,CAAC,EAAE,IAAI,EAAE,MAAM,EAAE,IAAI,EAAE,IAAI,CAAC,SAAS,CAAC,MAAM,EAAE,IAAI,EAAE,CAAC,CAAC,EAAE,CAAC;aACnE,CAAC;QACJ,CAAC;QAAC,OAAO,KAAU,EAAE,CAAC;YACpB,OAAO,CAAC,KAAK,CAAC,wBAAwB,EAAE,KAAK,CAAC,CAAC;YAC/C,OAAO;gBACL,OAAO,EAAE,CAAC,EAAE,IAAI,EAAE,MAAM,EAAE,IAAI,EAAE,0BAA0B,KAAK,CAAC,OAAO,EAAE,EAAE,CAAC;gBAC5E,OAAO,EAAE,IAAI;aACd,CAAC;QACJ,CAAC;IACH,CAAC,CACF,CAAC;IAEF,MAAM,CAAC,IAAI,CACT,eAAe,EACf,4CAA4C,EAC5C;QACE,SAAS,EAAE,CAAC,CAAC,MAAM,EAAE,CAAC,QAAQ,CAAC,gCAAgC,CAAC;QAChE,IAAI,EAAE,CAAC,CAAC,MAAM,EAAE,CAAC,QAAQ,CAAC,4BAA4B,CAAC;KACxD,EACD,KAAK,EAAE,EAAE,SAAS,EAAE,IAAI,EAAE,EAAE,EAAE;QAC5B,IAAI,CAAC;YACH,MAAM,MAAM,GAAG,MAAM,aAAa,CAAC,YAAY,CAAC,SAAS,EAAE,EAAE,IAAI,EAAE,CAAC,CAAC;YACrE,OAAO;gBACL,OAAO,EAAE,CAAC,EAAE,IAAI,EAAE,MAAM,EAAE,IAAI,EAAE,IAAI,CAAC,SAAS,CAAC,MAAM,EAAE,IAAI,EAAE,CAAC,CAAC,EAAE,CAAC;aACnE,CAAC;QACJ,CAAC;QAAC,OAAO,KAAU,EAAE,CAAC;YACpB,OAAO,CAAC,KAAK,CAAC,wBAAwB,EAAE,KAAK,CAAC,CAAC;YAC/C,OAAO;gBACL,OAAO,EAAE,CAAC,EAAE,IAAI,EAAE,MAAM,EAAE,IAAI,EAAE,0BAA0B,KAAK,CAAC,OAAO,EAAE,EAAE,CAAC;gBAC5E,OAAO,EAAE,IAAI;aACd,CAAC;QACJ,CAAC;IACH,CAAC,CACF,CAAC;IAEF,MAAM,CAAC,IAAI,CACT,eAAe,EACf,oEAAoE,EACpE;QACE,SAAS,EAAE,CAAC,CAAC,MAAM,EAAE,CAAC,QAAQ,CAAC,gCAAgC,CAAC;KACjE,EACD,KAAK,EAAE,EAAE,SAAS,EAAE,EAAE,EAAE;QACtB,IAAI,CAAC;YACH,MAAM,MAAM,GAAG,MAAM,aAAa,CAAC,YAAY,CAAC,SAAS,CAAC,CAAC;YAC3D,OAAO;gBACL,OAAO,EAAE,CAAC,EAAE,IAAI,EAAE,MAAM,EAAE,IAAI,EAAE,IAAI,CAAC,SAAS,CAAC,MAAM,EAAE,IAAI,EAAE,CAAC,CAAC,EAAE,CAAC;aACnE,CAAC;QACJ,CAAC;QAAC,OAAO,KAAU,EAAE,CAAC;YACpB,OAAO,CAAC,KAAK,CAAC,wBAAwB,EAAE,KAAK,CAAC,CAAC;YAC/C,OAAO;gBACL,OAAO,EAAE,CAAC,EAAE,IAAI,EAAE,MAAM,EAAE,IAAI,EAAE,0BAA0B,KAAK,CAAC,OAAO,EAAE,EAAE,CAAC;gBAC5E,OAAO,EAAE,IAAI;aACd,CAAC;QACJ,CAAC;IACH,CAAC,CACF,CAAC;IAEF,MAAM,CAAC,IAAI,CACT,sBAAsB,EACtB,8DAA8D,EAC9D;QACE,QAAQ,EAAE,CAAC,CAAC,MAAM,EAAE,CAAC,QAAQ,CAAC,kDAAkD,CAAC;KAClF,EACD,KAAK,EAAE,EAAE,QAAQ,EAAE,EAAE,EAAE;QACrB,IAAI,CAAC;YACH,MAAM,MAAM,GAAG,MAAM,WAAW,CAAC,iBAAiB,CAAC,QAAQ,CAAC,CAAC;YAC7D,OAAO;gBACL,OAAO,EAAE,CAAC,EAAE,IAAI,EAAE,MAAM,EAAE,IAAI,EAAE,IAAI,CAAC,SAAS,CAAC,MAAM,EAAE,IAAI,EAAE,CAAC,CAAC,EAAE,CAAC;aACnE,CAAC;QACJ,CAAC;QAAC,OAAO,KAAU,EAAE,CAAC;YACpB,OAAO,CAAC,KAAK,CAAC,iCAAiC,EAAE,KAAK,CAAC,CAAC;YACxD,OAAO;gBACL,OAAO,EAAE,CAAC,EAAE,IAAI,EAAE,MAAM,EAAE,IAAI,EAAE,mCAAmC,KAAK,CAAC,OAAO,EAAE,EAAE,CAAC;gBACrF,OAAO,EAAE,IAAI;aACd,CAAC;QACJ,CAAC;IACH,CAAC,CACF,CAAC;IAEF,MAAM,CAAC,IAAI,CACT,aAAa,EACb,yEAAyE,EACzE;QACE,cAAc,EAAE,CAAC,CAAC,IAAI,CAAC,CAAC,QAAQ,EAAE,OAAO,CAAC,CAAC,CAAC,QAAQ,CAAC,6CAA6C,CAAC;QACnG,YAAY,EAAE,CAAC,CAAC,MAAM,EAAE,CAAC,QAAQ,CAAC,+CAA+C,CAAC;QAClF,IAAI,EAAE,CAAC,CAAC,MAAM,EAAE,CAAC,QAAQ,CAAC,sBAAsB,CAAC;KAClD,EACD,KAAK,EAAE,EAAE,cAAc,EAAE,YAAY,EAAE,IAAI,EAAE,EAAE,EAAE;QAC/C,IAAI,CAAC;YACH,IAAI,MAAM,CAAC;YACX,IAAI,cAAc,KAAK,QAAQ,EAAE,CAAC;gBAChC,MAAM,GAAG,MAAM,WAAW,CAAC,kBAAkB,CAAC,YAAY,EAAE,EAAE,IAAI,EAAE,CAAC,CAAC;YACxE,CAAC;iBAAM,IAAI,cAAc,KAAK,OAAO,EAAE,CAAC;gBACtC,MAAM,GAAG,MAAM,WAAW,CAAC,oBAAoB,CAAC,YAAY,EAAE,EAAE,IAAI,EAAE,CAAC,CAAC;YAC1E,CAAC;iBAAM,CAAC;gBACN,MAAM,IAAI,KAAK,CAAC,uDAAuD,CAAC,CAAC;YAC3E,CAAC;YAED,OAAO;gBACL,OAAO,EAAE,CAAC,EAAE,IAAI,EAAE,MAAM,EAAE,IAAI,EAAE,IAAI,CAAC,SAAS,CAAC,MAAM,EAAE,IAAI,EAAE,CAAC,CAAC,EAAE,CAAC;aACnE,CAAC;QACJ,CAAC;QAAC,OAAO,KAAU,EAAE,CAAC;YACpB,OAAO,CAAC,KAAK,CAAC,0BAA0B,cAAc,GAAG,EAAE,KAAK,CAAC,CAAC;YAClE,OAAO;gBACL,OAAO,EAAE,CAAC,EAAE,IAAI,EAAE,MAAM,EAAE,IAAI,EAAE,wBAAwB,KAAK,CAAC,OAAO,EAAE,EAAE,CAAC;gBAC1E,OAAO,EAAE,IAAI;aACd,CAAC;QACJ,CAAC;IACH,CAAC,CACF,CAAC;IAEF,MAAM,CAAC,IAAI,CACT,wBAAwB,EACxB,+EAA+E,EAC/E;QACE,QAAQ,EAAE,CAAC,CAAC,MAAM,EAAE,CAAC,QAAQ,CAAC,sDAAsD,CAAC;QACrF,IAAI,EAAE,CAAC,CAAC,MAAM,EAAE,CAAC,QAAQ,CAAC,iCAAiC,CAAC;KAC7D,EACD,KAAK,EAAE,EAAE,QAAQ,EAAE,IAAI,EAAE,EAAE,EAAE;QAC3B,IAAI,CAAC;YACH,MAAM,MAAM,GAAG,MAAM,WAAW,CAAC,oBAAoB,CAAC,QAAQ,EAAE,EAAE,IAAI,EAAE,CAAC,CAAC;YAC1E,OAAO;gBACL,OAAO,EAAE,CAAC,EAAE,IAAI,EAAE,MAAM,EAAE,IAAI,EAAE,IAAI,CAAC,SAAS,CAAC,MAAM,EAAE,IAAI,EAAE,CAAC,CAAC,EAAE,CAAC;aACnE,CAAC;QACJ,CAAC;QAAC,OAAO,KAAU,EAAE,CAAC;YACpB,OAAO,CAAC,KAAK,CAAC,iCAAiC,EAAE,KAAK,CAAC,CAAC;YACxD,OAAO;gBACL,OAAO,EAAE,CAAC,EAAE,IAAI,EAAE,MAAM,EAAE,IAAI,EAAE,mCAAmC,KAAK,CAAC,OAAO,EAAE,EAAE,CAAC;gBACrF,OAAO,EAAE,IAAI;aACd,CAAC;QACJ,CAAC;IACH,CAAC,CACF,CAAC;IAEF,MAAM,CAAC,IAAI,CACT,UAAU,EACV,2EAA2E,EAC3E;QACE,OAAO,EAAE,CAAC,CAAC,MAAM,EAAE,CAAC,QAAQ,CAAC,2BAA2B,CAAC;KAC1D,EACD,KAAK,EAAE,EAAE,OAAO,EAAE,EAAE,EAAE;QACpB,IAAI,CAAC;YACH,MAAM,MAAM,GAAG,MAAM,WAAW,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC;YAClD,OAAO;gBACL,OAAO,EAAE,CAAC,EAAE,IAAI,EAAE,MAAM,EAAE,IAAI,EAAE,IAAI,CAAC,SAAS,CAAC,MAAM,EAAE,IAAI,EAAE,CAAC,CAAC,EAAE,CAAC;aACnE,CAAC;QACJ,CAAC;QAAC,OAAO,KAAU,EAAE,CAAC;YACpB,OAAO,CAAC,KAAK,CAAC,qBAAqB,EAAE,KAAK,CAAC,CAAC;YAC5C,OAAO;gBACL,OAAO,EAAE,CAAC,EAAE,IAAI,EAAE,MAAM,EAAE,IAAI,EAAE,uBAAuB,KAAK,CAAC,OAAO,EAAE,EAAE,CAAC;gBACzE,OAAO,EAAE,IAAI;aACd,CAAC;QACJ,CAAC;IACH,CAAC,CACF,CAAC;IAEF,MAAM,CAAC,IAAI,CACT,aAAa,EACb,0CAA0C,EAC1C;QACE,OAAO,EAAE,CAAC,CAAC,MAAM,EAAE,CAAC,QAAQ,CAAC,8BAA8B,CAAC;QAC5D,IAAI,EAAE,CAAC,CAAC,MAAM,EAAE,CAAC,QAAQ,CAAC,0BAA0B,CAAC;KACtD,EACD,KAAK,EAAE,EAAE,OAAO,EAAE,IAAI,EAAE,EAAE,EAAE;QAC1B,IAAI,CAAC;YACH,MAAM,MAAM,GAAG,MAAM,WAAW,CAAC,UAAU,CAAC,OAAO,EAAE,EAAE,IAAI,EAAE,CAAC,CAAC;YAC/D,OAAO;gBACL,OAAO,EAAE,CAAC,EAAE,IAAI,EAAE,MAAM,EAAE,IAAI,EAAE,IAAI,CAAC,SAAS,CAAC,MAAM,EAAE,IAAI,EAAE,CAAC,CAAC,EAAE,CAAC;aACnE,CAAC;QACJ,CAAC;QAAC,OAAO,KAAU,EAAE,CAAC;YACpB,OAAO,CAAC,KAAK,CAAC,sBAAsB,EAAE,KAAK,CAAC,CAAC;YAC7C,OAAO;gBACL,OAAO,EAAE,CAAC,EAAE,IAAI,EAAE,MAAM,EAAE,IAAI,EAAE,wBAAwB,KAAK,CAAC,OAAO,EAAE,EAAE,CAAC;gBAC1E,OAAO,EAAE,IAAI;aACd,CAAC;QACJ,CAAC;IACH,CAAC,CACF,CAAC;IAEF,MAAM,CAAC,IAAI,CACT,aAAa,EACb,6DAA6D,EAC7D;QACE,OAAO,EAAE,CAAC,CAAC,MAAM,EAAE,CAAC,QAAQ,CAAC,8BAA8B,CAAC;KAC7D,EACD,KAAK,EAAE,EAAE,OAAO,EAAE,EAAE,EAAE;QACpB,IAAI,CAAC;YACH,MAAM,MAAM,GAAG,MAAM,WAAW,CAAC,UAAU,CAAC,OAAO,CAAC,CAAC;YACrD,OAAO;gBACL,OAAO,EAAE,CAAC,EAAE,IAAI,EAAE,MAAM,EAAE,IAAI,EAAE,IAAI,CAAC,SAAS,CAAC,MAAM,EAAE,IAAI,EAAE,CAAC,CAAC,EAAE,CAAC;aACnE,CAAC;QACJ,CAAC;QAAC,OAAO,KAAU,EAAE,CAAC;YACpB,OAAO,CAAC,KAAK,CAAC,sBAAsB,EAAE,KAAK,CAAC,CAAC;YAC7C,OAAO;gBACL,OAAO,EAAE,CAAC,EAAE,IAAI,EAAE,MAAM,EAAE,IAAI,EAAE,wBAAwB,KAAK,CAAC,OAAO,EAAE,EAAE,CAAC;gBAC1E,OAAO,EAAE,IAAI;aACd,CAAC;QACJ,CAAC;IACH,CAAC,CACF,CAAC;IAEF,MAAM,CAAC,IAAI,CACT,kBAAkB,EAClB,yCAAyC,EACzC;QACE,OAAO,EAAE,CAAC,CAAC,MAAM,EAAE,CAAC,QAAQ,CAAC,uCAAuC,CAAC;QACrE,OAAO,EAAE,CAAC,CAAC,MAAM,EAAE,CAAC,QAAQ,CAAC,2BAA2B,CAAC;KAC1D,EACD,KAAK,EAAE,EAAE,OAAO,EAAE,OAAO,EAAE,EAAE,EAAE;QAC7B,IAAI,CAAC;YACH,MAAM,MAAM,GAAG,MAAM,WAAW,CAAC,aAAa,CAAC,OAAO,EAAE,OAAO,CAAC,CAAC;YACjE,OAAO;gBACL,OAAO,EAAE,CAAC,EAAE,IAAI,EAAE,MAAM,EAAE,IAAI,EAAE,IAAI,CAAC,SAAS,CAAC,MAAM,EAAE,IAAI,EAAE,CAAC,CAAC,EAAE,CAAC;aACnE,CAAC;QACJ,CAAC;QAAC,OAAO,KAAU,EAAE,CAAC;YACpB,OAAO,CAAC,KAAK,CAAC,4BAA4B,EAAE,KAAK,CAAC,CAAC;YACnD,OAAO;gBACL,OAAO,EAAE,CAAC,EAAE,IAAI,EAAE,MAAM,EAAE,IAAI,EAAE,8BAA8B,KAAK,CAAC,OAAO,EAAE,EAAE,CAAC;gBAChF,OAAO,EAAE,IAAI;aACd,CAAC;QACJ,CAAC;IACH,CAAC,CACF,CAAC;IAEF,MAAM,CAAC,IAAI,CACT,uBAAuB,EACvB,8DAA8D,EAC9D;QACE,OAAO,EAAE,CAAC,CAAC,MAAM,EAAE,CAAC,QAAQ,CAAC,4CAA4C,CAAC;QAC1E,OAAO,EAAE,CAAC,CAAC,MAAM,EAAE,CAAC,QAAQ,CAAC,8BAA8B,CAAC;KAC7D,EACD,KAAK,EAAE,EAAE,OAAO,EAAE,OAAO,EAAE,EAAE,EAAE;QAC7B,IAAI,CAAC;YACH,MAAM,MAAM,GAAG,MAAM,WAAW,CAAC,kBAAkB,CAAC,OAAO,EAAE,OAAO,CAAC,CAAC;YACtE,OAAO;gBACL,OAAO,EAAE,CAAC,EAAE,IAAI,EAAE,MAAM,EAAE,IAAI,EAAE,IAAI,CAAC,SAAS,CAAC,MAAM,EAAE,IAAI,EAAE,CAAC,CAAC,EAAE,CAAC;aACnE,CAAC;QACJ,CAAC;QAAC,OAAO,KAAU,EAAE,CAAC;YACpB,OAAO,CAAC,KAAK,CAAC,gCAAgC,EAAE,KAAK,CAAC,CAAC;YACvD,OAAO;gBACL,OAAO,EAAE,CAAC,EAAE,IAAI,EAAE,MAAM,EAAE,IAAI,EAAE,kCAAkC,KAAK,CAAC,OAAO,EAAE,EAAE,CAAC;gBACpF,OAAO,EAAE,IAAI;aACd,CAAC;QACJ,CAAC;IACH,CAAC,CACF,CAAC;IAEF,MAAM,CAAC,IAAI,CACT,qCAAqC,EACrC,mEAAmE,EACnE;QACE,SAAS,EAAE,CAAC,CAAC,MAAM,EAAE,CAAC,QAAQ,CAAC,4CAA4C,CAAC;QAC5E,WAAW,EAAE,CAAC,CAAC,MAAM,EAAE,CAAC,QAAQ,CAAC,+BAA+B,CAAC;QACjE,IAAI,EAAE,CAAC,CAAC,MAAM,EAAE,CAAC,QAAQ,CAAC,sBAAsB,CAAC;KAClD,EACD,KAAK,EAAE,EAAE,SAAS,EAAE,WAAW,EAAE,IAAI,EAAE,EAAE,EAAE;QACzC,IAAI,CAAC;YACH,MAAM,MAAM,GAAG,MAAM,WAAW,CAAC,8BAA8B,CAAC,SAAS,EAAE,WAAW,EAAE,EAAE,IAAI,EAAE,CAAC,CAAC;YAClG,OAAO;gBACL,OAAO,EAAE,CAAC,EAAE,IAAI,EAAE,MAAM,EAAE,IAAI,EAAE,IAAI,CAAC,SAAS,CAAC,MAAM,EAAE,IAAI,EAAE,CAAC,CAAC,EAAE,CAAC;aACnE,CAAC;QACJ,CAAC;QAAC,OAAO,KAAU,EAAE,CAAC;YACpB,OAAO,CAAC,KAAK,CAAC,8CAA8C,EAAE,KAAK,CAAC,CAAC;YACrE,OAAO;gBACL,OAAO,EAAE,CAAC,EAAE,IAAI,EAAE,MAAM,EAAE,IAAI,EAAE,gDAAgD,KAAK,CAAC,OAAO,EAAE,EAAE,CAAC;gBAClG,OAAO,EAAE,IAAI;aACd,CAAC;QACJ,CAAC;IACH,CAAC,CACF,CAAC;IAEF,MAAM,CAAC,IAAI,CACT,oCAAoC,EACpC,kEAAkE,EAClE;QACE,QAAQ,EAAE,CAAC,CAAC,MAAM,EAAE,CAAC,QAAQ,CAAC,2CAA2C,CAAC;QAC1E,WAAW,EAAE,CAAC,CAAC,MAAM,EAAE,CAAC,QAAQ,CAAC,+BAA+B,CAAC;QACjE,IAAI,EAAE,CAAC,CAAC,MAAM,EAAE,CAAC,QAAQ,CAAC,sBAAsB,CAAC;KAClD,EACD,KAAK,EAAE,EAAE,QAAQ,EAAE,WAAW,EAAE,IAAI,EAAE,EAAE,EAAE;QACxC,IAAI,CAAC;YACH,MAAM,MAAM,GAAG,MAAM,WAAW,CAAC,6BAA6B,CAAC,QAAQ,EAAE,WAAW,EAAE,EAAE,IAAI,EAAE,CAAC,CAAC;YAChG,OAAO;gBACL,OAAO,EAAE,CAAC,EAAE,IAAI,EAAE,MAAM,EAAE,IAAI,EAAE,IAAI,CAAC,SAAS,CAAC,MAAM,EAAE,IAAI,EAAE,CAAC,CAAC,EAAE,CAAC;aACnE,CAAC;QACJ,CAAC;QAAC,OAAO,KAAU,EAAE,CAAC;YACpB,OAAO,CAAC,KAAK,CAAC,6CAA6C,EAAE,KAAK,CAAC,CAAC;YACpE,OAAO;gBACL,OAAO,EAAE,CAAC,EAAE,IAAI,EAAE,MAAM,EAAE,IAAI,EAAE,+CAA+C,KAAK,CAAC,OAAO,EAAE,EAAE,CAAC;gBACjG,OAAO,EAAE,IAAI;aACd,CAAC;QACJ,CAAC;IACH,CAAC,CACF,CAAC;AACJ,CAAC",
      names: [],
      sources: ["/Users/peterkrzyzek/Development/clickup-mcp-server/src/tools/task-tools.ts"],
      sourcesContent: ["import { McpServer } from '@modelcontextprotocol/sdk/server/mcp.js';\nimport { z } from 'zod';\nimport { createClickUpClient } from '../clickup-client/index.js';\nimport { createTasksClient, CreateTaskParams, UpdateTaskParams } from '../clickup-client/tasks.js';\nimport { createListsClient } from '../clickup-client/lists.js';\nimport { createFoldersClient } from '../clickup-client/folders.js';\nimport { createAuthClient } from '../clickup-client/auth.js';\n\n// Create clients\nconst clickUpClient = createClickUpClient();\nconst tasksClient = createTasksClient(clickUpClient);\nconst listsClient = createListsClient(clickUpClient);\nconst foldersClient = createFoldersClient(clickUpClient);\nconst authClient = createAuthClient(clickUpClient);\n\nexport function setupTaskTools(server: McpServer): void {\n  // Workspace and Auth tools\n  server.tool(\n    'get_workspace_seats',\n    'Get information about seats (user licenses) in a ClickUp workspace. Returns details about seat allocation and availability.',\n    { workspace_id: z.string().describe('The ID of the workspace to get seats information for') },\n    async ({ workspace_id }) => {\n      try {\n        const result = await authClient.getWorkspaceSeats(workspace_id);\n        return {\n          content: [{ type: 'text', text: JSON.stringify(result, null, 2) }]\n        };\n      } catch (error: any) {\n        console.error('Error getting workspace seats:', error);\n        return {\n          content: [{ type: 'text', text: `Error getting workspace seats: ${error.message}` }],\n          isError: true\n        };\n      }\n    }\n  );\n\n  server.tool(\n    'get_workspaces',\n    'Get a list of all ClickUp workspaces accessible to the authenticated user. Returns workspace IDs, names, and metadata.',\n    {},\n    async () => {\n      try {\n        const result = await authClient.getWorkspaces();\n        return {\n          content: [{ type: 'text', text: JSON.stringify(result.teams, null, 2) }]\n        };\n      } catch (error: any) {\n        console.error('Error getting workspaces:', error);\n        return {\n          content: [{ type: 'text', text: `Error getting workspaces: ${error.message}` }],\n          isError: true\n        };\n      }\n    }\n  );\n\n  // Task tools\n  server.tool(\n    'get_tasks',\n    'Get tasks from a ClickUp list. Returns task details including name, description, assignees, and status.',\n    {\n      list_id: z.string().describe('The ID of the list to get tasks from'),\n      include_closed: z.boolean().optional().describe('Whether to include closed tasks'),\n      subtasks: z.boolean().optional().describe('Whether to include subtasks in the results'),\n      page: z.number().optional().describe('The page number to get'),\n      order_by: z.string().optional().describe('The field to order by'),\n      reverse: z.boolean().optional().describe('Whether to reverse the order')\n    },\n    async ({ list_id, ...params }) => {\n      try {\n        const result = await tasksClient.getTasksFromList(list_id, params);\n        return {\n          content: [{ type: 'text', text: JSON.stringify(result, null, 2) }]\n        };\n      } catch (error: any) {\n        console.error('Error getting tasks:', error);\n        return {\n          content: [{ type: 'text', text: `Error getting tasks: ${error.message}` }],\n          isError: true\n        };\n      }\n    }\n  );\n\n  server.tool(\n    'get_task_details',\n    'Get detailed information about a specific ClickUp task. Returns comprehensive task data including description, assignees, status, and dates.',\n    {\n      task_id: z.string().describe('The ID of the task to get'),\n      include_subtasks: z.boolean().optional().describe('Whether to include subtasks in the task details')\n    },\n    async ({ task_id, include_subtasks }) => {\n      try {\n        const task = await tasksClient.getTask(task_id, { include_subtasks });\n        return {\n          content: [{ type: 'text', text: JSON.stringify(task, null, 2) }]\n        };\n      } catch (error: any) {\n        console.error('Error getting task details:', error);\n        return {\n          content: [{ type: 'text', text: `Error getting task details: ${error.message}` }],\n          isError: true\n        };\n      }\n    }\n  );\n\n  server.tool(\n    'create_task',\n    'Create a new task in a ClickUp list with specified properties like name, description, assignees, status, and dates. Supports GitHub Flavored Markdown in description field.',\n    {\n      list_id: z.string().describe('The ID of the list to create the task in'),\n      name: z.string().describe('The name of the task'),\n      description: z.string().optional().describe('The description of the task (supports GitHub Flavored Markdown including headers, bold, italic, code blocks, links, lists, etc.)'),\n      assignees: z.array(z.number()).optional().describe('The IDs of the users to assign to the task'),\n      tags: z.array(z.string()).optional().describe('The tags to add to the task'),\n      status: z.string().optional().describe('The status of the task'),\n      priority: z.number().optional().describe('The priority of the task (1-4)'),\n      due_date: z.number().optional().describe('The due date of the task (Unix timestamp)'),\n      due_date_time: z.boolean().optional().describe('Whether the due date includes a time'),\n      time_estimate: z.number().optional().describe('The time estimate for the task (in milliseconds)'),\n      start_date: z.number().optional().describe('The start date of the task (Unix timestamp)'),\n      start_date_time: z.boolean().optional().describe('Whether the start date includes a time'),\n      notify_all: z.boolean().optional().describe('Whether to notify all assignees'),\n      parent: z.string().optional().describe('The ID of the parent task')\n    },\n    async ({ list_id, ...taskParams }) => {\n      try {\n        const result = await tasksClient.createTask(list_id, taskParams as CreateTaskParams);\n        return {\n          content: [{ type: 'text', text: JSON.stringify(result, null, 2) }]\n        };\n      } catch (error: any) {\n        console.error('Error creating task:', error);\n        return {\n          content: [{ type: 'text', text: `Error creating task: ${error.message}` }],\n          isError: true\n        };\n      }\n    }\n  );\n\n  server.tool(\n    'update_task',\n    'Update an existing ClickUp task\\'s properties including name, description, assignees, status, and dates. Supports GitHub Flavored Markdown in description field.',\n    {\n      task_id: z.string().describe('The ID of the task to update'),\n      name: z.string().optional().describe('The new name of the task'),\n      description: z.string().optional().describe('The new description of the task (supports GitHub Flavored Markdown including headers, bold, italic, code blocks, links, lists, etc.)'),\n      assignees: z.array(z.number()).optional().describe('The IDs of the users to assign to the task'),\n      status: z.string().optional().describe('The new status of the task'),\n      priority: z.number().optional().describe('The new priority of the task (1-4)'),\n      due_date: z.number().optional().describe('The new due date of the task (Unix timestamp)'),\n      due_date_time: z.boolean().optional().describe('Whether the due date includes a time'),\n      time_estimate: z.number().optional().describe('The new time estimate for the task (in milliseconds)'),\n      start_date: z.number().optional().describe('The new start date of the task (Unix timestamp)'),\n      start_date_time: z.boolean().optional().describe('Whether the start date includes a time'),\n      notify_all: z.boolean().optional().describe('Whether to notify all assignees')\n    },\n    async ({ task_id, ...taskParams }) => {\n      try {\n        const result = await tasksClient.updateTask(task_id, taskParams as UpdateTaskParams);\n        return {\n          content: [{ type: 'text', text: JSON.stringify(result, null, 2) }]\n        };\n      } catch (error: any) {\n        console.error('Error updating task:', error);\n        return {\n          content: [{ type: 'text', text: `Error updating task: ${error.message}` }],\n          isError: true\n        };\n      }\n    }\n  );\n\n  // List and Folder tools\n  server.tool(\n    'get_lists',\n    'Get lists from a ClickUp folder or space. Returns list details including name and content.',\n    {\n      container_type: z.enum(['folder', 'space']).describe('The type of container to get lists from'),\n      container_id: z.string().describe('The ID of the container to get lists from')\n    },\n    async ({ container_type, container_id }) => {\n      try {\n        let result;\n        if (container_type === 'folder') {\n          result = await foldersClient.getListsFromFolder(container_id);\n        } else if (container_type === 'space') {\n          result = await listsClient.getListsFromSpace(container_id);\n        } else {\n          throw new Error('Invalid container_type. Must be one of: folder, space');\n        }\n        \n        return {\n          content: [{ type: 'text', text: JSON.stringify(result, null, 2) }]\n        };\n      } catch (error: any) {\n        console.error(`Error getting lists from ${container_type}:`, error);\n        return {\n          content: [{ type: 'text', text: `Error getting lists: ${error.message}` }],\n          isError: true\n        };\n      }\n    }\n  );\n\n  server.tool(\n    'create_folder',\n    'Create a new folder in a ClickUp space with the specified name.',\n    {\n      space_id: z.string().describe('The ID of the space to create the folder in'),\n      name: z.string().describe('The name of the folder')\n    },\n    async ({ space_id, name }) => {\n      try {\n        const result = await foldersClient.createFolder(space_id, { name });\n        return {\n          content: [{ type: 'text', text: JSON.stringify(result, null, 2) }]\n        };\n      } catch (error: any) {\n        console.error('Error creating folder:', error);\n        return {\n          content: [{ type: 'text', text: `Error creating folder: ${error.message}` }],\n          isError: true\n        };\n      }\n    }\n  );\n\n  server.tool(\n    'update_folder',\n    'Update an existing ClickUp folder\\'s name.',\n    {\n      folder_id: z.string().describe('The ID of the folder to update'),\n      name: z.string().describe('The new name of the folder')\n    },\n    async ({ folder_id, name }) => {\n      try {\n        const result = await foldersClient.updateFolder(folder_id, { name });\n        return {\n          content: [{ type: 'text', text: JSON.stringify(result, null, 2) }]\n        };\n      } catch (error: any) {\n        console.error('Error updating folder:', error);\n        return {\n          content: [{ type: 'text', text: `Error updating folder: ${error.message}` }],\n          isError: true\n        };\n      }\n    }\n  );\n\n  server.tool(\n    'delete_folder',\n    'Delete a folder from ClickUp. Removes the folder and its contents.',\n    {\n      folder_id: z.string().describe('The ID of the folder to delete')\n    },\n    async ({ folder_id }) => {\n      try {\n        const result = await foldersClient.deleteFolder(folder_id);\n        return {\n          content: [{ type: 'text', text: JSON.stringify(result, null, 2) }]\n        };\n      } catch (error: any) {\n        console.error('Error deleting folder:', error);\n        return {\n          content: [{ type: 'text', text: `Error deleting folder: ${error.message}` }],\n          isError: true\n        };\n      }\n    }\n  );\n\n  server.tool(\n    'get_folderless_lists',\n    'Get lists that are not in any folder within a ClickUp space.',\n    {\n      space_id: z.string().describe('The ID of the space to get folderless lists from')\n    },\n    async ({ space_id }) => {\n      try {\n        const result = await listsClient.getListsFromSpace(space_id);\n        return {\n          content: [{ type: 'text', text: JSON.stringify(result, null, 2) }]\n        };\n      } catch (error: any) {\n        console.error('Error getting folderless lists:', error);\n        return {\n          content: [{ type: 'text', text: `Error getting folderless lists: ${error.message}` }],\n          isError: true\n        };\n      }\n    }\n  );\n\n  server.tool(\n    'create_list',\n    'Create a new list in a ClickUp folder or space with the specified name.',\n    {\n      container_type: z.enum(['folder', 'space']).describe('The type of container to create the list in'),\n      container_id: z.string().describe('The ID of the container to create the list in'),\n      name: z.string().describe('The name of the list')\n    },\n    async ({ container_type, container_id, name }) => {\n      try {\n        let result;\n        if (container_type === 'folder') {\n          result = await listsClient.createListInFolder(container_id, { name });\n        } else if (container_type === 'space') {\n          result = await listsClient.createFolderlessList(container_id, { name });\n        } else {\n          throw new Error('Invalid container_type. Must be one of: folder, space');\n        }\n        \n        return {\n          content: [{ type: 'text', text: JSON.stringify(result, null, 2) }]\n        };\n      } catch (error: any) {\n        console.error(`Error creating list in ${container_type}:`, error);\n        return {\n          content: [{ type: 'text', text: `Error creating list: ${error.message}` }],\n          isError: true\n        };\n      }\n    }\n  );\n\n  server.tool(\n    'create_folderless_list',\n    'Create a new list directly in a ClickUp space without placing it in a folder.',\n    {\n      space_id: z.string().describe('The ID of the space to create the folderless list in'),\n      name: z.string().describe('The name of the folderless list')\n    },\n    async ({ space_id, name }) => {\n      try {\n        const result = await listsClient.createFolderlessList(space_id, { name });\n        return {\n          content: [{ type: 'text', text: JSON.stringify(result, null, 2) }]\n        };\n      } catch (error: any) {\n        console.error('Error creating folderless list:', error);\n        return {\n          content: [{ type: 'text', text: `Error creating folderless list: ${error.message}` }],\n          isError: true\n        };\n      }\n    }\n  );\n\n  server.tool(\n    'get_list',\n    'Get details about a specific ClickUp list including its name and content.',\n    {\n      list_id: z.string().describe('The ID of the list to get')\n    },\n    async ({ list_id }) => {\n      try {\n        const result = await listsClient.getList(list_id);\n        return {\n          content: [{ type: 'text', text: JSON.stringify(result, null, 2) }]\n        };\n      } catch (error: any) {\n        console.error('Error getting list:', error);\n        return {\n          content: [{ type: 'text', text: `Error getting list: ${error.message}` }],\n          isError: true\n        };\n      }\n    }\n  );\n\n  server.tool(\n    'update_list',\n    'Update an existing ClickUp list\\'s name.',\n    {\n      list_id: z.string().describe('The ID of the list to update'),\n      name: z.string().describe('The new name of the list')\n    },\n    async ({ list_id, name }) => {\n      try {\n        const result = await listsClient.updateList(list_id, { name });\n        return {\n          content: [{ type: 'text', text: JSON.stringify(result, null, 2) }]\n        };\n      } catch (error: any) {\n        console.error('Error updating list:', error);\n        return {\n          content: [{ type: 'text', text: `Error updating list: ${error.message}` }],\n          isError: true\n        };\n      }\n    }\n  );\n\n  server.tool(\n    'delete_list',\n    'Delete a list from ClickUp. Removes the list and its tasks.',\n    {\n      list_id: z.string().describe('The ID of the list to delete')\n    },\n    async ({ list_id }) => {\n      try {\n        const result = await listsClient.deleteList(list_id);\n        return {\n          content: [{ type: 'text', text: JSON.stringify(result, null, 2) }]\n        };\n      } catch (error: any) {\n        console.error('Error deleting list:', error);\n        return {\n          content: [{ type: 'text', text: `Error deleting list: ${error.message}` }],\n          isError: true\n        };\n      }\n    }\n  );\n\n  server.tool(\n    'add_task_to_list',\n    'Add an existing task to a ClickUp list.',\n    {\n      list_id: z.string().describe('The ID of the list to add the task to'),\n      task_id: z.string().describe('The ID of the task to add')\n    },\n    async ({ list_id, task_id }) => {\n      try {\n        const result = await listsClient.addTaskToList(list_id, task_id);\n        return {\n          content: [{ type: 'text', text: JSON.stringify(result, null, 2) }]\n        };\n      } catch (error: any) {\n        console.error('Error adding task to list:', error);\n        return {\n          content: [{ type: 'text', text: `Error adding task to list: ${error.message}` }],\n          isError: true\n        };\n      }\n    }\n  );\n\n  server.tool(\n    'remove_task_from_list',\n    'Remove a task from a ClickUp list without deleting the task.',\n    {\n      list_id: z.string().describe('The ID of the list to remove the task from'),\n      task_id: z.string().describe('The ID of the task to remove')\n    },\n    async ({ list_id, task_id }) => {\n      try {\n        const result = await listsClient.removeTaskFromList(list_id, task_id);\n        return {\n          content: [{ type: 'text', text: JSON.stringify(result, null, 2) }]\n        };\n      } catch (error: any) {\n        console.error('Error removing task from list:', error);\n        return {\n          content: [{ type: 'text', text: `Error removing task from list: ${error.message}` }],\n          isError: true\n        };\n      }\n    }\n  );\n\n  server.tool(\n    'create_list_from_template_in_folder',\n    'Create a new list in a ClickUp folder using an existing template.',\n    {\n      folder_id: z.string().describe('The ID of the folder to create the list in'),\n      template_id: z.string().describe('The ID of the template to use'),\n      name: z.string().describe('The name of the list')\n    },\n    async ({ folder_id, template_id, name }) => {\n      try {\n        const result = await listsClient.createListFromTemplateInFolder(folder_id, template_id, { name });\n        return {\n          content: [{ type: 'text', text: JSON.stringify(result, null, 2) }]\n        };\n      } catch (error: any) {\n        console.error('Error creating list from template in folder:', error);\n        return {\n          content: [{ type: 'text', text: `Error creating list from template in folder: ${error.message}` }],\n          isError: true\n        };\n      }\n    }\n  );\n\n  server.tool(\n    'create_list_from_template_in_space',\n    'Create a new list in a ClickUp space using an existing template.',\n    {\n      space_id: z.string().describe('The ID of the space to create the list in'),\n      template_id: z.string().describe('The ID of the template to use'),\n      name: z.string().describe('The name of the list')\n    },\n    async ({ space_id, template_id, name }) => {\n      try {\n        const result = await listsClient.createListFromTemplateInSpace(space_id, template_id, { name });\n        return {\n          content: [{ type: 'text', text: JSON.stringify(result, null, 2) }]\n        };\n      } catch (error: any) {\n        console.error('Error creating list from template in space:', error);\n        return {\n          content: [{ type: 'text', text: `Error creating list from template in space: ${error.message}` }],\n          isError: true\n        };\n      }\n    }\n  );\n}\n"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "ed42d0cc2ec2aa2183853533f953cfd06f522edc"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_3n8lvdoec = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_3n8lvdoec();
import { z } from 'zod';
import { createClickUpClient } from '../clickup-client/index.js';
import { createTasksClient } from '../clickup-client/tasks.js';
import { createListsClient } from '../clickup-client/lists.js';
import { createFoldersClient } from '../clickup-client/folders.js';
import { createAuthClient } from '../clickup-client/auth.js';
// Create clients
const clickUpClient =
/* istanbul ignore next */
(cov_3n8lvdoec().s[0]++, createClickUpClient());
const tasksClient =
/* istanbul ignore next */
(cov_3n8lvdoec().s[1]++, createTasksClient(clickUpClient));
const listsClient =
/* istanbul ignore next */
(cov_3n8lvdoec().s[2]++, createListsClient(clickUpClient));
const foldersClient =
/* istanbul ignore next */
(cov_3n8lvdoec().s[3]++, createFoldersClient(clickUpClient));
const authClient =
/* istanbul ignore next */
(cov_3n8lvdoec().s[4]++, createAuthClient(clickUpClient));
export function setupTaskTools(server) {
  /* istanbul ignore next */
  cov_3n8lvdoec().f[0]++;
  cov_3n8lvdoec().s[5]++;
  // Workspace and Auth tools
  server.tool('get_workspace_seats', 'Get information about seats (user licenses) in a ClickUp workspace. Returns details about seat allocation and availability.', {
    workspace_id: z.string().describe('The ID of the workspace to get seats information for')
  }, async ({
    workspace_id
  }) => {
    /* istanbul ignore next */
    cov_3n8lvdoec().f[1]++;
    cov_3n8lvdoec().s[6]++;
    try {
      const result =
      /* istanbul ignore next */
      (cov_3n8lvdoec().s[7]++, await authClient.getWorkspaceSeats(workspace_id));
      /* istanbul ignore next */
      cov_3n8lvdoec().s[8]++;
      return {
        content: [{
          type: 'text',
          text: JSON.stringify(result, null, 2)
        }]
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_3n8lvdoec().s[9]++;
      console.error('Error getting workspace seats:', error);
      /* istanbul ignore next */
      cov_3n8lvdoec().s[10]++;
      return {
        content: [{
          type: 'text',
          text: `Error getting workspace seats: ${error.message}`
        }],
        isError: true
      };
    }
  });
  /* istanbul ignore next */
  cov_3n8lvdoec().s[11]++;
  server.tool('get_workspaces', 'Get a list of all ClickUp workspaces accessible to the authenticated user. Returns workspace IDs, names, and metadata.', {}, async () => {
    /* istanbul ignore next */
    cov_3n8lvdoec().f[2]++;
    cov_3n8lvdoec().s[12]++;
    try {
      const result =
      /* istanbul ignore next */
      (cov_3n8lvdoec().s[13]++, await authClient.getWorkspaces());
      /* istanbul ignore next */
      cov_3n8lvdoec().s[14]++;
      return {
        content: [{
          type: 'text',
          text: JSON.stringify(result.teams, null, 2)
        }]
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_3n8lvdoec().s[15]++;
      console.error('Error getting workspaces:', error);
      /* istanbul ignore next */
      cov_3n8lvdoec().s[16]++;
      return {
        content: [{
          type: 'text',
          text: `Error getting workspaces: ${error.message}`
        }],
        isError: true
      };
    }
  });
  // Task tools
  /* istanbul ignore next */
  cov_3n8lvdoec().s[17]++;
  server.tool('get_tasks', 'Get tasks from a ClickUp list. Returns task details including name, description, assignees, and status.', {
    list_id: z.string().describe('The ID of the list to get tasks from'),
    include_closed: z.boolean().optional().describe('Whether to include closed tasks'),
    subtasks: z.boolean().optional().describe('Whether to include subtasks in the results'),
    page: z.number().optional().describe('The page number to get'),
    order_by: z.string().optional().describe('The field to order by'),
    reverse: z.boolean().optional().describe('Whether to reverse the order')
  }, async ({
    list_id,
    ...params
  }) => {
    /* istanbul ignore next */
    cov_3n8lvdoec().f[3]++;
    cov_3n8lvdoec().s[18]++;
    try {
      const result =
      /* istanbul ignore next */
      (cov_3n8lvdoec().s[19]++, await tasksClient.getTasksFromList(list_id, params));
      /* istanbul ignore next */
      cov_3n8lvdoec().s[20]++;
      return {
        content: [{
          type: 'text',
          text: JSON.stringify(result, null, 2)
        }]
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_3n8lvdoec().s[21]++;
      console.error('Error getting tasks:', error);
      /* istanbul ignore next */
      cov_3n8lvdoec().s[22]++;
      return {
        content: [{
          type: 'text',
          text: `Error getting tasks: ${error.message}`
        }],
        isError: true
      };
    }
  });
  /* istanbul ignore next */
  cov_3n8lvdoec().s[23]++;
  server.tool('get_task_details', 'Get detailed information about a specific ClickUp task. Returns comprehensive task data including description, assignees, status, and dates.', {
    task_id: z.string().describe('The ID of the task to get'),
    include_subtasks: z.boolean().optional().describe('Whether to include subtasks in the task details')
  }, async ({
    task_id,
    include_subtasks
  }) => {
    /* istanbul ignore next */
    cov_3n8lvdoec().f[4]++;
    cov_3n8lvdoec().s[24]++;
    try {
      const task =
      /* istanbul ignore next */
      (cov_3n8lvdoec().s[25]++, await tasksClient.getTask(task_id, {
        include_subtasks
      }));
      /* istanbul ignore next */
      cov_3n8lvdoec().s[26]++;
      return {
        content: [{
          type: 'text',
          text: JSON.stringify(task, null, 2)
        }]
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_3n8lvdoec().s[27]++;
      console.error('Error getting task details:', error);
      /* istanbul ignore next */
      cov_3n8lvdoec().s[28]++;
      return {
        content: [{
          type: 'text',
          text: `Error getting task details: ${error.message}`
        }],
        isError: true
      };
    }
  });
  /* istanbul ignore next */
  cov_3n8lvdoec().s[29]++;
  server.tool('create_task', 'Create a new task in a ClickUp list with specified properties like name, description, assignees, status, and dates. Supports GitHub Flavored Markdown in description field.', {
    list_id: z.string().describe('The ID of the list to create the task in'),
    name: z.string().describe('The name of the task'),
    description: z.string().optional().describe('The description of the task (supports GitHub Flavored Markdown including headers, bold, italic, code blocks, links, lists, etc.)'),
    assignees: z.array(z.number()).optional().describe('The IDs of the users to assign to the task'),
    tags: z.array(z.string()).optional().describe('The tags to add to the task'),
    status: z.string().optional().describe('The status of the task'),
    priority: z.number().optional().describe('The priority of the task (1-4)'),
    due_date: z.number().optional().describe('The due date of the task (Unix timestamp)'),
    due_date_time: z.boolean().optional().describe('Whether the due date includes a time'),
    time_estimate: z.number().optional().describe('The time estimate for the task (in milliseconds)'),
    start_date: z.number().optional().describe('The start date of the task (Unix timestamp)'),
    start_date_time: z.boolean().optional().describe('Whether the start date includes a time'),
    notify_all: z.boolean().optional().describe('Whether to notify all assignees'),
    parent: z.string().optional().describe('The ID of the parent task')
  }, async ({
    list_id,
    ...taskParams
  }) => {
    /* istanbul ignore next */
    cov_3n8lvdoec().f[5]++;
    cov_3n8lvdoec().s[30]++;
    try {
      const result =
      /* istanbul ignore next */
      (cov_3n8lvdoec().s[31]++, await tasksClient.createTask(list_id, taskParams));
      /* istanbul ignore next */
      cov_3n8lvdoec().s[32]++;
      return {
        content: [{
          type: 'text',
          text: JSON.stringify(result, null, 2)
        }]
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_3n8lvdoec().s[33]++;
      console.error('Error creating task:', error);
      /* istanbul ignore next */
      cov_3n8lvdoec().s[34]++;
      return {
        content: [{
          type: 'text',
          text: `Error creating task: ${error.message}`
        }],
        isError: true
      };
    }
  });
  /* istanbul ignore next */
  cov_3n8lvdoec().s[35]++;
  server.tool('update_task', 'Update an existing ClickUp task\'s properties including name, description, assignees, status, and dates. Supports GitHub Flavored Markdown in description field.', {
    task_id: z.string().describe('The ID of the task to update'),
    name: z.string().optional().describe('The new name of the task'),
    description: z.string().optional().describe('The new description of the task (supports GitHub Flavored Markdown including headers, bold, italic, code blocks, links, lists, etc.)'),
    assignees: z.array(z.number()).optional().describe('The IDs of the users to assign to the task'),
    status: z.string().optional().describe('The new status of the task'),
    priority: z.number().optional().describe('The new priority of the task (1-4)'),
    due_date: z.number().optional().describe('The new due date of the task (Unix timestamp)'),
    due_date_time: z.boolean().optional().describe('Whether the due date includes a time'),
    time_estimate: z.number().optional().describe('The new time estimate for the task (in milliseconds)'),
    start_date: z.number().optional().describe('The new start date of the task (Unix timestamp)'),
    start_date_time: z.boolean().optional().describe('Whether the start date includes a time'),
    notify_all: z.boolean().optional().describe('Whether to notify all assignees')
  }, async ({
    task_id,
    ...taskParams
  }) => {
    /* istanbul ignore next */
    cov_3n8lvdoec().f[6]++;
    cov_3n8lvdoec().s[36]++;
    try {
      const result =
      /* istanbul ignore next */
      (cov_3n8lvdoec().s[37]++, await tasksClient.updateTask(task_id, taskParams));
      /* istanbul ignore next */
      cov_3n8lvdoec().s[38]++;
      return {
        content: [{
          type: 'text',
          text: JSON.stringify(result, null, 2)
        }]
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_3n8lvdoec().s[39]++;
      console.error('Error updating task:', error);
      /* istanbul ignore next */
      cov_3n8lvdoec().s[40]++;
      return {
        content: [{
          type: 'text',
          text: `Error updating task: ${error.message}`
        }],
        isError: true
      };
    }
  });
  // List and Folder tools
  /* istanbul ignore next */
  cov_3n8lvdoec().s[41]++;
  server.tool('get_lists', 'Get lists from a ClickUp folder or space. Returns list details including name and content.', {
    container_type: z.enum(['folder', 'space']).describe('The type of container to get lists from'),
    container_id: z.string().describe('The ID of the container to get lists from')
  }, async ({
    container_type,
    container_id
  }) => {
    /* istanbul ignore next */
    cov_3n8lvdoec().f[7]++;
    cov_3n8lvdoec().s[42]++;
    try {
      let result;
      /* istanbul ignore next */
      cov_3n8lvdoec().s[43]++;
      if (container_type === 'folder') {
        /* istanbul ignore next */
        cov_3n8lvdoec().b[0][0]++;
        cov_3n8lvdoec().s[44]++;
        result = await foldersClient.getListsFromFolder(container_id);
      } else {
        /* istanbul ignore next */
        cov_3n8lvdoec().b[0][1]++;
        cov_3n8lvdoec().s[45]++;
        if (container_type === 'space') {
          /* istanbul ignore next */
          cov_3n8lvdoec().b[1][0]++;
          cov_3n8lvdoec().s[46]++;
          result = await listsClient.getListsFromSpace(container_id);
        } else {
          /* istanbul ignore next */
          cov_3n8lvdoec().b[1][1]++;
          cov_3n8lvdoec().s[47]++;
          throw new Error('Invalid container_type. Must be one of: folder, space');
        }
      }
      /* istanbul ignore next */
      cov_3n8lvdoec().s[48]++;
      return {
        content: [{
          type: 'text',
          text: JSON.stringify(result, null, 2)
        }]
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_3n8lvdoec().s[49]++;
      console.error(`Error getting lists from ${container_type}:`, error);
      /* istanbul ignore next */
      cov_3n8lvdoec().s[50]++;
      return {
        content: [{
          type: 'text',
          text: `Error getting lists: ${error.message}`
        }],
        isError: true
      };
    }
  });
  /* istanbul ignore next */
  cov_3n8lvdoec().s[51]++;
  server.tool('create_folder', 'Create a new folder in a ClickUp space with the specified name.', {
    space_id: z.string().describe('The ID of the space to create the folder in'),
    name: z.string().describe('The name of the folder')
  }, async ({
    space_id,
    name
  }) => {
    /* istanbul ignore next */
    cov_3n8lvdoec().f[8]++;
    cov_3n8lvdoec().s[52]++;
    try {
      const result =
      /* istanbul ignore next */
      (cov_3n8lvdoec().s[53]++, await foldersClient.createFolder(space_id, {
        name
      }));
      /* istanbul ignore next */
      cov_3n8lvdoec().s[54]++;
      return {
        content: [{
          type: 'text',
          text: JSON.stringify(result, null, 2)
        }]
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_3n8lvdoec().s[55]++;
      console.error('Error creating folder:', error);
      /* istanbul ignore next */
      cov_3n8lvdoec().s[56]++;
      return {
        content: [{
          type: 'text',
          text: `Error creating folder: ${error.message}`
        }],
        isError: true
      };
    }
  });
  /* istanbul ignore next */
  cov_3n8lvdoec().s[57]++;
  server.tool('update_folder', 'Update an existing ClickUp folder\'s name.', {
    folder_id: z.string().describe('The ID of the folder to update'),
    name: z.string().describe('The new name of the folder')
  }, async ({
    folder_id,
    name
  }) => {
    /* istanbul ignore next */
    cov_3n8lvdoec().f[9]++;
    cov_3n8lvdoec().s[58]++;
    try {
      const result =
      /* istanbul ignore next */
      (cov_3n8lvdoec().s[59]++, await foldersClient.updateFolder(folder_id, {
        name
      }));
      /* istanbul ignore next */
      cov_3n8lvdoec().s[60]++;
      return {
        content: [{
          type: 'text',
          text: JSON.stringify(result, null, 2)
        }]
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_3n8lvdoec().s[61]++;
      console.error('Error updating folder:', error);
      /* istanbul ignore next */
      cov_3n8lvdoec().s[62]++;
      return {
        content: [{
          type: 'text',
          text: `Error updating folder: ${error.message}`
        }],
        isError: true
      };
    }
  });
  /* istanbul ignore next */
  cov_3n8lvdoec().s[63]++;
  server.tool('delete_folder', 'Delete a folder from ClickUp. Removes the folder and its contents.', {
    folder_id: z.string().describe('The ID of the folder to delete')
  }, async ({
    folder_id
  }) => {
    /* istanbul ignore next */
    cov_3n8lvdoec().f[10]++;
    cov_3n8lvdoec().s[64]++;
    try {
      const result =
      /* istanbul ignore next */
      (cov_3n8lvdoec().s[65]++, await foldersClient.deleteFolder(folder_id));
      /* istanbul ignore next */
      cov_3n8lvdoec().s[66]++;
      return {
        content: [{
          type: 'text',
          text: JSON.stringify(result, null, 2)
        }]
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_3n8lvdoec().s[67]++;
      console.error('Error deleting folder:', error);
      /* istanbul ignore next */
      cov_3n8lvdoec().s[68]++;
      return {
        content: [{
          type: 'text',
          text: `Error deleting folder: ${error.message}`
        }],
        isError: true
      };
    }
  });
  /* istanbul ignore next */
  cov_3n8lvdoec().s[69]++;
  server.tool('get_folderless_lists', 'Get lists that are not in any folder within a ClickUp space.', {
    space_id: z.string().describe('The ID of the space to get folderless lists from')
  }, async ({
    space_id
  }) => {
    /* istanbul ignore next */
    cov_3n8lvdoec().f[11]++;
    cov_3n8lvdoec().s[70]++;
    try {
      const result =
      /* istanbul ignore next */
      (cov_3n8lvdoec().s[71]++, await listsClient.getListsFromSpace(space_id));
      /* istanbul ignore next */
      cov_3n8lvdoec().s[72]++;
      return {
        content: [{
          type: 'text',
          text: JSON.stringify(result, null, 2)
        }]
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_3n8lvdoec().s[73]++;
      console.error('Error getting folderless lists:', error);
      /* istanbul ignore next */
      cov_3n8lvdoec().s[74]++;
      return {
        content: [{
          type: 'text',
          text: `Error getting folderless lists: ${error.message}`
        }],
        isError: true
      };
    }
  });
  /* istanbul ignore next */
  cov_3n8lvdoec().s[75]++;
  server.tool('create_list', 'Create a new list in a ClickUp folder or space with the specified name.', {
    container_type: z.enum(['folder', 'space']).describe('The type of container to create the list in'),
    container_id: z.string().describe('The ID of the container to create the list in'),
    name: z.string().describe('The name of the list')
  }, async ({
    container_type,
    container_id,
    name
  }) => {
    /* istanbul ignore next */
    cov_3n8lvdoec().f[12]++;
    cov_3n8lvdoec().s[76]++;
    try {
      let result;
      /* istanbul ignore next */
      cov_3n8lvdoec().s[77]++;
      if (container_type === 'folder') {
        /* istanbul ignore next */
        cov_3n8lvdoec().b[2][0]++;
        cov_3n8lvdoec().s[78]++;
        result = await listsClient.createListInFolder(container_id, {
          name
        });
      } else {
        /* istanbul ignore next */
        cov_3n8lvdoec().b[2][1]++;
        cov_3n8lvdoec().s[79]++;
        if (container_type === 'space') {
          /* istanbul ignore next */
          cov_3n8lvdoec().b[3][0]++;
          cov_3n8lvdoec().s[80]++;
          result = await listsClient.createFolderlessList(container_id, {
            name
          });
        } else {
          /* istanbul ignore next */
          cov_3n8lvdoec().b[3][1]++;
          cov_3n8lvdoec().s[81]++;
          throw new Error('Invalid container_type. Must be one of: folder, space');
        }
      }
      /* istanbul ignore next */
      cov_3n8lvdoec().s[82]++;
      return {
        content: [{
          type: 'text',
          text: JSON.stringify(result, null, 2)
        }]
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_3n8lvdoec().s[83]++;
      console.error(`Error creating list in ${container_type}:`, error);
      /* istanbul ignore next */
      cov_3n8lvdoec().s[84]++;
      return {
        content: [{
          type: 'text',
          text: `Error creating list: ${error.message}`
        }],
        isError: true
      };
    }
  });
  /* istanbul ignore next */
  cov_3n8lvdoec().s[85]++;
  server.tool('create_folderless_list', 'Create a new list directly in a ClickUp space without placing it in a folder.', {
    space_id: z.string().describe('The ID of the space to create the folderless list in'),
    name: z.string().describe('The name of the folderless list')
  }, async ({
    space_id,
    name
  }) => {
    /* istanbul ignore next */
    cov_3n8lvdoec().f[13]++;
    cov_3n8lvdoec().s[86]++;
    try {
      const result =
      /* istanbul ignore next */
      (cov_3n8lvdoec().s[87]++, await listsClient.createFolderlessList(space_id, {
        name
      }));
      /* istanbul ignore next */
      cov_3n8lvdoec().s[88]++;
      return {
        content: [{
          type: 'text',
          text: JSON.stringify(result, null, 2)
        }]
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_3n8lvdoec().s[89]++;
      console.error('Error creating folderless list:', error);
      /* istanbul ignore next */
      cov_3n8lvdoec().s[90]++;
      return {
        content: [{
          type: 'text',
          text: `Error creating folderless list: ${error.message}`
        }],
        isError: true
      };
    }
  });
  /* istanbul ignore next */
  cov_3n8lvdoec().s[91]++;
  server.tool('get_list', 'Get details about a specific ClickUp list including its name and content.', {
    list_id: z.string().describe('The ID of the list to get')
  }, async ({
    list_id
  }) => {
    /* istanbul ignore next */
    cov_3n8lvdoec().f[14]++;
    cov_3n8lvdoec().s[92]++;
    try {
      const result =
      /* istanbul ignore next */
      (cov_3n8lvdoec().s[93]++, await listsClient.getList(list_id));
      /* istanbul ignore next */
      cov_3n8lvdoec().s[94]++;
      return {
        content: [{
          type: 'text',
          text: JSON.stringify(result, null, 2)
        }]
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_3n8lvdoec().s[95]++;
      console.error('Error getting list:', error);
      /* istanbul ignore next */
      cov_3n8lvdoec().s[96]++;
      return {
        content: [{
          type: 'text',
          text: `Error getting list: ${error.message}`
        }],
        isError: true
      };
    }
  });
  /* istanbul ignore next */
  cov_3n8lvdoec().s[97]++;
  server.tool('update_list', 'Update an existing ClickUp list\'s name.', {
    list_id: z.string().describe('The ID of the list to update'),
    name: z.string().describe('The new name of the list')
  }, async ({
    list_id,
    name
  }) => {
    /* istanbul ignore next */
    cov_3n8lvdoec().f[15]++;
    cov_3n8lvdoec().s[98]++;
    try {
      const result =
      /* istanbul ignore next */
      (cov_3n8lvdoec().s[99]++, await listsClient.updateList(list_id, {
        name
      }));
      /* istanbul ignore next */
      cov_3n8lvdoec().s[100]++;
      return {
        content: [{
          type: 'text',
          text: JSON.stringify(result, null, 2)
        }]
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_3n8lvdoec().s[101]++;
      console.error('Error updating list:', error);
      /* istanbul ignore next */
      cov_3n8lvdoec().s[102]++;
      return {
        content: [{
          type: 'text',
          text: `Error updating list: ${error.message}`
        }],
        isError: true
      };
    }
  });
  /* istanbul ignore next */
  cov_3n8lvdoec().s[103]++;
  server.tool('delete_list', 'Delete a list from ClickUp. Removes the list and its tasks.', {
    list_id: z.string().describe('The ID of the list to delete')
  }, async ({
    list_id
  }) => {
    /* istanbul ignore next */
    cov_3n8lvdoec().f[16]++;
    cov_3n8lvdoec().s[104]++;
    try {
      const result =
      /* istanbul ignore next */
      (cov_3n8lvdoec().s[105]++, await listsClient.deleteList(list_id));
      /* istanbul ignore next */
      cov_3n8lvdoec().s[106]++;
      return {
        content: [{
          type: 'text',
          text: JSON.stringify(result, null, 2)
        }]
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_3n8lvdoec().s[107]++;
      console.error('Error deleting list:', error);
      /* istanbul ignore next */
      cov_3n8lvdoec().s[108]++;
      return {
        content: [{
          type: 'text',
          text: `Error deleting list: ${error.message}`
        }],
        isError: true
      };
    }
  });
  /* istanbul ignore next */
  cov_3n8lvdoec().s[109]++;
  server.tool('add_task_to_list', 'Add an existing task to a ClickUp list.', {
    list_id: z.string().describe('The ID of the list to add the task to'),
    task_id: z.string().describe('The ID of the task to add')
  }, async ({
    list_id,
    task_id
  }) => {
    /* istanbul ignore next */
    cov_3n8lvdoec().f[17]++;
    cov_3n8lvdoec().s[110]++;
    try {
      const result =
      /* istanbul ignore next */
      (cov_3n8lvdoec().s[111]++, await listsClient.addTaskToList(list_id, task_id));
      /* istanbul ignore next */
      cov_3n8lvdoec().s[112]++;
      return {
        content: [{
          type: 'text',
          text: JSON.stringify(result, null, 2)
        }]
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_3n8lvdoec().s[113]++;
      console.error('Error adding task to list:', error);
      /* istanbul ignore next */
      cov_3n8lvdoec().s[114]++;
      return {
        content: [{
          type: 'text',
          text: `Error adding task to list: ${error.message}`
        }],
        isError: true
      };
    }
  });
  /* istanbul ignore next */
  cov_3n8lvdoec().s[115]++;
  server.tool('remove_task_from_list', 'Remove a task from a ClickUp list without deleting the task.', {
    list_id: z.string().describe('The ID of the list to remove the task from'),
    task_id: z.string().describe('The ID of the task to remove')
  }, async ({
    list_id,
    task_id
  }) => {
    /* istanbul ignore next */
    cov_3n8lvdoec().f[18]++;
    cov_3n8lvdoec().s[116]++;
    try {
      const result =
      /* istanbul ignore next */
      (cov_3n8lvdoec().s[117]++, await listsClient.removeTaskFromList(list_id, task_id));
      /* istanbul ignore next */
      cov_3n8lvdoec().s[118]++;
      return {
        content: [{
          type: 'text',
          text: JSON.stringify(result, null, 2)
        }]
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_3n8lvdoec().s[119]++;
      console.error('Error removing task from list:', error);
      /* istanbul ignore next */
      cov_3n8lvdoec().s[120]++;
      return {
        content: [{
          type: 'text',
          text: `Error removing task from list: ${error.message}`
        }],
        isError: true
      };
    }
  });
  /* istanbul ignore next */
  cov_3n8lvdoec().s[121]++;
  server.tool('create_list_from_template_in_folder', 'Create a new list in a ClickUp folder using an existing template.', {
    folder_id: z.string().describe('The ID of the folder to create the list in'),
    template_id: z.string().describe('The ID of the template to use'),
    name: z.string().describe('The name of the list')
  }, async ({
    folder_id,
    template_id,
    name
  }) => {
    /* istanbul ignore next */
    cov_3n8lvdoec().f[19]++;
    cov_3n8lvdoec().s[122]++;
    try {
      const result =
      /* istanbul ignore next */
      (cov_3n8lvdoec().s[123]++, await listsClient.createListFromTemplateInFolder(folder_id, template_id, {
        name
      }));
      /* istanbul ignore next */
      cov_3n8lvdoec().s[124]++;
      return {
        content: [{
          type: 'text',
          text: JSON.stringify(result, null, 2)
        }]
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_3n8lvdoec().s[125]++;
      console.error('Error creating list from template in folder:', error);
      /* istanbul ignore next */
      cov_3n8lvdoec().s[126]++;
      return {
        content: [{
          type: 'text',
          text: `Error creating list from template in folder: ${error.message}`
        }],
        isError: true
      };
    }
  });
  /* istanbul ignore next */
  cov_3n8lvdoec().s[127]++;
  server.tool('create_list_from_template_in_space', 'Create a new list in a ClickUp space using an existing template.', {
    space_id: z.string().describe('The ID of the space to create the list in'),
    template_id: z.string().describe('The ID of the template to use'),
    name: z.string().describe('The name of the list')
  }, async ({
    space_id,
    template_id,
    name
  }) => {
    /* istanbul ignore next */
    cov_3n8lvdoec().f[20]++;
    cov_3n8lvdoec().s[128]++;
    try {
      const result =
      /* istanbul ignore next */
      (cov_3n8lvdoec().s[129]++, await listsClient.createListFromTemplateInSpace(space_id, template_id, {
        name
      }));
      /* istanbul ignore next */
      cov_3n8lvdoec().s[130]++;
      return {
        content: [{
          type: 'text',
          text: JSON.stringify(result, null, 2)
        }]
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_3n8lvdoec().s[131]++;
      console.error('Error creating list from template in space:', error);
      /* istanbul ignore next */
      cov_3n8lvdoec().s[132]++;
      return {
        content: [{
          type: 'text',
          text: `Error creating list from template in space: ${error.message}`
        }],
        isError: true
      };
    }
  });
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
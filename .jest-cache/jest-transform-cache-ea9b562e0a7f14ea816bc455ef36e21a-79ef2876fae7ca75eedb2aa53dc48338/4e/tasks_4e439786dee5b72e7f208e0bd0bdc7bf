f5a214fb4563deaa224f07063eb1e2ac
/* istanbul ignore next */
function cov_2rmy2e8nx0() {
  var path = "/Users/peterkrzyzek/Development/clickup-mcp-server/src/clickup-client/tasks.ts";
  var hash = "d7e0b9cf40d2408ed1f4e642633f4509b904bfb5";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/peterkrzyzek/Development/clickup-mcp-server/src/clickup-client/tasks.ts",
    statementMap: {
      "0": {
        start: {
          line: 4,
          column: 8
        },
        end: {
          line: 4,
          column: 29
        }
      },
      "1": {
        start: {
          line: 13,
          column: 23
        },
        end: {
          line: 13,
          column: 76
        }
      },
      "2": {
        start: {
          line: 15,
          column: 8
        },
        end: {
          line: 17,
          column: 9
        }
      },
      "3": {
        start: {
          line: 16,
          column: 12
        },
        end: {
          line: 16,
          column: 84
        }
      },
      "4": {
        start: {
          line: 16,
          column: 54
        },
        end: {
          line: 16,
          column: 82
        }
      },
      "5": {
        start: {
          line: 18,
          column: 8
        },
        end: {
          line: 18,
          column: 22
        }
      },
      "6": {
        start: {
          line: 28,
          column: 23
        },
        end: {
          line: 28,
          column: 71
        }
      },
      "7": {
        start: {
          line: 29,
          column: 8
        },
        end: {
          line: 29,
          column: 46
        }
      },
      "8": {
        start: {
          line: 39,
          column: 32
        },
        end: {
          line: 39,
          column: 45
        }
      },
      "9": {
        start: {
          line: 40,
          column: 8
        },
        end: {
          line: 44,
          column: 9
        }
      },
      "10": {
        start: {
          line: 41,
          column: 32
        },
        end: {
          line: 41,
          column: 76
        }
      },
      "11": {
        start: {
          line: 42,
          column: 12
        },
        end: {
          line: 42,
          column: 66
        }
      },
      "12": {
        start: {
          line: 45,
          column: 23
        },
        end: {
          line: 45,
          column: 86
        }
      },
      "13": {
        start: {
          line: 46,
          column: 8
        },
        end: {
          line: 46,
          column: 46
        }
      },
      "14": {
        start: {
          line: 56,
          column: 32
        },
        end: {
          line: 56,
          column: 45
        }
      },
      "15": {
        start: {
          line: 57,
          column: 8
        },
        end: {
          line: 61,
          column: 9
        }
      },
      "16": {
        start: {
          line: 58,
          column: 32
        },
        end: {
          line: 58,
          column: 76
        }
      },
      "17": {
        start: {
          line: 59,
          column: 12
        },
        end: {
          line: 59,
          column: 66
        }
      },
      "18": {
        start: {
          line: 62,
          column: 23
        },
        end: {
          line: 62,
          column: 80
        }
      },
      "19": {
        start: {
          line: 63,
          column: 8
        },
        end: {
          line: 63,
          column: 46
        }
      },
      "20": {
        start: {
          line: 71,
          column: 8
        },
        end: {
          line: 71,
          column: 53
        }
      },
      "21": {
        start: {
          line: 79,
          column: 8
        },
        end: {
          line: 93,
          column: 9
        }
      },
      "22": {
        start: {
          line: 81,
          column: 25
        },
        end: {
          line: 81,
          column: 51
        }
      },
      "23": {
        start: {
          line: 82,
          column: 12
        },
        end: {
          line: 84,
          column: 13
        }
      },
      "24": {
        start: {
          line: 83,
          column: 16
        },
        end: {
          line: 83,
          column: 64
        }
      },
      "25": {
        start: {
          line: 86,
          column: 27
        },
        end: {
          line: 86,
          column: 88
        }
      },
      "26": {
        start: {
          line: 88,
          column: 12
        },
        end: {
          line: 88,
          column: 71
        }
      },
      "27": {
        start: {
          line: 88,
          column: 47
        },
        end: {
          line: 88,
          column: 69
        }
      },
      "28": {
        start: {
          line: 91,
          column: 12
        },
        end: {
          line: 91,
          column: 79
        }
      },
      "29": {
        start: {
          line: 92,
          column: 12
        },
        end: {
          line: 92,
          column: 22
        }
      },
      "30": {
        start: {
          line: 96,
          column: 33
        },
        end: {
          line: 98,
          column: 1
        }
      },
      "31": {
        start: {
          line: 97,
          column: 4
        },
        end: {
          line: 97,
          column: 35
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 3,
            column: 4
          },
          end: {
            line: 3,
            column: 5
          }
        },
        loc: {
          start: {
            line: 3,
            column: 24
          },
          end: {
            line: 5,
            column: 5
          }
        },
        line: 3
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 12,
            column: 4
          },
          end: {
            line: 12,
            column: 5
          }
        },
        loc: {
          start: {
            line: 12,
            column: 43
          },
          end: {
            line: 19,
            column: 5
          }
        },
        line: 12
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 16,
            column: 44
          },
          end: {
            line: 16,
            column: 45
          }
        },
        loc: {
          start: {
            line: 16,
            column: 54
          },
          end: {
            line: 16,
            column: 82
          }
        },
        line: 16
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 27,
            column: 4
          },
          end: {
            line: 27,
            column: 5
          }
        },
        loc: {
          start: {
            line: 27,
            column: 34
          },
          end: {
            line: 30,
            column: 5
          }
        },
        line: 27
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 37,
            column: 4
          },
          end: {
            line: 37,
            column: 5
          }
        },
        loc: {
          start: {
            line: 37,
            column: 37
          },
          end: {
            line: 47,
            column: 5
          }
        },
        line: 37
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 54,
            column: 4
          },
          end: {
            line: 54,
            column: 5
          }
        },
        loc: {
          start: {
            line: 54,
            column: 37
          },
          end: {
            line: 64,
            column: 5
          }
        },
        line: 54
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 70,
            column: 4
          },
          end: {
            line: 70,
            column: 5
          }
        },
        loc: {
          start: {
            line: 70,
            column: 29
          },
          end: {
            line: 72,
            column: 5
          }
        },
        line: 70
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 78,
            column: 4
          },
          end: {
            line: 78,
            column: 5
          }
        },
        loc: {
          start: {
            line: 78,
            column: 30
          },
          end: {
            line: 94,
            column: 5
          }
        },
        line: 78
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 88,
            column: 39
          },
          end: {
            line: 88,
            column: 40
          }
        },
        loc: {
          start: {
            line: 88,
            column: 47
          },
          end: {
            line: 88,
            column: 69
          }
        },
        line: 88
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 96,
            column: 33
          },
          end: {
            line: 96,
            column: 34
          }
        },
        loc: {
          start: {
            line: 96,
            column: 45
          },
          end: {
            line: 98,
            column: 1
          }
        },
        line: 96
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 15,
            column: 8
          },
          end: {
            line: 17,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 15,
            column: 8
          },
          end: {
            line: 17,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 15
      },
      "1": {
        loc: {
          start: {
            line: 15,
            column: 12
          },
          end: {
            line: 15,
            column: 55
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 15,
            column: 12
          },
          end: {
            line: 15,
            column: 24
          }
        }, {
          start: {
            line: 15,
            column: 28
          },
          end: {
            line: 15,
            column: 55
          }
        }],
        line: 15
      },
      "2": {
        loc: {
          start: {
            line: 40,
            column: 8
          },
          end: {
            line: 44,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 40,
            column: 8
          },
          end: {
            line: 44,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 40
      },
      "3": {
        loc: {
          start: {
            line: 57,
            column: 8
          },
          end: {
            line: 61,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 57,
            column: 8
          },
          end: {
            line: 61,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 57
      },
      "4": {
        loc: {
          start: {
            line: 82,
            column: 12
          },
          end: {
            line: 84,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 82,
            column: 12
          },
          end: {
            line: 84,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 82
      },
      "5": {
        loc: {
          start: {
            line: 82,
            column: 16
          },
          end: {
            line: 82,
            column: 43
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 82,
            column: 16
          },
          end: {
            line: 82,
            column: 26
          }
        }, {
          start: {
            line: 82,
            column: 30
          },
          end: {
            line: 82,
            column: 43
          }
        }],
        line: 82
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0]
    },
    inputSourceMap: {
      file: "/Users/peterkrzyzek/Development/clickup-mcp-server/src/clickup-client/tasks.ts",
      mappings: "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",
      names: [],
      sources: ["/Users/peterkrzyzek/Development/clickup-mcp-server/src/clickup-client/tasks.ts"],
      sourcesContent: ["import { ClickUpClient } from './index.js';\nimport { prepareContentForClickUp, processClickUpResponse } from '../utils/markdown.js';\n\nexport interface Task {\n  id: string;\n  name: string;\n  description?: string;\n  text_content?: string; // Plain text version of description\n  description_markdown?: string; // Markdown version for display\n  status?: {\n    status: string;\n    color: string;\n  };\n  date_created?: string;\n  date_updated?: string;\n  date_closed?: string;\n  creator?: {\n    id: number;\n    username: string;\n    email: string;\n  };\n  assignees?: Array<{\n    id: number;\n    username: string;\n    email: string;\n  }>;\n  priority?: {\n    id: string;\n    priority: string;\n    color: string;\n  };\n  due_date?: string | null;\n  start_date?: string | null;\n  time_estimate?: number | null;\n  time_spent?: number | null;\n  custom_fields?: Array<any>;\n  list?: {\n    id: string;\n    name: string;\n  };\n  folder?: {\n    id: string;\n    name: string;\n  };\n  space?: {\n    id: string;\n    name: string;\n  };\n  url: string;\n  subtasks?: Task[]; // Add subtasks property\n  parent?: string; // Add parent property\n  top_level_parent?: string; // Add top_level_parent property\n}\n\nexport interface CreateTaskParams {\n  name: string;\n  description?: string;\n  assignees?: number[];\n  tags?: string[];\n  status?: string;\n  priority?: number;\n  due_date?: number;\n  due_date_time?: boolean;\n  time_estimate?: number;\n  start_date?: number;\n  start_date_time?: boolean;\n  notify_all?: boolean;\n  parent?: string;\n  links_to?: string;\n  check_required_custom_fields?: boolean;\n  custom_fields?: Array<{\n    id: string;\n    value: any;\n  }>;\n}\n\nexport interface UpdateTaskParams {\n  name?: string;\n  description?: string;\n  assignees?: number[];\n  status?: string;\n  priority?: number;\n  due_date?: number;\n  due_date_time?: boolean;\n  time_estimate?: number;\n  start_date?: number;\n  start_date_time?: boolean;\n  notify_all?: boolean;\n  parent?: string;\n  custom_fields?: Array<{\n    id: string;\n    value: any;\n  }>;\n}\n\nexport interface GetTasksParams {\n  page?: number;\n  order_by?: string;\n  reverse?: boolean;\n  subtasks?: boolean;\n  statuses?: string[];\n  include_closed?: boolean;\n  assignees?: number[];\n  due_date_gt?: number;\n  due_date_lt?: number;\n  date_created_gt?: number;\n  date_created_lt?: number;\n  date_updated_gt?: number;\n  date_updated_lt?: number;\n  custom_fields?: Array<{\n    field_id: string;\n    operator: string;\n    value: any;\n  }>;\n}\n\nexport class TasksClient {\n  private client: ClickUpClient;\n\n  constructor(client: ClickUpClient) {\n    this.client = client;\n  }\n\n  /**\n   * Get tasks from a specific list\n   * @param listId The ID of the list to get tasks from\n   * @param params Optional parameters for filtering tasks\n   * @returns A list of tasks with processed content\n   */\n  async getTasksFromList(listId: string, params?: GetTasksParams): Promise<{ tasks: Task[] }> {\n    const result = await this.client.get(`/list/${listId}/task`, params);\n    \n    // Process each task's content\n    if (result.tasks && Array.isArray(result.tasks)) {\n      result.tasks = result.tasks.map((task: any) => processClickUpResponse(task));\n    }\n    \n    return result;\n  }\n\n  // Removed pseudo endpoints for getting tasks from spaces and folders\n\n  /**\n   * Get a specific task by ID\n   * @param taskId The ID of the task to get\n   * @param params Optional parameters (include_subtasks)\n   * @returns The task details with processed content\n   */\n  async getTask(taskId: string, params?: { include_subtasks?: boolean }): Promise<Task> {\n    const result = await this.client.get(`/task/${taskId}`, params);\n    return processClickUpResponse(result);\n  }\n\n  /**\n   * Create a new task in a list\n   * @param listId The ID of the list to create the task in\n   * @param params The task parameters (supports markdown in description)\n   * @returns The created task with processed content\n   */\n  async createTask(listId: string, params: CreateTaskParams): Promise<Task> {\n    // Process description for markdown support\n    const processedParams = { ...params };\n    if (params.description) {\n      const contentData = prepareContentForClickUp(params.description);\n      processedParams.description = contentData.description;\n      // Note: ClickUp API doesn't accept text_content on create, it generates it\n    }\n    \n    const result = await this.client.post(`/list/${listId}/task`, processedParams);\n    return processClickUpResponse(result);\n  }\n\n  /**\n   * Update an existing task\n   * @param taskId The ID of the task to update\n   * @param params The task parameters to update (supports markdown in description)\n   * @returns The updated task with processed content\n   */\n  async updateTask(taskId: string, params: UpdateTaskParams): Promise<Task> {\n    // Process description for markdown support\n    const processedParams = { ...params };\n    if (params.description) {\n      const contentData = prepareContentForClickUp(params.description);\n      processedParams.description = contentData.description;\n      // Note: ClickUp API doesn't accept text_content on update, it generates it\n    }\n    \n    const result = await this.client.put(`/task/${taskId}`, processedParams);\n    return processClickUpResponse(result);\n  }\n\n  /**\n   * Delete a task\n   * @param taskId The ID of the task to delete\n   * @returns Success message\n   */\n  async deleteTask(taskId: string): Promise<{ success: boolean }> {\n    return this.client.delete(`/task/${taskId}`);\n  }\n\n  /**\n   * Get subtasks of a specific task\n   * @param taskId The ID of the task to get subtasks for\n   * @returns A list of subtasks\n   */\n  async getSubtasks(taskId: string): Promise<Task[]> {\n    try {\n      // First, we need to get the task to find its list ID\n      const task = await this.getTask(taskId);\n      if (!task.list || !task.list.id) {\n        throw new Error('Task does not have a list ID');\n      }\n      \n      // Then, get all tasks from the list with subtasks included\n      const result = await this.getTasksFromList(task.list.id, { subtasks: true });\n      \n      // Filter tasks to find those that have the specified task as parent\n      return result.tasks.filter(task => task.parent === taskId);\n    } catch (error) {\n      console.error(`Error getting subtasks for task ${taskId}:`, error);\n      return [];\n    }\n  }\n}\n\nexport const createTasksClient = (client: ClickUpClient): TasksClient => {\n  return new TasksClient(client);\n};\n"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "d7e0b9cf40d2408ed1f4e642633f4509b904bfb5"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_2rmy2e8nx0 = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_2rmy2e8nx0();
import { prepareContentForClickUp, processClickUpResponse } from '../utils/markdown.js';
export class TasksClient {
  constructor(client) {
    /* istanbul ignore next */
    cov_2rmy2e8nx0().f[0]++;
    cov_2rmy2e8nx0().s[0]++;
    this.client = client;
  }
  /**
   * Get tasks from a specific list
   * @param listId The ID of the list to get tasks from
   * @param params Optional parameters for filtering tasks
   * @returns A list of tasks with processed content
   */
  async getTasksFromList(listId, params) {
    /* istanbul ignore next */
    cov_2rmy2e8nx0().f[1]++;
    const result =
    /* istanbul ignore next */
    (cov_2rmy2e8nx0().s[1]++, await this.client.get(`/list/${listId}/task`, params));
    // Process each task's content
    /* istanbul ignore next */
    cov_2rmy2e8nx0().s[2]++;
    if (
    /* istanbul ignore next */
    (cov_2rmy2e8nx0().b[1][0]++, result.tasks) &&
    /* istanbul ignore next */
    (cov_2rmy2e8nx0().b[1][1]++, Array.isArray(result.tasks))) {
      /* istanbul ignore next */
      cov_2rmy2e8nx0().b[0][0]++;
      cov_2rmy2e8nx0().s[3]++;
      result.tasks = result.tasks.map(task => {
        /* istanbul ignore next */
        cov_2rmy2e8nx0().f[2]++;
        cov_2rmy2e8nx0().s[4]++;
        return processClickUpResponse(task);
      });
    } else
    /* istanbul ignore next */
    {
      cov_2rmy2e8nx0().b[0][1]++;
    }
    cov_2rmy2e8nx0().s[5]++;
    return result;
  }
  // Removed pseudo endpoints for getting tasks from spaces and folders
  /**
   * Get a specific task by ID
   * @param taskId The ID of the task to get
   * @param params Optional parameters (include_subtasks)
   * @returns The task details with processed content
   */
  async getTask(taskId, params) {
    /* istanbul ignore next */
    cov_2rmy2e8nx0().f[3]++;
    const result =
    /* istanbul ignore next */
    (cov_2rmy2e8nx0().s[6]++, await this.client.get(`/task/${taskId}`, params));
    /* istanbul ignore next */
    cov_2rmy2e8nx0().s[7]++;
    return processClickUpResponse(result);
  }
  /**
   * Create a new task in a list
   * @param listId The ID of the list to create the task in
   * @param params The task parameters (supports markdown in description)
   * @returns The created task with processed content
   */
  async createTask(listId, params) {
    /* istanbul ignore next */
    cov_2rmy2e8nx0().f[4]++;
    // Process description for markdown support
    const processedParams =
    /* istanbul ignore next */
    (cov_2rmy2e8nx0().s[8]++, {
      ...params
    });
    /* istanbul ignore next */
    cov_2rmy2e8nx0().s[9]++;
    if (params.description) {
      /* istanbul ignore next */
      cov_2rmy2e8nx0().b[2][0]++;
      const contentData =
      /* istanbul ignore next */
      (cov_2rmy2e8nx0().s[10]++, prepareContentForClickUp(params.description));
      /* istanbul ignore next */
      cov_2rmy2e8nx0().s[11]++;
      processedParams.description = contentData.description;
      // Note: ClickUp API doesn't accept text_content on create, it generates it
    } else
    /* istanbul ignore next */
    {
      cov_2rmy2e8nx0().b[2][1]++;
    }
    const result =
    /* istanbul ignore next */
    (cov_2rmy2e8nx0().s[12]++, await this.client.post(`/list/${listId}/task`, processedParams));
    /* istanbul ignore next */
    cov_2rmy2e8nx0().s[13]++;
    return processClickUpResponse(result);
  }
  /**
   * Update an existing task
   * @param taskId The ID of the task to update
   * @param params The task parameters to update (supports markdown in description)
   * @returns The updated task with processed content
   */
  async updateTask(taskId, params) {
    /* istanbul ignore next */
    cov_2rmy2e8nx0().f[5]++;
    // Process description for markdown support
    const processedParams =
    /* istanbul ignore next */
    (cov_2rmy2e8nx0().s[14]++, {
      ...params
    });
    /* istanbul ignore next */
    cov_2rmy2e8nx0().s[15]++;
    if (params.description) {
      /* istanbul ignore next */
      cov_2rmy2e8nx0().b[3][0]++;
      const contentData =
      /* istanbul ignore next */
      (cov_2rmy2e8nx0().s[16]++, prepareContentForClickUp(params.description));
      /* istanbul ignore next */
      cov_2rmy2e8nx0().s[17]++;
      processedParams.description = contentData.description;
      // Note: ClickUp API doesn't accept text_content on update, it generates it
    } else
    /* istanbul ignore next */
    {
      cov_2rmy2e8nx0().b[3][1]++;
    }
    const result =
    /* istanbul ignore next */
    (cov_2rmy2e8nx0().s[18]++, await this.client.put(`/task/${taskId}`, processedParams));
    /* istanbul ignore next */
    cov_2rmy2e8nx0().s[19]++;
    return processClickUpResponse(result);
  }
  /**
   * Delete a task
   * @param taskId The ID of the task to delete
   * @returns Success message
   */
  async deleteTask(taskId) {
    /* istanbul ignore next */
    cov_2rmy2e8nx0().f[6]++;
    cov_2rmy2e8nx0().s[20]++;
    return this.client.delete(`/task/${taskId}`);
  }
  /**
   * Get subtasks of a specific task
   * @param taskId The ID of the task to get subtasks for
   * @returns A list of subtasks
   */
  async getSubtasks(taskId) {
    /* istanbul ignore next */
    cov_2rmy2e8nx0().f[7]++;
    cov_2rmy2e8nx0().s[21]++;
    try {
      // First, we need to get the task to find its list ID
      const task =
      /* istanbul ignore next */
      (cov_2rmy2e8nx0().s[22]++, await this.getTask(taskId));
      /* istanbul ignore next */
      cov_2rmy2e8nx0().s[23]++;
      if (
      /* istanbul ignore next */
      (cov_2rmy2e8nx0().b[5][0]++, !task.list) ||
      /* istanbul ignore next */
      (cov_2rmy2e8nx0().b[5][1]++, !task.list.id)) {
        /* istanbul ignore next */
        cov_2rmy2e8nx0().b[4][0]++;
        cov_2rmy2e8nx0().s[24]++;
        throw new Error('Task does not have a list ID');
      } else
      /* istanbul ignore next */
      {
        cov_2rmy2e8nx0().b[4][1]++;
      }
      // Then, get all tasks from the list with subtasks included
      const result =
      /* istanbul ignore next */
      (cov_2rmy2e8nx0().s[25]++, await this.getTasksFromList(task.list.id, {
        subtasks: true
      }));
      // Filter tasks to find those that have the specified task as parent
      /* istanbul ignore next */
      cov_2rmy2e8nx0().s[26]++;
      return result.tasks.filter(task => {
        /* istanbul ignore next */
        cov_2rmy2e8nx0().f[8]++;
        cov_2rmy2e8nx0().s[27]++;
        return task.parent === taskId;
      });
    } catch (error) {
      /* istanbul ignore next */
      cov_2rmy2e8nx0().s[28]++;
      console.error(`Error getting subtasks for task ${taskId}:`, error);
      /* istanbul ignore next */
      cov_2rmy2e8nx0().s[29]++;
      return [];
    }
  }
}
/* istanbul ignore next */
cov_2rmy2e8nx0().s[30]++;
export const createTasksClient = client => {
  /* istanbul ignore next */
  cov_2rmy2e8nx0().f[9]++;
  cov_2rmy2e8nx0().s[31]++;
  return new TasksClient(client);
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
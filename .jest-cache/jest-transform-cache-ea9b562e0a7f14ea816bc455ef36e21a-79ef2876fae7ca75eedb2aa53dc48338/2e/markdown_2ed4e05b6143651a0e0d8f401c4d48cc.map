{"version":3,"names":["cov_15os8cs0qs","actualCoverage","marked","TurndownService","s","setOptions","gfm","breaks","turndownService","headingStyle","codeBlockStyle","fence","emDelimiter","strongDelimiter","linkStyle","linkReferenceStyle","addRule","filter","replacement","content","f","markdownToHtml","markdown","b","result","parse","error","console","warn","htmlToMarkdown","html","turndown","replace","markdownToPlainText","htmlResult","trim","isMarkdown","markdownPatterns","some","pattern","test","isHtml","formatContent","targetFormat","isCurrentlyHtml","isCurrentlyMarkdown","prepareContentForClickUp","description","plainText","text_content","processClickUpResponse","response","processed","description_markdown","comment_text","comment","Array","isArray","htmlContent","map","block","text","join","comment_markdown"],"sources":["/Users/peterkrzyzek/Development/clickup-mcp-server/src/utils/markdown.ts"],"sourcesContent":["import { marked } from 'marked';\nimport TurndownService from 'turndown';\n\n/**\n * Markdown processing utilities for ClickUp content\n * Handles conversion between markdown, HTML, and plain text formats\n */\n\n// Configure marked for ClickUp-compatible HTML output\nmarked.setOptions({\n  gfm: true, // GitHub Flavored Markdown\n  breaks: true, // Convert line breaks to <br>\n});\n\n// Configure Turndown for ClickUp HTML to markdown conversion\nconst turndownService = new TurndownService({\n  headingStyle: 'atx', // Use # for headers\n  codeBlockStyle: 'fenced', // Use ``` for code blocks\n  fence: '```', // Use ``` for code fences\n  emDelimiter: '*', // Use * for emphasis\n  strongDelimiter: '**', // Use ** for strong\n  linkStyle: 'inlined', // Use [text](url) for links\n  linkReferenceStyle: 'full', // Use full reference links\n});\n\n// Add custom rules for ClickUp-specific elements\nturndownService.addRule('strikethrough', {\n  filter: ['del', 's'],\n  replacement: (content) => `~~${content}~~`\n});\n\nturndownService.addRule('underline', {\n  filter: 'u',\n  replacement: (content) => `<u>${content}</u>` // Keep underline as HTML since markdown doesn't support it\n});\n\nturndownService.addRule('highlight', {\n  filter: 'mark',\n  replacement: (content) => `==${content}==` // Use highlight syntax\n});\n\n/**\n * Convert markdown to HTML for ClickUp API submission\n * @param markdown The markdown content to convert\n * @returns HTML string suitable for ClickUp API\n */\nexport function markdownToHtml(markdown: string): string {\n  if (!markdown || typeof markdown !== 'string') {\n    return '';\n  }\n  \n  try {\n    const result = marked.parse(markdown);\n    return typeof result === 'string' ? result : '';\n  } catch (error) {\n    console.warn('Failed to parse markdown, returning as plain text:', error);\n    return markdown;\n  }\n}\n\n/**\n * Convert HTML to markdown for display/editing\n * @param html The HTML content to convert\n * @returns Markdown string\n */\nexport function htmlToMarkdown(html: string): string {\n  if (!html || typeof html !== 'string') {\n    return '';\n  }\n  \n  try {\n    return turndownService.turndown(html);\n  } catch (error) {\n    console.warn('Failed to convert HTML to markdown, returning as plain text:', error);\n    // Strip HTML tags as fallback\n    return html.replace(/<[^>]*>/g, '');\n  }\n}\n\n/**\n * Convert markdown to plain text by stripping formatting\n * @param markdown The markdown content to convert\n * @returns Plain text string\n */\nexport function markdownToPlainText(markdown: string): string {\n  if (!markdown || typeof markdown !== 'string') {\n    return '';\n  }\n  \n  try {\n    // First convert to HTML, then strip tags\n    const htmlResult = marked.parse(markdown);\n    const html = typeof htmlResult === 'string' ? htmlResult : '';\n    return html.replace(/<[^>]*>/g, '').replace(/\\n\\s*\\n/g, '\\n').trim();\n  } catch (error) {\n    console.warn('Failed to convert markdown to plain text:', error);\n    // Fallback: basic markdown stripping\n    return markdown\n      .replace(/#{1,6}\\s+/g, '') // Remove headers\n      .replace(/\\*\\*(.*?)\\*\\*/g, '$1') // Remove bold\n      .replace(/\\*(.*?)\\*/g, '$1') // Remove italic\n      .replace(/`(.*?)`/g, '$1') // Remove inline code\n      .replace(/```[\\s\\S]*?```/g, '') // Remove code blocks\n      .replace(/\\[([^\\]]+)\\]\\([^)]+\\)/g, '$1') // Convert links to text\n      .replace(/!\\[([^\\]]*)\\]\\([^)]+\\)/g, '$1') // Convert images to alt text\n      .trim();\n  }\n}\n\n/**\n * Detect if content contains markdown formatting\n * @param content The content to check\n * @returns True if content appears to contain markdown\n */\nexport function isMarkdown(content: string): boolean {\n  if (!content || typeof content !== 'string') {\n    return false;\n  }\n  \n  // Check for common markdown patterns\n  const markdownPatterns = [\n    /#{1,6}\\s+/, // Headers\n    /\\*\\*.*?\\*\\*/, // Bold\n    /\\*.*?\\*/, // Italic\n    /`.*?`/, // Inline code\n    /```[\\s\\S]*?```/, // Code blocks\n    /\\[.*?\\]\\(.*?\\)/, // Links\n    /!\\[.*?\\]\\(.*?\\)/, // Images\n    /^\\s*[-*+]\\s+/m, // Unordered lists\n    /^\\s*\\d+\\.\\s+/m, // Ordered lists\n    /^\\s*>\\s+/m, // Blockquotes\n    /~~.*?~~/, // Strikethrough\n    /==[^=]+==/, // Highlight\n  ];\n  \n  return markdownPatterns.some(pattern => pattern.test(content));\n}\n\n/**\n * Detect if content contains HTML formatting\n * @param content The content to check\n * @returns True if content appears to contain HTML\n */\nexport function isHtml(content: string): boolean {\n  if (!content || typeof content !== 'string') {\n    return false;\n  }\n  \n  // Check for HTML tags\n  return /<[^>]+>/g.test(content);\n}\n\n/**\n * Smart content formatter that detects format and converts appropriately\n * @param content The content to format\n * @param targetFormat The desired output format\n * @returns Formatted content\n */\nexport function formatContent(\n  content: string, \n  targetFormat: 'html' | 'markdown' | 'plain'\n): string {\n  if (!content || typeof content !== 'string') {\n    return '';\n  }\n  \n  // Detect current format\n  const isCurrentlyHtml = isHtml(content);\n  const isCurrentlyMarkdown = !isCurrentlyHtml && isMarkdown(content);\n  \n  switch (targetFormat) {\n    case 'html':\n      if (isCurrentlyHtml) return content;\n      if (isCurrentlyMarkdown) return markdownToHtml(content);\n      return content; // Plain text, return as-is\n      \n    case 'markdown':\n      if (isCurrentlyMarkdown) return content;\n      if (isCurrentlyHtml) return htmlToMarkdown(content);\n      return content; // Plain text, return as-is\n      \n    case 'plain':\n      if (isCurrentlyMarkdown) return markdownToPlainText(content);\n      if (isCurrentlyHtml) return htmlToMarkdown(content).replace(/[*_`#\\[\\]()]/g, '');\n      return content; // Already plain text\n      \n    default:\n      return content;\n  }\n}\n\n/**\n * Prepare content for ClickUp API submission\n * Converts markdown to HTML and provides both formats\n * @param content The content to prepare (markdown or plain text)\n * @returns Object with both HTML and plain text versions\n */\nexport function prepareContentForClickUp(content: string): {\n  description: string; // HTML version for rich text\n  text_content?: string; // Plain text version for compatibility\n} {\n  if (!content || typeof content !== 'string') {\n    return { description: '' };\n  }\n  \n  // If content looks like markdown, convert to HTML\n  if (isMarkdown(content)) {\n    const html = markdownToHtml(content);\n    const plainText = markdownToPlainText(content);\n    \n    return {\n      description: html,\n      text_content: plainText\n    };\n  }\n  \n  // If content is already HTML, use as-is\n  if (isHtml(content)) {\n    const plainText = htmlToMarkdown(content);\n    \n    return {\n      description: content,\n      text_content: markdownToPlainText(plainText)\n    };\n  }\n  \n  // Plain text content\n  return {\n    description: content,\n    text_content: content\n  };\n}\n\n/**\n * Process ClickUp response content for display\n * Converts HTML to markdown for better readability\n * @param response ClickUp API response with description/text_content\n * @returns Processed content with markdown formatting\n */\nexport function processClickUpResponse(response: any): any {\n  if (!response || typeof response !== 'object') {\n    return response;\n  }\n  \n  const processed = { ...response };\n  \n  // Process description field\n  if (processed.description && isHtml(processed.description)) {\n    processed.description_markdown = htmlToMarkdown(processed.description);\n  }\n  \n  // Process comment fields\n  if (processed.comment_text && processed.comment && Array.isArray(processed.comment)) {\n    // ClickUp comments come as rich text blocks, try to convert to markdown\n    try {\n      const htmlContent = processed.comment.map((block: any) => {\n        if (typeof block === 'string') return block;\n        if (block.text) return block.text;\n        return '';\n      }).join('');\n      \n      if (htmlContent && isHtml(htmlContent)) {\n        processed.comment_markdown = htmlToMarkdown(htmlContent);\n      }\n    } catch (error) {\n      console.warn('Failed to process comment blocks:', error);\n    }\n  }\n  \n  return processed;\n}\n"],"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","ignoreList":[]}
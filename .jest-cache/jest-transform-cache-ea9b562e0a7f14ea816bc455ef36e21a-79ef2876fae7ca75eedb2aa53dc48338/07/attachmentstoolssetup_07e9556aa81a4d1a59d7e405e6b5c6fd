32d06cc519b4a30e9101e3ad9fca20de
/* istanbul ignore next */
function cov_645qbxphc() {
  var path = "/Users/peterkrzyzek/Development/clickup-mcp-server/src/tools/attachments-tools-setup.ts";
  var hash = "e954eba8a7b8ae5938813d925f0d6f9c4b7e7cef";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/peterkrzyzek/Development/clickup-mcp-server/src/tools/attachments-tools-setup.ts",
    statementMap: {
      "0": {
        start: {
          line: 6,
          column: 22
        },
        end: {
          line: 6,
          column: 43
        }
      },
      "1": {
        start: {
          line: 7,
          column: 26
        },
        end: {
          line: 7,
          column: 86
        }
      },
      "2": {
        start: {
          line: 12,
          column: 4
        },
        end: {
          line: 41,
          column: 7
        }
      },
      "3": {
        start: {
          line: 22,
          column: 8
        },
        end: {
          line: 40,
          column: 9
        }
      },
      "4": {
        start: {
          line: 23,
          column: 28
        },
        end: {
          line: 23,
          column: 62
        }
      },
      "5": {
        start: {
          line: 24,
          column: 27
        },
        end: {
          line: 24,
          column: 76
        }
      },
      "6": {
        start: {
          line: 25,
          column: 12
        },
        end: {
          line: 30,
          column: 14
        }
      },
      "7": {
        start: {
          line: 33,
          column: 12
        },
        end: {
          line: 39,
          column: 14
        }
      },
      "8": {
        start: {
          line: 42,
          column: 4
        },
        end: {
          line: 72,
          column: 7
        }
      },
      "9": {
        start: {
          line: 53,
          column: 8
        },
        end: {
          line: 71,
          column: 9
        }
      },
      "10": {
        start: {
          line: 54,
          column: 27
        },
        end: {
          line: 54,
          column: 65
        }
      },
      "11": {
        start: {
          line: 55,
          column: 27
        },
        end: {
          line: 55,
          column: 73
        }
      },
      "12": {
        start: {
          line: 56,
          column: 12
        },
        end: {
          line: 61,
          column: 14
        }
      },
      "13": {
        start: {
          line: 64,
          column: 12
        },
        end: {
          line: 70,
          column: 14
        }
      },
      "14": {
        start: {
          line: 73,
          column: 4
        },
        end: {
          line: 94,
          column: 7
        }
      },
      "15": {
        start: {
          line: 76,
          column: 8
        },
        end: {
          line: 93,
          column: 9
        }
      },
      "16": {
        start: {
          line: 77,
          column: 27
        },
        end: {
          line: 77,
          column: 88
        }
      },
      "17": {
        start: {
          line: 78,
          column: 12
        },
        end: {
          line: 83,
          column: 14
        }
      },
      "18": {
        start: {
          line: 86,
          column: 12
        },
        end: {
          line: 92,
          column: 14
        }
      },
      "19": {
        start: {
          line: 95,
          column: 4
        },
        end: {
          line: 120,
          column: 7
        }
      },
      "20": {
        start: {
          line: 101,
          column: 8
        },
        end: {
          line: 119,
          column: 9
        }
      },
      "21": {
        start: {
          line: 102,
          column: 28
        },
        end: {
          line: 102,
          column: 70
        }
      },
      "22": {
        start: {
          line: 103,
          column: 27
        },
        end: {
          line: 103,
          column: 84
        }
      },
      "23": {
        start: {
          line: 104,
          column: 12
        },
        end: {
          line: 109,
          column: 14
        }
      },
      "24": {
        start: {
          line: 112,
          column: 12
        },
        end: {
          line: 118,
          column: 14
        }
      },
      "25": {
        start: {
          line: 121,
          column: 4
        },
        end: {
          line: 142,
          column: 7
        }
      },
      "26": {
        start: {
          line: 124,
          column: 8
        },
        end: {
          line: 141,
          column: 9
        }
      },
      "27": {
        start: {
          line: 125,
          column: 27
        },
        end: {
          line: 125,
          column: 87
        }
      },
      "28": {
        start: {
          line: 126,
          column: 12
        },
        end: {
          line: 131,
          column: 14
        }
      },
      "29": {
        start: {
          line: 134,
          column: 12
        },
        end: {
          line: 140,
          column: 14
        }
      },
      "30": {
        start: {
          line: 143,
          column: 4
        },
        end: {
          line: 164,
          column: 7
        }
      },
      "31": {
        start: {
          line: 146,
          column: 8
        },
        end: {
          line: 163,
          column: 9
        }
      },
      "32": {
        start: {
          line: 147,
          column: 27
        },
        end: {
          line: 147,
          column: 89
        }
      },
      "33": {
        start: {
          line: 148,
          column: 12
        },
        end: {
          line: 153,
          column: 14
        }
      },
      "34": {
        start: {
          line: 156,
          column: 12
        },
        end: {
          line: 162,
          column: 14
        }
      },
      "35": {
        start: {
          line: 168,
          column: 4
        },
        end: {
          line: 212,
          column: 7
        }
      },
      "36": {
        start: {
          line: 182,
          column: 8
        },
        end: {
          line: 211,
          column: 9
        }
      },
      "37": {
        start: {
          line: 183,
          column: 27
        },
        end: {
          line: 195,
          column: 14
        }
      },
      "38": {
        start: {
          line: 196,
          column: 12
        },
        end: {
          line: 201,
          column: 14
        }
      },
      "39": {
        start: {
          line: 204,
          column: 12
        },
        end: {
          line: 210,
          column: 14
        }
      },
      "40": {
        start: {
          line: 213,
          column: 4
        },
        end: {
          line: 234,
          column: 7
        }
      },
      "41": {
        start: {
          line: 216,
          column: 8
        },
        end: {
          line: 233,
          column: 9
        }
      },
      "42": {
        start: {
          line: 217,
          column: 27
        },
        end: {
          line: 217,
          column: 88
        }
      },
      "43": {
        start: {
          line: 218,
          column: 12
        },
        end: {
          line: 223,
          column: 14
        }
      },
      "44": {
        start: {
          line: 226,
          column: 12
        },
        end: {
          line: 232,
          column: 14
        }
      },
      "45": {
        start: {
          line: 235,
          column: 4
        },
        end: {
          line: 260,
          column: 7
        }
      },
      "46": {
        start: {
          line: 241,
          column: 8
        },
        end: {
          line: 259,
          column: 9
        }
      },
      "47": {
        start: {
          line: 242,
          column: 28
        },
        end: {
          line: 242,
          column: 63
        }
      },
      "48": {
        start: {
          line: 243,
          column: 27
        },
        end: {
          line: 243,
          column: 83
        }
      },
      "49": {
        start: {
          line: 244,
          column: 12
        },
        end: {
          line: 249,
          column: 14
        }
      },
      "50": {
        start: {
          line: 252,
          column: 12
        },
        end: {
          line: 258,
          column: 14
        }
      },
      "51": {
        start: {
          line: 261,
          column: 4
        },
        end: {
          line: 284,
          column: 7
        }
      },
      "52": {
        start: {
          line: 266,
          column: 8
        },
        end: {
          line: 283,
          column: 9
        }
      },
      "53": {
        start: {
          line: 267,
          column: 27
        },
        end: {
          line: 267,
          column: 133
        }
      },
      "54": {
        start: {
          line: 268,
          column: 12
        },
        end: {
          line: 273,
          column: 14
        }
      },
      "55": {
        start: {
          line: 276,
          column: 12
        },
        end: {
          line: 282,
          column: 14
        }
      },
      "56": {
        start: {
          line: 285,
          column: 4
        },
        end: {
          line: 308,
          column: 7
        }
      },
      "57": {
        start: {
          line: 290,
          column: 8
        },
        end: {
          line: 307,
          column: 9
        }
      },
      "58": {
        start: {
          line: 291,
          column: 27
        },
        end: {
          line: 291,
          column: 133
        }
      },
      "59": {
        start: {
          line: 292,
          column: 12
        },
        end: {
          line: 297,
          column: 14
        }
      },
      "60": {
        start: {
          line: 300,
          column: 12
        },
        end: {
          line: 306,
          column: 14
        }
      },
      "61": {
        start: {
          line: 309,
          column: 4
        },
        end: {
          line: 337,
          column: 7
        }
      },
      "62": {
        start: {
          line: 315,
          column: 8
        },
        end: {
          line: 336,
          column: 9
        }
      },
      "63": {
        start: {
          line: 316,
          column: 27
        },
        end: {
          line: 320,
          column: 14
        }
      },
      "64": {
        start: {
          line: 321,
          column: 12
        },
        end: {
          line: 326,
          column: 14
        }
      },
      "65": {
        start: {
          line: 329,
          column: 12
        },
        end: {
          line: 335,
          column: 14
        }
      },
      "66": {
        start: {
          line: 338,
          column: 4
        },
        end: {
          line: 359,
          column: 7
        }
      },
      "67": {
        start: {
          line: 341,
          column: 8
        },
        end: {
          line: 358,
          column: 9
        }
      },
      "68": {
        start: {
          line: 342,
          column: 27
        },
        end: {
          line: 342,
          column: 92
        }
      },
      "69": {
        start: {
          line: 343,
          column: 12
        },
        end: {
          line: 348,
          column: 14
        }
      },
      "70": {
        start: {
          line: 351,
          column: 12
        },
        end: {
          line: 357,
          column: 14
        }
      },
      "71": {
        start: {
          line: 360,
          column: 4
        },
        end: {
          line: 386,
          column: 7
        }
      },
      "72": {
        start: {
          line: 367,
          column: 8
        },
        end: {
          line: 385,
          column: 9
        }
      },
      "73": {
        start: {
          line: 368,
          column: 30
        },
        end: {
          line: 368,
          column: 71
        }
      },
      "74": {
        start: {
          line: 369,
          column: 27
        },
        end: {
          line: 369,
          column: 86
        }
      },
      "75": {
        start: {
          line: 370,
          column: 12
        },
        end: {
          line: 375,
          column: 14
        }
      },
      "76": {
        start: {
          line: 378,
          column: 12
        },
        end: {
          line: 384,
          column: 14
        }
      }
    },
    fnMap: {
      "0": {
        name: "setupAttachmentsTools",
        decl: {
          start: {
            line: 8,
            column: 16
          },
          end: {
            line: 8,
            column: 37
          }
        },
        loc: {
          start: {
            line: 8,
            column: 46
          },
          end: {
            line: 387,
            column: 1
          }
        },
        line: 8
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 21,
            column: 7
          },
          end: {
            line: 21,
            column: 8
          }
        },
        loc: {
          start: {
            line: 21,
            column: 23
          },
          end: {
            line: 41,
            column: 5
          }
        },
        line: 21
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 52,
            column: 7
          },
          end: {
            line: 52,
            column: 8
          }
        },
        loc: {
          start: {
            line: 52,
            column: 23
          },
          end: {
            line: 72,
            column: 5
          }
        },
        line: 52
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 75,
            column: 7
          },
          end: {
            line: 75,
            column: 8
          }
        },
        loc: {
          start: {
            line: 75,
            column: 23
          },
          end: {
            line: 94,
            column: 5
          }
        },
        line: 75
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 100,
            column: 7
          },
          end: {
            line: 100,
            column: 8
          }
        },
        loc: {
          start: {
            line: 100,
            column: 23
          },
          end: {
            line: 120,
            column: 5
          }
        },
        line: 100
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 123,
            column: 7
          },
          end: {
            line: 123,
            column: 8
          }
        },
        loc: {
          start: {
            line: 123,
            column: 23
          },
          end: {
            line: 142,
            column: 5
          }
        },
        line: 123
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 145,
            column: 7
          },
          end: {
            line: 145,
            column: 8
          }
        },
        loc: {
          start: {
            line: 145,
            column: 23
          },
          end: {
            line: 164,
            column: 5
          }
        },
        line: 145
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 181,
            column: 7
          },
          end: {
            line: 181,
            column: 8
          }
        },
        loc: {
          start: {
            line: 181,
            column: 23
          },
          end: {
            line: 212,
            column: 5
          }
        },
        line: 181
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 215,
            column: 7
          },
          end: {
            line: 215,
            column: 8
          }
        },
        loc: {
          start: {
            line: 215,
            column: 23
          },
          end: {
            line: 234,
            column: 5
          }
        },
        line: 215
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 240,
            column: 7
          },
          end: {
            line: 240,
            column: 8
          }
        },
        loc: {
          start: {
            line: 240,
            column: 23
          },
          end: {
            line: 260,
            column: 5
          }
        },
        line: 240
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 265,
            column: 7
          },
          end: {
            line: 265,
            column: 8
          }
        },
        loc: {
          start: {
            line: 265,
            column: 23
          },
          end: {
            line: 284,
            column: 5
          }
        },
        line: 265
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 289,
            column: 7
          },
          end: {
            line: 289,
            column: 8
          }
        },
        loc: {
          start: {
            line: 289,
            column: 23
          },
          end: {
            line: 308,
            column: 5
          }
        },
        line: 289
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 314,
            column: 7
          },
          end: {
            line: 314,
            column: 8
          }
        },
        loc: {
          start: {
            line: 314,
            column: 23
          },
          end: {
            line: 337,
            column: 5
          }
        },
        line: 314
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 340,
            column: 7
          },
          end: {
            line: 340,
            column: 8
          }
        },
        loc: {
          start: {
            line: 340,
            column: 23
          },
          end: {
            line: 359,
            column: 5
          }
        },
        line: 340
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 366,
            column: 7
          },
          end: {
            line: 366,
            column: 8
          }
        },
        loc: {
          start: {
            line: 366,
            column: 23
          },
          end: {
            line: 386,
            column: 5
          }
        },
        line: 366
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 36,
            column: 61
          },
          end: {
            line: 36,
            column: 117
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 36,
            column: 86
          },
          end: {
            line: 36,
            column: 99
          }
        }, {
          start: {
            line: 36,
            column: 102
          },
          end: {
            line: 36,
            column: 117
          }
        }],
        line: 36
      },
      "1": {
        loc: {
          start: {
            line: 67,
            column: 60
          },
          end: {
            line: 67,
            column: 116
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 67,
            column: 85
          },
          end: {
            line: 67,
            column: 98
          }
        }, {
          start: {
            line: 67,
            column: 101
          },
          end: {
            line: 67,
            column: 116
          }
        }],
        line: 67
      },
      "2": {
        loc: {
          start: {
            line: 89,
            column: 64
          },
          end: {
            line: 89,
            column: 120
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 89,
            column: 89
          },
          end: {
            line: 89,
            column: 102
          }
        }, {
          start: {
            line: 89,
            column: 105
          },
          end: {
            line: 89,
            column: 120
          }
        }],
        line: 89
      },
      "3": {
        loc: {
          start: {
            line: 115,
            column: 69
          },
          end: {
            line: 115,
            column: 125
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 115,
            column: 94
          },
          end: {
            line: 115,
            column: 107
          }
        }, {
          start: {
            line: 115,
            column: 110
          },
          end: {
            line: 115,
            column: 125
          }
        }],
        line: 115
      },
      "4": {
        loc: {
          start: {
            line: 137,
            column: 60
          },
          end: {
            line: 137,
            column: 116
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 137,
            column: 85
          },
          end: {
            line: 137,
            column: 98
          }
        }, {
          start: {
            line: 137,
            column: 101
          },
          end: {
            line: 137,
            column: 116
          }
        }],
        line: 137
      },
      "5": {
        loc: {
          start: {
            line: 159,
            column: 69
          },
          end: {
            line: 159,
            column: 125
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 159,
            column: 94
          },
          end: {
            line: 159,
            column: 107
          }
        }, {
          start: {
            line: 159,
            column: 110
          },
          end: {
            line: 159,
            column: 125
          }
        }],
        line: 159
      },
      "6": {
        loc: {
          start: {
            line: 207,
            column: 62
          },
          end: {
            line: 207,
            column: 118
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 207,
            column: 87
          },
          end: {
            line: 207,
            column: 100
          }
        }, {
          start: {
            line: 207,
            column: 103
          },
          end: {
            line: 207,
            column: 118
          }
        }],
        line: 207
      },
      "7": {
        loc: {
          start: {
            line: 229,
            column: 70
          },
          end: {
            line: 229,
            column: 126
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 229,
            column: 95
          },
          end: {
            line: 229,
            column: 108
          }
        }, {
          start: {
            line: 229,
            column: 111
          },
          end: {
            line: 229,
            column: 126
          }
        }],
        line: 229
      },
      "8": {
        loc: {
          start: {
            line: 255,
            column: 68
          },
          end: {
            line: 255,
            column: 124
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 255,
            column: 93
          },
          end: {
            line: 255,
            column: 106
          }
        }, {
          start: {
            line: 255,
            column: 109
          },
          end: {
            line: 255,
            column: 124
          }
        }],
        line: 255
      },
      "9": {
        loc: {
          start: {
            line: 279,
            column: 59
          },
          end: {
            line: 279,
            column: 115
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 279,
            column: 84
          },
          end: {
            line: 279,
            column: 97
          }
        }, {
          start: {
            line: 279,
            column: 100
          },
          end: {
            line: 279,
            column: 115
          }
        }],
        line: 279
      },
      "10": {
        loc: {
          start: {
            line: 303,
            column: 58
          },
          end: {
            line: 303,
            column: 114
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 303,
            column: 83
          },
          end: {
            line: 303,
            column: 96
          }
        }, {
          start: {
            line: 303,
            column: 99
          },
          end: {
            line: 303,
            column: 114
          }
        }],
        line: 303
      },
      "11": {
        loc: {
          start: {
            line: 332,
            column: 61
          },
          end: {
            line: 332,
            column: 117
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 332,
            column: 86
          },
          end: {
            line: 332,
            column: 99
          }
        }, {
          start: {
            line: 332,
            column: 102
          },
          end: {
            line: 332,
            column: 117
          }
        }],
        line: 332
      },
      "12": {
        loc: {
          start: {
            line: 354,
            column: 68
          },
          end: {
            line: 354,
            column: 124
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 354,
            column: 93
          },
          end: {
            line: 354,
            column: 106
          }
        }, {
          start: {
            line: 354,
            column: 109
          },
          end: {
            line: 354,
            column: 124
          }
        }],
        line: 354
      },
      "13": {
        loc: {
          start: {
            line: 381,
            column: 78
          },
          end: {
            line: 381,
            column: 134
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 381,
            column: 103
          },
          end: {
            line: 381,
            column: 116
          }
        }, {
          start: {
            line: 381,
            column: 119
          },
          end: {
            line: 381,
            column: 134
          }
        }],
        line: 381
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0]
    },
    inputSourceMap: {
      file: "/Users/peterkrzyzek/Development/clickup-mcp-server/src/tools/attachments-tools-setup.ts",
      mappings: "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",
      names: [],
      sources: ["/Users/peterkrzyzek/Development/clickup-mcp-server/src/tools/attachments-tools-setup.ts"],
      sourcesContent: ["import { McpServer } from '@modelcontextprotocol/sdk/server/mcp.js';\nimport { z } from 'zod';\nimport { createClickUpClient } from '../clickup-client/index.js';\nimport { AttachmentsEnhancedClient } from '../clickup-client/attachments-enhanced.js';\nimport {\n  UploadAttachmentSchema,\n  UpdateAttachmentMetadataSchema,\n  GetAttachmentsFilterSchema,\n  AttachmentSharingSchema,\n  BulkAttachmentOperationSchema,\n  AttachmentTypeSchema,\n  UploadSourceSchema,\n  AttachmentParentSchema\n} from '../schemas/attachments-schemas.js';\n\n// Create clients\nconst clickUpClient = createClickUpClient();\nconst attachmentsClient = new AttachmentsEnhancedClient(process.env.CLICKUP_API_TOKEN!);\n\nexport function setupAttachmentsTools(server: McpServer): void {\n\n  // ========================================\n  // ATTACHMENT MANAGEMENT OPERATIONS\n  // ========================================\n\n  server.tool(\n    'upload_attachment',\n    'Upload a new attachment to a task, comment, doc, or chat. Supports direct file upload or URL-based upload.',\n    {\n      parent_id: z.string().min(1).describe('The ID of the parent (task, comment, doc, or chat)'),\n      parent_type: AttachmentParentSchema.describe('The type of parent object'),\n      filename: z.string().min(1).describe('The name of the file'),\n      file_data: z.string().optional().describe('Base64 encoded file data for direct upload'),\n      file_url: z.string().url().optional().describe('URL to download file from'),\n      source: UploadSourceSchema.default('local').describe('Source of the file upload'),\n      description: z.string().optional().describe('Description of the attachment'),\n      tags: z.array(z.string()).optional().describe('Tags to associate with the attachment')\n    },\n    async (args) => {\n      try {\n        const request = UploadAttachmentSchema.parse(args);\n        const result = await attachmentsClient.uploadAttachment(request);\n        \n        return {\n          content: [{ \n            type: 'text', \n            text: `Attachment uploaded successfully:\\n\\n${JSON.stringify(result, null, 2)}` \n          }]\n        };\n      } catch (error) {\n        return {\n          content: [{ \n            type: 'text', \n            text: `Error uploading attachment: ${error instanceof Error ? error.message : 'Unknown error'}` \n          }],\n          isError: true\n        };\n      }\n    }\n  );\n\n  server.tool(\n    'get_attachments',\n    'Get all attachments for a parent object with filtering and pagination options.',\n    {\n      parent_id: z.string().min(1).describe('The ID of the parent object'),\n      parent_type: AttachmentParentSchema.describe('The type of parent object'),\n      type: AttachmentTypeSchema.optional().describe('Filter by attachment type'),\n      filename_contains: z.string().optional().describe('Filter by filename containing text'),\n      tags: z.array(z.string()).optional().describe('Filter by tags'),\n      date_from: z.number().optional().describe('Filter attachments created after this date (Unix timestamp)'),\n      date_to: z.number().optional().describe('Filter attachments created before this date (Unix timestamp)'),\n      limit: z.number().positive().optional().describe('Maximum number of attachments to return'),\n      offset: z.number().min(0).optional().describe('Number of attachments to skip for pagination')\n    },\n    async (args) => {\n      try {\n        const filter = GetAttachmentsFilterSchema.parse(args);\n        const result = await attachmentsClient.getAttachments(filter);\n        \n        return {\n          content: [{ \n            type: 'text', \n            text: `Attachments for ${args.parent_type} ${args.parent_id}:\\n\\n${JSON.stringify(result, null, 2)}` \n          }]\n        };\n      } catch (error) {\n        return {\n          content: [{ \n            type: 'text', \n            text: `Error getting attachments: ${error instanceof Error ? error.message : 'Unknown error'}` \n          }],\n          isError: true\n        };\n      }\n    }\n  );\n\n  server.tool(\n    'get_attachment_info',\n    'Get detailed information about a specific attachment including download and preview capabilities.',\n    {\n      attachment_id: z.string().min(1).describe('The ID of the attachment to get info for')\n    },\n    async (args) => {\n      try {\n        const result = await attachmentsClient.getAttachmentInfo(args.attachment_id);\n        \n        return {\n          content: [{ \n            type: 'text', \n            text: `Attachment information:\\n\\n${JSON.stringify(result, null, 2)}` \n          }]\n        };\n      } catch (error) {\n        return {\n          content: [{ \n            type: 'text', \n            text: `Error getting attachment info: ${error instanceof Error ? error.message : 'Unknown error'}` \n          }],\n          isError: true\n        };\n      }\n    }\n  );\n\n  server.tool(\n    'update_attachment_metadata',\n    'Update attachment metadata including filename, description, and tags.',\n    {\n      attachment_id: z.string().min(1).describe('The ID of the attachment to update'),\n      filename: z.string().optional().describe('New filename'),\n      description: z.string().optional().describe('New description'),\n      tags: z.array(z.string()).optional().describe('New tags for the attachment')\n    },\n    async (args) => {\n      try {\n        const request = UpdateAttachmentMetadataSchema.parse(args);\n        const result = await attachmentsClient.updateAttachmentMetadata(request);\n        \n        return {\n          content: [{ \n            type: 'text', \n            text: `Attachment metadata updated successfully:\\n\\n${JSON.stringify(result, null, 2)}` \n          }]\n        };\n      } catch (error) {\n        return {\n          content: [{ \n            type: 'text', \n            text: `Error updating attachment metadata: ${error instanceof Error ? error.message : 'Unknown error'}` \n          }],\n          isError: true\n        };\n      }\n    }\n  );\n\n  server.tool(\n    'delete_attachment',\n    'Delete an attachment from ClickUp. This action cannot be undone.',\n    {\n      attachment_id: z.string().min(1).describe('The ID of the attachment to delete')\n    },\n    async (args) => {\n      try {\n        const result = await attachmentsClient.deleteAttachment(args.attachment_id);\n        \n        return {\n          content: [{ \n            type: 'text', \n            text: `Attachment deleted successfully: ${JSON.stringify(result, null, 2)}` \n          }]\n        };\n      } catch (error) {\n        return {\n          content: [{ \n            type: 'text', \n            text: `Error deleting attachment: ${error instanceof Error ? error.message : 'Unknown error'}` \n          }],\n          isError: true\n        };\n      }\n    }\n  );\n\n  server.tool(\n    'download_attachment',\n    'Get download information for an attachment including temporary download URL.',\n    {\n      attachment_id: z.string().min(1).describe('The ID of the attachment to download')\n    },\n    async (args) => {\n      try {\n        const result = await attachmentsClient.downloadAttachment(args.attachment_id);\n        \n        return {\n          content: [{ \n            type: 'text', \n            text: `Attachment download information:\\n\\n${JSON.stringify(result, null, 2)}` \n          }]\n        };\n      } catch (error) {\n        return {\n          content: [{ \n            type: 'text', \n            text: `Error getting download information: ${error instanceof Error ? error.message : 'Unknown error'}` \n          }],\n          isError: true\n        };\n      }\n    }\n  );\n\n  // ========================================\n  // ADVANCED ATTACHMENT OPERATIONS\n  // ========================================\n\n  server.tool(\n    'search_attachments',\n    'Search for attachments across a workspace with advanced filtering options.',\n    {\n      workspace_id: z.string().min(1).describe('The ID of the workspace to search in'),\n      search_term: z.string().optional().describe('Search term to match against filename and description'),\n      type: AttachmentTypeSchema.optional().describe('Filter by attachment type'),\n      parent_type: AttachmentParentSchema.optional().describe('Filter by parent type'),\n      tags: z.array(z.string()).optional().describe('Filter by tags'),\n      date_from: z.number().optional().describe('Filter attachments created after this date (Unix timestamp)'),\n      date_to: z.number().optional().describe('Filter attachments created before this date (Unix timestamp)'),\n      min_size: z.number().optional().describe('Minimum file size in bytes'),\n      max_size: z.number().optional().describe('Maximum file size in bytes'),\n      uploaded_by: z.number().optional().describe('Filter by user ID who uploaded the attachment'),\n      limit: z.number().positive().optional().describe('Maximum number of attachments to return'),\n      offset: z.number().min(0).optional().describe('Number of attachments to skip for pagination')\n    },\n    async (args) => {\n      try {\n        const result = await attachmentsClient.searchAttachments(args.workspace_id, {\n          search_term: args.search_term,\n          type: args.type,\n          parent_type: args.parent_type,\n          tags: args.tags,\n          date_from: args.date_from,\n          date_to: args.date_to,\n          min_size: args.min_size,\n          max_size: args.max_size,\n          uploaded_by: args.uploaded_by,\n          limit: args.limit,\n          offset: args.offset\n        });\n        \n        return {\n          content: [{ \n            type: 'text', \n            text: `Attachment search results:\\n\\n${JSON.stringify(result, null, 2)}` \n          }]\n        };\n      } catch (error) {\n        return {\n          content: [{ \n            type: 'text', \n            text: `Error searching attachments: ${error instanceof Error ? error.message : 'Unknown error'}` \n          }],\n          isError: true\n        };\n      }\n    }\n  );\n\n  server.tool(\n    'get_attachment_stats',\n    'Get comprehensive statistics about attachments in a workspace.',\n    {\n      workspace_id: z.string().min(1).describe('The ID of the workspace')\n    },\n    async (args) => {\n      try {\n        const result = await attachmentsClient.getAttachmentStats(args.workspace_id);\n        \n        return {\n          content: [{ \n            type: 'text', \n            text: `Attachment statistics for workspace ${args.workspace_id}:\\n\\n${JSON.stringify(result, null, 2)}` \n          }]\n        };\n      } catch (error) {\n        return {\n          content: [{ \n            type: 'text', \n            text: `Error getting attachment statistics: ${error instanceof Error ? error.message : 'Unknown error'}` \n          }],\n          isError: true\n        };\n      }\n    }\n  );\n\n  server.tool(\n    'update_attachment_sharing',\n    'Update sharing settings for an attachment including access level and password protection.',\n    {\n      attachment_id: z.string().min(1).describe('The ID of the attachment to update sharing for'),\n      access_level: z.enum(['private', 'team', 'public']).describe('Access level for the attachment'),\n      expires_at: z.number().optional().describe('Expiration timestamp for public links (Unix timestamp)'),\n      password: z.string().optional().describe('Password protection for public links')\n    },\n    async (args) => {\n      try {\n        const request = AttachmentSharingSchema.parse(args);\n        const result = await attachmentsClient.updateAttachmentSharing(request);\n        \n        return {\n          content: [{ \n            type: 'text', \n            text: `Attachment sharing updated successfully:\\n\\n${JSON.stringify(result, null, 2)}` \n          }]\n        };\n      } catch (error) {\n        return {\n          content: [{ \n            type: 'text', \n            text: `Error updating attachment sharing: ${error instanceof Error ? error.message : 'Unknown error'}` \n          }],\n          isError: true\n        };\n      }\n    }\n  );\n\n  server.tool(\n    'copy_attachment',\n    'Copy an attachment to another parent object (task, comment, doc, or chat).',\n    {\n      attachment_id: z.string().min(1).describe('The ID of the attachment to copy'),\n      target_parent_id: z.string().min(1).describe('The ID of the target parent'),\n      target_parent_type: AttachmentParentSchema.describe('The type of the target parent')\n    },\n    async (args) => {\n      try {\n        const result = await attachmentsClient.copyAttachment(\n          args.attachment_id,\n          args.target_parent_id,\n          args.target_parent_type\n        );\n        \n        return {\n          content: [{ \n            type: 'text', \n            text: `Attachment copied successfully:\\n\\n${JSON.stringify(result, null, 2)}` \n          }]\n        };\n      } catch (error) {\n        return {\n          content: [{ \n            type: 'text', \n            text: `Error copying attachment: ${error instanceof Error ? error.message : 'Unknown error'}` \n          }],\n          isError: true\n        };\n      }\n    }\n  );\n\n  server.tool(\n    'move_attachment',\n    'Move an attachment to another parent object (task, comment, doc, or chat).',\n    {\n      attachment_id: z.string().min(1).describe('The ID of the attachment to move'),\n      target_parent_id: z.string().min(1).describe('The ID of the target parent'),\n      target_parent_type: AttachmentParentSchema.describe('The type of the target parent')\n    },\n    async (args) => {\n      try {\n        const result = await attachmentsClient.moveAttachment(\n          args.attachment_id,\n          args.target_parent_id,\n          args.target_parent_type\n        );\n        \n        return {\n          content: [{ \n            type: 'text', \n            text: `Attachment moved successfully:\\n\\n${JSON.stringify(result, null, 2)}` \n          }]\n        };\n      } catch (error) {\n        return {\n          content: [{ \n            type: 'text', \n            text: `Error moving attachment: ${error instanceof Error ? error.message : 'Unknown error'}` \n          }],\n          isError: true\n        };\n      }\n    }\n  );\n\n  server.tool(\n    'generate_attachment_thumbnail',\n    'Generate a thumbnail for an image or video attachment with custom dimensions.',\n    {\n      attachment_id: z.string().min(1).describe('The ID of the attachment to generate thumbnail for'),\n      width: z.number().positive().optional().describe('Thumbnail width in pixels'),\n      height: z.number().positive().optional().describe('Thumbnail height in pixels'),\n      quality: z.number().min(1).max(100).optional().describe('Thumbnail quality (1-100)')\n    },\n    async (args) => {\n      try {\n        const result = await attachmentsClient.generateAttachmentThumbnail(args.attachment_id, {\n          width: args.width,\n          height: args.height,\n          quality: args.quality\n        });\n        \n        return {\n          content: [{ \n            type: 'text', \n            text: `Thumbnail generated successfully:\\n\\n${JSON.stringify(result, null, 2)}` \n          }]\n        };\n      } catch (error) {\n        return {\n          content: [{ \n            type: 'text', \n            text: `Error generating thumbnail: ${error instanceof Error ? error.message : 'Unknown error'}` \n          }],\n          isError: true\n        };\n      }\n    }\n  );\n\n  server.tool(\n    'get_attachment_versions',\n    'Get version history for an attachment showing all uploaded versions.',\n    {\n      attachment_id: z.string().min(1).describe('The ID of the attachment to get versions for')\n    },\n    async (args) => {\n      try {\n        const result = await attachmentsClient.getAttachmentVersions(args.attachment_id);\n        \n        return {\n          content: [{ \n            type: 'text', \n            text: `Attachment version history:\\n\\n${JSON.stringify(result, null, 2)}` \n          }]\n        };\n      } catch (error) {\n        return {\n          content: [{ \n            type: 'text', \n            text: `Error getting attachment versions: ${error instanceof Error ? error.message : 'Unknown error'}` \n          }],\n          isError: true\n        };\n      }\n    }\n  );\n\n  server.tool(\n    'bulk_attachment_operations',\n    'Perform bulk operations on multiple attachments for efficiency.',\n    {\n      operation: z.enum(['delete', 'move', 'copy', 'update_tags']).describe('The bulk operation to perform'),\n      attachment_ids: z.array(z.string()).describe('Array of attachment IDs to operate on'),\n      target_parent_id: z.string().optional().describe('Target parent ID for move/copy operations'),\n      target_parent_type: AttachmentParentSchema.optional().describe('Target parent type for move/copy operations'),\n      tags: z.array(z.string()).optional().describe('Tags for bulk tag update operations')\n    },\n    async (args) => {\n      try {\n        const operation = BulkAttachmentOperationSchema.parse(args);\n        const result = await attachmentsClient.bulkAttachmentOperations(operation);\n        \n        return {\n          content: [{ \n            type: 'text', \n            text: `Bulk attachment operations results:\\n\\n${JSON.stringify(result, null, 2)}` \n          }]\n        };\n      } catch (error) {\n        return {\n          content: [{ \n            type: 'text', \n            text: `Error performing bulk attachment operations: ${error instanceof Error ? error.message : 'Unknown error'}` \n          }],\n          isError: true\n        };\n      }\n    }\n  );\n}\n"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "e954eba8a7b8ae5938813d925f0d6f9c4b7e7cef"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_645qbxphc = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_645qbxphc();
import { z } from 'zod';
import { createClickUpClient } from '../clickup-client/index.js';
import { AttachmentsEnhancedClient } from '../clickup-client/attachments-enhanced.js';
import { UploadAttachmentSchema, UpdateAttachmentMetadataSchema, GetAttachmentsFilterSchema, AttachmentSharingSchema, BulkAttachmentOperationSchema, AttachmentTypeSchema, UploadSourceSchema, AttachmentParentSchema } from '../schemas/attachments-schemas.js';
// Create clients
const clickUpClient =
/* istanbul ignore next */
(cov_645qbxphc().s[0]++, createClickUpClient());
const attachmentsClient =
/* istanbul ignore next */
(cov_645qbxphc().s[1]++, new AttachmentsEnhancedClient(process.env.CLICKUP_API_TOKEN));
export function setupAttachmentsTools(server) {
  /* istanbul ignore next */
  cov_645qbxphc().f[0]++;
  cov_645qbxphc().s[2]++;
  // ========================================
  // ATTACHMENT MANAGEMENT OPERATIONS
  // ========================================
  server.tool('upload_attachment', 'Upload a new attachment to a task, comment, doc, or chat. Supports direct file upload or URL-based upload.', {
    parent_id: z.string().min(1).describe('The ID of the parent (task, comment, doc, or chat)'),
    parent_type: AttachmentParentSchema.describe('The type of parent object'),
    filename: z.string().min(1).describe('The name of the file'),
    file_data: z.string().optional().describe('Base64 encoded file data for direct upload'),
    file_url: z.string().url().optional().describe('URL to download file from'),
    source: UploadSourceSchema.default('local').describe('Source of the file upload'),
    description: z.string().optional().describe('Description of the attachment'),
    tags: z.array(z.string()).optional().describe('Tags to associate with the attachment')
  }, async args => {
    /* istanbul ignore next */
    cov_645qbxphc().f[1]++;
    cov_645qbxphc().s[3]++;
    try {
      const request =
      /* istanbul ignore next */
      (cov_645qbxphc().s[4]++, UploadAttachmentSchema.parse(args));
      const result =
      /* istanbul ignore next */
      (cov_645qbxphc().s[5]++, await attachmentsClient.uploadAttachment(request));
      /* istanbul ignore next */
      cov_645qbxphc().s[6]++;
      return {
        content: [{
          type: 'text',
          text: `Attachment uploaded successfully:\n\n${JSON.stringify(result, null, 2)}`
        }]
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_645qbxphc().s[7]++;
      return {
        content: [{
          type: 'text',
          text: `Error uploading attachment: ${error instanceof Error ?
          /* istanbul ignore next */
          (cov_645qbxphc().b[0][0]++, error.message) :
          /* istanbul ignore next */
          (cov_645qbxphc().b[0][1]++, 'Unknown error')}`
        }],
        isError: true
      };
    }
  });
  /* istanbul ignore next */
  cov_645qbxphc().s[8]++;
  server.tool('get_attachments', 'Get all attachments for a parent object with filtering and pagination options.', {
    parent_id: z.string().min(1).describe('The ID of the parent object'),
    parent_type: AttachmentParentSchema.describe('The type of parent object'),
    type: AttachmentTypeSchema.optional().describe('Filter by attachment type'),
    filename_contains: z.string().optional().describe('Filter by filename containing text'),
    tags: z.array(z.string()).optional().describe('Filter by tags'),
    date_from: z.number().optional().describe('Filter attachments created after this date (Unix timestamp)'),
    date_to: z.number().optional().describe('Filter attachments created before this date (Unix timestamp)'),
    limit: z.number().positive().optional().describe('Maximum number of attachments to return'),
    offset: z.number().min(0).optional().describe('Number of attachments to skip for pagination')
  }, async args => {
    /* istanbul ignore next */
    cov_645qbxphc().f[2]++;
    cov_645qbxphc().s[9]++;
    try {
      const filter =
      /* istanbul ignore next */
      (cov_645qbxphc().s[10]++, GetAttachmentsFilterSchema.parse(args));
      const result =
      /* istanbul ignore next */
      (cov_645qbxphc().s[11]++, await attachmentsClient.getAttachments(filter));
      /* istanbul ignore next */
      cov_645qbxphc().s[12]++;
      return {
        content: [{
          type: 'text',
          text: `Attachments for ${args.parent_type} ${args.parent_id}:\n\n${JSON.stringify(result, null, 2)}`
        }]
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_645qbxphc().s[13]++;
      return {
        content: [{
          type: 'text',
          text: `Error getting attachments: ${error instanceof Error ?
          /* istanbul ignore next */
          (cov_645qbxphc().b[1][0]++, error.message) :
          /* istanbul ignore next */
          (cov_645qbxphc().b[1][1]++, 'Unknown error')}`
        }],
        isError: true
      };
    }
  });
  /* istanbul ignore next */
  cov_645qbxphc().s[14]++;
  server.tool('get_attachment_info', 'Get detailed information about a specific attachment including download and preview capabilities.', {
    attachment_id: z.string().min(1).describe('The ID of the attachment to get info for')
  }, async args => {
    /* istanbul ignore next */
    cov_645qbxphc().f[3]++;
    cov_645qbxphc().s[15]++;
    try {
      const result =
      /* istanbul ignore next */
      (cov_645qbxphc().s[16]++, await attachmentsClient.getAttachmentInfo(args.attachment_id));
      /* istanbul ignore next */
      cov_645qbxphc().s[17]++;
      return {
        content: [{
          type: 'text',
          text: `Attachment information:\n\n${JSON.stringify(result, null, 2)}`
        }]
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_645qbxphc().s[18]++;
      return {
        content: [{
          type: 'text',
          text: `Error getting attachment info: ${error instanceof Error ?
          /* istanbul ignore next */
          (cov_645qbxphc().b[2][0]++, error.message) :
          /* istanbul ignore next */
          (cov_645qbxphc().b[2][1]++, 'Unknown error')}`
        }],
        isError: true
      };
    }
  });
  /* istanbul ignore next */
  cov_645qbxphc().s[19]++;
  server.tool('update_attachment_metadata', 'Update attachment metadata including filename, description, and tags.', {
    attachment_id: z.string().min(1).describe('The ID of the attachment to update'),
    filename: z.string().optional().describe('New filename'),
    description: z.string().optional().describe('New description'),
    tags: z.array(z.string()).optional().describe('New tags for the attachment')
  }, async args => {
    /* istanbul ignore next */
    cov_645qbxphc().f[4]++;
    cov_645qbxphc().s[20]++;
    try {
      const request =
      /* istanbul ignore next */
      (cov_645qbxphc().s[21]++, UpdateAttachmentMetadataSchema.parse(args));
      const result =
      /* istanbul ignore next */
      (cov_645qbxphc().s[22]++, await attachmentsClient.updateAttachmentMetadata(request));
      /* istanbul ignore next */
      cov_645qbxphc().s[23]++;
      return {
        content: [{
          type: 'text',
          text: `Attachment metadata updated successfully:\n\n${JSON.stringify(result, null, 2)}`
        }]
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_645qbxphc().s[24]++;
      return {
        content: [{
          type: 'text',
          text: `Error updating attachment metadata: ${error instanceof Error ?
          /* istanbul ignore next */
          (cov_645qbxphc().b[3][0]++, error.message) :
          /* istanbul ignore next */
          (cov_645qbxphc().b[3][1]++, 'Unknown error')}`
        }],
        isError: true
      };
    }
  });
  /* istanbul ignore next */
  cov_645qbxphc().s[25]++;
  server.tool('delete_attachment', 'Delete an attachment from ClickUp. This action cannot be undone.', {
    attachment_id: z.string().min(1).describe('The ID of the attachment to delete')
  }, async args => {
    /* istanbul ignore next */
    cov_645qbxphc().f[5]++;
    cov_645qbxphc().s[26]++;
    try {
      const result =
      /* istanbul ignore next */
      (cov_645qbxphc().s[27]++, await attachmentsClient.deleteAttachment(args.attachment_id));
      /* istanbul ignore next */
      cov_645qbxphc().s[28]++;
      return {
        content: [{
          type: 'text',
          text: `Attachment deleted successfully: ${JSON.stringify(result, null, 2)}`
        }]
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_645qbxphc().s[29]++;
      return {
        content: [{
          type: 'text',
          text: `Error deleting attachment: ${error instanceof Error ?
          /* istanbul ignore next */
          (cov_645qbxphc().b[4][0]++, error.message) :
          /* istanbul ignore next */
          (cov_645qbxphc().b[4][1]++, 'Unknown error')}`
        }],
        isError: true
      };
    }
  });
  /* istanbul ignore next */
  cov_645qbxphc().s[30]++;
  server.tool('download_attachment', 'Get download information for an attachment including temporary download URL.', {
    attachment_id: z.string().min(1).describe('The ID of the attachment to download')
  }, async args => {
    /* istanbul ignore next */
    cov_645qbxphc().f[6]++;
    cov_645qbxphc().s[31]++;
    try {
      const result =
      /* istanbul ignore next */
      (cov_645qbxphc().s[32]++, await attachmentsClient.downloadAttachment(args.attachment_id));
      /* istanbul ignore next */
      cov_645qbxphc().s[33]++;
      return {
        content: [{
          type: 'text',
          text: `Attachment download information:\n\n${JSON.stringify(result, null, 2)}`
        }]
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_645qbxphc().s[34]++;
      return {
        content: [{
          type: 'text',
          text: `Error getting download information: ${error instanceof Error ?
          /* istanbul ignore next */
          (cov_645qbxphc().b[5][0]++, error.message) :
          /* istanbul ignore next */
          (cov_645qbxphc().b[5][1]++, 'Unknown error')}`
        }],
        isError: true
      };
    }
  });
  // ========================================
  // ADVANCED ATTACHMENT OPERATIONS
  // ========================================
  /* istanbul ignore next */
  cov_645qbxphc().s[35]++;
  server.tool('search_attachments', 'Search for attachments across a workspace with advanced filtering options.', {
    workspace_id: z.string().min(1).describe('The ID of the workspace to search in'),
    search_term: z.string().optional().describe('Search term to match against filename and description'),
    type: AttachmentTypeSchema.optional().describe('Filter by attachment type'),
    parent_type: AttachmentParentSchema.optional().describe('Filter by parent type'),
    tags: z.array(z.string()).optional().describe('Filter by tags'),
    date_from: z.number().optional().describe('Filter attachments created after this date (Unix timestamp)'),
    date_to: z.number().optional().describe('Filter attachments created before this date (Unix timestamp)'),
    min_size: z.number().optional().describe('Minimum file size in bytes'),
    max_size: z.number().optional().describe('Maximum file size in bytes'),
    uploaded_by: z.number().optional().describe('Filter by user ID who uploaded the attachment'),
    limit: z.number().positive().optional().describe('Maximum number of attachments to return'),
    offset: z.number().min(0).optional().describe('Number of attachments to skip for pagination')
  }, async args => {
    /* istanbul ignore next */
    cov_645qbxphc().f[7]++;
    cov_645qbxphc().s[36]++;
    try {
      const result =
      /* istanbul ignore next */
      (cov_645qbxphc().s[37]++, await attachmentsClient.searchAttachments(args.workspace_id, {
        search_term: args.search_term,
        type: args.type,
        parent_type: args.parent_type,
        tags: args.tags,
        date_from: args.date_from,
        date_to: args.date_to,
        min_size: args.min_size,
        max_size: args.max_size,
        uploaded_by: args.uploaded_by,
        limit: args.limit,
        offset: args.offset
      }));
      /* istanbul ignore next */
      cov_645qbxphc().s[38]++;
      return {
        content: [{
          type: 'text',
          text: `Attachment search results:\n\n${JSON.stringify(result, null, 2)}`
        }]
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_645qbxphc().s[39]++;
      return {
        content: [{
          type: 'text',
          text: `Error searching attachments: ${error instanceof Error ?
          /* istanbul ignore next */
          (cov_645qbxphc().b[6][0]++, error.message) :
          /* istanbul ignore next */
          (cov_645qbxphc().b[6][1]++, 'Unknown error')}`
        }],
        isError: true
      };
    }
  });
  /* istanbul ignore next */
  cov_645qbxphc().s[40]++;
  server.tool('get_attachment_stats', 'Get comprehensive statistics about attachments in a workspace.', {
    workspace_id: z.string().min(1).describe('The ID of the workspace')
  }, async args => {
    /* istanbul ignore next */
    cov_645qbxphc().f[8]++;
    cov_645qbxphc().s[41]++;
    try {
      const result =
      /* istanbul ignore next */
      (cov_645qbxphc().s[42]++, await attachmentsClient.getAttachmentStats(args.workspace_id));
      /* istanbul ignore next */
      cov_645qbxphc().s[43]++;
      return {
        content: [{
          type: 'text',
          text: `Attachment statistics for workspace ${args.workspace_id}:\n\n${JSON.stringify(result, null, 2)}`
        }]
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_645qbxphc().s[44]++;
      return {
        content: [{
          type: 'text',
          text: `Error getting attachment statistics: ${error instanceof Error ?
          /* istanbul ignore next */
          (cov_645qbxphc().b[7][0]++, error.message) :
          /* istanbul ignore next */
          (cov_645qbxphc().b[7][1]++, 'Unknown error')}`
        }],
        isError: true
      };
    }
  });
  /* istanbul ignore next */
  cov_645qbxphc().s[45]++;
  server.tool('update_attachment_sharing', 'Update sharing settings for an attachment including access level and password protection.', {
    attachment_id: z.string().min(1).describe('The ID of the attachment to update sharing for'),
    access_level: z.enum(['private', 'team', 'public']).describe('Access level for the attachment'),
    expires_at: z.number().optional().describe('Expiration timestamp for public links (Unix timestamp)'),
    password: z.string().optional().describe('Password protection for public links')
  }, async args => {
    /* istanbul ignore next */
    cov_645qbxphc().f[9]++;
    cov_645qbxphc().s[46]++;
    try {
      const request =
      /* istanbul ignore next */
      (cov_645qbxphc().s[47]++, AttachmentSharingSchema.parse(args));
      const result =
      /* istanbul ignore next */
      (cov_645qbxphc().s[48]++, await attachmentsClient.updateAttachmentSharing(request));
      /* istanbul ignore next */
      cov_645qbxphc().s[49]++;
      return {
        content: [{
          type: 'text',
          text: `Attachment sharing updated successfully:\n\n${JSON.stringify(result, null, 2)}`
        }]
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_645qbxphc().s[50]++;
      return {
        content: [{
          type: 'text',
          text: `Error updating attachment sharing: ${error instanceof Error ?
          /* istanbul ignore next */
          (cov_645qbxphc().b[8][0]++, error.message) :
          /* istanbul ignore next */
          (cov_645qbxphc().b[8][1]++, 'Unknown error')}`
        }],
        isError: true
      };
    }
  });
  /* istanbul ignore next */
  cov_645qbxphc().s[51]++;
  server.tool('copy_attachment', 'Copy an attachment to another parent object (task, comment, doc, or chat).', {
    attachment_id: z.string().min(1).describe('The ID of the attachment to copy'),
    target_parent_id: z.string().min(1).describe('The ID of the target parent'),
    target_parent_type: AttachmentParentSchema.describe('The type of the target parent')
  }, async args => {
    /* istanbul ignore next */
    cov_645qbxphc().f[10]++;
    cov_645qbxphc().s[52]++;
    try {
      const result =
      /* istanbul ignore next */
      (cov_645qbxphc().s[53]++, await attachmentsClient.copyAttachment(args.attachment_id, args.target_parent_id, args.target_parent_type));
      /* istanbul ignore next */
      cov_645qbxphc().s[54]++;
      return {
        content: [{
          type: 'text',
          text: `Attachment copied successfully:\n\n${JSON.stringify(result, null, 2)}`
        }]
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_645qbxphc().s[55]++;
      return {
        content: [{
          type: 'text',
          text: `Error copying attachment: ${error instanceof Error ?
          /* istanbul ignore next */
          (cov_645qbxphc().b[9][0]++, error.message) :
          /* istanbul ignore next */
          (cov_645qbxphc().b[9][1]++, 'Unknown error')}`
        }],
        isError: true
      };
    }
  });
  /* istanbul ignore next */
  cov_645qbxphc().s[56]++;
  server.tool('move_attachment', 'Move an attachment to another parent object (task, comment, doc, or chat).', {
    attachment_id: z.string().min(1).describe('The ID of the attachment to move'),
    target_parent_id: z.string().min(1).describe('The ID of the target parent'),
    target_parent_type: AttachmentParentSchema.describe('The type of the target parent')
  }, async args => {
    /* istanbul ignore next */
    cov_645qbxphc().f[11]++;
    cov_645qbxphc().s[57]++;
    try {
      const result =
      /* istanbul ignore next */
      (cov_645qbxphc().s[58]++, await attachmentsClient.moveAttachment(args.attachment_id, args.target_parent_id, args.target_parent_type));
      /* istanbul ignore next */
      cov_645qbxphc().s[59]++;
      return {
        content: [{
          type: 'text',
          text: `Attachment moved successfully:\n\n${JSON.stringify(result, null, 2)}`
        }]
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_645qbxphc().s[60]++;
      return {
        content: [{
          type: 'text',
          text: `Error moving attachment: ${error instanceof Error ?
          /* istanbul ignore next */
          (cov_645qbxphc().b[10][0]++, error.message) :
          /* istanbul ignore next */
          (cov_645qbxphc().b[10][1]++, 'Unknown error')}`
        }],
        isError: true
      };
    }
  });
  /* istanbul ignore next */
  cov_645qbxphc().s[61]++;
  server.tool('generate_attachment_thumbnail', 'Generate a thumbnail for an image or video attachment with custom dimensions.', {
    attachment_id: z.string().min(1).describe('The ID of the attachment to generate thumbnail for'),
    width: z.number().positive().optional().describe('Thumbnail width in pixels'),
    height: z.number().positive().optional().describe('Thumbnail height in pixels'),
    quality: z.number().min(1).max(100).optional().describe('Thumbnail quality (1-100)')
  }, async args => {
    /* istanbul ignore next */
    cov_645qbxphc().f[12]++;
    cov_645qbxphc().s[62]++;
    try {
      const result =
      /* istanbul ignore next */
      (cov_645qbxphc().s[63]++, await attachmentsClient.generateAttachmentThumbnail(args.attachment_id, {
        width: args.width,
        height: args.height,
        quality: args.quality
      }));
      /* istanbul ignore next */
      cov_645qbxphc().s[64]++;
      return {
        content: [{
          type: 'text',
          text: `Thumbnail generated successfully:\n\n${JSON.stringify(result, null, 2)}`
        }]
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_645qbxphc().s[65]++;
      return {
        content: [{
          type: 'text',
          text: `Error generating thumbnail: ${error instanceof Error ?
          /* istanbul ignore next */
          (cov_645qbxphc().b[11][0]++, error.message) :
          /* istanbul ignore next */
          (cov_645qbxphc().b[11][1]++, 'Unknown error')}`
        }],
        isError: true
      };
    }
  });
  /* istanbul ignore next */
  cov_645qbxphc().s[66]++;
  server.tool('get_attachment_versions', 'Get version history for an attachment showing all uploaded versions.', {
    attachment_id: z.string().min(1).describe('The ID of the attachment to get versions for')
  }, async args => {
    /* istanbul ignore next */
    cov_645qbxphc().f[13]++;
    cov_645qbxphc().s[67]++;
    try {
      const result =
      /* istanbul ignore next */
      (cov_645qbxphc().s[68]++, await attachmentsClient.getAttachmentVersions(args.attachment_id));
      /* istanbul ignore next */
      cov_645qbxphc().s[69]++;
      return {
        content: [{
          type: 'text',
          text: `Attachment version history:\n\n${JSON.stringify(result, null, 2)}`
        }]
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_645qbxphc().s[70]++;
      return {
        content: [{
          type: 'text',
          text: `Error getting attachment versions: ${error instanceof Error ?
          /* istanbul ignore next */
          (cov_645qbxphc().b[12][0]++, error.message) :
          /* istanbul ignore next */
          (cov_645qbxphc().b[12][1]++, 'Unknown error')}`
        }],
        isError: true
      };
    }
  });
  /* istanbul ignore next */
  cov_645qbxphc().s[71]++;
  server.tool('bulk_attachment_operations', 'Perform bulk operations on multiple attachments for efficiency.', {
    operation: z.enum(['delete', 'move', 'copy', 'update_tags']).describe('The bulk operation to perform'),
    attachment_ids: z.array(z.string()).describe('Array of attachment IDs to operate on'),
    target_parent_id: z.string().optional().describe('Target parent ID for move/copy operations'),
    target_parent_type: AttachmentParentSchema.optional().describe('Target parent type for move/copy operations'),
    tags: z.array(z.string()).optional().describe('Tags for bulk tag update operations')
  }, async args => {
    /* istanbul ignore next */
    cov_645qbxphc().f[14]++;
    cov_645qbxphc().s[72]++;
    try {
      const operation =
      /* istanbul ignore next */
      (cov_645qbxphc().s[73]++, BulkAttachmentOperationSchema.parse(args));
      const result =
      /* istanbul ignore next */
      (cov_645qbxphc().s[74]++, await attachmentsClient.bulkAttachmentOperations(operation));
      /* istanbul ignore next */
      cov_645qbxphc().s[75]++;
      return {
        content: [{
          type: 'text',
          text: `Bulk attachment operations results:\n\n${JSON.stringify(result, null, 2)}`
        }]
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_645qbxphc().s[76]++;
      return {
        content: [{
          type: 'text',
          text: `Error performing bulk attachment operations: ${error instanceof Error ?
          /* istanbul ignore next */
          (cov_645qbxphc().b[13][0]++, error.message) :
          /* istanbul ignore next */
          (cov_645qbxphc().b[13][1]++, 'Unknown error')}`
        }],
        isError: true
      };
    }
  });
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
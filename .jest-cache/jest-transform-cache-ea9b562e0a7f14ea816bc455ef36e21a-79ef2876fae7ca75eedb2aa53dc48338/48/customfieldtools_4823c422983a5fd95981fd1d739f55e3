84a1b48f7057f02abc7e07bfd625083c
/* istanbul ignore next */
function cov_2j6df1vja0() {
  var path = "/Users/peterkrzyzek/Development/clickup-mcp-server/src/tools/custom-field-tools.ts";
  var hash = "9c7ba07cf002e4e117ba7da90ba617ff8c75c801";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/peterkrzyzek/Development/clickup-mcp-server/src/tools/custom-field-tools.ts",
    statementMap: {
      "0": {
        start: {
          line: 6,
          column: 22
        },
        end: {
          line: 6,
          column: 43
        }
      },
      "1": {
        start: {
          line: 7,
          column: 27
        },
        end: {
          line: 7,
          column: 74
        }
      },
      "2": {
        start: {
          line: 12,
          column: 4
        },
        end: {
          line: 46,
          column: 7
        }
      },
      "3": {
        start: {
          line: 17,
          column: 8
        },
        end: {
          line: 45,
          column: 9
        }
      },
      "4": {
        start: {
          line: 19,
          column: 12
        },
        end: {
          line: 31,
          column: 13
        }
      },
      "5": {
        start: {
          line: 21,
          column: 20
        },
        end: {
          line: 21,
          column: 109
        }
      },
      "6": {
        start: {
          line: 22,
          column: 20
        },
        end: {
          line: 22,
          column: 26
        }
      },
      "7": {
        start: {
          line: 24,
          column: 20
        },
        end: {
          line: 24,
          column: 111
        }
      },
      "8": {
        start: {
          line: 25,
          column: 20
        },
        end: {
          line: 25,
          column: 26
        }
      },
      "9": {
        start: {
          line: 27,
          column: 20
        },
        end: {
          line: 27,
          column: 110
        }
      },
      "10": {
        start: {
          line: 28,
          column: 20
        },
        end: {
          line: 28,
          column: 26
        }
      },
      "11": {
        start: {
          line: 30,
          column: 20
        },
        end: {
          line: 30,
          column: 62
        }
      },
      "12": {
        start: {
          line: 32,
          column: 12
        },
        end: {
          line: 37,
          column: 14
        }
      },
      "13": {
        start: {
          line: 40,
          column: 12
        },
        end: {
          line: 40,
          column: 65
        }
      },
      "14": {
        start: {
          line: 41,
          column: 12
        },
        end: {
          line: 44,
          column: 14
        }
      },
      "15": {
        start: {
          line: 50,
          column: 4
        },
        end: {
          line: 106,
          column: 7
        }
      },
      "16": {
        start: {
          line: 68,
          column: 8
        },
        end: {
          line: 105,
          column: 9
        }
      },
      "17": {
        start: {
          line: 70,
          column: 36
        },
        end: {
          line: 70,
          column: 96
        }
      },
      "18": {
        start: {
          line: 71,
          column: 32
        },
        end: {
          line: 77,
          column: 13
        }
      },
      "19": {
        start: {
          line: 79,
          column: 12
        },
        end: {
          line: 91,
          column: 13
        }
      },
      "20": {
        start: {
          line: 81,
          column: 20
        },
        end: {
          line: 81,
          column: 102
        }
      },
      "21": {
        start: {
          line: 82,
          column: 20
        },
        end: {
          line: 82,
          column: 26
        }
      },
      "22": {
        start: {
          line: 84,
          column: 20
        },
        end: {
          line: 84,
          column: 104
        }
      },
      "23": {
        start: {
          line: 85,
          column: 20
        },
        end: {
          line: 85,
          column: 26
        }
      },
      "24": {
        start: {
          line: 87,
          column: 20
        },
        end: {
          line: 87,
          column: 103
        }
      },
      "25": {
        start: {
          line: 88,
          column: 20
        },
        end: {
          line: 88,
          column: 26
        }
      },
      "26": {
        start: {
          line: 90,
          column: 20
        },
        end: {
          line: 90,
          column: 62
        }
      },
      "27": {
        start: {
          line: 92,
          column: 12
        },
        end: {
          line: 97,
          column: 14
        }
      },
      "28": {
        start: {
          line: 100,
          column: 12
        },
        end: {
          line: 100,
          column: 65
        }
      },
      "29": {
        start: {
          line: 101,
          column: 12
        },
        end: {
          line: 104,
          column: 14
        }
      },
      "30": {
        start: {
          line: 110,
          column: 4
        },
        end: {
          line: 146,
          column: 7
        }
      },
      "31": {
        start: {
          line: 117,
          column: 8
        },
        end: {
          line: 145,
          column: 9
        }
      },
      "32": {
        start: {
          line: 119,
          column: 12
        },
        end: {
          line: 125,
          column: 13
        }
      },
      "33": {
        start: {
          line: 121,
          column: 16
        },
        end: {
          line: 124,
          column: 18
        }
      },
      "34": {
        start: {
          line: 126,
          column: 33
        },
        end: {
          line: 131,
          column: 14
        }
      },
      "35": {
        start: {
          line: 132,
          column: 12
        },
        end: {
          line: 137,
          column: 14
        }
      },
      "36": {
        start: {
          line: 140,
          column: 12
        },
        end: {
          line: 140,
          column: 65
        }
      },
      "37": {
        start: {
          line: 141,
          column: 12
        },
        end: {
          line: 144,
          column: 14
        }
      },
      "38": {
        start: {
          line: 150,
          column: 4
        },
        end: {
          line: 169,
          column: 7
        }
      },
      "39": {
        start: {
          line: 153,
          column: 8
        },
        end: {
          line: 168,
          column: 9
        }
      },
      "40": {
        start: {
          line: 154,
          column: 12
        },
        end: {
          line: 154,
          column: 65
        }
      },
      "41": {
        start: {
          line: 155,
          column: 12
        },
        end: {
          line: 160,
          column: 14
        }
      },
      "42": {
        start: {
          line: 163,
          column: 12
        },
        end: {
          line: 163,
          column: 65
        }
      },
      "43": {
        start: {
          line: 164,
          column: 12
        },
        end: {
          line: 167,
          column: 14
        }
      },
      "44": {
        start: {
          line: 173,
          column: 4
        },
        end: {
          line: 194,
          column: 7
        }
      },
      "45": {
        start: {
          line: 178,
          column: 8
        },
        end: {
          line: 193,
          column: 9
        }
      },
      "46": {
        start: {
          line: 179,
          column: 12
        },
        end: {
          line: 179,
          column: 83
        }
      },
      "47": {
        start: {
          line: 180,
          column: 12
        },
        end: {
          line: 185,
          column: 14
        }
      },
      "48": {
        start: {
          line: 188,
          column: 12
        },
        end: {
          line: 188,
          column: 70
        }
      },
      "49": {
        start: {
          line: 189,
          column: 12
        },
        end: {
          line: 192,
          column: 14
        }
      },
      "50": {
        start: {
          line: 195,
          column: 4
        },
        end: {
          line: 215,
          column: 7
        }
      },
      "51": {
        start: {
          line: 199,
          column: 8
        },
        end: {
          line: 214,
          column: 9
        }
      },
      "52": {
        start: {
          line: 200,
          column: 12
        },
        end: {
          line: 200,
          column: 79
        }
      },
      "53": {
        start: {
          line: 201,
          column: 12
        },
        end: {
          line: 206,
          column: 14
        }
      },
      "54": {
        start: {
          line: 209,
          column: 12
        },
        end: {
          line: 209,
          column: 71
        }
      },
      "55": {
        start: {
          line: 210,
          column: 12
        },
        end: {
          line: 213,
          column: 14
        }
      },
      "56": {
        start: {
          line: 216,
          column: 4
        },
        end: {
          line: 236,
          column: 7
        }
      },
      "57": {
        start: {
          line: 220,
          column: 8
        },
        end: {
          line: 235,
          column: 9
        }
      },
      "58": {
        start: {
          line: 221,
          column: 26
        },
        end: {
          line: 221,
          column: 89
        }
      },
      "59": {
        start: {
          line: 222,
          column: 12
        },
        end: {
          line: 227,
          column: 14
        }
      },
      "60": {
        start: {
          line: 230,
          column: 12
        },
        end: {
          line: 230,
          column: 70
        }
      },
      "61": {
        start: {
          line: 231,
          column: 12
        },
        end: {
          line: 234,
          column: 14
        }
      },
      "62": {
        start: {
          line: 237,
          column: 4
        },
        end: {
          line: 265,
          column: 7
        }
      },
      "63": {
        start: {
          line: 244,
          column: 8
        },
        end: {
          line: 264,
          column: 9
        }
      },
      "64": {
        start: {
          line: 246,
          column: 41
        },
        end: {
          line: 249,
          column: 15
        }
      },
      "65": {
        start: {
          line: 246,
          column: 65
        },
        end: {
          line: 249,
          column: 13
        }
      },
      "66": {
        start: {
          line: 250,
          column: 28
        },
        end: {
          line: 250,
          column: 108
        }
      },
      "67": {
        start: {
          line: 251,
          column: 12
        },
        end: {
          line: 256,
          column: 14
        }
      },
      "68": {
        start: {
          line: 259,
          column: 12
        },
        end: {
          line: 259,
          column: 76
        }
      },
      "69": {
        start: {
          line: 260,
          column: 12
        },
        end: {
          line: 263,
          column: 14
        }
      },
      "70": {
        start: {
          line: 266,
          column: 4
        },
        end: {
          line: 285,
          column: 7
        }
      },
      "71": {
        start: {
          line: 269,
          column: 8
        },
        end: {
          line: 284,
          column: 9
        }
      },
      "72": {
        start: {
          line: 270,
          column: 27
        },
        end: {
          line: 270,
          column: 85
        }
      },
      "73": {
        start: {
          line: 271,
          column: 12
        },
        end: {
          line: 276,
          column: 14
        }
      },
      "74": {
        start: {
          line: 279,
          column: 12
        },
        end: {
          line: 279,
          column: 76
        }
      },
      "75": {
        start: {
          line: 280,
          column: 12
        },
        end: {
          line: 283,
          column: 14
        }
      },
      "76": {
        start: {
          line: 289,
          column: 4
        },
        end: {
          line: 336,
          column: 7
        }
      },
      "77": {
        start: {
          line: 298,
          column: 8
        },
        end: {
          line: 335,
          column: 9
        }
      },
      "78": {
        start: {
          line: 299,
          column: 32
        },
        end: {
          line: 302,
          column: 13
        }
      },
      "79": {
        start: {
          line: 303,
          column: 32
        },
        end: {
          line: 309,
          column: 13
        }
      },
      "80": {
        start: {
          line: 311,
          column: 12
        },
        end: {
          line: 321,
          column: 13
        }
      },
      "81": {
        start: {
          line: 313,
          column: 20
        },
        end: {
          line: 313,
          column: 102
        }
      },
      "82": {
        start: {
          line: 314,
          column: 20
        },
        end: {
          line: 314,
          column: 26
        }
      },
      "83": {
        start: {
          line: 316,
          column: 20
        },
        end: {
          line: 316,
          column: 104
        }
      },
      "84": {
        start: {
          line: 317,
          column: 20
        },
        end: {
          line: 317,
          column: 26
        }
      },
      "85": {
        start: {
          line: 319,
          column: 20
        },
        end: {
          line: 319,
          column: 103
        }
      },
      "86": {
        start: {
          line: 320,
          column: 20
        },
        end: {
          line: 320,
          column: 26
        }
      },
      "87": {
        start: {
          line: 322,
          column: 12
        },
        end: {
          line: 327,
          column: 14
        }
      },
      "88": {
        start: {
          line: 330,
          column: 12
        },
        end: {
          line: 330,
          column: 70
        }
      },
      "89": {
        start: {
          line: 331,
          column: 12
        },
        end: {
          line: 334,
          column: 14
        }
      },
      "90": {
        start: {
          line: 337,
          column: 4
        },
        end: {
          line: 387,
          column: 7
        }
      },
      "91": {
        start: {
          line: 346,
          column: 8
        },
        end: {
          line: 386,
          column: 9
        }
      },
      "92": {
        start: {
          line: 347,
          column: 32
        },
        end: {
          line: 353,
          column: 13
        }
      },
      "93": {
        start: {
          line: 348,
          column: 57
        },
        end: {
          line: 351,
          column: 17
        }
      },
      "94": {
        start: {
          line: 354,
          column: 32
        },
        end: {
          line: 360,
          column: 13
        }
      },
      "95": {
        start: {
          line: 362,
          column: 12
        },
        end: {
          line: 372,
          column: 13
        }
      },
      "96": {
        start: {
          line: 364,
          column: 20
        },
        end: {
          line: 364,
          column: 102
        }
      },
      "97": {
        start: {
          line: 365,
          column: 20
        },
        end: {
          line: 365,
          column: 26
        }
      },
      "98": {
        start: {
          line: 367,
          column: 20
        },
        end: {
          line: 367,
          column: 104
        }
      },
      "99": {
        start: {
          line: 368,
          column: 20
        },
        end: {
          line: 368,
          column: 26
        }
      },
      "100": {
        start: {
          line: 370,
          column: 20
        },
        end: {
          line: 370,
          column: 103
        }
      },
      "101": {
        start: {
          line: 371,
          column: 20
        },
        end: {
          line: 371,
          column: 26
        }
      },
      "102": {
        start: {
          line: 373,
          column: 12
        },
        end: {
          line: 378,
          column: 14
        }
      },
      "103": {
        start: {
          line: 381,
          column: 12
        },
        end: {
          line: 381,
          column: 74
        }
      },
      "104": {
        start: {
          line: 382,
          column: 12
        },
        end: {
          line: 385,
          column: 14
        }
      },
      "105": {
        start: {
          line: 388,
          column: 4
        },
        end: {
          line: 435,
          column: 7
        }
      },
      "106": {
        start: {
          line: 397,
          column: 8
        },
        end: {
          line: 434,
          column: 9
        }
      },
      "107": {
        start: {
          line: 398,
          column: 32
        },
        end: {
          line: 401,
          column: 13
        }
      },
      "108": {
        start: {
          line: 402,
          column: 32
        },
        end: {
          line: 408,
          column: 13
        }
      },
      "109": {
        start: {
          line: 410,
          column: 12
        },
        end: {
          line: 420,
          column: 13
        }
      },
      "110": {
        start: {
          line: 412,
          column: 20
        },
        end: {
          line: 412,
          column: 102
        }
      },
      "111": {
        start: {
          line: 413,
          column: 20
        },
        end: {
          line: 413,
          column: 26
        }
      },
      "112": {
        start: {
          line: 415,
          column: 20
        },
        end: {
          line: 415,
          column: 104
        }
      },
      "113": {
        start: {
          line: 416,
          column: 20
        },
        end: {
          line: 416,
          column: 26
        }
      },
      "114": {
        start: {
          line: 418,
          column: 20
        },
        end: {
          line: 418,
          column: 103
        }
      },
      "115": {
        start: {
          line: 419,
          column: 20
        },
        end: {
          line: 419,
          column: 26
        }
      },
      "116": {
        start: {
          line: 421,
          column: 12
        },
        end: {
          line: 426,
          column: 14
        }
      },
      "117": {
        start: {
          line: 429,
          column: 12
        },
        end: {
          line: 429,
          column: 72
        }
      },
      "118": {
        start: {
          line: 430,
          column: 12
        },
        end: {
          line: 433,
          column: 14
        }
      },
      "119": {
        start: {
          line: 436,
          column: 4
        },
        end: {
          line: 483,
          column: 7
        }
      },
      "120": {
        start: {
          line: 445,
          column: 8
        },
        end: {
          line: 482,
          column: 9
        }
      },
      "121": {
        start: {
          line: 446,
          column: 32
        },
        end: {
          line: 449,
          column: 13
        }
      },
      "122": {
        start: {
          line: 450,
          column: 32
        },
        end: {
          line: 456,
          column: 13
        }
      },
      "123": {
        start: {
          line: 458,
          column: 12
        },
        end: {
          line: 468,
          column: 13
        }
      },
      "124": {
        start: {
          line: 460,
          column: 20
        },
        end: {
          line: 460,
          column: 102
        }
      },
      "125": {
        start: {
          line: 461,
          column: 20
        },
        end: {
          line: 461,
          column: 26
        }
      },
      "126": {
        start: {
          line: 463,
          column: 20
        },
        end: {
          line: 463,
          column: 104
        }
      },
      "127": {
        start: {
          line: 464,
          column: 20
        },
        end: {
          line: 464,
          column: 26
        }
      },
      "128": {
        start: {
          line: 466,
          column: 20
        },
        end: {
          line: 466,
          column: 103
        }
      },
      "129": {
        start: {
          line: 467,
          column: 20
        },
        end: {
          line: 467,
          column: 26
        }
      },
      "130": {
        start: {
          line: 469,
          column: 12
        },
        end: {
          line: 474,
          column: 14
        }
      },
      "131": {
        start: {
          line: 477,
          column: 12
        },
        end: {
          line: 477,
          column: 70
        }
      },
      "132": {
        start: {
          line: 478,
          column: 12
        },
        end: {
          line: 481,
          column: 14
        }
      },
      "133": {
        start: {
          line: 484,
          column: 4
        },
        end: {
          line: 529,
          column: 7
        }
      },
      "134": {
        start: {
          line: 492,
          column: 8
        },
        end: {
          line: 528,
          column: 9
        }
      },
      "135": {
        start: {
          line: 493,
          column: 32
        },
        end: {
          line: 495,
          column: 13
        }
      },
      "136": {
        start: {
          line: 496,
          column: 32
        },
        end: {
          line: 502,
          column: 13
        }
      },
      "137": {
        start: {
          line: 504,
          column: 12
        },
        end: {
          line: 514,
          column: 13
        }
      },
      "138": {
        start: {
          line: 506,
          column: 20
        },
        end: {
          line: 506,
          column: 102
        }
      },
      "139": {
        start: {
          line: 507,
          column: 20
        },
        end: {
          line: 507,
          column: 26
        }
      },
      "140": {
        start: {
          line: 509,
          column: 20
        },
        end: {
          line: 509,
          column: 104
        }
      },
      "141": {
        start: {
          line: 510,
          column: 20
        },
        end: {
          line: 510,
          column: 26
        }
      },
      "142": {
        start: {
          line: 512,
          column: 20
        },
        end: {
          line: 512,
          column: 103
        }
      },
      "143": {
        start: {
          line: 513,
          column: 20
        },
        end: {
          line: 513,
          column: 26
        }
      },
      "144": {
        start: {
          line: 515,
          column: 12
        },
        end: {
          line: 520,
          column: 14
        }
      },
      "145": {
        start: {
          line: 523,
          column: 12
        },
        end: {
          line: 523,
          column: 74
        }
      },
      "146": {
        start: {
          line: 524,
          column: 12
        },
        end: {
          line: 527,
          column: 14
        }
      },
      "147": {
        start: {
          line: 533,
          column: 4
        },
        end: {
          line: 576,
          column: 7
        }
      },
      "148": {
        start: {
          line: 539,
          column: 8
        },
        end: {
          line: 575,
          column: 9
        }
      },
      "149": {
        start: {
          line: 542,
          column: 12
        },
        end: {
          line: 552,
          column: 13
        }
      },
      "150": {
        start: {
          line: 544,
          column: 20
        },
        end: {
          line: 544,
          column: 88
        }
      },
      "151": {
        start: {
          line: 545,
          column: 20
        },
        end: {
          line: 545,
          column: 26
        }
      },
      "152": {
        start: {
          line: 547,
          column: 20
        },
        end: {
          line: 547,
          column: 90
        }
      },
      "153": {
        start: {
          line: 548,
          column: 20
        },
        end: {
          line: 548,
          column: 26
        }
      },
      "154": {
        start: {
          line: 550,
          column: 20
        },
        end: {
          line: 550,
          column: 89
        }
      },
      "155": {
        start: {
          line: 551,
          column: 20
        },
        end: {
          line: 551,
          column: 26
        }
      },
      "156": {
        start: {
          line: 553,
          column: 26
        },
        end: {
          line: 553,
          column: 61
        }
      },
      "157": {
        start: {
          line: 553,
          column: 43
        },
        end: {
          line: 553,
          column: 60
        }
      },
      "158": {
        start: {
          line: 554,
          column: 12
        },
        end: {
          line: 559,
          column: 13
        }
      },
      "159": {
        start: {
          line: 555,
          column: 16
        },
        end: {
          line: 558,
          column: 18
        }
      },
      "160": {
        start: {
          line: 561,
          column: 28
        },
        end: {
          line: 561,
          column: 79
        }
      },
      "161": {
        start: {
          line: 562,
          column: 12
        },
        end: {
          line: 567,
          column: 14
        }
      },
      "162": {
        start: {
          line: 570,
          column: 12
        },
        end: {
          line: 570,
          column: 73
        }
      },
      "163": {
        start: {
          line: 571,
          column: 12
        },
        end: {
          line: 574,
          column: 14
        }
      }
    },
    fnMap: {
      "0": {
        name: "setupCustomFieldTools",
        decl: {
          start: {
            line: 8,
            column: 16
          },
          end: {
            line: 8,
            column: 37
          }
        },
        loc: {
          start: {
            line: 8,
            column: 46
          },
          end: {
            line: 577,
            column: 1
          }
        },
        line: 8
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 16,
            column: 7
          },
          end: {
            line: 16,
            column: 8
          }
        },
        loc: {
          start: {
            line: 16,
            column: 68
          },
          end: {
            line: 46,
            column: 5
          }
        },
        line: 16
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 67,
            column: 7
          },
          end: {
            line: 67,
            column: 8
          }
        },
        loc: {
          start: {
            line: 67,
            column: 104
          },
          end: {
            line: 106,
            column: 5
          }
        },
        line: 67
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 116,
            column: 7
          },
          end: {
            line: 116,
            column: 8
          }
        },
        loc: {
          start: {
            line: 116,
            column: 78
          },
          end: {
            line: 146,
            column: 5
          }
        },
        line: 116
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 152,
            column: 7
          },
          end: {
            line: 152,
            column: 8
          }
        },
        loc: {
          start: {
            line: 152,
            column: 31
          },
          end: {
            line: 169,
            column: 5
          }
        },
        line: 152
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 177,
            column: 7
          },
          end: {
            line: 177,
            column: 8
          }
        },
        loc: {
          start: {
            line: 177,
            column: 47
          },
          end: {
            line: 194,
            column: 5
          }
        },
        line: 177
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 198,
            column: 7
          },
          end: {
            line: 198,
            column: 8
          }
        },
        loc: {
          start: {
            line: 198,
            column: 40
          },
          end: {
            line: 215,
            column: 5
          }
        },
        line: 198
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 219,
            column: 7
          },
          end: {
            line: 219,
            column: 8
          }
        },
        loc: {
          start: {
            line: 219,
            column: 40
          },
          end: {
            line: 236,
            column: 5
          }
        },
        line: 219
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 243,
            column: 7
          },
          end: {
            line: 243,
            column: 8
          }
        },
        loc: {
          start: {
            line: 243,
            column: 44
          },
          end: {
            line: 265,
            column: 5
          }
        },
        line: 243
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 246,
            column: 58
          },
          end: {
            line: 246,
            column: 59
          }
        },
        loc: {
          start: {
            line: 246,
            column: 65
          },
          end: {
            line: 249,
            column: 13
          }
        },
        line: 246
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 268,
            column: 7
          },
          end: {
            line: 268,
            column: 8
          }
        },
        loc: {
          start: {
            line: 268,
            column: 30
          },
          end: {
            line: 285,
            column: 5
          }
        },
        line: 268
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 297,
            column: 7
          },
          end: {
            line: 297,
            column: 8
          }
        },
        loc: {
          start: {
            line: 297,
            column: 113
          },
          end: {
            line: 336,
            column: 5
          }
        },
        line: 297
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 345,
            column: 7
          },
          end: {
            line: 345,
            column: 8
          }
        },
        loc: {
          start: {
            line: 345,
            column: 116
          },
          end: {
            line: 387,
            column: 5
          }
        },
        line: 345
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 348,
            column: 37
          },
          end: {
            line: 348,
            column: 38
          }
        },
        loc: {
          start: {
            line: 348,
            column: 57
          },
          end: {
            line: 351,
            column: 17
          }
        },
        line: 348
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 396,
            column: 7
          },
          end: {
            line: 396,
            column: 8
          }
        },
        loc: {
          start: {
            line: 396,
            column: 111
          },
          end: {
            line: 435,
            column: 5
          }
        },
        line: 396
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 444,
            column: 7
          },
          end: {
            line: 444,
            column: 8
          }
        },
        loc: {
          start: {
            line: 444,
            column: 114
          },
          end: {
            line: 483,
            column: 5
          }
        },
        line: 444
      },
      "16": {
        name: "(anonymous_16)",
        decl: {
          start: {
            line: 491,
            column: 7
          },
          end: {
            line: 491,
            column: 8
          }
        },
        loc: {
          start: {
            line: 491,
            column: 100
          },
          end: {
            line: 529,
            column: 5
          }
        },
        line: 491
      },
      "17": {
        name: "(anonymous_17)",
        decl: {
          start: {
            line: 538,
            column: 7
          },
          end: {
            line: 538,
            column: 8
          }
        },
        loc: {
          start: {
            line: 538,
            column: 68
          },
          end: {
            line: 576,
            column: 5
          }
        },
        line: 538
      },
      "18": {
        name: "(anonymous_18)",
        decl: {
          start: {
            line: 553,
            column: 38
          },
          end: {
            line: 553,
            column: 39
          }
        },
        loc: {
          start: {
            line: 553,
            column: 43
          },
          end: {
            line: 553,
            column: 60
          }
        },
        line: 553
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 19,
            column: 12
          },
          end: {
            line: 31,
            column: 13
          }
        },
        type: "switch",
        locations: [{
          start: {
            line: 20,
            column: 16
          },
          end: {
            line: 22,
            column: 26
          }
        }, {
          start: {
            line: 23,
            column: 16
          },
          end: {
            line: 25,
            column: 26
          }
        }, {
          start: {
            line: 26,
            column: 16
          },
          end: {
            line: 28,
            column: 26
          }
        }, {
          start: {
            line: 29,
            column: 16
          },
          end: {
            line: 30,
            column: 62
          }
        }],
        line: 19
      },
      "1": {
        loc: {
          start: {
            line: 70,
            column: 36
          },
          end: {
            line: 70,
            column: 96
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 70,
            column: 36
          },
          end: {
            line: 70,
            column: 47
          }
        }, {
          start: {
            line: 70,
            column: 51
          },
          end: {
            line: 70,
            column: 96
          }
        }],
        line: 70
      },
      "2": {
        loc: {
          start: {
            line: 79,
            column: 12
          },
          end: {
            line: 91,
            column: 13
          }
        },
        type: "switch",
        locations: [{
          start: {
            line: 80,
            column: 16
          },
          end: {
            line: 82,
            column: 26
          }
        }, {
          start: {
            line: 83,
            column: 16
          },
          end: {
            line: 85,
            column: 26
          }
        }, {
          start: {
            line: 86,
            column: 16
          },
          end: {
            line: 88,
            column: 26
          }
        }, {
          start: {
            line: 89,
            column: 16
          },
          end: {
            line: 90,
            column: 62
          }
        }],
        line: 79
      },
      "3": {
        loc: {
          start: {
            line: 119,
            column: 12
          },
          end: {
            line: 125,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 119,
            column: 12
          },
          end: {
            line: 125,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 119
      },
      "4": {
        loc: {
          start: {
            line: 119,
            column: 16
          },
          end: {
            line: 120,
            column: 72
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 119,
            column: 16
          },
          end: {
            line: 119,
            column: 34
          }
        }, {
          start: {
            line: 119,
            column: 38
          },
          end: {
            line: 119,
            column: 63
          }
        }, {
          start: {
            line: 120,
            column: 16
          },
          end: {
            line: 120,
            column: 38
          }
        }, {
          start: {
            line: 120,
            column: 42
          },
          end: {
            line: 120,
            column: 72
          }
        }],
        line: 119
      },
      "5": {
        loc: {
          start: {
            line: 311,
            column: 12
          },
          end: {
            line: 321,
            column: 13
          }
        },
        type: "switch",
        locations: [{
          start: {
            line: 312,
            column: 16
          },
          end: {
            line: 314,
            column: 26
          }
        }, {
          start: {
            line: 315,
            column: 16
          },
          end: {
            line: 317,
            column: 26
          }
        }, {
          start: {
            line: 318,
            column: 16
          },
          end: {
            line: 320,
            column: 26
          }
        }],
        line: 311
      },
      "6": {
        loc: {
          start: {
            line: 350,
            column: 32
          },
          end: {
            line: 350,
            column: 58
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 350,
            column: 32
          },
          end: {
            line: 350,
            column: 49
          }
        }, {
          start: {
            line: 350,
            column: 53
          },
          end: {
            line: 350,
            column: 58
          }
        }],
        line: 350
      },
      "7": {
        loc: {
          start: {
            line: 362,
            column: 12
          },
          end: {
            line: 372,
            column: 13
          }
        },
        type: "switch",
        locations: [{
          start: {
            line: 363,
            column: 16
          },
          end: {
            line: 365,
            column: 26
          }
        }, {
          start: {
            line: 366,
            column: 16
          },
          end: {
            line: 368,
            column: 26
          }
        }, {
          start: {
            line: 369,
            column: 16
          },
          end: {
            line: 371,
            column: 26
          }
        }],
        line: 362
      },
      "8": {
        loc: {
          start: {
            line: 410,
            column: 12
          },
          end: {
            line: 420,
            column: 13
          }
        },
        type: "switch",
        locations: [{
          start: {
            line: 411,
            column: 16
          },
          end: {
            line: 413,
            column: 26
          }
        }, {
          start: {
            line: 414,
            column: 16
          },
          end: {
            line: 416,
            column: 26
          }
        }, {
          start: {
            line: 417,
            column: 16
          },
          end: {
            line: 419,
            column: 26
          }
        }],
        line: 410
      },
      "9": {
        loc: {
          start: {
            line: 458,
            column: 12
          },
          end: {
            line: 468,
            column: 13
          }
        },
        type: "switch",
        locations: [{
          start: {
            line: 459,
            column: 16
          },
          end: {
            line: 461,
            column: 26
          }
        }, {
          start: {
            line: 462,
            column: 16
          },
          end: {
            line: 464,
            column: 26
          }
        }, {
          start: {
            line: 465,
            column: 16
          },
          end: {
            line: 467,
            column: 26
          }
        }],
        line: 458
      },
      "10": {
        loc: {
          start: {
            line: 472,
            column: 71
          },
          end: {
            line: 472,
            column: 111
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 472,
            column: 86
          },
          end: {
            line: 472,
            column: 106
          }
        }, {
          start: {
            line: 472,
            column: 109
          },
          end: {
            line: 472,
            column: 111
          }
        }],
        line: 472
      },
      "11": {
        loc: {
          start: {
            line: 504,
            column: 12
          },
          end: {
            line: 514,
            column: 13
          }
        },
        type: "switch",
        locations: [{
          start: {
            line: 505,
            column: 16
          },
          end: {
            line: 507,
            column: 26
          }
        }, {
          start: {
            line: 508,
            column: 16
          },
          end: {
            line: 510,
            column: 26
          }
        }, {
          start: {
            line: 511,
            column: 16
          },
          end: {
            line: 513,
            column: 26
          }
        }],
        line: 504
      },
      "12": {
        loc: {
          start: {
            line: 542,
            column: 12
          },
          end: {
            line: 552,
            column: 13
          }
        },
        type: "switch",
        locations: [{
          start: {
            line: 543,
            column: 16
          },
          end: {
            line: 545,
            column: 26
          }
        }, {
          start: {
            line: 546,
            column: 16
          },
          end: {
            line: 548,
            column: 26
          }
        }, {
          start: {
            line: 549,
            column: 16
          },
          end: {
            line: 551,
            column: 26
          }
        }],
        line: 542
      },
      "13": {
        loc: {
          start: {
            line: 554,
            column: 12
          },
          end: {
            line: 559,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 554,
            column: 12
          },
          end: {
            line: 559,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 554
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0,
      "105": 0,
      "106": 0,
      "107": 0,
      "108": 0,
      "109": 0,
      "110": 0,
      "111": 0,
      "112": 0,
      "113": 0,
      "114": 0,
      "115": 0,
      "116": 0,
      "117": 0,
      "118": 0,
      "119": 0,
      "120": 0,
      "121": 0,
      "122": 0,
      "123": 0,
      "124": 0,
      "125": 0,
      "126": 0,
      "127": 0,
      "128": 0,
      "129": 0,
      "130": 0,
      "131": 0,
      "132": 0,
      "133": 0,
      "134": 0,
      "135": 0,
      "136": 0,
      "137": 0,
      "138": 0,
      "139": 0,
      "140": 0,
      "141": 0,
      "142": 0,
      "143": 0,
      "144": 0,
      "145": 0,
      "146": 0,
      "147": 0,
      "148": 0,
      "149": 0,
      "150": 0,
      "151": 0,
      "152": 0,
      "153": 0,
      "154": 0,
      "155": 0,
      "156": 0,
      "157": 0,
      "158": 0,
      "159": 0,
      "160": 0,
      "161": 0,
      "162": 0,
      "163": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0
    },
    b: {
      "0": [0, 0, 0, 0],
      "1": [0, 0],
      "2": [0, 0, 0, 0],
      "3": [0, 0],
      "4": [0, 0, 0, 0],
      "5": [0, 0, 0],
      "6": [0, 0],
      "7": [0, 0, 0],
      "8": [0, 0, 0],
      "9": [0, 0, 0],
      "10": [0, 0],
      "11": [0, 0, 0],
      "12": [0, 0, 0],
      "13": [0, 0]
    },
    inputSourceMap: {
      file: "/Users/peterkrzyzek/Development/clickup-mcp-server/src/tools/custom-field-tools.ts",
      mappings: "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",
      names: [],
      sources: ["/Users/peterkrzyzek/Development/clickup-mcp-server/src/tools/custom-field-tools.ts"],
      sourcesContent: ["import { McpServer } from '@modelcontextprotocol/sdk/server/mcp.js';\nimport { z } from 'zod';\nimport { createClickUpClient } from '../clickup-client/index.js';\nimport { createEnhancedCustomFieldsClient, CustomFieldType } from '../clickup-client/custom-fields-enhanced.js';\nimport { CustomFieldToolSchemas, DropdownOptionSchema } from '../schemas/custom-field-schemas.js';\n\n// Create clients\nconst clickUpClient = createClickUpClient();\nconst customFieldsClient = createEnhancedCustomFieldsClient(clickUpClient);\n\nexport function setupCustomFieldTools(server: McpServer): void {\n\n  // ========================================\n  // GET CUSTOM FIELDS OPERATIONS\n  // ========================================\n\n  server.tool(\n    'get_custom_fields',\n    'Get custom fields for a ClickUp list, folder, or space. Returns all field definitions with their configurations.',\n    {\n      container_type: z.enum(['list', 'folder', 'space']).describe('The type of container to get custom fields from'),\n      container_id: z.string().min(1).describe('The ID of the container (list, folder, or space)'),\n      include_deleted: z.boolean().optional().default(false).describe('Whether to include deleted custom fields')\n    },\n    async ({ container_type, container_id, include_deleted }) => {\n      try {\n        let fields;\n        \n        switch (container_type) {\n          case 'list':\n            fields = await customFieldsClient.getListCustomFields(container_id, { include_deleted });\n            break;\n          case 'folder':\n            fields = await customFieldsClient.getFolderCustomFields(container_id, { include_deleted });\n            break;\n          case 'space':\n            fields = await customFieldsClient.getSpaceCustomFields(container_id, { include_deleted });\n            break;\n          default:\n            throw new Error('Invalid container type');\n        }\n\n        return {\n          content: [{ \n            type: 'text', \n            text: `Custom fields for ${container_type} ${container_id}:\\n\\n${JSON.stringify(fields, null, 2)}` \n          }]\n        };\n      } catch (error: any) {\n        console.error('Error getting custom fields:', error);\n        return {\n          content: [{ type: 'text', text: `Error getting custom fields: ${error.message}` }],\n          isError: true\n        };\n      }\n    }\n  );\n\n  // ========================================\n  // CREATE CUSTOM FIELD OPERATIONS\n  // ========================================\n\n  server.tool(\n    'create_custom_field',\n    'Create a new custom field in a ClickUp list, folder, or space. Supports all field types with type-specific configurations.',\n    {\n      container_type: z.enum(['list', 'folder', 'space']).describe('The type of container to create the custom field in'),\n      container_id: z.string().min(1).describe('The ID of the container (list, folder, or space)'),\n      name: z.string().min(1).max(255).describe('The name of the custom field'),\n      type: z.enum([\n        'text', 'textarea',\n        'number', 'currency', \n        'date',\n        'drop_down', 'labels',\n        'checkbox',\n        'url', 'email', 'phone',\n        'rating', 'progress',\n        'task_relationship'\n      ] as const).describe('The type of custom field to create'),\n      type_config: z.record(z.any()).optional().describe('Type-specific configuration object'),\n      required: z.boolean().optional().default(false).describe('Whether the field is required'),\n      hide_from_guests: z.boolean().optional().default(false).describe('Whether to hide the field from guests')\n    },\n    async ({ container_type, container_id, name, type, type_config, required, hide_from_guests }) => {\n      try {\n        // Get default configuration for field type if not provided\n        const finalTypeConfig = type_config || customFieldsClient.getFieldTypeTemplate(type as CustomFieldType);\n\n        const fieldParams = {\n          name,\n          type: type as CustomFieldType,\n          type_config: finalTypeConfig,\n          required,\n          hide_from_guests\n        };\n\n        let field;\n        switch (container_type) {\n          case 'list':\n            field = await customFieldsClient.createListCustomField(container_id, fieldParams);\n            break;\n          case 'folder':\n            field = await customFieldsClient.createFolderCustomField(container_id, fieldParams);\n            break;\n          case 'space':\n            field = await customFieldsClient.createSpaceCustomField(container_id, fieldParams);\n            break;\n          default:\n            throw new Error('Invalid container type');\n        }\n\n        return {\n          content: [{ \n            type: 'text', \n            text: `Custom field created successfully in ${container_type} ${container_id}!\\n\\n${JSON.stringify(field, null, 2)}` \n          }]\n        };\n      } catch (error: any) {\n        console.error('Error creating custom field:', error);\n        return {\n          content: [{ type: 'text', text: `Error creating custom field: ${error.message}` }],\n          isError: true\n        };\n      }\n    }\n  );\n\n  // ========================================\n  // UPDATE CUSTOM FIELD OPERATIONS\n  // ========================================\n\n  server.tool(\n    'update_custom_field',\n    'Update an existing custom field. Can modify name, configuration, required status, and guest visibility.',\n    {\n      field_id: z.string().min(1).describe('The ID of the custom field to update'),\n      name: z.string().min(1).max(255).optional().describe('New name for the custom field'),\n      type_config: z.record(z.any()).optional().describe('Updated type-specific configuration'),\n      required: z.boolean().optional().describe('Whether the field should be required'),\n      hide_from_guests: z.boolean().optional().describe('Whether to hide the field from guests')\n    },\n    async ({ field_id, name, type_config, required, hide_from_guests }) => {\n      try {\n        // Validate that at least one field is being updated\n        if (name === undefined && type_config === undefined && \n            required === undefined && hide_from_guests === undefined) {\n          return {\n            content: [{ type: 'text', text: 'Error: Must specify at least one field to update (name, type_config, required, or hide_from_guests)' }],\n            isError: true\n          };\n        }\n\n        const updatedField = await customFieldsClient.updateCustomField(field_id, {\n          name,\n          type_config,\n          required,\n          hide_from_guests\n        });\n\n        return {\n          content: [{ \n            type: 'text', \n            text: `Custom field updated successfully!\\n\\n${JSON.stringify(updatedField, null, 2)}` \n          }]\n        };\n      } catch (error: any) {\n        console.error('Error updating custom field:', error);\n        return {\n          content: [{ type: 'text', text: `Error updating custom field: ${error.message}` }],\n          isError: true\n        };\n      }\n    }\n  );\n\n  // ========================================\n  // DELETE CUSTOM FIELD OPERATIONS\n  // ========================================\n\n  server.tool(\n    'delete_custom_field',\n    'Delete a custom field from ClickUp. This will remove the field and all its values from tasks. This action cannot be undone.',\n    {\n      field_id: z.string().min(1).describe('The ID of the custom field to delete')\n    },\n    async ({ field_id }) => {\n      try {\n        await customFieldsClient.deleteCustomField(field_id);\n\n        return {\n          content: [{ \n            type: 'text', \n            text: `Custom field ${field_id} deleted successfully. All field values have been removed from tasks.` \n          }]\n        };\n      } catch (error: any) {\n        console.error('Error deleting custom field:', error);\n        return {\n          content: [{ type: 'text', text: `Error deleting custom field: ${error.message}` }],\n          isError: true\n        };\n      }\n    }\n  );\n\n  // ========================================\n  // CUSTOM FIELD VALUE OPERATIONS\n  // ========================================\n\n  server.tool(\n    'set_custom_field_value',\n    'Set a custom field value on a ClickUp task. The value format depends on the field type.',\n    {\n      task_id: z.string().min(1).describe('The ID of the task to set the custom field value on'),\n      field_id: z.string().min(1).describe('The ID of the custom field'),\n      value: z.any().describe('The value to set (format depends on field type)')\n    },\n    async ({ task_id, field_id, value }) => {\n      try {\n        await customFieldsClient.setCustomFieldValue(task_id, field_id, value);\n\n        return {\n          content: [{ \n            type: 'text', \n            text: `Custom field value set successfully on task ${task_id} for field ${field_id}.` \n          }]\n        };\n      } catch (error: any) {\n        console.error('Error setting custom field value:', error);\n        return {\n          content: [{ type: 'text', text: `Error setting custom field value: ${error.message}` }],\n          isError: true\n        };\n      }\n    }\n  );\n\n  server.tool(\n    'remove_custom_field_value',\n    'Remove a custom field value from a ClickUp task. This clears the field value but keeps the field definition.',\n    {\n      task_id: z.string().min(1).describe('The ID of the task to remove the custom field value from'),\n      field_id: z.string().min(1).describe('The ID of the custom field to clear')\n    },\n    async ({ task_id, field_id }) => {\n      try {\n        await customFieldsClient.removeCustomFieldValue(task_id, field_id);\n\n        return {\n          content: [{ \n            type: 'text', \n            text: `Custom field value removed successfully from task ${task_id} for field ${field_id}.` \n          }]\n        };\n      } catch (error: any) {\n        console.error('Error removing custom field value:', error);\n        return {\n          content: [{ type: 'text', text: `Error removing custom field value: ${error.message}` }],\n          isError: true\n        };\n      }\n    }\n  );\n\n  server.tool(\n    'get_custom_field_value',\n    'Get a custom field value from a ClickUp task. Returns the current value and field information.',\n    {\n      task_id: z.string().min(1).describe('The ID of the task to get the custom field value from'),\n      field_id: z.string().min(1).describe('The ID of the custom field to retrieve')\n    },\n    async ({ task_id, field_id }) => {\n      try {\n        const value = await customFieldsClient.getCustomFieldValue(task_id, field_id);\n\n        return {\n          content: [{ \n            type: 'text', \n            text: `Custom field value for task ${task_id}, field ${field_id}:\\n\\n${JSON.stringify(value, null, 2)}` \n          }]\n        };\n      } catch (error: any) {\n        console.error('Error getting custom field value:', error);\n        return {\n          content: [{ type: 'text', text: `Error getting custom field value: ${error.message}` }],\n          isError: true\n        };\n      }\n    }\n  );\n\n  server.tool(\n    'bulk_set_custom_field_values',\n    'Set multiple custom field values on a ClickUp task in a single operation. More efficient than setting values individually.',\n    {\n      task_id: z.string().min(1).describe('The ID of the task to set custom field values on'),\n      field_values: z.array(z.object({\n        field_id: z.string().min(1).describe('The ID of the custom field'),\n        value: z.any().describe('The value to set (format depends on field type)')\n      })).min(1).describe('Array of field ID and value pairs to set')\n    },\n    async ({ task_id, field_values }) => {\n      try {\n        // Ensure all field_values have the required properties\n        const validatedFieldValues = field_values.map(fv => ({\n          field_id: fv.field_id,\n          value: fv.value\n        }));\n        \n        const results = await customFieldsClient.bulkSetCustomFieldValues(task_id, validatedFieldValues);\n\n        return {\n          content: [{ \n            type: 'text', \n            text: `Bulk custom field values set successfully on task ${task_id}!\\n\\nResults:\\n${JSON.stringify(results, null, 2)}` \n          }]\n        };\n      } catch (error: any) {\n        console.error('Error bulk setting custom field values:', error);\n        return {\n          content: [{ type: 'text', text: `Error bulk setting custom field values: ${error.message}` }],\n          isError: true\n        };\n      }\n    }\n  );\n\n  server.tool(\n    'get_task_custom_field_values',\n    'Get all custom field values for a ClickUp task. Returns all field values with their definitions.',\n    {\n      task_id: z.string().min(1).describe('The ID of the task to get custom field values from')\n    },\n    async ({ task_id }) => {\n      try {\n        const values = await customFieldsClient.getTaskCustomFieldValues(task_id);\n\n        return {\n          content: [{ \n            type: 'text', \n            text: `All custom field values for task ${task_id}:\\n\\n${JSON.stringify(values, null, 2)}` \n          }]\n        };\n      } catch (error: any) {\n        console.error('Error getting task custom field values:', error);\n        return {\n          content: [{ type: 'text', text: `Error getting task custom field values: ${error.message}` }],\n          isError: true\n        };\n      }\n    }\n  );\n\n  // ========================================\n  // HELPER TOOLS FOR FIELD CREATION\n  // ========================================\n\n  server.tool(\n    'create_text_custom_field',\n    'Create a text custom field with optional default value and placeholder.',\n    {\n      container_type: z.enum(['list', 'folder', 'space']).describe('The type of container'),\n      container_id: z.string().min(1).describe('The ID of the container'),\n      name: z.string().min(1).max(255).describe('The name of the text field'),\n      default_value: z.string().optional().describe('Default text value'),\n      placeholder: z.string().optional().describe('Placeholder text'),\n      required: z.boolean().optional().default(false).describe('Whether the field is required'),\n      hide_from_guests: z.boolean().optional().default(false).describe('Whether to hide from guests')\n    },\n    async ({ container_type, container_id, name, default_value, placeholder, required, hide_from_guests }) => {\n      try {\n        const type_config = {\n          default: default_value,\n          placeholder\n        };\n\n        const fieldParams = {\n          name,\n          type: 'text' as CustomFieldType,\n          type_config,\n          required,\n          hide_from_guests\n        };\n\n        let field;\n        switch (container_type) {\n          case 'list':\n            field = await customFieldsClient.createListCustomField(container_id, fieldParams);\n            break;\n          case 'folder':\n            field = await customFieldsClient.createFolderCustomField(container_id, fieldParams);\n            break;\n          case 'space':\n            field = await customFieldsClient.createSpaceCustomField(container_id, fieldParams);\n            break;\n        }\n\n        return {\n          content: [{ \n            type: 'text', \n            text: `Text custom field created successfully!\\n\\n${JSON.stringify(field, null, 2)}` \n          }]\n        };\n      } catch (error: any) {\n        console.error('Error creating text custom field:', error);\n        return {\n          content: [{ type: 'text', text: `Error creating text custom field: ${error.message}` }],\n          isError: true\n        };\n      }\n    }\n  );\n\n  server.tool(\n    'create_dropdown_custom_field',\n    'Create a dropdown custom field with specified options.',\n    {\n      container_type: z.enum(['list', 'folder', 'space']).describe('The type of container'),\n      container_id: z.string().min(1).describe('The ID of the container'),\n      name: z.string().min(1).max(255).describe('The name of the dropdown field'),\n      options: z.array(DropdownOptionSchema).min(1).describe('Array of dropdown options'),\n      default_option_index: z.number().min(0).optional().describe('Index of default selected option'),\n      required: z.boolean().optional().default(false).describe('Whether the field is required'),\n      hide_from_guests: z.boolean().optional().default(false).describe('Whether to hide from guests')\n    },\n    async ({ container_type, container_id, name, options, default_option_index, required, hide_from_guests }) => {\n      try {\n        const type_config = {\n          options: options.map((option, index) => ({\n            ...option,\n            orderindex: option.orderindex ?? index\n          })),\n          default: default_option_index\n        };\n\n        const fieldParams = {\n          name,\n          type: 'drop_down' as CustomFieldType,\n          type_config,\n          required,\n          hide_from_guests\n        };\n\n        let field;\n        switch (container_type) {\n          case 'list':\n            field = await customFieldsClient.createListCustomField(container_id, fieldParams);\n            break;\n          case 'folder':\n            field = await customFieldsClient.createFolderCustomField(container_id, fieldParams);\n            break;\n          case 'space':\n            field = await customFieldsClient.createSpaceCustomField(container_id, fieldParams);\n            break;\n        }\n\n        return {\n          content: [{ \n            type: 'text', \n            text: `Dropdown custom field created successfully with ${options.length} options!\\n\\n${JSON.stringify(field, null, 2)}` \n          }]\n        };\n      } catch (error: any) {\n        console.error('Error creating dropdown custom field:', error);\n        return {\n          content: [{ type: 'text', text: `Error creating dropdown custom field: ${error.message}` }],\n          isError: true\n        };\n      }\n    }\n  );\n\n  server.tool(\n    'create_number_custom_field',\n    'Create a number custom field with optional precision and default value.',\n    {\n      container_type: z.enum(['list', 'folder', 'space']).describe('The type of container'),\n      container_id: z.string().min(1).describe('The ID of the container'),\n      name: z.string().min(1).max(255).describe('The name of the number field'),\n      default_value: z.number().optional().describe('Default numeric value'),\n      precision: z.number().min(0).max(8).optional().default(0).describe('Number of decimal places (0-8)'),\n      required: z.boolean().optional().default(false).describe('Whether the field is required'),\n      hide_from_guests: z.boolean().optional().default(false).describe('Whether to hide from guests')\n    },\n    async ({ container_type, container_id, name, default_value, precision, required, hide_from_guests }) => {\n      try {\n        const type_config = {\n          default: default_value,\n          precision\n        };\n\n        const fieldParams = {\n          name,\n          type: 'number' as CustomFieldType,\n          type_config,\n          required,\n          hide_from_guests\n        };\n\n        let field;\n        switch (container_type) {\n          case 'list':\n            field = await customFieldsClient.createListCustomField(container_id, fieldParams);\n            break;\n          case 'folder':\n            field = await customFieldsClient.createFolderCustomField(container_id, fieldParams);\n            break;\n          case 'space':\n            field = await customFieldsClient.createSpaceCustomField(container_id, fieldParams);\n            break;\n        }\n\n        return {\n          content: [{ \n            type: 'text', \n            text: `Number custom field created successfully with ${precision} decimal places!\\n\\n${JSON.stringify(field, null, 2)}` \n          }]\n        };\n      } catch (error: any) {\n        console.error('Error creating number custom field:', error);\n        return {\n          content: [{ type: 'text', text: `Error creating number custom field: ${error.message}` }],\n          isError: true\n        };\n      }\n    }\n  );\n\n  server.tool(\n    'create_date_custom_field',\n    'Create a date custom field with optional time inclusion.',\n    {\n      container_type: z.enum(['list', 'folder', 'space']).describe('The type of container'),\n      container_id: z.string().min(1).describe('The ID of the container'),\n      name: z.string().min(1).max(255).describe('The name of the date field'),\n      include_time: z.boolean().optional().default(false).describe('Whether to include time in the date field'),\n      default_value: z.number().positive().optional().describe('Default date value (Unix timestamp)'),\n      required: z.boolean().optional().default(false).describe('Whether the field is required'),\n      hide_from_guests: z.boolean().optional().default(false).describe('Whether to hide from guests')\n    },\n    async ({ container_type, container_id, name, include_time, default_value, required, hide_from_guests }) => {\n      try {\n        const type_config = {\n          include_time,\n          default: default_value\n        };\n\n        const fieldParams = {\n          name,\n          type: 'date' as CustomFieldType,\n          type_config,\n          required,\n          hide_from_guests\n        };\n\n        let field;\n        switch (container_type) {\n          case 'list':\n            field = await customFieldsClient.createListCustomField(container_id, fieldParams);\n            break;\n          case 'folder':\n            field = await customFieldsClient.createFolderCustomField(container_id, fieldParams);\n            break;\n          case 'space':\n            field = await customFieldsClient.createSpaceCustomField(container_id, fieldParams);\n            break;\n        }\n\n        return {\n          content: [{ \n            type: 'text', \n            text: `Date custom field created successfully${include_time ? ' with time support' : ''}!\\n\\n${JSON.stringify(field, null, 2)}` \n          }]\n        };\n      } catch (error: any) {\n        console.error('Error creating date custom field:', error);\n        return {\n          content: [{ type: 'text', text: `Error creating date custom field: ${error.message}` }],\n          isError: true\n        };\n      }\n    }\n  );\n\n  server.tool(\n    'create_checkbox_custom_field',\n    'Create a checkbox (boolean) custom field with optional default value.',\n    {\n      container_type: z.enum(['list', 'folder', 'space']).describe('The type of container'),\n      container_id: z.string().min(1).describe('The ID of the container'),\n      name: z.string().min(1).max(255).describe('The name of the checkbox field'),\n      default_value: z.boolean().optional().default(false).describe('Default checkbox state'),\n      required: z.boolean().optional().default(false).describe('Whether the field is required'),\n      hide_from_guests: z.boolean().optional().default(false).describe('Whether to hide from guests')\n    },\n    async ({ container_type, container_id, name, default_value, required, hide_from_guests }) => {\n      try {\n        const type_config = {\n          default: default_value\n        };\n\n        const fieldParams = {\n          name,\n          type: 'checkbox' as CustomFieldType,\n          type_config,\n          required,\n          hide_from_guests\n        };\n\n        let field;\n        switch (container_type) {\n          case 'list':\n            field = await customFieldsClient.createListCustomField(container_id, fieldParams);\n            break;\n          case 'folder':\n            field = await customFieldsClient.createFolderCustomField(container_id, fieldParams);\n            break;\n          case 'space':\n            field = await customFieldsClient.createSpaceCustomField(container_id, fieldParams);\n            break;\n        }\n\n        return {\n          content: [{ \n            type: 'text', \n            text: `Checkbox custom field created successfully!\\n\\n${JSON.stringify(field, null, 2)}` \n          }]\n        };\n      } catch (error: any) {\n        console.error('Error creating checkbox custom field:', error);\n        return {\n          content: [{ type: 'text', text: `Error creating checkbox custom field: ${error.message}` }],\n          isError: true\n        };\n      }\n    }\n  );\n\n  // ========================================\n  // FIELD VALUE VALIDATION HELPER\n  // ========================================\n\n  server.tool(\n    'validate_custom_field_value',\n    'Validate a custom field value against its field type and configuration. Useful for checking values before setting them.',\n    {\n      field_id: z.string().min(1).describe('The ID of the custom field'),\n      container_type: z.enum(['list', 'folder', 'space']).describe('The type of container the field belongs to'),\n      container_id: z.string().min(1).describe('The ID of the container'),\n      value: z.any().describe('The value to validate')\n    },\n    async ({ field_id, container_type, container_id, value }) => {\n      try {\n        // Get the field definition first\n        let fields;\n        switch (container_type) {\n          case 'list':\n            fields = await customFieldsClient.getListCustomFields(container_id);\n            break;\n          case 'folder':\n            fields = await customFieldsClient.getFolderCustomFields(container_id);\n            break;\n          case 'space':\n            fields = await customFieldsClient.getSpaceCustomFields(container_id);\n            break;\n        }\n\n        const field = fields.find(f => f.id === field_id);\n        if (!field) {\n          return {\n            content: [{ type: 'text', text: `Error: Custom field ${field_id} not found in ${container_type} ${container_id}` }],\n            isError: true\n          };\n        }\n\n        // Validate the value\n        const isValid = customFieldsClient.validateFieldValue(field, value);\n        \n        return {\n          content: [{ \n            type: 'text', \n            text: `Validation result for field \"${field.name}\" (${field.type}):\\n\\nValue: ${JSON.stringify(value)}\\nValid: ${isValid}\\n\\nField Configuration:\\n${JSON.stringify(field.type_config, null, 2)}` \n          }]\n        };\n      } catch (error: any) {\n        console.error('Error validating custom field value:', error);\n        return {\n          content: [{ type: 'text', text: `Error validating custom field value: ${error.message}` }],\n          isError: true\n        };\n      }\n    }\n  );\n}\n"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "9c7ba07cf002e4e117ba7da90ba617ff8c75c801"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_2j6df1vja0 = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_2j6df1vja0();
import { z } from 'zod';
import { createClickUpClient } from '../clickup-client/index.js';
import { createEnhancedCustomFieldsClient } from '../clickup-client/custom-fields-enhanced.js';
import { DropdownOptionSchema } from '../schemas/custom-field-schemas.js';
// Create clients
const clickUpClient =
/* istanbul ignore next */
(cov_2j6df1vja0().s[0]++, createClickUpClient());
const customFieldsClient =
/* istanbul ignore next */
(cov_2j6df1vja0().s[1]++, createEnhancedCustomFieldsClient(clickUpClient));
export function setupCustomFieldTools(server) {
  /* istanbul ignore next */
  cov_2j6df1vja0().f[0]++;
  cov_2j6df1vja0().s[2]++;
  // ========================================
  // GET CUSTOM FIELDS OPERATIONS
  // ========================================
  server.tool('get_custom_fields', 'Get custom fields for a ClickUp list, folder, or space. Returns all field definitions with their configurations.', {
    container_type: z.enum(['list', 'folder', 'space']).describe('The type of container to get custom fields from'),
    container_id: z.string().min(1).describe('The ID of the container (list, folder, or space)'),
    include_deleted: z.boolean().optional().default(false).describe('Whether to include deleted custom fields')
  }, async ({
    container_type,
    container_id,
    include_deleted
  }) => {
    /* istanbul ignore next */
    cov_2j6df1vja0().f[1]++;
    cov_2j6df1vja0().s[3]++;
    try {
      let fields;
      /* istanbul ignore next */
      cov_2j6df1vja0().s[4]++;
      switch (container_type) {
        case 'list':
          /* istanbul ignore next */
          cov_2j6df1vja0().b[0][0]++;
          cov_2j6df1vja0().s[5]++;
          fields = await customFieldsClient.getListCustomFields(container_id, {
            include_deleted
          });
          /* istanbul ignore next */
          cov_2j6df1vja0().s[6]++;
          break;
        case 'folder':
          /* istanbul ignore next */
          cov_2j6df1vja0().b[0][1]++;
          cov_2j6df1vja0().s[7]++;
          fields = await customFieldsClient.getFolderCustomFields(container_id, {
            include_deleted
          });
          /* istanbul ignore next */
          cov_2j6df1vja0().s[8]++;
          break;
        case 'space':
          /* istanbul ignore next */
          cov_2j6df1vja0().b[0][2]++;
          cov_2j6df1vja0().s[9]++;
          fields = await customFieldsClient.getSpaceCustomFields(container_id, {
            include_deleted
          });
          /* istanbul ignore next */
          cov_2j6df1vja0().s[10]++;
          break;
        default:
          /* istanbul ignore next */
          cov_2j6df1vja0().b[0][3]++;
          cov_2j6df1vja0().s[11]++;
          throw new Error('Invalid container type');
      }
      /* istanbul ignore next */
      cov_2j6df1vja0().s[12]++;
      return {
        content: [{
          type: 'text',
          text: `Custom fields for ${container_type} ${container_id}:\n\n${JSON.stringify(fields, null, 2)}`
        }]
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_2j6df1vja0().s[13]++;
      console.error('Error getting custom fields:', error);
      /* istanbul ignore next */
      cov_2j6df1vja0().s[14]++;
      return {
        content: [{
          type: 'text',
          text: `Error getting custom fields: ${error.message}`
        }],
        isError: true
      };
    }
  });
  // ========================================
  // CREATE CUSTOM FIELD OPERATIONS
  // ========================================
  /* istanbul ignore next */
  cov_2j6df1vja0().s[15]++;
  server.tool('create_custom_field', 'Create a new custom field in a ClickUp list, folder, or space. Supports all field types with type-specific configurations.', {
    container_type: z.enum(['list', 'folder', 'space']).describe('The type of container to create the custom field in'),
    container_id: z.string().min(1).describe('The ID of the container (list, folder, or space)'),
    name: z.string().min(1).max(255).describe('The name of the custom field'),
    type: z.enum(['text', 'textarea', 'number', 'currency', 'date', 'drop_down', 'labels', 'checkbox', 'url', 'email', 'phone', 'rating', 'progress', 'task_relationship']).describe('The type of custom field to create'),
    type_config: z.record(z.any()).optional().describe('Type-specific configuration object'),
    required: z.boolean().optional().default(false).describe('Whether the field is required'),
    hide_from_guests: z.boolean().optional().default(false).describe('Whether to hide the field from guests')
  }, async ({
    container_type,
    container_id,
    name,
    type,
    type_config,
    required,
    hide_from_guests
  }) => {
    /* istanbul ignore next */
    cov_2j6df1vja0().f[2]++;
    cov_2j6df1vja0().s[16]++;
    try {
      // Get default configuration for field type if not provided
      const finalTypeConfig =
      /* istanbul ignore next */
      (cov_2j6df1vja0().s[17]++,
      /* istanbul ignore next */
      (cov_2j6df1vja0().b[1][0]++, type_config) ||
      /* istanbul ignore next */
      (cov_2j6df1vja0().b[1][1]++, customFieldsClient.getFieldTypeTemplate(type)));
      const fieldParams =
      /* istanbul ignore next */
      (cov_2j6df1vja0().s[18]++, {
        name,
        type: type,
        type_config: finalTypeConfig,
        required,
        hide_from_guests
      });
      let field;
      /* istanbul ignore next */
      cov_2j6df1vja0().s[19]++;
      switch (container_type) {
        case 'list':
          /* istanbul ignore next */
          cov_2j6df1vja0().b[2][0]++;
          cov_2j6df1vja0().s[20]++;
          field = await customFieldsClient.createListCustomField(container_id, fieldParams);
          /* istanbul ignore next */
          cov_2j6df1vja0().s[21]++;
          break;
        case 'folder':
          /* istanbul ignore next */
          cov_2j6df1vja0().b[2][1]++;
          cov_2j6df1vja0().s[22]++;
          field = await customFieldsClient.createFolderCustomField(container_id, fieldParams);
          /* istanbul ignore next */
          cov_2j6df1vja0().s[23]++;
          break;
        case 'space':
          /* istanbul ignore next */
          cov_2j6df1vja0().b[2][2]++;
          cov_2j6df1vja0().s[24]++;
          field = await customFieldsClient.createSpaceCustomField(container_id, fieldParams);
          /* istanbul ignore next */
          cov_2j6df1vja0().s[25]++;
          break;
        default:
          /* istanbul ignore next */
          cov_2j6df1vja0().b[2][3]++;
          cov_2j6df1vja0().s[26]++;
          throw new Error('Invalid container type');
      }
      /* istanbul ignore next */
      cov_2j6df1vja0().s[27]++;
      return {
        content: [{
          type: 'text',
          text: `Custom field created successfully in ${container_type} ${container_id}!\n\n${JSON.stringify(field, null, 2)}`
        }]
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_2j6df1vja0().s[28]++;
      console.error('Error creating custom field:', error);
      /* istanbul ignore next */
      cov_2j6df1vja0().s[29]++;
      return {
        content: [{
          type: 'text',
          text: `Error creating custom field: ${error.message}`
        }],
        isError: true
      };
    }
  });
  // ========================================
  // UPDATE CUSTOM FIELD OPERATIONS
  // ========================================
  /* istanbul ignore next */
  cov_2j6df1vja0().s[30]++;
  server.tool('update_custom_field', 'Update an existing custom field. Can modify name, configuration, required status, and guest visibility.', {
    field_id: z.string().min(1).describe('The ID of the custom field to update'),
    name: z.string().min(1).max(255).optional().describe('New name for the custom field'),
    type_config: z.record(z.any()).optional().describe('Updated type-specific configuration'),
    required: z.boolean().optional().describe('Whether the field should be required'),
    hide_from_guests: z.boolean().optional().describe('Whether to hide the field from guests')
  }, async ({
    field_id,
    name,
    type_config,
    required,
    hide_from_guests
  }) => {
    /* istanbul ignore next */
    cov_2j6df1vja0().f[3]++;
    cov_2j6df1vja0().s[31]++;
    try {
      /* istanbul ignore next */
      cov_2j6df1vja0().s[32]++;
      // Validate that at least one field is being updated
      if (
      /* istanbul ignore next */
      (cov_2j6df1vja0().b[4][0]++, name === undefined) &&
      /* istanbul ignore next */
      (cov_2j6df1vja0().b[4][1]++, type_config === undefined) &&
      /* istanbul ignore next */
      (cov_2j6df1vja0().b[4][2]++, required === undefined) &&
      /* istanbul ignore next */
      (cov_2j6df1vja0().b[4][3]++, hide_from_guests === undefined)) {
        /* istanbul ignore next */
        cov_2j6df1vja0().b[3][0]++;
        cov_2j6df1vja0().s[33]++;
        return {
          content: [{
            type: 'text',
            text: 'Error: Must specify at least one field to update (name, type_config, required, or hide_from_guests)'
          }],
          isError: true
        };
      } else
      /* istanbul ignore next */
      {
        cov_2j6df1vja0().b[3][1]++;
      }
      const updatedField =
      /* istanbul ignore next */
      (cov_2j6df1vja0().s[34]++, await customFieldsClient.updateCustomField(field_id, {
        name,
        type_config,
        required,
        hide_from_guests
      }));
      /* istanbul ignore next */
      cov_2j6df1vja0().s[35]++;
      return {
        content: [{
          type: 'text',
          text: `Custom field updated successfully!\n\n${JSON.stringify(updatedField, null, 2)}`
        }]
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_2j6df1vja0().s[36]++;
      console.error('Error updating custom field:', error);
      /* istanbul ignore next */
      cov_2j6df1vja0().s[37]++;
      return {
        content: [{
          type: 'text',
          text: `Error updating custom field: ${error.message}`
        }],
        isError: true
      };
    }
  });
  // ========================================
  // DELETE CUSTOM FIELD OPERATIONS
  // ========================================
  /* istanbul ignore next */
  cov_2j6df1vja0().s[38]++;
  server.tool('delete_custom_field', 'Delete a custom field from ClickUp. This will remove the field and all its values from tasks. This action cannot be undone.', {
    field_id: z.string().min(1).describe('The ID of the custom field to delete')
  }, async ({
    field_id
  }) => {
    /* istanbul ignore next */
    cov_2j6df1vja0().f[4]++;
    cov_2j6df1vja0().s[39]++;
    try {
      /* istanbul ignore next */
      cov_2j6df1vja0().s[40]++;
      await customFieldsClient.deleteCustomField(field_id);
      /* istanbul ignore next */
      cov_2j6df1vja0().s[41]++;
      return {
        content: [{
          type: 'text',
          text: `Custom field ${field_id} deleted successfully. All field values have been removed from tasks.`
        }]
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_2j6df1vja0().s[42]++;
      console.error('Error deleting custom field:', error);
      /* istanbul ignore next */
      cov_2j6df1vja0().s[43]++;
      return {
        content: [{
          type: 'text',
          text: `Error deleting custom field: ${error.message}`
        }],
        isError: true
      };
    }
  });
  // ========================================
  // CUSTOM FIELD VALUE OPERATIONS
  // ========================================
  /* istanbul ignore next */
  cov_2j6df1vja0().s[44]++;
  server.tool('set_custom_field_value', 'Set a custom field value on a ClickUp task. The value format depends on the field type.', {
    task_id: z.string().min(1).describe('The ID of the task to set the custom field value on'),
    field_id: z.string().min(1).describe('The ID of the custom field'),
    value: z.any().describe('The value to set (format depends on field type)')
  }, async ({
    task_id,
    field_id,
    value
  }) => {
    /* istanbul ignore next */
    cov_2j6df1vja0().f[5]++;
    cov_2j6df1vja0().s[45]++;
    try {
      /* istanbul ignore next */
      cov_2j6df1vja0().s[46]++;
      await customFieldsClient.setCustomFieldValue(task_id, field_id, value);
      /* istanbul ignore next */
      cov_2j6df1vja0().s[47]++;
      return {
        content: [{
          type: 'text',
          text: `Custom field value set successfully on task ${task_id} for field ${field_id}.`
        }]
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_2j6df1vja0().s[48]++;
      console.error('Error setting custom field value:', error);
      /* istanbul ignore next */
      cov_2j6df1vja0().s[49]++;
      return {
        content: [{
          type: 'text',
          text: `Error setting custom field value: ${error.message}`
        }],
        isError: true
      };
    }
  });
  /* istanbul ignore next */
  cov_2j6df1vja0().s[50]++;
  server.tool('remove_custom_field_value', 'Remove a custom field value from a ClickUp task. This clears the field value but keeps the field definition.', {
    task_id: z.string().min(1).describe('The ID of the task to remove the custom field value from'),
    field_id: z.string().min(1).describe('The ID of the custom field to clear')
  }, async ({
    task_id,
    field_id
  }) => {
    /* istanbul ignore next */
    cov_2j6df1vja0().f[6]++;
    cov_2j6df1vja0().s[51]++;
    try {
      /* istanbul ignore next */
      cov_2j6df1vja0().s[52]++;
      await customFieldsClient.removeCustomFieldValue(task_id, field_id);
      /* istanbul ignore next */
      cov_2j6df1vja0().s[53]++;
      return {
        content: [{
          type: 'text',
          text: `Custom field value removed successfully from task ${task_id} for field ${field_id}.`
        }]
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_2j6df1vja0().s[54]++;
      console.error('Error removing custom field value:', error);
      /* istanbul ignore next */
      cov_2j6df1vja0().s[55]++;
      return {
        content: [{
          type: 'text',
          text: `Error removing custom field value: ${error.message}`
        }],
        isError: true
      };
    }
  });
  /* istanbul ignore next */
  cov_2j6df1vja0().s[56]++;
  server.tool('get_custom_field_value', 'Get a custom field value from a ClickUp task. Returns the current value and field information.', {
    task_id: z.string().min(1).describe('The ID of the task to get the custom field value from'),
    field_id: z.string().min(1).describe('The ID of the custom field to retrieve')
  }, async ({
    task_id,
    field_id
  }) => {
    /* istanbul ignore next */
    cov_2j6df1vja0().f[7]++;
    cov_2j6df1vja0().s[57]++;
    try {
      const value =
      /* istanbul ignore next */
      (cov_2j6df1vja0().s[58]++, await customFieldsClient.getCustomFieldValue(task_id, field_id));
      /* istanbul ignore next */
      cov_2j6df1vja0().s[59]++;
      return {
        content: [{
          type: 'text',
          text: `Custom field value for task ${task_id}, field ${field_id}:\n\n${JSON.stringify(value, null, 2)}`
        }]
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_2j6df1vja0().s[60]++;
      console.error('Error getting custom field value:', error);
      /* istanbul ignore next */
      cov_2j6df1vja0().s[61]++;
      return {
        content: [{
          type: 'text',
          text: `Error getting custom field value: ${error.message}`
        }],
        isError: true
      };
    }
  });
  /* istanbul ignore next */
  cov_2j6df1vja0().s[62]++;
  server.tool('bulk_set_custom_field_values', 'Set multiple custom field values on a ClickUp task in a single operation. More efficient than setting values individually.', {
    task_id: z.string().min(1).describe('The ID of the task to set custom field values on'),
    field_values: z.array(z.object({
      field_id: z.string().min(1).describe('The ID of the custom field'),
      value: z.any().describe('The value to set (format depends on field type)')
    })).min(1).describe('Array of field ID and value pairs to set')
  }, async ({
    task_id,
    field_values
  }) => {
    /* istanbul ignore next */
    cov_2j6df1vja0().f[8]++;
    cov_2j6df1vja0().s[63]++;
    try {
      // Ensure all field_values have the required properties
      const validatedFieldValues =
      /* istanbul ignore next */
      (cov_2j6df1vja0().s[64]++, field_values.map(fv => {
        /* istanbul ignore next */
        cov_2j6df1vja0().f[9]++;
        cov_2j6df1vja0().s[65]++;
        return {
          field_id: fv.field_id,
          value: fv.value
        };
      }));
      const results =
      /* istanbul ignore next */
      (cov_2j6df1vja0().s[66]++, await customFieldsClient.bulkSetCustomFieldValues(task_id, validatedFieldValues));
      /* istanbul ignore next */
      cov_2j6df1vja0().s[67]++;
      return {
        content: [{
          type: 'text',
          text: `Bulk custom field values set successfully on task ${task_id}!\n\nResults:\n${JSON.stringify(results, null, 2)}`
        }]
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_2j6df1vja0().s[68]++;
      console.error('Error bulk setting custom field values:', error);
      /* istanbul ignore next */
      cov_2j6df1vja0().s[69]++;
      return {
        content: [{
          type: 'text',
          text: `Error bulk setting custom field values: ${error.message}`
        }],
        isError: true
      };
    }
  });
  /* istanbul ignore next */
  cov_2j6df1vja0().s[70]++;
  server.tool('get_task_custom_field_values', 'Get all custom field values for a ClickUp task. Returns all field values with their definitions.', {
    task_id: z.string().min(1).describe('The ID of the task to get custom field values from')
  }, async ({
    task_id
  }) => {
    /* istanbul ignore next */
    cov_2j6df1vja0().f[10]++;
    cov_2j6df1vja0().s[71]++;
    try {
      const values =
      /* istanbul ignore next */
      (cov_2j6df1vja0().s[72]++, await customFieldsClient.getTaskCustomFieldValues(task_id));
      /* istanbul ignore next */
      cov_2j6df1vja0().s[73]++;
      return {
        content: [{
          type: 'text',
          text: `All custom field values for task ${task_id}:\n\n${JSON.stringify(values, null, 2)}`
        }]
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_2j6df1vja0().s[74]++;
      console.error('Error getting task custom field values:', error);
      /* istanbul ignore next */
      cov_2j6df1vja0().s[75]++;
      return {
        content: [{
          type: 'text',
          text: `Error getting task custom field values: ${error.message}`
        }],
        isError: true
      };
    }
  });
  // ========================================
  // HELPER TOOLS FOR FIELD CREATION
  // ========================================
  /* istanbul ignore next */
  cov_2j6df1vja0().s[76]++;
  server.tool('create_text_custom_field', 'Create a text custom field with optional default value and placeholder.', {
    container_type: z.enum(['list', 'folder', 'space']).describe('The type of container'),
    container_id: z.string().min(1).describe('The ID of the container'),
    name: z.string().min(1).max(255).describe('The name of the text field'),
    default_value: z.string().optional().describe('Default text value'),
    placeholder: z.string().optional().describe('Placeholder text'),
    required: z.boolean().optional().default(false).describe('Whether the field is required'),
    hide_from_guests: z.boolean().optional().default(false).describe('Whether to hide from guests')
  }, async ({
    container_type,
    container_id,
    name,
    default_value,
    placeholder,
    required,
    hide_from_guests
  }) => {
    /* istanbul ignore next */
    cov_2j6df1vja0().f[11]++;
    cov_2j6df1vja0().s[77]++;
    try {
      const type_config =
      /* istanbul ignore next */
      (cov_2j6df1vja0().s[78]++, {
        default: default_value,
        placeholder
      });
      const fieldParams =
      /* istanbul ignore next */
      (cov_2j6df1vja0().s[79]++, {
        name,
        type: 'text',
        type_config,
        required,
        hide_from_guests
      });
      let field;
      /* istanbul ignore next */
      cov_2j6df1vja0().s[80]++;
      switch (container_type) {
        case 'list':
          /* istanbul ignore next */
          cov_2j6df1vja0().b[5][0]++;
          cov_2j6df1vja0().s[81]++;
          field = await customFieldsClient.createListCustomField(container_id, fieldParams);
          /* istanbul ignore next */
          cov_2j6df1vja0().s[82]++;
          break;
        case 'folder':
          /* istanbul ignore next */
          cov_2j6df1vja0().b[5][1]++;
          cov_2j6df1vja0().s[83]++;
          field = await customFieldsClient.createFolderCustomField(container_id, fieldParams);
          /* istanbul ignore next */
          cov_2j6df1vja0().s[84]++;
          break;
        case 'space':
          /* istanbul ignore next */
          cov_2j6df1vja0().b[5][2]++;
          cov_2j6df1vja0().s[85]++;
          field = await customFieldsClient.createSpaceCustomField(container_id, fieldParams);
          /* istanbul ignore next */
          cov_2j6df1vja0().s[86]++;
          break;
      }
      /* istanbul ignore next */
      cov_2j6df1vja0().s[87]++;
      return {
        content: [{
          type: 'text',
          text: `Text custom field created successfully!\n\n${JSON.stringify(field, null, 2)}`
        }]
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_2j6df1vja0().s[88]++;
      console.error('Error creating text custom field:', error);
      /* istanbul ignore next */
      cov_2j6df1vja0().s[89]++;
      return {
        content: [{
          type: 'text',
          text: `Error creating text custom field: ${error.message}`
        }],
        isError: true
      };
    }
  });
  /* istanbul ignore next */
  cov_2j6df1vja0().s[90]++;
  server.tool('create_dropdown_custom_field', 'Create a dropdown custom field with specified options.', {
    container_type: z.enum(['list', 'folder', 'space']).describe('The type of container'),
    container_id: z.string().min(1).describe('The ID of the container'),
    name: z.string().min(1).max(255).describe('The name of the dropdown field'),
    options: z.array(DropdownOptionSchema).min(1).describe('Array of dropdown options'),
    default_option_index: z.number().min(0).optional().describe('Index of default selected option'),
    required: z.boolean().optional().default(false).describe('Whether the field is required'),
    hide_from_guests: z.boolean().optional().default(false).describe('Whether to hide from guests')
  }, async ({
    container_type,
    container_id,
    name,
    options,
    default_option_index,
    required,
    hide_from_guests
  }) => {
    /* istanbul ignore next */
    cov_2j6df1vja0().f[12]++;
    cov_2j6df1vja0().s[91]++;
    try {
      const type_config =
      /* istanbul ignore next */
      (cov_2j6df1vja0().s[92]++, {
        options: options.map((option, index) => {
          /* istanbul ignore next */
          cov_2j6df1vja0().f[13]++;
          cov_2j6df1vja0().s[93]++;
          return {
            ...option,
            orderindex:
            /* istanbul ignore next */
            (cov_2j6df1vja0().b[6][0]++, option.orderindex) ??
            /* istanbul ignore next */
            (cov_2j6df1vja0().b[6][1]++, index)
          };
        }),
        default: default_option_index
      });
      const fieldParams =
      /* istanbul ignore next */
      (cov_2j6df1vja0().s[94]++, {
        name,
        type: 'drop_down',
        type_config,
        required,
        hide_from_guests
      });
      let field;
      /* istanbul ignore next */
      cov_2j6df1vja0().s[95]++;
      switch (container_type) {
        case 'list':
          /* istanbul ignore next */
          cov_2j6df1vja0().b[7][0]++;
          cov_2j6df1vja0().s[96]++;
          field = await customFieldsClient.createListCustomField(container_id, fieldParams);
          /* istanbul ignore next */
          cov_2j6df1vja0().s[97]++;
          break;
        case 'folder':
          /* istanbul ignore next */
          cov_2j6df1vja0().b[7][1]++;
          cov_2j6df1vja0().s[98]++;
          field = await customFieldsClient.createFolderCustomField(container_id, fieldParams);
          /* istanbul ignore next */
          cov_2j6df1vja0().s[99]++;
          break;
        case 'space':
          /* istanbul ignore next */
          cov_2j6df1vja0().b[7][2]++;
          cov_2j6df1vja0().s[100]++;
          field = await customFieldsClient.createSpaceCustomField(container_id, fieldParams);
          /* istanbul ignore next */
          cov_2j6df1vja0().s[101]++;
          break;
      }
      /* istanbul ignore next */
      cov_2j6df1vja0().s[102]++;
      return {
        content: [{
          type: 'text',
          text: `Dropdown custom field created successfully with ${options.length} options!\n\n${JSON.stringify(field, null, 2)}`
        }]
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_2j6df1vja0().s[103]++;
      console.error('Error creating dropdown custom field:', error);
      /* istanbul ignore next */
      cov_2j6df1vja0().s[104]++;
      return {
        content: [{
          type: 'text',
          text: `Error creating dropdown custom field: ${error.message}`
        }],
        isError: true
      };
    }
  });
  /* istanbul ignore next */
  cov_2j6df1vja0().s[105]++;
  server.tool('create_number_custom_field', 'Create a number custom field with optional precision and default value.', {
    container_type: z.enum(['list', 'folder', 'space']).describe('The type of container'),
    container_id: z.string().min(1).describe('The ID of the container'),
    name: z.string().min(1).max(255).describe('The name of the number field'),
    default_value: z.number().optional().describe('Default numeric value'),
    precision: z.number().min(0).max(8).optional().default(0).describe('Number of decimal places (0-8)'),
    required: z.boolean().optional().default(false).describe('Whether the field is required'),
    hide_from_guests: z.boolean().optional().default(false).describe('Whether to hide from guests')
  }, async ({
    container_type,
    container_id,
    name,
    default_value,
    precision,
    required,
    hide_from_guests
  }) => {
    /* istanbul ignore next */
    cov_2j6df1vja0().f[14]++;
    cov_2j6df1vja0().s[106]++;
    try {
      const type_config =
      /* istanbul ignore next */
      (cov_2j6df1vja0().s[107]++, {
        default: default_value,
        precision
      });
      const fieldParams =
      /* istanbul ignore next */
      (cov_2j6df1vja0().s[108]++, {
        name,
        type: 'number',
        type_config,
        required,
        hide_from_guests
      });
      let field;
      /* istanbul ignore next */
      cov_2j6df1vja0().s[109]++;
      switch (container_type) {
        case 'list':
          /* istanbul ignore next */
          cov_2j6df1vja0().b[8][0]++;
          cov_2j6df1vja0().s[110]++;
          field = await customFieldsClient.createListCustomField(container_id, fieldParams);
          /* istanbul ignore next */
          cov_2j6df1vja0().s[111]++;
          break;
        case 'folder':
          /* istanbul ignore next */
          cov_2j6df1vja0().b[8][1]++;
          cov_2j6df1vja0().s[112]++;
          field = await customFieldsClient.createFolderCustomField(container_id, fieldParams);
          /* istanbul ignore next */
          cov_2j6df1vja0().s[113]++;
          break;
        case 'space':
          /* istanbul ignore next */
          cov_2j6df1vja0().b[8][2]++;
          cov_2j6df1vja0().s[114]++;
          field = await customFieldsClient.createSpaceCustomField(container_id, fieldParams);
          /* istanbul ignore next */
          cov_2j6df1vja0().s[115]++;
          break;
      }
      /* istanbul ignore next */
      cov_2j6df1vja0().s[116]++;
      return {
        content: [{
          type: 'text',
          text: `Number custom field created successfully with ${precision} decimal places!\n\n${JSON.stringify(field, null, 2)}`
        }]
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_2j6df1vja0().s[117]++;
      console.error('Error creating number custom field:', error);
      /* istanbul ignore next */
      cov_2j6df1vja0().s[118]++;
      return {
        content: [{
          type: 'text',
          text: `Error creating number custom field: ${error.message}`
        }],
        isError: true
      };
    }
  });
  /* istanbul ignore next */
  cov_2j6df1vja0().s[119]++;
  server.tool('create_date_custom_field', 'Create a date custom field with optional time inclusion.', {
    container_type: z.enum(['list', 'folder', 'space']).describe('The type of container'),
    container_id: z.string().min(1).describe('The ID of the container'),
    name: z.string().min(1).max(255).describe('The name of the date field'),
    include_time: z.boolean().optional().default(false).describe('Whether to include time in the date field'),
    default_value: z.number().positive().optional().describe('Default date value (Unix timestamp)'),
    required: z.boolean().optional().default(false).describe('Whether the field is required'),
    hide_from_guests: z.boolean().optional().default(false).describe('Whether to hide from guests')
  }, async ({
    container_type,
    container_id,
    name,
    include_time,
    default_value,
    required,
    hide_from_guests
  }) => {
    /* istanbul ignore next */
    cov_2j6df1vja0().f[15]++;
    cov_2j6df1vja0().s[120]++;
    try {
      const type_config =
      /* istanbul ignore next */
      (cov_2j6df1vja0().s[121]++, {
        include_time,
        default: default_value
      });
      const fieldParams =
      /* istanbul ignore next */
      (cov_2j6df1vja0().s[122]++, {
        name,
        type: 'date',
        type_config,
        required,
        hide_from_guests
      });
      let field;
      /* istanbul ignore next */
      cov_2j6df1vja0().s[123]++;
      switch (container_type) {
        case 'list':
          /* istanbul ignore next */
          cov_2j6df1vja0().b[9][0]++;
          cov_2j6df1vja0().s[124]++;
          field = await customFieldsClient.createListCustomField(container_id, fieldParams);
          /* istanbul ignore next */
          cov_2j6df1vja0().s[125]++;
          break;
        case 'folder':
          /* istanbul ignore next */
          cov_2j6df1vja0().b[9][1]++;
          cov_2j6df1vja0().s[126]++;
          field = await customFieldsClient.createFolderCustomField(container_id, fieldParams);
          /* istanbul ignore next */
          cov_2j6df1vja0().s[127]++;
          break;
        case 'space':
          /* istanbul ignore next */
          cov_2j6df1vja0().b[9][2]++;
          cov_2j6df1vja0().s[128]++;
          field = await customFieldsClient.createSpaceCustomField(container_id, fieldParams);
          /* istanbul ignore next */
          cov_2j6df1vja0().s[129]++;
          break;
      }
      /* istanbul ignore next */
      cov_2j6df1vja0().s[130]++;
      return {
        content: [{
          type: 'text',
          text: `Date custom field created successfully${include_time ?
          /* istanbul ignore next */
          (cov_2j6df1vja0().b[10][0]++, ' with time support') :
          /* istanbul ignore next */
          (cov_2j6df1vja0().b[10][1]++, '')}!\n\n${JSON.stringify(field, null, 2)}`
        }]
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_2j6df1vja0().s[131]++;
      console.error('Error creating date custom field:', error);
      /* istanbul ignore next */
      cov_2j6df1vja0().s[132]++;
      return {
        content: [{
          type: 'text',
          text: `Error creating date custom field: ${error.message}`
        }],
        isError: true
      };
    }
  });
  /* istanbul ignore next */
  cov_2j6df1vja0().s[133]++;
  server.tool('create_checkbox_custom_field', 'Create a checkbox (boolean) custom field with optional default value.', {
    container_type: z.enum(['list', 'folder', 'space']).describe('The type of container'),
    container_id: z.string().min(1).describe('The ID of the container'),
    name: z.string().min(1).max(255).describe('The name of the checkbox field'),
    default_value: z.boolean().optional().default(false).describe('Default checkbox state'),
    required: z.boolean().optional().default(false).describe('Whether the field is required'),
    hide_from_guests: z.boolean().optional().default(false).describe('Whether to hide from guests')
  }, async ({
    container_type,
    container_id,
    name,
    default_value,
    required,
    hide_from_guests
  }) => {
    /* istanbul ignore next */
    cov_2j6df1vja0().f[16]++;
    cov_2j6df1vja0().s[134]++;
    try {
      const type_config =
      /* istanbul ignore next */
      (cov_2j6df1vja0().s[135]++, {
        default: default_value
      });
      const fieldParams =
      /* istanbul ignore next */
      (cov_2j6df1vja0().s[136]++, {
        name,
        type: 'checkbox',
        type_config,
        required,
        hide_from_guests
      });
      let field;
      /* istanbul ignore next */
      cov_2j6df1vja0().s[137]++;
      switch (container_type) {
        case 'list':
          /* istanbul ignore next */
          cov_2j6df1vja0().b[11][0]++;
          cov_2j6df1vja0().s[138]++;
          field = await customFieldsClient.createListCustomField(container_id, fieldParams);
          /* istanbul ignore next */
          cov_2j6df1vja0().s[139]++;
          break;
        case 'folder':
          /* istanbul ignore next */
          cov_2j6df1vja0().b[11][1]++;
          cov_2j6df1vja0().s[140]++;
          field = await customFieldsClient.createFolderCustomField(container_id, fieldParams);
          /* istanbul ignore next */
          cov_2j6df1vja0().s[141]++;
          break;
        case 'space':
          /* istanbul ignore next */
          cov_2j6df1vja0().b[11][2]++;
          cov_2j6df1vja0().s[142]++;
          field = await customFieldsClient.createSpaceCustomField(container_id, fieldParams);
          /* istanbul ignore next */
          cov_2j6df1vja0().s[143]++;
          break;
      }
      /* istanbul ignore next */
      cov_2j6df1vja0().s[144]++;
      return {
        content: [{
          type: 'text',
          text: `Checkbox custom field created successfully!\n\n${JSON.stringify(field, null, 2)}`
        }]
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_2j6df1vja0().s[145]++;
      console.error('Error creating checkbox custom field:', error);
      /* istanbul ignore next */
      cov_2j6df1vja0().s[146]++;
      return {
        content: [{
          type: 'text',
          text: `Error creating checkbox custom field: ${error.message}`
        }],
        isError: true
      };
    }
  });
  // ========================================
  // FIELD VALUE VALIDATION HELPER
  // ========================================
  /* istanbul ignore next */
  cov_2j6df1vja0().s[147]++;
  server.tool('validate_custom_field_value', 'Validate a custom field value against its field type and configuration. Useful for checking values before setting them.', {
    field_id: z.string().min(1).describe('The ID of the custom field'),
    container_type: z.enum(['list', 'folder', 'space']).describe('The type of container the field belongs to'),
    container_id: z.string().min(1).describe('The ID of the container'),
    value: z.any().describe('The value to validate')
  }, async ({
    field_id,
    container_type,
    container_id,
    value
  }) => {
    /* istanbul ignore next */
    cov_2j6df1vja0().f[17]++;
    cov_2j6df1vja0().s[148]++;
    try {
      // Get the field definition first
      let fields;
      /* istanbul ignore next */
      cov_2j6df1vja0().s[149]++;
      switch (container_type) {
        case 'list':
          /* istanbul ignore next */
          cov_2j6df1vja0().b[12][0]++;
          cov_2j6df1vja0().s[150]++;
          fields = await customFieldsClient.getListCustomFields(container_id);
          /* istanbul ignore next */
          cov_2j6df1vja0().s[151]++;
          break;
        case 'folder':
          /* istanbul ignore next */
          cov_2j6df1vja0().b[12][1]++;
          cov_2j6df1vja0().s[152]++;
          fields = await customFieldsClient.getFolderCustomFields(container_id);
          /* istanbul ignore next */
          cov_2j6df1vja0().s[153]++;
          break;
        case 'space':
          /* istanbul ignore next */
          cov_2j6df1vja0().b[12][2]++;
          cov_2j6df1vja0().s[154]++;
          fields = await customFieldsClient.getSpaceCustomFields(container_id);
          /* istanbul ignore next */
          cov_2j6df1vja0().s[155]++;
          break;
      }
      const field =
      /* istanbul ignore next */
      (cov_2j6df1vja0().s[156]++, fields.find(f => {
        /* istanbul ignore next */
        cov_2j6df1vja0().f[18]++;
        cov_2j6df1vja0().s[157]++;
        return f.id === field_id;
      }));
      /* istanbul ignore next */
      cov_2j6df1vja0().s[158]++;
      if (!field) {
        /* istanbul ignore next */
        cov_2j6df1vja0().b[13][0]++;
        cov_2j6df1vja0().s[159]++;
        return {
          content: [{
            type: 'text',
            text: `Error: Custom field ${field_id} not found in ${container_type} ${container_id}`
          }],
          isError: true
        };
      } else
      /* istanbul ignore next */
      {
        cov_2j6df1vja0().b[13][1]++;
      }
      // Validate the value
      const isValid =
      /* istanbul ignore next */
      (cov_2j6df1vja0().s[160]++, customFieldsClient.validateFieldValue(field, value));
      /* istanbul ignore next */
      cov_2j6df1vja0().s[161]++;
      return {
        content: [{
          type: 'text',
          text: `Validation result for field "${field.name}" (${field.type}):\n\nValue: ${JSON.stringify(value)}\nValid: ${isValid}\n\nField Configuration:\n${JSON.stringify(field.type_config, null, 2)}`
        }]
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_2j6df1vja0().s[162]++;
      console.error('Error validating custom field value:', error);
      /* istanbul ignore next */
      cov_2j6df1vja0().s[163]++;
      return {
        content: [{
          type: 'text',
          text: `Error validating custom field value: ${error.message}`
        }],
        isError: true
      };
    }
  });
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJjb3ZfMmo2ZGYxdmphMCIsImFjdHVhbENvdmVyYWdlIiwieiIsImNyZWF0ZUNsaWNrVXBDbGllbnQiLCJjcmVhdGVFbmhhbmNlZEN1c3RvbUZpZWxkc0NsaWVudCIsIkRyb3Bkb3duT3B0aW9uU2NoZW1hIiwiY2xpY2tVcENsaWVudCIsInMiLCJjdXN0b21GaWVsZHNDbGllbnQiLCJzZXR1cEN1c3RvbUZpZWxkVG9vbHMiLCJzZXJ2ZXIiLCJmIiwidG9vbCIsImNvbnRhaW5lcl90eXBlIiwiZW51bSIsImRlc2NyaWJlIiwiY29udGFpbmVyX2lkIiwic3RyaW5nIiwibWluIiwiaW5jbHVkZV9kZWxldGVkIiwiYm9vbGVhbiIsIm9wdGlvbmFsIiwiZGVmYXVsdCIsImZpZWxkcyIsImIiLCJnZXRMaXN0Q3VzdG9tRmllbGRzIiwiZ2V0Rm9sZGVyQ3VzdG9tRmllbGRzIiwiZ2V0U3BhY2VDdXN0b21GaWVsZHMiLCJFcnJvciIsImNvbnRlbnQiLCJ0eXBlIiwidGV4dCIsIkpTT04iLCJzdHJpbmdpZnkiLCJlcnJvciIsImNvbnNvbGUiLCJtZXNzYWdlIiwiaXNFcnJvciIsIm5hbWUiLCJtYXgiLCJ0eXBlX2NvbmZpZyIsInJlY29yZCIsImFueSIsInJlcXVpcmVkIiwiaGlkZV9mcm9tX2d1ZXN0cyIsImZpbmFsVHlwZUNvbmZpZyIsImdldEZpZWxkVHlwZVRlbXBsYXRlIiwiZmllbGRQYXJhbXMiLCJmaWVsZCIsImNyZWF0ZUxpc3RDdXN0b21GaWVsZCIsImNyZWF0ZUZvbGRlckN1c3RvbUZpZWxkIiwiY3JlYXRlU3BhY2VDdXN0b21GaWVsZCIsImZpZWxkX2lkIiwidW5kZWZpbmVkIiwidXBkYXRlZEZpZWxkIiwidXBkYXRlQ3VzdG9tRmllbGQiLCJkZWxldGVDdXN0b21GaWVsZCIsInRhc2tfaWQiLCJ2YWx1ZSIsInNldEN1c3RvbUZpZWxkVmFsdWUiLCJyZW1vdmVDdXN0b21GaWVsZFZhbHVlIiwiZ2V0Q3VzdG9tRmllbGRWYWx1ZSIsImZpZWxkX3ZhbHVlcyIsImFycmF5Iiwib2JqZWN0IiwidmFsaWRhdGVkRmllbGRWYWx1ZXMiLCJtYXAiLCJmdiIsInJlc3VsdHMiLCJidWxrU2V0Q3VzdG9tRmllbGRWYWx1ZXMiLCJ2YWx1ZXMiLCJnZXRUYXNrQ3VzdG9tRmllbGRWYWx1ZXMiLCJkZWZhdWx0X3ZhbHVlIiwicGxhY2Vob2xkZXIiLCJvcHRpb25zIiwiZGVmYXVsdF9vcHRpb25faW5kZXgiLCJudW1iZXIiLCJvcHRpb24iLCJpbmRleCIsIm9yZGVyaW5kZXgiLCJsZW5ndGgiLCJwcmVjaXNpb24iLCJpbmNsdWRlX3RpbWUiLCJwb3NpdGl2ZSIsImZpbmQiLCJpZCIsImlzVmFsaWQiLCJ2YWxpZGF0ZUZpZWxkVmFsdWUiXSwic291cmNlcyI6WyIvVXNlcnMvcGV0ZXJrcnp5emVrL0RldmVsb3BtZW50L2NsaWNrdXAtbWNwLXNlcnZlci9zcmMvdG9vbHMvY3VzdG9tLWZpZWxkLXRvb2xzLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE1jcFNlcnZlciB9IGZyb20gJ0Btb2RlbGNvbnRleHRwcm90b2NvbC9zZGsvc2VydmVyL21jcC5qcyc7XG5pbXBvcnQgeyB6IH0gZnJvbSAnem9kJztcbmltcG9ydCB7IGNyZWF0ZUNsaWNrVXBDbGllbnQgfSBmcm9tICcuLi9jbGlja3VwLWNsaWVudC9pbmRleC5qcyc7XG5pbXBvcnQgeyBjcmVhdGVFbmhhbmNlZEN1c3RvbUZpZWxkc0NsaWVudCwgQ3VzdG9tRmllbGRUeXBlIH0gZnJvbSAnLi4vY2xpY2t1cC1jbGllbnQvY3VzdG9tLWZpZWxkcy1lbmhhbmNlZC5qcyc7XG5pbXBvcnQgeyBDdXN0b21GaWVsZFRvb2xTY2hlbWFzLCBEcm9wZG93bk9wdGlvblNjaGVtYSB9IGZyb20gJy4uL3NjaGVtYXMvY3VzdG9tLWZpZWxkLXNjaGVtYXMuanMnO1xuXG4vLyBDcmVhdGUgY2xpZW50c1xuY29uc3QgY2xpY2tVcENsaWVudCA9IGNyZWF0ZUNsaWNrVXBDbGllbnQoKTtcbmNvbnN0IGN1c3RvbUZpZWxkc0NsaWVudCA9IGNyZWF0ZUVuaGFuY2VkQ3VzdG9tRmllbGRzQ2xpZW50KGNsaWNrVXBDbGllbnQpO1xuXG5leHBvcnQgZnVuY3Rpb24gc2V0dXBDdXN0b21GaWVsZFRvb2xzKHNlcnZlcjogTWNwU2VydmVyKTogdm9pZCB7XG5cbiAgLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICAvLyBHRVQgQ1VTVE9NIEZJRUxEUyBPUEVSQVRJT05TXG4gIC8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cblxuICBzZXJ2ZXIudG9vbChcbiAgICAnZ2V0X2N1c3RvbV9maWVsZHMnLFxuICAgICdHZXQgY3VzdG9tIGZpZWxkcyBmb3IgYSBDbGlja1VwIGxpc3QsIGZvbGRlciwgb3Igc3BhY2UuIFJldHVybnMgYWxsIGZpZWxkIGRlZmluaXRpb25zIHdpdGggdGhlaXIgY29uZmlndXJhdGlvbnMuJyxcbiAgICB7XG4gICAgICBjb250YWluZXJfdHlwZTogei5lbnVtKFsnbGlzdCcsICdmb2xkZXInLCAnc3BhY2UnXSkuZGVzY3JpYmUoJ1RoZSB0eXBlIG9mIGNvbnRhaW5lciB0byBnZXQgY3VzdG9tIGZpZWxkcyBmcm9tJyksXG4gICAgICBjb250YWluZXJfaWQ6IHouc3RyaW5nKCkubWluKDEpLmRlc2NyaWJlKCdUaGUgSUQgb2YgdGhlIGNvbnRhaW5lciAobGlzdCwgZm9sZGVyLCBvciBzcGFjZSknKSxcbiAgICAgIGluY2x1ZGVfZGVsZXRlZDogei5ib29sZWFuKCkub3B0aW9uYWwoKS5kZWZhdWx0KGZhbHNlKS5kZXNjcmliZSgnV2hldGhlciB0byBpbmNsdWRlIGRlbGV0ZWQgY3VzdG9tIGZpZWxkcycpXG4gICAgfSxcbiAgICBhc3luYyAoeyBjb250YWluZXJfdHlwZSwgY29udGFpbmVyX2lkLCBpbmNsdWRlX2RlbGV0ZWQgfSkgPT4ge1xuICAgICAgdHJ5IHtcbiAgICAgICAgbGV0IGZpZWxkcztcbiAgICAgICAgXG4gICAgICAgIHN3aXRjaCAoY29udGFpbmVyX3R5cGUpIHtcbiAgICAgICAgICBjYXNlICdsaXN0JzpcbiAgICAgICAgICAgIGZpZWxkcyA9IGF3YWl0IGN1c3RvbUZpZWxkc0NsaWVudC5nZXRMaXN0Q3VzdG9tRmllbGRzKGNvbnRhaW5lcl9pZCwgeyBpbmNsdWRlX2RlbGV0ZWQgfSk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICBjYXNlICdmb2xkZXInOlxuICAgICAgICAgICAgZmllbGRzID0gYXdhaXQgY3VzdG9tRmllbGRzQ2xpZW50LmdldEZvbGRlckN1c3RvbUZpZWxkcyhjb250YWluZXJfaWQsIHsgaW5jbHVkZV9kZWxldGVkIH0pO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgY2FzZSAnc3BhY2UnOlxuICAgICAgICAgICAgZmllbGRzID0gYXdhaXQgY3VzdG9tRmllbGRzQ2xpZW50LmdldFNwYWNlQ3VzdG9tRmllbGRzKGNvbnRhaW5lcl9pZCwgeyBpbmNsdWRlX2RlbGV0ZWQgfSk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIGNvbnRhaW5lciB0eXBlJyk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIGNvbnRlbnQ6IFt7IFxuICAgICAgICAgICAgdHlwZTogJ3RleHQnLCBcbiAgICAgICAgICAgIHRleHQ6IGBDdXN0b20gZmllbGRzIGZvciAke2NvbnRhaW5lcl90eXBlfSAke2NvbnRhaW5lcl9pZH06XFxuXFxuJHtKU09OLnN0cmluZ2lmeShmaWVsZHMsIG51bGwsIDIpfWAgXG4gICAgICAgICAgfV1cbiAgICAgICAgfTtcbiAgICAgIH0gY2F0Y2ggKGVycm9yOiBhbnkpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcignRXJyb3IgZ2V0dGluZyBjdXN0b20gZmllbGRzOicsIGVycm9yKTtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICBjb250ZW50OiBbeyB0eXBlOiAndGV4dCcsIHRleHQ6IGBFcnJvciBnZXR0aW5nIGN1c3RvbSBmaWVsZHM6ICR7ZXJyb3IubWVzc2FnZX1gIH1dLFxuICAgICAgICAgIGlzRXJyb3I6IHRydWVcbiAgICAgICAgfTtcbiAgICAgIH1cbiAgICB9XG4gICk7XG5cbiAgLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICAvLyBDUkVBVEUgQ1VTVE9NIEZJRUxEIE9QRVJBVElPTlNcbiAgLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuXG4gIHNlcnZlci50b29sKFxuICAgICdjcmVhdGVfY3VzdG9tX2ZpZWxkJyxcbiAgICAnQ3JlYXRlIGEgbmV3IGN1c3RvbSBmaWVsZCBpbiBhIENsaWNrVXAgbGlzdCwgZm9sZGVyLCBvciBzcGFjZS4gU3VwcG9ydHMgYWxsIGZpZWxkIHR5cGVzIHdpdGggdHlwZS1zcGVjaWZpYyBjb25maWd1cmF0aW9ucy4nLFxuICAgIHtcbiAgICAgIGNvbnRhaW5lcl90eXBlOiB6LmVudW0oWydsaXN0JywgJ2ZvbGRlcicsICdzcGFjZSddKS5kZXNjcmliZSgnVGhlIHR5cGUgb2YgY29udGFpbmVyIHRvIGNyZWF0ZSB0aGUgY3VzdG9tIGZpZWxkIGluJyksXG4gICAgICBjb250YWluZXJfaWQ6IHouc3RyaW5nKCkubWluKDEpLmRlc2NyaWJlKCdUaGUgSUQgb2YgdGhlIGNvbnRhaW5lciAobGlzdCwgZm9sZGVyLCBvciBzcGFjZSknKSxcbiAgICAgIG5hbWU6IHouc3RyaW5nKCkubWluKDEpLm1heCgyNTUpLmRlc2NyaWJlKCdUaGUgbmFtZSBvZiB0aGUgY3VzdG9tIGZpZWxkJyksXG4gICAgICB0eXBlOiB6LmVudW0oW1xuICAgICAgICAndGV4dCcsICd0ZXh0YXJlYScsXG4gICAgICAgICdudW1iZXInLCAnY3VycmVuY3knLCBcbiAgICAgICAgJ2RhdGUnLFxuICAgICAgICAnZHJvcF9kb3duJywgJ2xhYmVscycsXG4gICAgICAgICdjaGVja2JveCcsXG4gICAgICAgICd1cmwnLCAnZW1haWwnLCAncGhvbmUnLFxuICAgICAgICAncmF0aW5nJywgJ3Byb2dyZXNzJyxcbiAgICAgICAgJ3Rhc2tfcmVsYXRpb25zaGlwJ1xuICAgICAgXSBhcyBjb25zdCkuZGVzY3JpYmUoJ1RoZSB0eXBlIG9mIGN1c3RvbSBmaWVsZCB0byBjcmVhdGUnKSxcbiAgICAgIHR5cGVfY29uZmlnOiB6LnJlY29yZCh6LmFueSgpKS5vcHRpb25hbCgpLmRlc2NyaWJlKCdUeXBlLXNwZWNpZmljIGNvbmZpZ3VyYXRpb24gb2JqZWN0JyksXG4gICAgICByZXF1aXJlZDogei5ib29sZWFuKCkub3B0aW9uYWwoKS5kZWZhdWx0KGZhbHNlKS5kZXNjcmliZSgnV2hldGhlciB0aGUgZmllbGQgaXMgcmVxdWlyZWQnKSxcbiAgICAgIGhpZGVfZnJvbV9ndWVzdHM6IHouYm9vbGVhbigpLm9wdGlvbmFsKCkuZGVmYXVsdChmYWxzZSkuZGVzY3JpYmUoJ1doZXRoZXIgdG8gaGlkZSB0aGUgZmllbGQgZnJvbSBndWVzdHMnKVxuICAgIH0sXG4gICAgYXN5bmMgKHsgY29udGFpbmVyX3R5cGUsIGNvbnRhaW5lcl9pZCwgbmFtZSwgdHlwZSwgdHlwZV9jb25maWcsIHJlcXVpcmVkLCBoaWRlX2Zyb21fZ3Vlc3RzIH0pID0+IHtcbiAgICAgIHRyeSB7XG4gICAgICAgIC8vIEdldCBkZWZhdWx0IGNvbmZpZ3VyYXRpb24gZm9yIGZpZWxkIHR5cGUgaWYgbm90IHByb3ZpZGVkXG4gICAgICAgIGNvbnN0IGZpbmFsVHlwZUNvbmZpZyA9IHR5cGVfY29uZmlnIHx8IGN1c3RvbUZpZWxkc0NsaWVudC5nZXRGaWVsZFR5cGVUZW1wbGF0ZSh0eXBlIGFzIEN1c3RvbUZpZWxkVHlwZSk7XG5cbiAgICAgICAgY29uc3QgZmllbGRQYXJhbXMgPSB7XG4gICAgICAgICAgbmFtZSxcbiAgICAgICAgICB0eXBlOiB0eXBlIGFzIEN1c3RvbUZpZWxkVHlwZSxcbiAgICAgICAgICB0eXBlX2NvbmZpZzogZmluYWxUeXBlQ29uZmlnLFxuICAgICAgICAgIHJlcXVpcmVkLFxuICAgICAgICAgIGhpZGVfZnJvbV9ndWVzdHNcbiAgICAgICAgfTtcblxuICAgICAgICBsZXQgZmllbGQ7XG4gICAgICAgIHN3aXRjaCAoY29udGFpbmVyX3R5cGUpIHtcbiAgICAgICAgICBjYXNlICdsaXN0JzpcbiAgICAgICAgICAgIGZpZWxkID0gYXdhaXQgY3VzdG9tRmllbGRzQ2xpZW50LmNyZWF0ZUxpc3RDdXN0b21GaWVsZChjb250YWluZXJfaWQsIGZpZWxkUGFyYW1zKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIGNhc2UgJ2ZvbGRlcic6XG4gICAgICAgICAgICBmaWVsZCA9IGF3YWl0IGN1c3RvbUZpZWxkc0NsaWVudC5jcmVhdGVGb2xkZXJDdXN0b21GaWVsZChjb250YWluZXJfaWQsIGZpZWxkUGFyYW1zKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIGNhc2UgJ3NwYWNlJzpcbiAgICAgICAgICAgIGZpZWxkID0gYXdhaXQgY3VzdG9tRmllbGRzQ2xpZW50LmNyZWF0ZVNwYWNlQ3VzdG9tRmllbGQoY29udGFpbmVyX2lkLCBmaWVsZFBhcmFtcyk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIGNvbnRhaW5lciB0eXBlJyk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIGNvbnRlbnQ6IFt7IFxuICAgICAgICAgICAgdHlwZTogJ3RleHQnLCBcbiAgICAgICAgICAgIHRleHQ6IGBDdXN0b20gZmllbGQgY3JlYXRlZCBzdWNjZXNzZnVsbHkgaW4gJHtjb250YWluZXJfdHlwZX0gJHtjb250YWluZXJfaWR9IVxcblxcbiR7SlNPTi5zdHJpbmdpZnkoZmllbGQsIG51bGwsIDIpfWAgXG4gICAgICAgICAgfV1cbiAgICAgICAgfTtcbiAgICAgIH0gY2F0Y2ggKGVycm9yOiBhbnkpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcignRXJyb3IgY3JlYXRpbmcgY3VzdG9tIGZpZWxkOicsIGVycm9yKTtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICBjb250ZW50OiBbeyB0eXBlOiAndGV4dCcsIHRleHQ6IGBFcnJvciBjcmVhdGluZyBjdXN0b20gZmllbGQ6ICR7ZXJyb3IubWVzc2FnZX1gIH1dLFxuICAgICAgICAgIGlzRXJyb3I6IHRydWVcbiAgICAgICAgfTtcbiAgICAgIH1cbiAgICB9XG4gICk7XG5cbiAgLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICAvLyBVUERBVEUgQ1VTVE9NIEZJRUxEIE9QRVJBVElPTlNcbiAgLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuXG4gIHNlcnZlci50b29sKFxuICAgICd1cGRhdGVfY3VzdG9tX2ZpZWxkJyxcbiAgICAnVXBkYXRlIGFuIGV4aXN0aW5nIGN1c3RvbSBmaWVsZC4gQ2FuIG1vZGlmeSBuYW1lLCBjb25maWd1cmF0aW9uLCByZXF1aXJlZCBzdGF0dXMsIGFuZCBndWVzdCB2aXNpYmlsaXR5LicsXG4gICAge1xuICAgICAgZmllbGRfaWQ6IHouc3RyaW5nKCkubWluKDEpLmRlc2NyaWJlKCdUaGUgSUQgb2YgdGhlIGN1c3RvbSBmaWVsZCB0byB1cGRhdGUnKSxcbiAgICAgIG5hbWU6IHouc3RyaW5nKCkubWluKDEpLm1heCgyNTUpLm9wdGlvbmFsKCkuZGVzY3JpYmUoJ05ldyBuYW1lIGZvciB0aGUgY3VzdG9tIGZpZWxkJyksXG4gICAgICB0eXBlX2NvbmZpZzogei5yZWNvcmQoei5hbnkoKSkub3B0aW9uYWwoKS5kZXNjcmliZSgnVXBkYXRlZCB0eXBlLXNwZWNpZmljIGNvbmZpZ3VyYXRpb24nKSxcbiAgICAgIHJlcXVpcmVkOiB6LmJvb2xlYW4oKS5vcHRpb25hbCgpLmRlc2NyaWJlKCdXaGV0aGVyIHRoZSBmaWVsZCBzaG91bGQgYmUgcmVxdWlyZWQnKSxcbiAgICAgIGhpZGVfZnJvbV9ndWVzdHM6IHouYm9vbGVhbigpLm9wdGlvbmFsKCkuZGVzY3JpYmUoJ1doZXRoZXIgdG8gaGlkZSB0aGUgZmllbGQgZnJvbSBndWVzdHMnKVxuICAgIH0sXG4gICAgYXN5bmMgKHsgZmllbGRfaWQsIG5hbWUsIHR5cGVfY29uZmlnLCByZXF1aXJlZCwgaGlkZV9mcm9tX2d1ZXN0cyB9KSA9PiB7XG4gICAgICB0cnkge1xuICAgICAgICAvLyBWYWxpZGF0ZSB0aGF0IGF0IGxlYXN0IG9uZSBmaWVsZCBpcyBiZWluZyB1cGRhdGVkXG4gICAgICAgIGlmIChuYW1lID09PSB1bmRlZmluZWQgJiYgdHlwZV9jb25maWcgPT09IHVuZGVmaW5lZCAmJiBcbiAgICAgICAgICAgIHJlcXVpcmVkID09PSB1bmRlZmluZWQgJiYgaGlkZV9mcm9tX2d1ZXN0cyA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGNvbnRlbnQ6IFt7IHR5cGU6ICd0ZXh0JywgdGV4dDogJ0Vycm9yOiBNdXN0IHNwZWNpZnkgYXQgbGVhc3Qgb25lIGZpZWxkIHRvIHVwZGF0ZSAobmFtZSwgdHlwZV9jb25maWcsIHJlcXVpcmVkLCBvciBoaWRlX2Zyb21fZ3Vlc3RzKScgfV0sXG4gICAgICAgICAgICBpc0Vycm9yOiB0cnVlXG4gICAgICAgICAgfTtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IHVwZGF0ZWRGaWVsZCA9IGF3YWl0IGN1c3RvbUZpZWxkc0NsaWVudC51cGRhdGVDdXN0b21GaWVsZChmaWVsZF9pZCwge1xuICAgICAgICAgIG5hbWUsXG4gICAgICAgICAgdHlwZV9jb25maWcsXG4gICAgICAgICAgcmVxdWlyZWQsXG4gICAgICAgICAgaGlkZV9mcm9tX2d1ZXN0c1xuICAgICAgICB9KTtcblxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIGNvbnRlbnQ6IFt7IFxuICAgICAgICAgICAgdHlwZTogJ3RleHQnLCBcbiAgICAgICAgICAgIHRleHQ6IGBDdXN0b20gZmllbGQgdXBkYXRlZCBzdWNjZXNzZnVsbHkhXFxuXFxuJHtKU09OLnN0cmluZ2lmeSh1cGRhdGVkRmllbGQsIG51bGwsIDIpfWAgXG4gICAgICAgICAgfV1cbiAgICAgICAgfTtcbiAgICAgIH0gY2F0Y2ggKGVycm9yOiBhbnkpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcignRXJyb3IgdXBkYXRpbmcgY3VzdG9tIGZpZWxkOicsIGVycm9yKTtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICBjb250ZW50OiBbeyB0eXBlOiAndGV4dCcsIHRleHQ6IGBFcnJvciB1cGRhdGluZyBjdXN0b20gZmllbGQ6ICR7ZXJyb3IubWVzc2FnZX1gIH1dLFxuICAgICAgICAgIGlzRXJyb3I6IHRydWVcbiAgICAgICAgfTtcbiAgICAgIH1cbiAgICB9XG4gICk7XG5cbiAgLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICAvLyBERUxFVEUgQ1VTVE9NIEZJRUxEIE9QRVJBVElPTlNcbiAgLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuXG4gIHNlcnZlci50b29sKFxuICAgICdkZWxldGVfY3VzdG9tX2ZpZWxkJyxcbiAgICAnRGVsZXRlIGEgY3VzdG9tIGZpZWxkIGZyb20gQ2xpY2tVcC4gVGhpcyB3aWxsIHJlbW92ZSB0aGUgZmllbGQgYW5kIGFsbCBpdHMgdmFsdWVzIGZyb20gdGFza3MuIFRoaXMgYWN0aW9uIGNhbm5vdCBiZSB1bmRvbmUuJyxcbiAgICB7XG4gICAgICBmaWVsZF9pZDogei5zdHJpbmcoKS5taW4oMSkuZGVzY3JpYmUoJ1RoZSBJRCBvZiB0aGUgY3VzdG9tIGZpZWxkIHRvIGRlbGV0ZScpXG4gICAgfSxcbiAgICBhc3luYyAoeyBmaWVsZF9pZCB9KSA9PiB7XG4gICAgICB0cnkge1xuICAgICAgICBhd2FpdCBjdXN0b21GaWVsZHNDbGllbnQuZGVsZXRlQ3VzdG9tRmllbGQoZmllbGRfaWQpO1xuXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgY29udGVudDogW3sgXG4gICAgICAgICAgICB0eXBlOiAndGV4dCcsIFxuICAgICAgICAgICAgdGV4dDogYEN1c3RvbSBmaWVsZCAke2ZpZWxkX2lkfSBkZWxldGVkIHN1Y2Nlc3NmdWxseS4gQWxsIGZpZWxkIHZhbHVlcyBoYXZlIGJlZW4gcmVtb3ZlZCBmcm9tIHRhc2tzLmAgXG4gICAgICAgICAgfV1cbiAgICAgICAgfTtcbiAgICAgIH0gY2F0Y2ggKGVycm9yOiBhbnkpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcignRXJyb3IgZGVsZXRpbmcgY3VzdG9tIGZpZWxkOicsIGVycm9yKTtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICBjb250ZW50OiBbeyB0eXBlOiAndGV4dCcsIHRleHQ6IGBFcnJvciBkZWxldGluZyBjdXN0b20gZmllbGQ6ICR7ZXJyb3IubWVzc2FnZX1gIH1dLFxuICAgICAgICAgIGlzRXJyb3I6IHRydWVcbiAgICAgICAgfTtcbiAgICAgIH1cbiAgICB9XG4gICk7XG5cbiAgLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICAvLyBDVVNUT00gRklFTEQgVkFMVUUgT1BFUkFUSU9OU1xuICAvLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG5cbiAgc2VydmVyLnRvb2woXG4gICAgJ3NldF9jdXN0b21fZmllbGRfdmFsdWUnLFxuICAgICdTZXQgYSBjdXN0b20gZmllbGQgdmFsdWUgb24gYSBDbGlja1VwIHRhc2suIFRoZSB2YWx1ZSBmb3JtYXQgZGVwZW5kcyBvbiB0aGUgZmllbGQgdHlwZS4nLFxuICAgIHtcbiAgICAgIHRhc2tfaWQ6IHouc3RyaW5nKCkubWluKDEpLmRlc2NyaWJlKCdUaGUgSUQgb2YgdGhlIHRhc2sgdG8gc2V0IHRoZSBjdXN0b20gZmllbGQgdmFsdWUgb24nKSxcbiAgICAgIGZpZWxkX2lkOiB6LnN0cmluZygpLm1pbigxKS5kZXNjcmliZSgnVGhlIElEIG9mIHRoZSBjdXN0b20gZmllbGQnKSxcbiAgICAgIHZhbHVlOiB6LmFueSgpLmRlc2NyaWJlKCdUaGUgdmFsdWUgdG8gc2V0IChmb3JtYXQgZGVwZW5kcyBvbiBmaWVsZCB0eXBlKScpXG4gICAgfSxcbiAgICBhc3luYyAoeyB0YXNrX2lkLCBmaWVsZF9pZCwgdmFsdWUgfSkgPT4ge1xuICAgICAgdHJ5IHtcbiAgICAgICAgYXdhaXQgY3VzdG9tRmllbGRzQ2xpZW50LnNldEN1c3RvbUZpZWxkVmFsdWUodGFza19pZCwgZmllbGRfaWQsIHZhbHVlKTtcblxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIGNvbnRlbnQ6IFt7IFxuICAgICAgICAgICAgdHlwZTogJ3RleHQnLCBcbiAgICAgICAgICAgIHRleHQ6IGBDdXN0b20gZmllbGQgdmFsdWUgc2V0IHN1Y2Nlc3NmdWxseSBvbiB0YXNrICR7dGFza19pZH0gZm9yIGZpZWxkICR7ZmllbGRfaWR9LmAgXG4gICAgICAgICAgfV1cbiAgICAgICAgfTtcbiAgICAgIH0gY2F0Y2ggKGVycm9yOiBhbnkpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcignRXJyb3Igc2V0dGluZyBjdXN0b20gZmllbGQgdmFsdWU6JywgZXJyb3IpO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIGNvbnRlbnQ6IFt7IHR5cGU6ICd0ZXh0JywgdGV4dDogYEVycm9yIHNldHRpbmcgY3VzdG9tIGZpZWxkIHZhbHVlOiAke2Vycm9yLm1lc3NhZ2V9YCB9XSxcbiAgICAgICAgICBpc0Vycm9yOiB0cnVlXG4gICAgICAgIH07XG4gICAgICB9XG4gICAgfVxuICApO1xuXG4gIHNlcnZlci50b29sKFxuICAgICdyZW1vdmVfY3VzdG9tX2ZpZWxkX3ZhbHVlJyxcbiAgICAnUmVtb3ZlIGEgY3VzdG9tIGZpZWxkIHZhbHVlIGZyb20gYSBDbGlja1VwIHRhc2suIFRoaXMgY2xlYXJzIHRoZSBmaWVsZCB2YWx1ZSBidXQga2VlcHMgdGhlIGZpZWxkIGRlZmluaXRpb24uJyxcbiAgICB7XG4gICAgICB0YXNrX2lkOiB6LnN0cmluZygpLm1pbigxKS5kZXNjcmliZSgnVGhlIElEIG9mIHRoZSB0YXNrIHRvIHJlbW92ZSB0aGUgY3VzdG9tIGZpZWxkIHZhbHVlIGZyb20nKSxcbiAgICAgIGZpZWxkX2lkOiB6LnN0cmluZygpLm1pbigxKS5kZXNjcmliZSgnVGhlIElEIG9mIHRoZSBjdXN0b20gZmllbGQgdG8gY2xlYXInKVxuICAgIH0sXG4gICAgYXN5bmMgKHsgdGFza19pZCwgZmllbGRfaWQgfSkgPT4ge1xuICAgICAgdHJ5IHtcbiAgICAgICAgYXdhaXQgY3VzdG9tRmllbGRzQ2xpZW50LnJlbW92ZUN1c3RvbUZpZWxkVmFsdWUodGFza19pZCwgZmllbGRfaWQpO1xuXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgY29udGVudDogW3sgXG4gICAgICAgICAgICB0eXBlOiAndGV4dCcsIFxuICAgICAgICAgICAgdGV4dDogYEN1c3RvbSBmaWVsZCB2YWx1ZSByZW1vdmVkIHN1Y2Nlc3NmdWxseSBmcm9tIHRhc2sgJHt0YXNrX2lkfSBmb3IgZmllbGQgJHtmaWVsZF9pZH0uYCBcbiAgICAgICAgICB9XVxuICAgICAgICB9O1xuICAgICAgfSBjYXRjaCAoZXJyb3I6IGFueSkge1xuICAgICAgICBjb25zb2xlLmVycm9yKCdFcnJvciByZW1vdmluZyBjdXN0b20gZmllbGQgdmFsdWU6JywgZXJyb3IpO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIGNvbnRlbnQ6IFt7IHR5cGU6ICd0ZXh0JywgdGV4dDogYEVycm9yIHJlbW92aW5nIGN1c3RvbSBmaWVsZCB2YWx1ZTogJHtlcnJvci5tZXNzYWdlfWAgfV0sXG4gICAgICAgICAgaXNFcnJvcjogdHJ1ZVxuICAgICAgICB9O1xuICAgICAgfVxuICAgIH1cbiAgKTtcblxuICBzZXJ2ZXIudG9vbChcbiAgICAnZ2V0X2N1c3RvbV9maWVsZF92YWx1ZScsXG4gICAgJ0dldCBhIGN1c3RvbSBmaWVsZCB2YWx1ZSBmcm9tIGEgQ2xpY2tVcCB0YXNrLiBSZXR1cm5zIHRoZSBjdXJyZW50IHZhbHVlIGFuZCBmaWVsZCBpbmZvcm1hdGlvbi4nLFxuICAgIHtcbiAgICAgIHRhc2tfaWQ6IHouc3RyaW5nKCkubWluKDEpLmRlc2NyaWJlKCdUaGUgSUQgb2YgdGhlIHRhc2sgdG8gZ2V0IHRoZSBjdXN0b20gZmllbGQgdmFsdWUgZnJvbScpLFxuICAgICAgZmllbGRfaWQ6IHouc3RyaW5nKCkubWluKDEpLmRlc2NyaWJlKCdUaGUgSUQgb2YgdGhlIGN1c3RvbSBmaWVsZCB0byByZXRyaWV2ZScpXG4gICAgfSxcbiAgICBhc3luYyAoeyB0YXNrX2lkLCBmaWVsZF9pZCB9KSA9PiB7XG4gICAgICB0cnkge1xuICAgICAgICBjb25zdCB2YWx1ZSA9IGF3YWl0IGN1c3RvbUZpZWxkc0NsaWVudC5nZXRDdXN0b21GaWVsZFZhbHVlKHRhc2tfaWQsIGZpZWxkX2lkKTtcblxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIGNvbnRlbnQ6IFt7IFxuICAgICAgICAgICAgdHlwZTogJ3RleHQnLCBcbiAgICAgICAgICAgIHRleHQ6IGBDdXN0b20gZmllbGQgdmFsdWUgZm9yIHRhc2sgJHt0YXNrX2lkfSwgZmllbGQgJHtmaWVsZF9pZH06XFxuXFxuJHtKU09OLnN0cmluZ2lmeSh2YWx1ZSwgbnVsbCwgMil9YCBcbiAgICAgICAgICB9XVxuICAgICAgICB9O1xuICAgICAgfSBjYXRjaCAoZXJyb3I6IGFueSkge1xuICAgICAgICBjb25zb2xlLmVycm9yKCdFcnJvciBnZXR0aW5nIGN1c3RvbSBmaWVsZCB2YWx1ZTonLCBlcnJvcik7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgY29udGVudDogW3sgdHlwZTogJ3RleHQnLCB0ZXh0OiBgRXJyb3IgZ2V0dGluZyBjdXN0b20gZmllbGQgdmFsdWU6ICR7ZXJyb3IubWVzc2FnZX1gIH1dLFxuICAgICAgICAgIGlzRXJyb3I6IHRydWVcbiAgICAgICAgfTtcbiAgICAgIH1cbiAgICB9XG4gICk7XG5cbiAgc2VydmVyLnRvb2woXG4gICAgJ2J1bGtfc2V0X2N1c3RvbV9maWVsZF92YWx1ZXMnLFxuICAgICdTZXQgbXVsdGlwbGUgY3VzdG9tIGZpZWxkIHZhbHVlcyBvbiBhIENsaWNrVXAgdGFzayBpbiBhIHNpbmdsZSBvcGVyYXRpb24uIE1vcmUgZWZmaWNpZW50IHRoYW4gc2V0dGluZyB2YWx1ZXMgaW5kaXZpZHVhbGx5LicsXG4gICAge1xuICAgICAgdGFza19pZDogei5zdHJpbmcoKS5taW4oMSkuZGVzY3JpYmUoJ1RoZSBJRCBvZiB0aGUgdGFzayB0byBzZXQgY3VzdG9tIGZpZWxkIHZhbHVlcyBvbicpLFxuICAgICAgZmllbGRfdmFsdWVzOiB6LmFycmF5KHoub2JqZWN0KHtcbiAgICAgICAgZmllbGRfaWQ6IHouc3RyaW5nKCkubWluKDEpLmRlc2NyaWJlKCdUaGUgSUQgb2YgdGhlIGN1c3RvbSBmaWVsZCcpLFxuICAgICAgICB2YWx1ZTogei5hbnkoKS5kZXNjcmliZSgnVGhlIHZhbHVlIHRvIHNldCAoZm9ybWF0IGRlcGVuZHMgb24gZmllbGQgdHlwZSknKVxuICAgICAgfSkpLm1pbigxKS5kZXNjcmliZSgnQXJyYXkgb2YgZmllbGQgSUQgYW5kIHZhbHVlIHBhaXJzIHRvIHNldCcpXG4gICAgfSxcbiAgICBhc3luYyAoeyB0YXNrX2lkLCBmaWVsZF92YWx1ZXMgfSkgPT4ge1xuICAgICAgdHJ5IHtcbiAgICAgICAgLy8gRW5zdXJlIGFsbCBmaWVsZF92YWx1ZXMgaGF2ZSB0aGUgcmVxdWlyZWQgcHJvcGVydGllc1xuICAgICAgICBjb25zdCB2YWxpZGF0ZWRGaWVsZFZhbHVlcyA9IGZpZWxkX3ZhbHVlcy5tYXAoZnYgPT4gKHtcbiAgICAgICAgICBmaWVsZF9pZDogZnYuZmllbGRfaWQsXG4gICAgICAgICAgdmFsdWU6IGZ2LnZhbHVlXG4gICAgICAgIH0pKTtcbiAgICAgICAgXG4gICAgICAgIGNvbnN0IHJlc3VsdHMgPSBhd2FpdCBjdXN0b21GaWVsZHNDbGllbnQuYnVsa1NldEN1c3RvbUZpZWxkVmFsdWVzKHRhc2tfaWQsIHZhbGlkYXRlZEZpZWxkVmFsdWVzKTtcblxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIGNvbnRlbnQ6IFt7IFxuICAgICAgICAgICAgdHlwZTogJ3RleHQnLCBcbiAgICAgICAgICAgIHRleHQ6IGBCdWxrIGN1c3RvbSBmaWVsZCB2YWx1ZXMgc2V0IHN1Y2Nlc3NmdWxseSBvbiB0YXNrICR7dGFza19pZH0hXFxuXFxuUmVzdWx0czpcXG4ke0pTT04uc3RyaW5naWZ5KHJlc3VsdHMsIG51bGwsIDIpfWAgXG4gICAgICAgICAgfV1cbiAgICAgICAgfTtcbiAgICAgIH0gY2F0Y2ggKGVycm9yOiBhbnkpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcignRXJyb3IgYnVsayBzZXR0aW5nIGN1c3RvbSBmaWVsZCB2YWx1ZXM6JywgZXJyb3IpO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIGNvbnRlbnQ6IFt7IHR5cGU6ICd0ZXh0JywgdGV4dDogYEVycm9yIGJ1bGsgc2V0dGluZyBjdXN0b20gZmllbGQgdmFsdWVzOiAke2Vycm9yLm1lc3NhZ2V9YCB9XSxcbiAgICAgICAgICBpc0Vycm9yOiB0cnVlXG4gICAgICAgIH07XG4gICAgICB9XG4gICAgfVxuICApO1xuXG4gIHNlcnZlci50b29sKFxuICAgICdnZXRfdGFza19jdXN0b21fZmllbGRfdmFsdWVzJyxcbiAgICAnR2V0IGFsbCBjdXN0b20gZmllbGQgdmFsdWVzIGZvciBhIENsaWNrVXAgdGFzay4gUmV0dXJucyBhbGwgZmllbGQgdmFsdWVzIHdpdGggdGhlaXIgZGVmaW5pdGlvbnMuJyxcbiAgICB7XG4gICAgICB0YXNrX2lkOiB6LnN0cmluZygpLm1pbigxKS5kZXNjcmliZSgnVGhlIElEIG9mIHRoZSB0YXNrIHRvIGdldCBjdXN0b20gZmllbGQgdmFsdWVzIGZyb20nKVxuICAgIH0sXG4gICAgYXN5bmMgKHsgdGFza19pZCB9KSA9PiB7XG4gICAgICB0cnkge1xuICAgICAgICBjb25zdCB2YWx1ZXMgPSBhd2FpdCBjdXN0b21GaWVsZHNDbGllbnQuZ2V0VGFza0N1c3RvbUZpZWxkVmFsdWVzKHRhc2tfaWQpO1xuXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgY29udGVudDogW3sgXG4gICAgICAgICAgICB0eXBlOiAndGV4dCcsIFxuICAgICAgICAgICAgdGV4dDogYEFsbCBjdXN0b20gZmllbGQgdmFsdWVzIGZvciB0YXNrICR7dGFza19pZH06XFxuXFxuJHtKU09OLnN0cmluZ2lmeSh2YWx1ZXMsIG51bGwsIDIpfWAgXG4gICAgICAgICAgfV1cbiAgICAgICAgfTtcbiAgICAgIH0gY2F0Y2ggKGVycm9yOiBhbnkpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcignRXJyb3IgZ2V0dGluZyB0YXNrIGN1c3RvbSBmaWVsZCB2YWx1ZXM6JywgZXJyb3IpO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIGNvbnRlbnQ6IFt7IHR5cGU6ICd0ZXh0JywgdGV4dDogYEVycm9yIGdldHRpbmcgdGFzayBjdXN0b20gZmllbGQgdmFsdWVzOiAke2Vycm9yLm1lc3NhZ2V9YCB9XSxcbiAgICAgICAgICBpc0Vycm9yOiB0cnVlXG4gICAgICAgIH07XG4gICAgICB9XG4gICAgfVxuICApO1xuXG4gIC8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAgLy8gSEVMUEVSIFRPT0xTIEZPUiBGSUVMRCBDUkVBVElPTlxuICAvLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG5cbiAgc2VydmVyLnRvb2woXG4gICAgJ2NyZWF0ZV90ZXh0X2N1c3RvbV9maWVsZCcsXG4gICAgJ0NyZWF0ZSBhIHRleHQgY3VzdG9tIGZpZWxkIHdpdGggb3B0aW9uYWwgZGVmYXVsdCB2YWx1ZSBhbmQgcGxhY2Vob2xkZXIuJyxcbiAgICB7XG4gICAgICBjb250YWluZXJfdHlwZTogei5lbnVtKFsnbGlzdCcsICdmb2xkZXInLCAnc3BhY2UnXSkuZGVzY3JpYmUoJ1RoZSB0eXBlIG9mIGNvbnRhaW5lcicpLFxuICAgICAgY29udGFpbmVyX2lkOiB6LnN0cmluZygpLm1pbigxKS5kZXNjcmliZSgnVGhlIElEIG9mIHRoZSBjb250YWluZXInKSxcbiAgICAgIG5hbWU6IHouc3RyaW5nKCkubWluKDEpLm1heCgyNTUpLmRlc2NyaWJlKCdUaGUgbmFtZSBvZiB0aGUgdGV4dCBmaWVsZCcpLFxuICAgICAgZGVmYXVsdF92YWx1ZTogei5zdHJpbmcoKS5vcHRpb25hbCgpLmRlc2NyaWJlKCdEZWZhdWx0IHRleHQgdmFsdWUnKSxcbiAgICAgIHBsYWNlaG9sZGVyOiB6LnN0cmluZygpLm9wdGlvbmFsKCkuZGVzY3JpYmUoJ1BsYWNlaG9sZGVyIHRleHQnKSxcbiAgICAgIHJlcXVpcmVkOiB6LmJvb2xlYW4oKS5vcHRpb25hbCgpLmRlZmF1bHQoZmFsc2UpLmRlc2NyaWJlKCdXaGV0aGVyIHRoZSBmaWVsZCBpcyByZXF1aXJlZCcpLFxuICAgICAgaGlkZV9mcm9tX2d1ZXN0czogei5ib29sZWFuKCkub3B0aW9uYWwoKS5kZWZhdWx0KGZhbHNlKS5kZXNjcmliZSgnV2hldGhlciB0byBoaWRlIGZyb20gZ3Vlc3RzJylcbiAgICB9LFxuICAgIGFzeW5jICh7IGNvbnRhaW5lcl90eXBlLCBjb250YWluZXJfaWQsIG5hbWUsIGRlZmF1bHRfdmFsdWUsIHBsYWNlaG9sZGVyLCByZXF1aXJlZCwgaGlkZV9mcm9tX2d1ZXN0cyB9KSA9PiB7XG4gICAgICB0cnkge1xuICAgICAgICBjb25zdCB0eXBlX2NvbmZpZyA9IHtcbiAgICAgICAgICBkZWZhdWx0OiBkZWZhdWx0X3ZhbHVlLFxuICAgICAgICAgIHBsYWNlaG9sZGVyXG4gICAgICAgIH07XG5cbiAgICAgICAgY29uc3QgZmllbGRQYXJhbXMgPSB7XG4gICAgICAgICAgbmFtZSxcbiAgICAgICAgICB0eXBlOiAndGV4dCcgYXMgQ3VzdG9tRmllbGRUeXBlLFxuICAgICAgICAgIHR5cGVfY29uZmlnLFxuICAgICAgICAgIHJlcXVpcmVkLFxuICAgICAgICAgIGhpZGVfZnJvbV9ndWVzdHNcbiAgICAgICAgfTtcblxuICAgICAgICBsZXQgZmllbGQ7XG4gICAgICAgIHN3aXRjaCAoY29udGFpbmVyX3R5cGUpIHtcbiAgICAgICAgICBjYXNlICdsaXN0JzpcbiAgICAgICAgICAgIGZpZWxkID0gYXdhaXQgY3VzdG9tRmllbGRzQ2xpZW50LmNyZWF0ZUxpc3RDdXN0b21GaWVsZChjb250YWluZXJfaWQsIGZpZWxkUGFyYW1zKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIGNhc2UgJ2ZvbGRlcic6XG4gICAgICAgICAgICBmaWVsZCA9IGF3YWl0IGN1c3RvbUZpZWxkc0NsaWVudC5jcmVhdGVGb2xkZXJDdXN0b21GaWVsZChjb250YWluZXJfaWQsIGZpZWxkUGFyYW1zKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIGNhc2UgJ3NwYWNlJzpcbiAgICAgICAgICAgIGZpZWxkID0gYXdhaXQgY3VzdG9tRmllbGRzQ2xpZW50LmNyZWF0ZVNwYWNlQ3VzdG9tRmllbGQoY29udGFpbmVyX2lkLCBmaWVsZFBhcmFtcyk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgY29udGVudDogW3sgXG4gICAgICAgICAgICB0eXBlOiAndGV4dCcsIFxuICAgICAgICAgICAgdGV4dDogYFRleHQgY3VzdG9tIGZpZWxkIGNyZWF0ZWQgc3VjY2Vzc2Z1bGx5IVxcblxcbiR7SlNPTi5zdHJpbmdpZnkoZmllbGQsIG51bGwsIDIpfWAgXG4gICAgICAgICAgfV1cbiAgICAgICAgfTtcbiAgICAgIH0gY2F0Y2ggKGVycm9yOiBhbnkpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcignRXJyb3IgY3JlYXRpbmcgdGV4dCBjdXN0b20gZmllbGQ6JywgZXJyb3IpO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIGNvbnRlbnQ6IFt7IHR5cGU6ICd0ZXh0JywgdGV4dDogYEVycm9yIGNyZWF0aW5nIHRleHQgY3VzdG9tIGZpZWxkOiAke2Vycm9yLm1lc3NhZ2V9YCB9XSxcbiAgICAgICAgICBpc0Vycm9yOiB0cnVlXG4gICAgICAgIH07XG4gICAgICB9XG4gICAgfVxuICApO1xuXG4gIHNlcnZlci50b29sKFxuICAgICdjcmVhdGVfZHJvcGRvd25fY3VzdG9tX2ZpZWxkJyxcbiAgICAnQ3JlYXRlIGEgZHJvcGRvd24gY3VzdG9tIGZpZWxkIHdpdGggc3BlY2lmaWVkIG9wdGlvbnMuJyxcbiAgICB7XG4gICAgICBjb250YWluZXJfdHlwZTogei5lbnVtKFsnbGlzdCcsICdmb2xkZXInLCAnc3BhY2UnXSkuZGVzY3JpYmUoJ1RoZSB0eXBlIG9mIGNvbnRhaW5lcicpLFxuICAgICAgY29udGFpbmVyX2lkOiB6LnN0cmluZygpLm1pbigxKS5kZXNjcmliZSgnVGhlIElEIG9mIHRoZSBjb250YWluZXInKSxcbiAgICAgIG5hbWU6IHouc3RyaW5nKCkubWluKDEpLm1heCgyNTUpLmRlc2NyaWJlKCdUaGUgbmFtZSBvZiB0aGUgZHJvcGRvd24gZmllbGQnKSxcbiAgICAgIG9wdGlvbnM6IHouYXJyYXkoRHJvcGRvd25PcHRpb25TY2hlbWEpLm1pbigxKS5kZXNjcmliZSgnQXJyYXkgb2YgZHJvcGRvd24gb3B0aW9ucycpLFxuICAgICAgZGVmYXVsdF9vcHRpb25faW5kZXg6IHoubnVtYmVyKCkubWluKDApLm9wdGlvbmFsKCkuZGVzY3JpYmUoJ0luZGV4IG9mIGRlZmF1bHQgc2VsZWN0ZWQgb3B0aW9uJyksXG4gICAgICByZXF1aXJlZDogei5ib29sZWFuKCkub3B0aW9uYWwoKS5kZWZhdWx0KGZhbHNlKS5kZXNjcmliZSgnV2hldGhlciB0aGUgZmllbGQgaXMgcmVxdWlyZWQnKSxcbiAgICAgIGhpZGVfZnJvbV9ndWVzdHM6IHouYm9vbGVhbigpLm9wdGlvbmFsKCkuZGVmYXVsdChmYWxzZSkuZGVzY3JpYmUoJ1doZXRoZXIgdG8gaGlkZSBmcm9tIGd1ZXN0cycpXG4gICAgfSxcbiAgICBhc3luYyAoeyBjb250YWluZXJfdHlwZSwgY29udGFpbmVyX2lkLCBuYW1lLCBvcHRpb25zLCBkZWZhdWx0X29wdGlvbl9pbmRleCwgcmVxdWlyZWQsIGhpZGVfZnJvbV9ndWVzdHMgfSkgPT4ge1xuICAgICAgdHJ5IHtcbiAgICAgICAgY29uc3QgdHlwZV9jb25maWcgPSB7XG4gICAgICAgICAgb3B0aW9uczogb3B0aW9ucy5tYXAoKG9wdGlvbiwgaW5kZXgpID0+ICh7XG4gICAgICAgICAgICAuLi5vcHRpb24sXG4gICAgICAgICAgICBvcmRlcmluZGV4OiBvcHRpb24ub3JkZXJpbmRleCA/PyBpbmRleFxuICAgICAgICAgIH0pKSxcbiAgICAgICAgICBkZWZhdWx0OiBkZWZhdWx0X29wdGlvbl9pbmRleFxuICAgICAgICB9O1xuXG4gICAgICAgIGNvbnN0IGZpZWxkUGFyYW1zID0ge1xuICAgICAgICAgIG5hbWUsXG4gICAgICAgICAgdHlwZTogJ2Ryb3BfZG93bicgYXMgQ3VzdG9tRmllbGRUeXBlLFxuICAgICAgICAgIHR5cGVfY29uZmlnLFxuICAgICAgICAgIHJlcXVpcmVkLFxuICAgICAgICAgIGhpZGVfZnJvbV9ndWVzdHNcbiAgICAgICAgfTtcblxuICAgICAgICBsZXQgZmllbGQ7XG4gICAgICAgIHN3aXRjaCAoY29udGFpbmVyX3R5cGUpIHtcbiAgICAgICAgICBjYXNlICdsaXN0JzpcbiAgICAgICAgICAgIGZpZWxkID0gYXdhaXQgY3VzdG9tRmllbGRzQ2xpZW50LmNyZWF0ZUxpc3RDdXN0b21GaWVsZChjb250YWluZXJfaWQsIGZpZWxkUGFyYW1zKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIGNhc2UgJ2ZvbGRlcic6XG4gICAgICAgICAgICBmaWVsZCA9IGF3YWl0IGN1c3RvbUZpZWxkc0NsaWVudC5jcmVhdGVGb2xkZXJDdXN0b21GaWVsZChjb250YWluZXJfaWQsIGZpZWxkUGFyYW1zKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIGNhc2UgJ3NwYWNlJzpcbiAgICAgICAgICAgIGZpZWxkID0gYXdhaXQgY3VzdG9tRmllbGRzQ2xpZW50LmNyZWF0ZVNwYWNlQ3VzdG9tRmllbGQoY29udGFpbmVyX2lkLCBmaWVsZFBhcmFtcyk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgY29udGVudDogW3sgXG4gICAgICAgICAgICB0eXBlOiAndGV4dCcsIFxuICAgICAgICAgICAgdGV4dDogYERyb3Bkb3duIGN1c3RvbSBmaWVsZCBjcmVhdGVkIHN1Y2Nlc3NmdWxseSB3aXRoICR7b3B0aW9ucy5sZW5ndGh9IG9wdGlvbnMhXFxuXFxuJHtKU09OLnN0cmluZ2lmeShmaWVsZCwgbnVsbCwgMil9YCBcbiAgICAgICAgICB9XVxuICAgICAgICB9O1xuICAgICAgfSBjYXRjaCAoZXJyb3I6IGFueSkge1xuICAgICAgICBjb25zb2xlLmVycm9yKCdFcnJvciBjcmVhdGluZyBkcm9wZG93biBjdXN0b20gZmllbGQ6JywgZXJyb3IpO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIGNvbnRlbnQ6IFt7IHR5cGU6ICd0ZXh0JywgdGV4dDogYEVycm9yIGNyZWF0aW5nIGRyb3Bkb3duIGN1c3RvbSBmaWVsZDogJHtlcnJvci5tZXNzYWdlfWAgfV0sXG4gICAgICAgICAgaXNFcnJvcjogdHJ1ZVxuICAgICAgICB9O1xuICAgICAgfVxuICAgIH1cbiAgKTtcblxuICBzZXJ2ZXIudG9vbChcbiAgICAnY3JlYXRlX251bWJlcl9jdXN0b21fZmllbGQnLFxuICAgICdDcmVhdGUgYSBudW1iZXIgY3VzdG9tIGZpZWxkIHdpdGggb3B0aW9uYWwgcHJlY2lzaW9uIGFuZCBkZWZhdWx0IHZhbHVlLicsXG4gICAge1xuICAgICAgY29udGFpbmVyX3R5cGU6IHouZW51bShbJ2xpc3QnLCAnZm9sZGVyJywgJ3NwYWNlJ10pLmRlc2NyaWJlKCdUaGUgdHlwZSBvZiBjb250YWluZXInKSxcbiAgICAgIGNvbnRhaW5lcl9pZDogei5zdHJpbmcoKS5taW4oMSkuZGVzY3JpYmUoJ1RoZSBJRCBvZiB0aGUgY29udGFpbmVyJyksXG4gICAgICBuYW1lOiB6LnN0cmluZygpLm1pbigxKS5tYXgoMjU1KS5kZXNjcmliZSgnVGhlIG5hbWUgb2YgdGhlIG51bWJlciBmaWVsZCcpLFxuICAgICAgZGVmYXVsdF92YWx1ZTogei5udW1iZXIoKS5vcHRpb25hbCgpLmRlc2NyaWJlKCdEZWZhdWx0IG51bWVyaWMgdmFsdWUnKSxcbiAgICAgIHByZWNpc2lvbjogei5udW1iZXIoKS5taW4oMCkubWF4KDgpLm9wdGlvbmFsKCkuZGVmYXVsdCgwKS5kZXNjcmliZSgnTnVtYmVyIG9mIGRlY2ltYWwgcGxhY2VzICgwLTgpJyksXG4gICAgICByZXF1aXJlZDogei5ib29sZWFuKCkub3B0aW9uYWwoKS5kZWZhdWx0KGZhbHNlKS5kZXNjcmliZSgnV2hldGhlciB0aGUgZmllbGQgaXMgcmVxdWlyZWQnKSxcbiAgICAgIGhpZGVfZnJvbV9ndWVzdHM6IHouYm9vbGVhbigpLm9wdGlvbmFsKCkuZGVmYXVsdChmYWxzZSkuZGVzY3JpYmUoJ1doZXRoZXIgdG8gaGlkZSBmcm9tIGd1ZXN0cycpXG4gICAgfSxcbiAgICBhc3luYyAoeyBjb250YWluZXJfdHlwZSwgY29udGFpbmVyX2lkLCBuYW1lLCBkZWZhdWx0X3ZhbHVlLCBwcmVjaXNpb24sIHJlcXVpcmVkLCBoaWRlX2Zyb21fZ3Vlc3RzIH0pID0+IHtcbiAgICAgIHRyeSB7XG4gICAgICAgIGNvbnN0IHR5cGVfY29uZmlnID0ge1xuICAgICAgICAgIGRlZmF1bHQ6IGRlZmF1bHRfdmFsdWUsXG4gICAgICAgICAgcHJlY2lzaW9uXG4gICAgICAgIH07XG5cbiAgICAgICAgY29uc3QgZmllbGRQYXJhbXMgPSB7XG4gICAgICAgICAgbmFtZSxcbiAgICAgICAgICB0eXBlOiAnbnVtYmVyJyBhcyBDdXN0b21GaWVsZFR5cGUsXG4gICAgICAgICAgdHlwZV9jb25maWcsXG4gICAgICAgICAgcmVxdWlyZWQsXG4gICAgICAgICAgaGlkZV9mcm9tX2d1ZXN0c1xuICAgICAgICB9O1xuXG4gICAgICAgIGxldCBmaWVsZDtcbiAgICAgICAgc3dpdGNoIChjb250YWluZXJfdHlwZSkge1xuICAgICAgICAgIGNhc2UgJ2xpc3QnOlxuICAgICAgICAgICAgZmllbGQgPSBhd2FpdCBjdXN0b21GaWVsZHNDbGllbnQuY3JlYXRlTGlzdEN1c3RvbUZpZWxkKGNvbnRhaW5lcl9pZCwgZmllbGRQYXJhbXMpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgY2FzZSAnZm9sZGVyJzpcbiAgICAgICAgICAgIGZpZWxkID0gYXdhaXQgY3VzdG9tRmllbGRzQ2xpZW50LmNyZWF0ZUZvbGRlckN1c3RvbUZpZWxkKGNvbnRhaW5lcl9pZCwgZmllbGRQYXJhbXMpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgY2FzZSAnc3BhY2UnOlxuICAgICAgICAgICAgZmllbGQgPSBhd2FpdCBjdXN0b21GaWVsZHNDbGllbnQuY3JlYXRlU3BhY2VDdXN0b21GaWVsZChjb250YWluZXJfaWQsIGZpZWxkUGFyYW1zKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICBjb250ZW50OiBbeyBcbiAgICAgICAgICAgIHR5cGU6ICd0ZXh0JywgXG4gICAgICAgICAgICB0ZXh0OiBgTnVtYmVyIGN1c3RvbSBmaWVsZCBjcmVhdGVkIHN1Y2Nlc3NmdWxseSB3aXRoICR7cHJlY2lzaW9ufSBkZWNpbWFsIHBsYWNlcyFcXG5cXG4ke0pTT04uc3RyaW5naWZ5KGZpZWxkLCBudWxsLCAyKX1gIFxuICAgICAgICAgIH1dXG4gICAgICAgIH07XG4gICAgICB9IGNhdGNoIChlcnJvcjogYW55KSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoJ0Vycm9yIGNyZWF0aW5nIG51bWJlciBjdXN0b20gZmllbGQ6JywgZXJyb3IpO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIGNvbnRlbnQ6IFt7IHR5cGU6ICd0ZXh0JywgdGV4dDogYEVycm9yIGNyZWF0aW5nIG51bWJlciBjdXN0b20gZmllbGQ6ICR7ZXJyb3IubWVzc2FnZX1gIH1dLFxuICAgICAgICAgIGlzRXJyb3I6IHRydWVcbiAgICAgICAgfTtcbiAgICAgIH1cbiAgICB9XG4gICk7XG5cbiAgc2VydmVyLnRvb2woXG4gICAgJ2NyZWF0ZV9kYXRlX2N1c3RvbV9maWVsZCcsXG4gICAgJ0NyZWF0ZSBhIGRhdGUgY3VzdG9tIGZpZWxkIHdpdGggb3B0aW9uYWwgdGltZSBpbmNsdXNpb24uJyxcbiAgICB7XG4gICAgICBjb250YWluZXJfdHlwZTogei5lbnVtKFsnbGlzdCcsICdmb2xkZXInLCAnc3BhY2UnXSkuZGVzY3JpYmUoJ1RoZSB0eXBlIG9mIGNvbnRhaW5lcicpLFxuICAgICAgY29udGFpbmVyX2lkOiB6LnN0cmluZygpLm1pbigxKS5kZXNjcmliZSgnVGhlIElEIG9mIHRoZSBjb250YWluZXInKSxcbiAgICAgIG5hbWU6IHouc3RyaW5nKCkubWluKDEpLm1heCgyNTUpLmRlc2NyaWJlKCdUaGUgbmFtZSBvZiB0aGUgZGF0ZSBmaWVsZCcpLFxuICAgICAgaW5jbHVkZV90aW1lOiB6LmJvb2xlYW4oKS5vcHRpb25hbCgpLmRlZmF1bHQoZmFsc2UpLmRlc2NyaWJlKCdXaGV0aGVyIHRvIGluY2x1ZGUgdGltZSBpbiB0aGUgZGF0ZSBmaWVsZCcpLFxuICAgICAgZGVmYXVsdF92YWx1ZTogei5udW1iZXIoKS5wb3NpdGl2ZSgpLm9wdGlvbmFsKCkuZGVzY3JpYmUoJ0RlZmF1bHQgZGF0ZSB2YWx1ZSAoVW5peCB0aW1lc3RhbXApJyksXG4gICAgICByZXF1aXJlZDogei5ib29sZWFuKCkub3B0aW9uYWwoKS5kZWZhdWx0KGZhbHNlKS5kZXNjcmliZSgnV2hldGhlciB0aGUgZmllbGQgaXMgcmVxdWlyZWQnKSxcbiAgICAgIGhpZGVfZnJvbV9ndWVzdHM6IHouYm9vbGVhbigpLm9wdGlvbmFsKCkuZGVmYXVsdChmYWxzZSkuZGVzY3JpYmUoJ1doZXRoZXIgdG8gaGlkZSBmcm9tIGd1ZXN0cycpXG4gICAgfSxcbiAgICBhc3luYyAoeyBjb250YWluZXJfdHlwZSwgY29udGFpbmVyX2lkLCBuYW1lLCBpbmNsdWRlX3RpbWUsIGRlZmF1bHRfdmFsdWUsIHJlcXVpcmVkLCBoaWRlX2Zyb21fZ3Vlc3RzIH0pID0+IHtcbiAgICAgIHRyeSB7XG4gICAgICAgIGNvbnN0IHR5cGVfY29uZmlnID0ge1xuICAgICAgICAgIGluY2x1ZGVfdGltZSxcbiAgICAgICAgICBkZWZhdWx0OiBkZWZhdWx0X3ZhbHVlXG4gICAgICAgIH07XG5cbiAgICAgICAgY29uc3QgZmllbGRQYXJhbXMgPSB7XG4gICAgICAgICAgbmFtZSxcbiAgICAgICAgICB0eXBlOiAnZGF0ZScgYXMgQ3VzdG9tRmllbGRUeXBlLFxuICAgICAgICAgIHR5cGVfY29uZmlnLFxuICAgICAgICAgIHJlcXVpcmVkLFxuICAgICAgICAgIGhpZGVfZnJvbV9ndWVzdHNcbiAgICAgICAgfTtcblxuICAgICAgICBsZXQgZmllbGQ7XG4gICAgICAgIHN3aXRjaCAoY29udGFpbmVyX3R5cGUpIHtcbiAgICAgICAgICBjYXNlICdsaXN0JzpcbiAgICAgICAgICAgIGZpZWxkID0gYXdhaXQgY3VzdG9tRmllbGRzQ2xpZW50LmNyZWF0ZUxpc3RDdXN0b21GaWVsZChjb250YWluZXJfaWQsIGZpZWxkUGFyYW1zKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIGNhc2UgJ2ZvbGRlcic6XG4gICAgICAgICAgICBmaWVsZCA9IGF3YWl0IGN1c3RvbUZpZWxkc0NsaWVudC5jcmVhdGVGb2xkZXJDdXN0b21GaWVsZChjb250YWluZXJfaWQsIGZpZWxkUGFyYW1zKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIGNhc2UgJ3NwYWNlJzpcbiAgICAgICAgICAgIGZpZWxkID0gYXdhaXQgY3VzdG9tRmllbGRzQ2xpZW50LmNyZWF0ZVNwYWNlQ3VzdG9tRmllbGQoY29udGFpbmVyX2lkLCBmaWVsZFBhcmFtcyk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgY29udGVudDogW3sgXG4gICAgICAgICAgICB0eXBlOiAndGV4dCcsIFxuICAgICAgICAgICAgdGV4dDogYERhdGUgY3VzdG9tIGZpZWxkIGNyZWF0ZWQgc3VjY2Vzc2Z1bGx5JHtpbmNsdWRlX3RpbWUgPyAnIHdpdGggdGltZSBzdXBwb3J0JyA6ICcnfSFcXG5cXG4ke0pTT04uc3RyaW5naWZ5KGZpZWxkLCBudWxsLCAyKX1gIFxuICAgICAgICAgIH1dXG4gICAgICAgIH07XG4gICAgICB9IGNhdGNoIChlcnJvcjogYW55KSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoJ0Vycm9yIGNyZWF0aW5nIGRhdGUgY3VzdG9tIGZpZWxkOicsIGVycm9yKTtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICBjb250ZW50OiBbeyB0eXBlOiAndGV4dCcsIHRleHQ6IGBFcnJvciBjcmVhdGluZyBkYXRlIGN1c3RvbSBmaWVsZDogJHtlcnJvci5tZXNzYWdlfWAgfV0sXG4gICAgICAgICAgaXNFcnJvcjogdHJ1ZVxuICAgICAgICB9O1xuICAgICAgfVxuICAgIH1cbiAgKTtcblxuICBzZXJ2ZXIudG9vbChcbiAgICAnY3JlYXRlX2NoZWNrYm94X2N1c3RvbV9maWVsZCcsXG4gICAgJ0NyZWF0ZSBhIGNoZWNrYm94IChib29sZWFuKSBjdXN0b20gZmllbGQgd2l0aCBvcHRpb25hbCBkZWZhdWx0IHZhbHVlLicsXG4gICAge1xuICAgICAgY29udGFpbmVyX3R5cGU6IHouZW51bShbJ2xpc3QnLCAnZm9sZGVyJywgJ3NwYWNlJ10pLmRlc2NyaWJlKCdUaGUgdHlwZSBvZiBjb250YWluZXInKSxcbiAgICAgIGNvbnRhaW5lcl9pZDogei5zdHJpbmcoKS5taW4oMSkuZGVzY3JpYmUoJ1RoZSBJRCBvZiB0aGUgY29udGFpbmVyJyksXG4gICAgICBuYW1lOiB6LnN0cmluZygpLm1pbigxKS5tYXgoMjU1KS5kZXNjcmliZSgnVGhlIG5hbWUgb2YgdGhlIGNoZWNrYm94IGZpZWxkJyksXG4gICAgICBkZWZhdWx0X3ZhbHVlOiB6LmJvb2xlYW4oKS5vcHRpb25hbCgpLmRlZmF1bHQoZmFsc2UpLmRlc2NyaWJlKCdEZWZhdWx0IGNoZWNrYm94IHN0YXRlJyksXG4gICAgICByZXF1aXJlZDogei5ib29sZWFuKCkub3B0aW9uYWwoKS5kZWZhdWx0KGZhbHNlKS5kZXNjcmliZSgnV2hldGhlciB0aGUgZmllbGQgaXMgcmVxdWlyZWQnKSxcbiAgICAgIGhpZGVfZnJvbV9ndWVzdHM6IHouYm9vbGVhbigpLm9wdGlvbmFsKCkuZGVmYXVsdChmYWxzZSkuZGVzY3JpYmUoJ1doZXRoZXIgdG8gaGlkZSBmcm9tIGd1ZXN0cycpXG4gICAgfSxcbiAgICBhc3luYyAoeyBjb250YWluZXJfdHlwZSwgY29udGFpbmVyX2lkLCBuYW1lLCBkZWZhdWx0X3ZhbHVlLCByZXF1aXJlZCwgaGlkZV9mcm9tX2d1ZXN0cyB9KSA9PiB7XG4gICAgICB0cnkge1xuICAgICAgICBjb25zdCB0eXBlX2NvbmZpZyA9IHtcbiAgICAgICAgICBkZWZhdWx0OiBkZWZhdWx0X3ZhbHVlXG4gICAgICAgIH07XG5cbiAgICAgICAgY29uc3QgZmllbGRQYXJhbXMgPSB7XG4gICAgICAgICAgbmFtZSxcbiAgICAgICAgICB0eXBlOiAnY2hlY2tib3gnIGFzIEN1c3RvbUZpZWxkVHlwZSxcbiAgICAgICAgICB0eXBlX2NvbmZpZyxcbiAgICAgICAgICByZXF1aXJlZCxcbiAgICAgICAgICBoaWRlX2Zyb21fZ3Vlc3RzXG4gICAgICAgIH07XG5cbiAgICAgICAgbGV0IGZpZWxkO1xuICAgICAgICBzd2l0Y2ggKGNvbnRhaW5lcl90eXBlKSB7XG4gICAgICAgICAgY2FzZSAnbGlzdCc6XG4gICAgICAgICAgICBmaWVsZCA9IGF3YWl0IGN1c3RvbUZpZWxkc0NsaWVudC5jcmVhdGVMaXN0Q3VzdG9tRmllbGQoY29udGFpbmVyX2lkLCBmaWVsZFBhcmFtcyk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICBjYXNlICdmb2xkZXInOlxuICAgICAgICAgICAgZmllbGQgPSBhd2FpdCBjdXN0b21GaWVsZHNDbGllbnQuY3JlYXRlRm9sZGVyQ3VzdG9tRmllbGQoY29udGFpbmVyX2lkLCBmaWVsZFBhcmFtcyk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICBjYXNlICdzcGFjZSc6XG4gICAgICAgICAgICBmaWVsZCA9IGF3YWl0IGN1c3RvbUZpZWxkc0NsaWVudC5jcmVhdGVTcGFjZUN1c3RvbUZpZWxkKGNvbnRhaW5lcl9pZCwgZmllbGRQYXJhbXMpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIGNvbnRlbnQ6IFt7IFxuICAgICAgICAgICAgdHlwZTogJ3RleHQnLCBcbiAgICAgICAgICAgIHRleHQ6IGBDaGVja2JveCBjdXN0b20gZmllbGQgY3JlYXRlZCBzdWNjZXNzZnVsbHkhXFxuXFxuJHtKU09OLnN0cmluZ2lmeShmaWVsZCwgbnVsbCwgMil9YCBcbiAgICAgICAgICB9XVxuICAgICAgICB9O1xuICAgICAgfSBjYXRjaCAoZXJyb3I6IGFueSkge1xuICAgICAgICBjb25zb2xlLmVycm9yKCdFcnJvciBjcmVhdGluZyBjaGVja2JveCBjdXN0b20gZmllbGQ6JywgZXJyb3IpO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIGNvbnRlbnQ6IFt7IHR5cGU6ICd0ZXh0JywgdGV4dDogYEVycm9yIGNyZWF0aW5nIGNoZWNrYm94IGN1c3RvbSBmaWVsZDogJHtlcnJvci5tZXNzYWdlfWAgfV0sXG4gICAgICAgICAgaXNFcnJvcjogdHJ1ZVxuICAgICAgICB9O1xuICAgICAgfVxuICAgIH1cbiAgKTtcblxuICAvLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gIC8vIEZJRUxEIFZBTFVFIFZBTElEQVRJT04gSEVMUEVSXG4gIC8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cblxuICBzZXJ2ZXIudG9vbChcbiAgICAndmFsaWRhdGVfY3VzdG9tX2ZpZWxkX3ZhbHVlJyxcbiAgICAnVmFsaWRhdGUgYSBjdXN0b20gZmllbGQgdmFsdWUgYWdhaW5zdCBpdHMgZmllbGQgdHlwZSBhbmQgY29uZmlndXJhdGlvbi4gVXNlZnVsIGZvciBjaGVja2luZyB2YWx1ZXMgYmVmb3JlIHNldHRpbmcgdGhlbS4nLFxuICAgIHtcbiAgICAgIGZpZWxkX2lkOiB6LnN0cmluZygpLm1pbigxKS5kZXNjcmliZSgnVGhlIElEIG9mIHRoZSBjdXN0b20gZmllbGQnKSxcbiAgICAgIGNvbnRhaW5lcl90eXBlOiB6LmVudW0oWydsaXN0JywgJ2ZvbGRlcicsICdzcGFjZSddKS5kZXNjcmliZSgnVGhlIHR5cGUgb2YgY29udGFpbmVyIHRoZSBmaWVsZCBiZWxvbmdzIHRvJyksXG4gICAgICBjb250YWluZXJfaWQ6IHouc3RyaW5nKCkubWluKDEpLmRlc2NyaWJlKCdUaGUgSUQgb2YgdGhlIGNvbnRhaW5lcicpLFxuICAgICAgdmFsdWU6IHouYW55KCkuZGVzY3JpYmUoJ1RoZSB2YWx1ZSB0byB2YWxpZGF0ZScpXG4gICAgfSxcbiAgICBhc3luYyAoeyBmaWVsZF9pZCwgY29udGFpbmVyX3R5cGUsIGNvbnRhaW5lcl9pZCwgdmFsdWUgfSkgPT4ge1xuICAgICAgdHJ5IHtcbiAgICAgICAgLy8gR2V0IHRoZSBmaWVsZCBkZWZpbml0aW9uIGZpcnN0XG4gICAgICAgIGxldCBmaWVsZHM7XG4gICAgICAgIHN3aXRjaCAoY29udGFpbmVyX3R5cGUpIHtcbiAgICAgICAgICBjYXNlICdsaXN0JzpcbiAgICAgICAgICAgIGZpZWxkcyA9IGF3YWl0IGN1c3RvbUZpZWxkc0NsaWVudC5nZXRMaXN0Q3VzdG9tRmllbGRzKGNvbnRhaW5lcl9pZCk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICBjYXNlICdmb2xkZXInOlxuICAgICAgICAgICAgZmllbGRzID0gYXdhaXQgY3VzdG9tRmllbGRzQ2xpZW50LmdldEZvbGRlckN1c3RvbUZpZWxkcyhjb250YWluZXJfaWQpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgY2FzZSAnc3BhY2UnOlxuICAgICAgICAgICAgZmllbGRzID0gYXdhaXQgY3VzdG9tRmllbGRzQ2xpZW50LmdldFNwYWNlQ3VzdG9tRmllbGRzKGNvbnRhaW5lcl9pZCk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IGZpZWxkID0gZmllbGRzLmZpbmQoZiA9PiBmLmlkID09PSBmaWVsZF9pZCk7XG4gICAgICAgIGlmICghZmllbGQpIHtcbiAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgY29udGVudDogW3sgdHlwZTogJ3RleHQnLCB0ZXh0OiBgRXJyb3I6IEN1c3RvbSBmaWVsZCAke2ZpZWxkX2lkfSBub3QgZm91bmQgaW4gJHtjb250YWluZXJfdHlwZX0gJHtjb250YWluZXJfaWR9YCB9XSxcbiAgICAgICAgICAgIGlzRXJyb3I6IHRydWVcbiAgICAgICAgICB9O1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gVmFsaWRhdGUgdGhlIHZhbHVlXG4gICAgICAgIGNvbnN0IGlzVmFsaWQgPSBjdXN0b21GaWVsZHNDbGllbnQudmFsaWRhdGVGaWVsZFZhbHVlKGZpZWxkLCB2YWx1ZSk7XG4gICAgICAgIFxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIGNvbnRlbnQ6IFt7IFxuICAgICAgICAgICAgdHlwZTogJ3RleHQnLCBcbiAgICAgICAgICAgIHRleHQ6IGBWYWxpZGF0aW9uIHJlc3VsdCBmb3IgZmllbGQgXCIke2ZpZWxkLm5hbWV9XCIgKCR7ZmllbGQudHlwZX0pOlxcblxcblZhbHVlOiAke0pTT04uc3RyaW5naWZ5KHZhbHVlKX1cXG5WYWxpZDogJHtpc1ZhbGlkfVxcblxcbkZpZWxkIENvbmZpZ3VyYXRpb246XFxuJHtKU09OLnN0cmluZ2lmeShmaWVsZC50eXBlX2NvbmZpZywgbnVsbCwgMil9YCBcbiAgICAgICAgICB9XVxuICAgICAgICB9O1xuICAgICAgfSBjYXRjaCAoZXJyb3I6IGFueSkge1xuICAgICAgICBjb25zb2xlLmVycm9yKCdFcnJvciB2YWxpZGF0aW5nIGN1c3RvbSBmaWVsZCB2YWx1ZTonLCBlcnJvcik7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgY29udGVudDogW3sgdHlwZTogJ3RleHQnLCB0ZXh0OiBgRXJyb3IgdmFsaWRhdGluZyBjdXN0b20gZmllbGQgdmFsdWU6ICR7ZXJyb3IubWVzc2FnZX1gIH1dLFxuICAgICAgICAgIGlzRXJyb3I6IHRydWVcbiAgICAgICAgfTtcbiAgICAgIH1cbiAgICB9XG4gICk7XG59XG4iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7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
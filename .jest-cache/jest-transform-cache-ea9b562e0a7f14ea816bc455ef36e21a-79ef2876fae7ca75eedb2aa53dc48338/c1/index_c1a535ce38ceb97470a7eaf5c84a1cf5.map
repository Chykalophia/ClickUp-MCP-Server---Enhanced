{"file":"/Users/peterkrzyzek/Development/clickup-mcp-server/src/clickup-client/index.ts","mappings":";;;;;;AAAA,kDAA6C;AAE7C,uBAAuB;AACvB,MAAM,YAAY,GAAG,gCAAgC,CAAC;AAOtD,MAAa,aAAa;IAGxB,YAAY,MAA2B;QACrC,IAAI,CAAC,MAAM,CAAC,QAAQ,EAAE,CAAC;YACrB,MAAM,IAAI,KAAK,CAAC,+BAA+B,CAAC,CAAC;QACnD,CAAC;QAED,IAAI,CAAC,aAAa,GAAG,eAAK,CAAC,MAAM,CAAC;YAChC,OAAO,EAAE,MAAM,CAAC,OAAO,IAAI,YAAY;YACvC,OAAO,EAAE;gBACP,QAAQ,EAAE,kBAAkB;gBAC5B,cAAc,EAAE,kBAAkB;gBAClC,eAAe,EAAE,MAAM,CAAC,QAAQ;aACjC;SACF,CAAC,CAAC;QAEH,8CAA8C;QAC9C,IAAI,CAAC,aAAa,CAAC,YAAY,CAAC,QAAQ,CAAC,GAAG,CAC1C,QAAQ,CAAC,EAAE,CAAC,QAAQ,EACpB,KAAK,CAAC,EAAE;YACN,IAAI,KAAK,CAAC,QAAQ,EAAE,CAAC;gBACnB,4CAA4C;gBAC5C,MAAM,OAAO,GAAG,sBAAsB,KAAK,CAAC,QAAQ,CAAC,MAAM,MACzD,KAAK,CAAC,QAAQ,CAAC,IAAI,EAAE,GAAG,IAAI,KAAK,CAAC,OACpC,EAAE,CAAC;gBACH,KAAK,CAAC,OAAO,GAAG,OAAO,CAAC;YAC1B,CAAC;YACD,OAAO,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;QAC/B,CAAC,CACF,CAAC;IACJ,CAAC;IAED,mEAAmE;IACnE,gBAAgB;QACd,OAAO,IAAI,CAAC,aAAa,CAAC;IAC5B,CAAC;IAED,8CAA8C;IAC9C,KAAK,CAAC,GAAG,CAAU,QAAgB,EAAE,MAAY;QAC/C,MAAM,QAAQ,GAAG,MAAM,IAAI,CAAC,aAAa,CAAC,GAAG,CAAC,QAAQ,EAAE,EAAE,MAAM,EAAE,CAAC,CAAC;QACpE,OAAO,QAAQ,CAAC,IAAI,CAAC;IACvB,CAAC;IAED,KAAK,CAAC,IAAI,CAAU,QAAgB,EAAE,IAAU;QAC9C,MAAM,QAAQ,GAAG,MAAM,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,QAAQ,EAAE,IAAI,CAAC,CAAC;QAC/D,OAAO,QAAQ,CAAC,IAAI,CAAC;IACvB,CAAC;IAED,KAAK,CAAC,GAAG,CAAU,QAAgB,EAAE,IAAU;QAC7C,MAAM,QAAQ,GAAG,MAAM,IAAI,CAAC,aAAa,CAAC,GAAG,CAAC,QAAQ,EAAE,IAAI,CAAC,CAAC;QAC9D,OAAO,QAAQ,CAAC,IAAI,CAAC;IACvB,CAAC;IAED,KAAK,CAAC,MAAM,CAAU,QAAgB;QACpC,MAAM,QAAQ,GAAG,MAAM,IAAI,CAAC,aAAa,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC;QAC3D,OAAO,QAAQ,CAAC,IAAI,CAAC;IACvB,CAAC;CACF;AA1DD,sCA0DC;AAED,0DAA0D;AACnD,MAAM,mBAAmB,GAAG,GAAkB,EAAE;IACrD,MAAM,QAAQ,GAAG,OAAO,CAAC,GAAG,CAAC,iBAAiB,CAAC;IAE/C,IAAI,CAAC,QAAQ,EAAE,CAAC;QACd,MAAM,IAAI,KAAK,CAAC,oDAAoD,CAAC,CAAC;IACxE,CAAC;IAED,OAAO,IAAI,aAAa,CAAC,EAAE,QAAQ,EAAE,CAAC,CAAC;AACzC,CAAC,CAAC;AARW,QAAA,mBAAmB,uBAQ9B","names":[],"sources":["/Users/peterkrzyzek/Development/clickup-mcp-server/src/clickup-client/index.ts"],"sourcesContent":["import axios, { AxiosInstance } from 'axios';\n\n// ClickUp API base URL\nconst API_BASE_URL = 'https://api.clickup.com/api/v2';\n\nexport interface ClickUpClientConfig {\n  apiToken: string;\n  baseUrl?: string;\n}\n\nexport class ClickUpClient {\n  private axiosInstance: AxiosInstance;\n  \n  constructor(config: ClickUpClientConfig) {\n    if (!config.apiToken) {\n      throw new Error('ClickUp API token is required');\n    }\n\n    this.axiosInstance = axios.create({\n      baseURL: config.baseUrl || API_BASE_URL,\n      headers: {\n        'accept': 'application/json',\n        'content-type': 'application/json',\n        'Authorization': config.apiToken\n      }\n    });\n\n    // Add response interceptor for error handling\n    this.axiosInstance.interceptors.response.use(\n      response => response,\n      error => {\n        if (error.response) {\n          // Format error message with status and data\n          const message = `ClickUp API Error (${error.response.status}): ${\n            error.response.data?.err || error.message\n          }`;\n          error.message = message;\n        }\n        return Promise.reject(error);\n      }\n    );\n  }\n\n  // Helper method to get the axios instance for use in other modules\n  getAxiosInstance(): AxiosInstance {\n    return this.axiosInstance;\n  }\n\n  // Basic API methods that can be used directly\n  async get<T = any>(endpoint: string, params?: any): Promise<T> {\n    const response = await this.axiosInstance.get(endpoint, { params });\n    return response.data;\n  }\n\n  async post<T = any>(endpoint: string, data?: any): Promise<T> {\n    const response = await this.axiosInstance.post(endpoint, data);\n    return response.data;\n  }\n\n  async put<T = any>(endpoint: string, data?: any): Promise<T> {\n    const response = await this.axiosInstance.put(endpoint, data);\n    return response.data;\n  }\n\n  async delete<T = any>(endpoint: string): Promise<T> {\n    const response = await this.axiosInstance.delete(endpoint);\n    return response.data;\n  }\n}\n\n// Create a singleton instance using environment variables\nexport const createClickUpClient = (): ClickUpClient => {\n  const apiToken = process.env.CLICKUP_API_TOKEN;\n  \n  if (!apiToken) {\n    throw new Error('CLICKUP_API_TOKEN environment variable is required');\n  }\n  \n  return new ClickUpClient({ apiToken });\n};\n"],"version":3}
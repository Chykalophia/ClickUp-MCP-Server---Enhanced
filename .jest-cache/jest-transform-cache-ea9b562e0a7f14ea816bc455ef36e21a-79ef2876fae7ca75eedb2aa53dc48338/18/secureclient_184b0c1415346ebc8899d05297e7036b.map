{"version":3,"names":["cov_gnc8p84ru","actualCoverage","axios","validateApiToken","sanitizeInput","rateLimiter","DEFAULT_RATE_LIMITS","handleClickUpApiError","RetryManager","generateRequestId","API_BASE_URL","s","SecureClickUpClient","constructor","config","f","tokenValidation","apiToken","isValid","b","Error","error","enableRateLimit","userAgent","retryManager","maxRetries","axiosInstance","create","baseURL","baseUrl","timeout","headers","interceptors","request","use","requestId","rateLimitKey","url","isAllowed","api","data","params","Promise","reject","response","process","env","NODE_ENV","console","debug","method","toUpperCase","status","structuredError","operation","message","get","endpoint","executeWithRetry","operationName","post","put","delete","patch","uploadFile","file","additionalData","validateFileUpload","validation","filename","mimetype","Buffer","isBuffer","length","errors","join","upload","formData","FormData","blob","Blob","type","append","Object","entries","forEach","key","value","String","batchRequests","requests","options","concurrency","failFast","results","i","batch","slice","batchPromises","map","success","errorMessage","batchResults","all","push","healthCheck","startTime","Date","now","latency","timestamp","toISOString","getStats","totalRequests","rateLimitEnabled","defaults","updateConfig","undefined","destroy","reset","createSecureClickUpClient","CLICKUP_API_TOKEN"],"sources":["/Users/peterkrzyzek/Development/clickup-mcp-server/src/clickup-client/secure-client.ts"],"sourcesContent":["import axios, { AxiosInstance, AxiosRequestConfig } from 'axios';\nimport { validateApiToken, sanitizeInput, rateLimiter, DEFAULT_RATE_LIMITS } from '../utils/security.js';\nimport { handleClickUpApiError, RetryManager, generateRequestId } from '../utils/error-handling.js';\n\n// ClickUp API base URL\nconst API_BASE_URL = 'https://api.clickup.com/api/v2';\n\nexport interface SecureClickUpClientConfig {\n  apiToken: string;\n  baseUrl?: string;\n  timeout?: number;\n  maxRetries?: number;\n  enableRateLimit?: boolean;\n  userAgent?: string;\n}\n\nexport class SecureClickUpClient {\n  private axiosInstance: AxiosInstance;\n  private retryManager: RetryManager;\n  private enableRateLimit: boolean;\n  private userAgent: string;\n  \n  constructor(config: SecureClickUpClientConfig) {\n    // Validate API token\n    const tokenValidation = validateApiToken(config.apiToken);\n    if (!tokenValidation.isValid) {\n      throw new Error(`Invalid API token: ${tokenValidation.error}`);\n    }\n\n    this.enableRateLimit = config.enableRateLimit ?? true;\n    this.userAgent = config.userAgent || 'ClickUp-MCP-Server/3.0.0';\n    this.retryManager = new RetryManager(config.maxRetries || 3);\n\n    this.axiosInstance = axios.create({\n      baseURL: config.baseUrl || API_BASE_URL,\n      timeout: config.timeout || 30000, // 30 second timeout\n      headers: {\n        'Authorization': config.apiToken,\n        'Content-Type': 'application/json',\n        'User-Agent': this.userAgent,\n        'Accept': 'application/json',\n        'X-Requested-With': 'XMLHttpRequest'\n      }\n    });\n\n    // Add request interceptor for security and rate limiting\n    this.axiosInstance.interceptors.request.use(\n      (config) => {\n        // Generate request ID for tracking\n        const requestId = generateRequestId();\n        config.headers['X-Request-ID'] = requestId;\n        \n        // Rate limiting\n        if (this.enableRateLimit) {\n          const rateLimitKey = `api_${config.url}`;\n          if (!rateLimiter.isAllowed(rateLimitKey, DEFAULT_RATE_LIMITS.api)) {\n            throw new Error('Rate limit exceeded. Please slow down your requests.');\n          }\n        }\n\n        // Sanitize request data\n        if (config.data) {\n          config.data = sanitizeInput(config.data);\n        }\n\n        // Sanitize query parameters\n        if (config.params) {\n          config.params = sanitizeInput(config.params);\n        }\n\n        return config;\n      },\n      (error) => Promise.reject(error)\n    );\n\n    // Add response interceptor for error handling\n    this.axiosInstance.interceptors.response.use(\n      (response) => {\n        // Log successful requests in debug mode\n        if (process.env.NODE_ENV === 'development') {\n          console.debug(`[${response.config.headers['X-Request-ID']}] ${response.config.method?.toUpperCase()} ${response.config.url} - ${response.status}`);\n        }\n        return response;\n      },\n      (error) => {\n        const requestId = error.config?.headers?.['X-Request-ID'];\n        const structuredError = handleClickUpApiError(error, {\n          operation: `${error.config?.method?.toUpperCase()} ${error.config?.url}`,\n          requestId\n        });\n        \n        // Log error\n        console.error(`[${requestId}] API Error:`, structuredError.message);\n        \n        return Promise.reject(structuredError);\n      }\n    );\n  }\n\n  /**\n   * Secure GET request with retry logic\n   */\n  async get<T = any>(endpoint: string, params?: any, config?: AxiosRequestConfig): Promise<T> {\n    return this.retryManager.executeWithRetry(async () => {\n      const response = await this.axiosInstance.get(endpoint, { \n        params: sanitizeInput(params), \n        ...config \n      });\n      return response.data;\n    }, { operationName: `GET ${endpoint}` });\n  }\n\n  /**\n   * Secure POST request with retry logic\n   */\n  async post<T = any>(endpoint: string, data?: any, config?: AxiosRequestConfig): Promise<T> {\n    return this.retryManager.executeWithRetry(async () => {\n      const response = await this.axiosInstance.post(endpoint, sanitizeInput(data), config);\n      return response.data;\n    }, { operationName: `POST ${endpoint}` });\n  }\n\n  /**\n   * Secure PUT request with retry logic\n   */\n  async put<T = any>(endpoint: string, data?: any, config?: AxiosRequestConfig): Promise<T> {\n    return this.retryManager.executeWithRetry(async () => {\n      const response = await this.axiosInstance.put(endpoint, sanitizeInput(data), config);\n      return response.data;\n    }, { operationName: `PUT ${endpoint}` });\n  }\n\n  /**\n   * Secure DELETE request with retry logic\n   */\n  async delete<T = any>(endpoint: string, config?: AxiosRequestConfig): Promise<T> {\n    return this.retryManager.executeWithRetry(async () => {\n      const response = await this.axiosInstance.delete(endpoint, config);\n      return response.data;\n    }, { operationName: `DELETE ${endpoint}` });\n  }\n\n  /**\n   * Secure PATCH request with retry logic\n   */\n  async patch<T = any>(endpoint: string, data?: any, config?: AxiosRequestConfig): Promise<T> {\n    return this.retryManager.executeWithRetry(async () => {\n      const response = await this.axiosInstance.patch(endpoint, sanitizeInput(data), config);\n      return response.data;\n    }, { operationName: `PATCH ${endpoint}` });\n  }\n\n  /**\n   * Upload file securely with validation\n   */\n  async uploadFile<T = any>(\n    endpoint: string, \n    file: {\n      filename: string;\n      data: Buffer | string;\n      mimetype?: string;\n    },\n    additionalData?: Record<string, any>\n  ): Promise<T> {\n    // Validate file upload\n    const { validateFileUpload } = await import('../utils/security.js');\n    const validation = validateFileUpload(file.filename, file.mimetype, \n      Buffer.isBuffer(file.data) ? file.data.length : file.data.length);\n    \n    if (!validation.isValid) {\n      throw new Error(`File upload validation failed: ${validation.errors.join(', ')}`);\n    }\n\n    // Rate limit file uploads more strictly\n    if (this.enableRateLimit) {\n      const rateLimitKey = `upload_${endpoint}`;\n      if (!rateLimiter.isAllowed(rateLimitKey, DEFAULT_RATE_LIMITS.upload)) {\n        throw new Error('Upload rate limit exceeded. Please wait before uploading more files.');\n      }\n    }\n\n    const formData = new FormData();\n    \n    // Add file\n    const blob = new Blob([file.data], { type: file.mimetype });\n    formData.append('file', blob, file.filename);\n    \n    // Add additional data\n    if (additionalData) {\n      Object.entries(sanitizeInput(additionalData)).forEach(([key, value]) => {\n        formData.append(key, String(value));\n      });\n    }\n\n    return this.retryManager.executeWithRetry(async () => {\n      const response = await this.axiosInstance.post(endpoint, formData, {\n        headers: {\n          'Content-Type': 'multipart/form-data'\n        },\n        timeout: 120000 // 2 minute timeout for uploads\n      });\n      return response.data;\n    }, { operationName: `UPLOAD ${endpoint}` });\n  }\n\n  /**\n   * Batch requests with concurrency control\n   */\n  async batchRequests<T>(\n    requests: Array<{\n      method: 'GET' | 'POST' | 'PUT' | 'DELETE' | 'PATCH';\n      endpoint: string;\n      data?: any;\n      params?: any;\n    }>,\n    options: {\n      concurrency?: number;\n      failFast?: boolean;\n    } = {}\n  ): Promise<Array<{ success: boolean; data?: T; error?: string }>> {\n    const { concurrency = 5, failFast = false } = options;\n    const results: Array<{ success: boolean; data?: T; error?: string }> = [];\n    \n    // Process requests in batches\n    for (let i = 0; i < requests.length; i += concurrency) {\n      const batch = requests.slice(i, i + concurrency);\n      \n      const batchPromises = batch.map(async (request) => {\n        try {\n          let data: T;\n          \n          switch (request.method) {\n            case 'GET':\n              data = await this.get<T>(request.endpoint, request.params);\n              break;\n            case 'POST':\n              data = await this.post<T>(request.endpoint, request.data);\n              break;\n            case 'PUT':\n              data = await this.put<T>(request.endpoint, request.data);\n              break;\n            case 'DELETE':\n              data = await this.delete<T>(request.endpoint);\n              break;\n            case 'PATCH':\n              data = await this.patch<T>(request.endpoint, request.data);\n              break;\n            default:\n              throw new Error(`Unsupported method: ${request.method}`);\n          }\n          \n          return { success: true, data };\n        } catch (error) {\n          const errorMessage = error instanceof Error ? error.message : 'Unknown error';\n          \n          if (failFast) {\n            throw error;\n          }\n          \n          return { success: false, error: errorMessage };\n        }\n      });\n      \n      const batchResults = await Promise.all(batchPromises);\n      results.push(...batchResults);\n    }\n    \n    return results;\n  }\n\n  /**\n   * Health check endpoint\n   */\n  async healthCheck(): Promise<{\n    status: 'healthy' | 'unhealthy';\n    latency: number;\n    timestamp: string;\n  }> {\n    const startTime = Date.now();\n    \n    try {\n      // Simple API call to check connectivity\n      await this.get('/user');\n      const latency = Date.now() - startTime;\n      \n      return {\n        status: 'healthy',\n        latency,\n        timestamp: new Date().toISOString()\n      };\n    } catch (error) {\n      return {\n        status: 'unhealthy',\n        latency: Date.now() - startTime,\n        timestamp: new Date().toISOString()\n      };\n    }\n  }\n\n  /**\n   * Get client statistics\n   */\n  getStats(): {\n    totalRequests: number;\n    rateLimitEnabled: boolean;\n    userAgent: string;\n    baseUrl: string;\n  } {\n    return {\n      totalRequests: 0, // Would need to implement request counting\n      rateLimitEnabled: this.enableRateLimit,\n      userAgent: this.userAgent,\n      baseUrl: this.axiosInstance.defaults.baseURL || API_BASE_URL\n    };\n  }\n\n  /**\n   * Update configuration\n   */\n  updateConfig(config: Partial<SecureClickUpClientConfig>): void {\n    if (config.apiToken) {\n      const tokenValidation = validateApiToken(config.apiToken);\n      if (!tokenValidation.isValid) {\n        throw new Error(`Invalid API token: ${tokenValidation.error}`);\n      }\n      this.axiosInstance.defaults.headers['Authorization'] = config.apiToken;\n    }\n\n    if (config.timeout) {\n      this.axiosInstance.defaults.timeout = config.timeout;\n    }\n\n    if (config.userAgent) {\n      this.userAgent = config.userAgent;\n      this.axiosInstance.defaults.headers['User-Agent'] = config.userAgent;\n    }\n\n    if (config.enableRateLimit !== undefined) {\n      this.enableRateLimit = config.enableRateLimit;\n    }\n  }\n\n  /**\n   * Cleanup resources\n   */\n  destroy(): void {\n    // Clear any pending requests\n    this.axiosInstance.defaults.timeout = 1;\n    \n    // Reset rate limiter\n    rateLimiter.reset();\n  }\n}\n\n// Create secure client factory\nexport const createSecureClickUpClient = (config?: Partial<SecureClickUpClientConfig>): SecureClickUpClient => {\n  const apiToken = config?.apiToken || process.env.CLICKUP_API_TOKEN;\n  \n  if (!apiToken) {\n    throw new Error('CLICKUP_API_TOKEN environment variable is required');\n  }\n  \n  return new SecureClickUpClient({\n    apiToken,\n    ...config\n  });\n};\n"],"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","ignoreList":[]}
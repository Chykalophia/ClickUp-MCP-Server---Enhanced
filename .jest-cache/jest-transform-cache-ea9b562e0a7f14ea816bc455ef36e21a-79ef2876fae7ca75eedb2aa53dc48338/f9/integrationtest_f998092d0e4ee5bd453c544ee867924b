fb6db0b9494c329223f131c8bad49063
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const globals_1 = require("@jest/globals");
const index_js_1 = require("../clickup-client/index.js");
const security_js_1 = require("../utils/security.js");
const error_handling_js_1 = require("../utils/error-handling.js");
// Mock ClickUp API responses
const mockApiResponses = {
    workspaces: {
        teams: [
            {
                id: '123',
                name: 'Test Workspace',
                color: '#7b68ee',
                avatar: null,
                members: []
            }
        ]
    },
    tasks: {
        tasks: [
            {
                id: 'task123',
                name: 'Test Task',
                description: 'Test task description',
                status: {
                    status: 'Open',
                    color: '#d3d3d3',
                    type: 'open'
                },
                orderindex: '1.00000000000000000000000000000000',
                date_created: '1234567890000',
                date_updated: '1234567890000',
                date_closed: null,
                creator: {
                    id: 456,
                    username: 'testuser',
                    color: '#7b68ee',
                    email: 'test@example.com'
                },
                assignees: [],
                watchers: [],
                checklists: [],
                tags: [],
                parent: null,
                priority: null,
                due_date: null,
                start_date: null,
                points: null,
                time_estimate: null,
                custom_fields: [],
                dependencies: [],
                linked_tasks: [],
                team_id: '123',
                url: 'https://app.clickup.com/t/task123',
                permission_level: 'create'
            }
        ]
    }
};
(0, globals_1.describe)('Integration Tests', () => {
    let mockAxios;
    (0, globals_1.beforeAll)(() => {
        // Mock environment variables
        process.env.CLICKUP_API_TOKEN = 'pk_test_token_1234567890abcdef';
        // Create mock axios instance
        mockAxios = {
            get: globals_1.jest.fn(),
            post: globals_1.jest.fn(),
            put: globals_1.jest.fn(),
            delete: globals_1.jest.fn(),
            create: globals_1.jest.fn().mockReturnThis(),
            interceptors: {
                response: {
                    use: globals_1.jest.fn()
                }
            }
        };
        // Mock axios module
        globals_1.jest.mock('axios', () => ({
            create: globals_1.jest.fn(() => mockAxios)
        }));
    });
    (0, globals_1.afterAll)(() => {
        globals_1.jest.restoreAllMocks();
    });
    (0, globals_1.describe)('ClickUp Client Integration', () => {
        (0, globals_1.it)('should create client with valid token', () => {
            const client = new index_js_1.ClickUpClient({ apiToken: 'pk_test_token_1234567890abcdef' });
            (0, globals_1.expect)(client).toBeDefined();
        });
        (0, globals_1.it)('should reject invalid token', () => {
            (0, globals_1.expect)(() => {
                new index_js_1.ClickUpClient({ apiToken: '' });
            }).toThrow('ClickUp API token is required');
        });
        (0, globals_1.it)('should make GET request', async () => {
            mockAxios.get.mockResolvedValueOnce({ data: mockApiResponses.workspaces });
            const client = new index_js_1.ClickUpClient({ apiToken: 'pk_test_token_1234567890abcdef' });
            const result = await client.get('/team');
            (0, globals_1.expect)(result).toEqual(mockApiResponses.workspaces);
            (0, globals_1.expect)(mockAxios.get).toHaveBeenCalledWith('/team', { params: undefined });
        });
        (0, globals_1.it)('should make POST request', async () => {
            const postData = { name: 'Test Task' };
            mockAxios.post.mockResolvedValueOnce({ data: { success: true } });
            const client = new index_js_1.ClickUpClient({ apiToken: 'pk_test_token_1234567890abcdef' });
            const result = await client.post('/task', postData);
            (0, globals_1.expect)(result).toEqual({ success: true });
            (0, globals_1.expect)(mockAxios.post).toHaveBeenCalledWith('/task', postData);
        });
    });
    (0, globals_1.describe)('Webhook Processing Integration', () => {
        (0, globals_1.it)('should validate webhook signature correctly', () => {
            const payload = '{"test": "data"}';
            const secret = 'test-secret';
            const crypto = require('crypto');
            const signature = crypto.createHmac('sha256', secret).update(payload).digest('hex');
            const result = (0, security_js_1.validateWebhookSignature)(payload, `sha256=${signature}`, secret);
            (0, globals_1.expect)(result.isValid).toBe(true);
        });
        (0, globals_1.it)('should reject invalid webhook signature', () => {
            const payload = '{"test": "data"}';
            const secret = 'test-secret';
            const invalidSignature = 'invalid-signature';
            const result = (0, security_js_1.validateWebhookSignature)(payload, invalidSignature, secret);
            (0, globals_1.expect)(result.isValid).toBe(false);
            (0, globals_1.expect)(result.error).toContain('Invalid signature format');
        });
        (0, globals_1.it)('should process webhook payload correctly', () => {
            const webhookPayload = {
                id: 90110164070264,
                hist_id: "4697736615798917760",
                date: 1755803061841,
                version: {
                    object_type: "comment",
                    object_id: "90110164070264",
                    workspace_id: 14168111,
                    operation: "c",
                    data: {
                        context: {
                            root_parent_type: 1,
                            is_chat: false,
                            audit_context: {
                                userid: 38366580,
                                current_time: 1755803061674,
                                route: "*"
                            },
                            originating_service: "publicapi"
                        },
                        relationships: [
                            {
                                type: "comment-author",
                                object_type: "user",
                                object_id: 38366580,
                                workspace_id: "14168111"
                            },
                            {
                                type: "comment-parent",
                                object_type: "task",
                                object_id: "868f9p6ad",
                                workspace_id: "14168111"
                            }
                        ],
                        changes: [
                            {
                                field: "date_created",
                                after: 1755803061841
                            }
                        ]
                    },
                    master_id: 13,
                    version: 1755803061879000,
                    deleted: false,
                    traceparent: "6041334444293036127",
                    date_created: 1755803061879,
                    date_updated: 1755803061879,
                    event_publish_time: 1755803061900
                }
            };
            // Test payload structure
            (0, globals_1.expect)(webhookPayload.version.object_type).toBe('comment');
            (0, globals_1.expect)(webhookPayload.version.operation).toBe('c');
            (0, globals_1.expect)(webhookPayload.version.workspace_id).toBe(14168111);
            (0, globals_1.expect)(webhookPayload.version.data.context.audit_context.userid).toBe(38366580);
            (0, globals_1.expect)(webhookPayload.version.data.relationships).toHaveLength(2);
            (0, globals_1.expect)(webhookPayload.version.data.changes).toHaveLength(1);
        });
    });
    (0, globals_1.describe)('Error Handling Integration', () => {
        (0, globals_1.it)('should handle network timeouts', () => {
            const timeoutError = {
                code: 'ETIMEDOUT',
                message: 'Request timeout'
            };
            const structuredError = (0, error_handling_js_1.handleClickUpApiError)(timeoutError);
            (0, globals_1.expect)(structuredError.type).toBe('TIMEOUT');
            (0, globals_1.expect)(structuredError.retryable).toBe(true);
            (0, globals_1.expect)(structuredError.retryAfter).toBe(10);
        });
        (0, globals_1.it)('should handle rate limiting', () => {
            const rateLimitError = {
                response: {
                    status: 429,
                    data: { err: 'Rate limited' },
                    headers: { 'retry-after': '60' }
                }
            };
            const structuredError = (0, error_handling_js_1.handleClickUpApiError)(rateLimitError);
            (0, globals_1.expect)(structuredError.type).toBe('RATE_LIMIT');
            (0, globals_1.expect)(structuredError.retryable).toBe(true);
            (0, globals_1.expect)(structuredError.retryAfter).toBe(60);
        });
        (0, globals_1.it)('should handle authentication errors', () => {
            const authError = {
                response: {
                    status: 401,
                    data: { err: 'Invalid token' }
                }
            };
            const structuredError = (0, error_handling_js_1.handleClickUpApiError)(authError);
            (0, globals_1.expect)(structuredError.type).toBe('AUTHENTICATION');
            (0, globals_1.expect)(structuredError.severity).toBe('HIGH');
            (0, globals_1.expect)(structuredError.retryable).toBe(false);
        });
    });
    (0, globals_1.describe)('Security Integration', () => {
        (0, globals_1.it)('should validate API token format', () => {
            const { validateApiToken } = require('../utils/security.js');
            const validToken = validateApiToken('pk_1234567890abcdef');
            (0, globals_1.expect)(validToken.isValid).toBe(true);
            const invalidToken = validateApiToken('invalid');
            (0, globals_1.expect)(invalidToken.isValid).toBe(false);
            (0, globals_1.expect)(invalidToken.error).toContain('too short');
        });
        (0, globals_1.it)('should sanitize malicious input', () => {
            const { sanitizeInput } = require('../utils/security.js');
            const maliciousInput = '<script>alert("xss")</script>';
            const sanitized = sanitizeInput(maliciousInput);
            (0, globals_1.expect)(sanitized).not.toContain('<script>');
            (0, globals_1.expect)(sanitized).not.toContain('</script>');
        });
        (0, globals_1.it)('should validate file uploads securely', () => {
            const { validateFileUpload } = require('../utils/security.js');
            const safeFile = validateFileUpload('document.pdf', 'application/pdf', 1024);
            (0, globals_1.expect)(safeFile.isValid).toBe(true);
            const dangerousFile = validateFileUpload('malware.exe');
            (0, globals_1.expect)(dangerousFile.isValid).toBe(false);
            (0, globals_1.expect)(dangerousFile.errors).toContain('File type not allowed for security reasons');
            const pathTraversal = validateFileUpload('../../../etc/passwd');
            (0, globals_1.expect)(pathTraversal.isValid).toBe(false);
            (0, globals_1.expect)(pathTraversal.errors).toContain('Filename contains invalid path characters');
        });
        (0, globals_1.it)('should validate URLs securely', () => {
            const { validateUrl } = require('../utils/security.js');
            const validUrl = validateUrl('https://example.com/webhook');
            (0, globals_1.expect)(validUrl.isValid).toBe(true);
            const localhostUrl = validateUrl('http://localhost:3000/webhook');
            (0, globals_1.expect)(localhostUrl.isValid).toBe(false);
            (0, globals_1.expect)(localhostUrl.error).toContain('Private and localhost URLs are not allowed');
            const invalidProtocol = validateUrl('ftp://example.com/file');
            (0, globals_1.expect)(invalidProtocol.isValid).toBe(false);
            (0, globals_1.expect)(invalidProtocol.error).toContain('Only HTTP and HTTPS URLs are allowed');
        });
    });
    (0, globals_1.describe)('Performance Integration', () => {
        (0, globals_1.it)('should handle concurrent requests efficiently', async () => {
            const requests = Array.from({ length: 10 }, (_, i) => ({
                method: 'GET',
                endpoint: `/task/${i}`,
                data: undefined,
                params: undefined
            }));
            // Mock successful responses
            mockAxios.get.mockResolvedValue({ data: { success: true } });
            const startTime = Date.now();
            // Simulate batch processing
            const results = await Promise.all(requests.map(async (req) => {
                try {
                    const client = new index_js_1.ClickUpClient({ apiToken: 'pk_test_token_1234567890abcdef' });
                    const result = await client.get(req.endpoint, req.params);
                    return { success: true, data: result };
                }
                catch (error) {
                    return { success: false, error: error instanceof Error ? error.message : 'Unknown error' };
                }
            }));
            const duration = Date.now() - startTime;
            (0, globals_1.expect)(results).toHaveLength(10);
            (0, globals_1.expect)(results.every(r => r.success)).toBe(true);
            (0, globals_1.expect)(duration).toBeLessThan(1000); // Should complete within 1 second
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
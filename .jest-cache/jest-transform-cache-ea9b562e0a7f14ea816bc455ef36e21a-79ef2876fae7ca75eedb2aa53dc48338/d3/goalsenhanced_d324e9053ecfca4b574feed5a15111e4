cb006357b82e57962e17f7bb35407a98
/* istanbul ignore next */
function cov_24xqkfl5t1() {
  var path = "/Users/peterkrzyzek/Development/clickup-mcp-server/src/clickup-client/goals-enhanced.ts";
  var hash = "23bd25d318a5434c863769369f66308928ed12c7";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/peterkrzyzek/Development/clickup-mcp-server/src/clickup-client/goals-enhanced.ts",
    statementMap: {
      "0": {
        start: {
          line: 7,
          column: 8
        },
        end: {
          line: 7,
          column: 29
        }
      },
      "1": {
        start: {
          line: 10,
          column: 8
        },
        end: {
          line: 10,
          column: 46
        }
      },
      "2": {
        start: {
          line: 19,
          column: 8
        },
        end: {
          line: 30,
          column: 9
        }
      },
      "3": {
        start: {
          line: 20,
          column: 32
        },
        end: {
          line: 20,
          column: 53
        }
      },
      "4": {
        start: {
          line: 21,
          column: 12
        },
        end: {
          line: 22,
          column: 64
        }
      },
      "5": {
        start: {
          line: 22,
          column: 16
        },
        end: {
          line: 22,
          column: 64
        }
      },
      "6": {
        start: {
          line: 23,
          column: 29
        },
        end: {
          line: 23,
          column: 77
        }
      },
      "7": {
        start: {
          line: 24,
          column: 29
        },
        end: {
          line: 24,
          column: 72
        }
      },
      "8": {
        start: {
          line: 25,
          column: 12
        },
        end: {
          line: 25,
          column: 45
        }
      },
      "9": {
        start: {
          line: 28,
          column: 12
        },
        end: {
          line: 28,
          column: 57
        }
      },
      "10": {
        start: {
          line: 29,
          column: 12
        },
        end: {
          line: 29,
          column: 84
        }
      },
      "11": {
        start: {
          line: 36,
          column: 8
        },
        end: {
          line: 44,
          column: 9
        }
      },
      "12": {
        start: {
          line: 37,
          column: 29
        },
        end: {
          line: 37,
          column: 51
        }
      },
      "13": {
        start: {
          line: 38,
          column: 29
        },
        end: {
          line: 38,
          column: 81
        }
      },
      "14": {
        start: {
          line: 39,
          column: 12
        },
        end: {
          line: 39,
          column: 38
        }
      },
      "15": {
        start: {
          line: 42,
          column: 12
        },
        end: {
          line: 42,
          column: 57
        }
      },
      "16": {
        start: {
          line: 43,
          column: 12
        },
        end: {
          line: 43,
          column: 86
        }
      },
      "17": {
        start: {
          line: 50,
          column: 8
        },
        end: {
          line: 58,
          column: 9
        }
      },
      "18": {
        start: {
          line: 51,
          column: 29
        },
        end: {
          line: 51,
          column: 46
        }
      },
      "19": {
        start: {
          line: 52,
          column: 29
        },
        end: {
          line: 52,
          column: 80
        }
      },
      "20": {
        start: {
          line: 53,
          column: 12
        },
        end: {
          line: 53,
          column: 38
        }
      },
      "21": {
        start: {
          line: 56,
          column: 12
        },
        end: {
          line: 56,
          column: 57
        }
      },
      "22": {
        start: {
          line: 57,
          column: 12
        },
        end: {
          line: 57,
          column: 77
        }
      },
      "23": {
        start: {
          line: 64,
          column: 8
        },
        end: {
          line: 71,
          column: 9
        }
      },
      "24": {
        start: {
          line: 65,
          column: 29
        },
        end: {
          line: 65,
          column: 46
        }
      },
      "25": {
        start: {
          line: 66,
          column: 12
        },
        end: {
          line: 66,
          column: 59
        }
      },
      "26": {
        start: {
          line: 69,
          column: 12
        },
        end: {
          line: 69,
          column: 57
        }
      },
      "27": {
        start: {
          line: 70,
          column: 12
        },
        end: {
          line: 70,
          column: 77
        }
      },
      "28": {
        start: {
          line: 77,
          column: 8
        },
        end: {
          line: 85,
          column: 9
        }
      },
      "29": {
        start: {
          line: 78,
          column: 29
        },
        end: {
          line: 78,
          column: 46
        }
      },
      "30": {
        start: {
          line: 79,
          column: 29
        },
        end: {
          line: 79,
          column: 72
        }
      },
      "31": {
        start: {
          line: 80,
          column: 12
        },
        end: {
          line: 80,
          column: 38
        }
      },
      "32": {
        start: {
          line: 83,
          column: 12
        },
        end: {
          line: 83,
          column: 56
        }
      },
      "33": {
        start: {
          line: 84,
          column: 12
        },
        end: {
          line: 84,
          column: 74
        }
      },
      "34": {
        start: {
          line: 94,
          column: 8
        },
        end: {
          line: 102,
          column: 9
        }
      },
      "35": {
        start: {
          line: 95,
          column: 29
        },
        end: {
          line: 95,
          column: 53
        }
      },
      "36": {
        start: {
          line: 96,
          column: 29
        },
        end: {
          line: 96,
          column: 81
        }
      },
      "37": {
        start: {
          line: 97,
          column: 12
        },
        end: {
          line: 97,
          column: 40
        }
      },
      "38": {
        start: {
          line: 100,
          column: 12
        },
        end: {
          line: 100,
          column: 64
        }
      },
      "39": {
        start: {
          line: 101,
          column: 12
        },
        end: {
          line: 101,
          column: 88
        }
      },
      "40": {
        start: {
          line: 108,
          column: 8
        },
        end: {
          line: 116,
          column: 9
        }
      },
      "41": {
        start: {
          line: 109,
          column: 29
        },
        end: {
          line: 109,
          column: 65
        }
      },
      "42": {
        start: {
          line: 110,
          column: 29
        },
        end: {
          line: 110,
          column: 80
        }
      },
      "43": {
        start: {
          line: 111,
          column: 12
        },
        end: {
          line: 111,
          column: 40
        }
      },
      "44": {
        start: {
          line: 114,
          column: 12
        },
        end: {
          line: 114,
          column: 64
        }
      },
      "45": {
        start: {
          line: 115,
          column: 12
        },
        end: {
          line: 115,
          column: 100
        }
      },
      "46": {
        start: {
          line: 122,
          column: 8
        },
        end: {
          line: 129,
          column: 9
        }
      },
      "47": {
        start: {
          line: 123,
          column: 29
        },
        end: {
          line: 123,
          column: 65
        }
      },
      "48": {
        start: {
          line: 124,
          column: 12
        },
        end: {
          line: 124,
          column: 59
        }
      },
      "49": {
        start: {
          line: 127,
          column: 12
        },
        end: {
          line: 127,
          column: 64
        }
      },
      "50": {
        start: {
          line: 128,
          column: 12
        },
        end: {
          line: 128,
          column: 100
        }
      },
      "51": {
        start: {
          line: 138,
          column: 8
        },
        end: {
          line: 191,
          column: 9
        }
      },
      "52": {
        start: {
          line: 139,
          column: 26
        },
        end: {
          line: 139,
          column: 59
        }
      },
      "53": {
        start: {
          line: 140,
          column: 29
        },
        end: {
          line: 140,
          column: 41
        }
      },
      "54": {
        start: {
          line: 141,
          column: 33
        },
        end: {
          line: 141,
          column: 34
        }
      },
      "55": {
        start: {
          line: 142,
          column: 34
        },
        end: {
          line: 142,
          column: 35
        }
      },
      "56": {
        start: {
          line: 143,
          column: 31
        },
        end: {
          line: 143,
          column: 32
        }
      },
      "57": {
        start: {
          line: 144,
          column: 32
        },
        end: {
          line: 144,
          column: 33
        }
      },
      "58": {
        start: {
          line: 145,
          column: 34
        },
        end: {
          line: 145,
          column: 36
        }
      },
      "59": {
        start: {
          line: 146,
          column: 38
        },
        end: {
          line: 146,
          column: 40
        }
      },
      "60": {
        start: {
          line: 147,
          column: 24
        },
        end: {
          line: 147,
          column: 34
        }
      },
      "61": {
        start: {
          line: 148,
          column: 12
        },
        end: {
          line: 175,
          column: 13
        }
      },
      "62": {
        start: {
          line: 149,
          column: 32
        },
        end: {
          line: 149,
          column: 65
        }
      },
      "63": {
        start: {
          line: 150,
          column: 33
        },
        end: {
          line: 150,
          column: 55
        }
      },
      "64": {
        start: {
          line: 151,
          column: 16
        },
        end: {
          line: 151,
          column: 42
        }
      },
      "65": {
        start: {
          line: 153,
          column: 16
        },
        end: {
          line: 161,
          column: 17
        }
      },
      "66": {
        start: {
          line: 154,
          column: 20
        },
        end: {
          line: 154,
          column: 37
        }
      },
      "67": {
        start: {
          line: 156,
          column: 21
        },
        end: {
          line: 161,
          column: 17
        }
      },
      "68": {
        start: {
          line: 157,
          column: 20
        },
        end: {
          line: 157,
          column: 35
        }
      },
      "69": {
        start: {
          line: 160,
          column: 20
        },
        end: {
          line: 160,
          column: 38
        }
      },
      "70": {
        start: {
          line: 163,
          column: 31
        },
        end: {
          line: 163,
          column: 74
        }
      },
      "71": {
        start: {
          line: 164,
          column: 16
        },
        end: {
          line: 164,
          column: 73
        }
      },
      "72": {
        start: {
          line: 166,
          column: 38
        },
        end: {
          line: 166,
          column: 88
        }
      },
      "73": {
        start: {
          line: 167,
          column: 16
        },
        end: {
          line: 174,
          column: 17
        }
      },
      "74": {
        start: {
          line: 168,
          column: 20
        },
        end: {
          line: 173,
          column: 23
        }
      },
      "75": {
        start: {
          line: 177,
          column: 12
        },
        end: {
          line: 177,
          column: 82
        }
      },
      "76": {
        start: {
          line: 177,
          column: 45
        },
        end: {
          line: 177,
          column: 80
        }
      },
      "77": {
        start: {
          line: 178,
          column: 12
        },
        end: {
          line: 186,
          column: 14
        }
      },
      "78": {
        start: {
          line: 189,
          column: 12
        },
        end: {
          line: 189,
          column: 64
        }
      },
      "79": {
        start: {
          line: 190,
          column: 12
        },
        end: {
          line: 190,
          column: 91
        }
      },
      "80": {
        start: {
          line: 200,
          column: 8
        },
        end: {
          line: 201,
          column: 23
        }
      },
      "81": {
        start: {
          line: 201,
          column: 12
        },
        end: {
          line: 201,
          column: 23
        }
      },
      "82": {
        start: {
          line: 202,
          column: 25
        },
        end: {
          line: 202,
          column: 89
        }
      },
      "83": {
        start: {
          line: 203,
          column: 8
        },
        end: {
          line: 203,
          column: 52
        }
      },
      "84": {
        start: {
          line: 209,
          column: 8
        },
        end: {
          line: 219,
          column: 9
        }
      },
      "85": {
        start: {
          line: 211,
          column: 16
        },
        end: {
          line: 211,
          column: 41
        }
      },
      "86": {
        start: {
          line: 216,
          column: 16
        },
        end: {
          line: 216,
          column: 51
        }
      },
      "87": {
        start: {
          line: 218,
          column: 16
        },
        end: {
          line: 218,
          column: 29
        }
      },
      "88": {
        start: {
          line: 225,
          column: 26
        },
        end: {
          line: 230,
          column: 10
        }
      },
      "89": {
        start: {
          line: 231,
          column: 8
        },
        end: {
          line: 237,
          column: 9
        }
      },
      "90": {
        start: {
          line: 232,
          column: 12
        },
        end: {
          line: 232,
          column: 43
        }
      },
      "91": {
        start: {
          line: 236,
          column: 12
        },
        end: {
          line: 236,
          column: 55
        }
      },
      "92": {
        start: {
          line: 243,
          column: 32
        },
        end: {
          line: 243,
          column: 54
        }
      },
      "93": {
        start: {
          line: 244,
          column: 8
        },
        end: {
          line: 244,
          column: 69
        }
      },
      "94": {
        start: {
          line: 250,
          column: 20
        },
        end: {
          line: 250,
          column: 30
        }
      },
      "95": {
        start: {
          line: 251,
          column: 20
        },
        end: {
          line: 251,
          column: 47
        }
      },
      "96": {
        start: {
          line: 252,
          column: 8
        },
        end: {
          line: 253,
          column: 31
        }
      },
      "97": {
        start: {
          line: 253,
          column: 12
        },
        end: {
          line: 253,
          column: 31
        }
      },
      "98": {
        start: {
          line: 254,
          column: 8
        },
        end: {
          line: 255,
          column: 29
        }
      },
      "99": {
        start: {
          line: 255,
          column: 12
        },
        end: {
          line: 255,
          column: 29
        }
      },
      "100": {
        start: {
          line: 257,
          column: 28
        },
        end: {
          line: 257,
          column: 31
        }
      },
      "101": {
        start: {
          line: 258,
          column: 26
        },
        end: {
          line: 258,
          column: 29
        }
      },
      "102": {
        start: {
          line: 259,
          column: 33
        },
        end: {
          line: 259,
          column: 64
        }
      },
      "103": {
        start: {
          line: 260,
          column: 8
        },
        end: {
          line: 261,
          column: 30
        }
      },
      "104": {
        start: {
          line: 261,
          column: 12
        },
        end: {
          line: 261,
          column: 30
        }
      },
      "105": {
        start: {
          line: 262,
          column: 8
        },
        end: {
          line: 262,
          column: 25
        }
      },
      "106": {
        start: {
          line: 268,
          column: 20
        },
        end: {
          line: 268,
          column: 30
        }
      },
      "107": {
        start: {
          line: 269,
          column: 20
        },
        end: {
          line: 269,
          column: 47
        }
      },
      "108": {
        start: {
          line: 270,
          column: 8
        },
        end: {
          line: 270,
          column: 62
        }
      },
      "109": {
        start: {
          line: 276,
          column: 20
        },
        end: {
          line: 276,
          column: 30
        }
      },
      "110": {
        start: {
          line: 277,
          column: 8
        },
        end: {
          line: 277,
          column: 29
        }
      },
      "111": {
        start: {
          line: 283,
          column: 8
        },
        end: {
          line: 302,
          column: 9
        }
      },
      "112": {
        start: {
          line: 284,
          column: 27
        },
        end: {
          line: 284,
          column: 49
        }
      },
      "113": {
        start: {
          line: 285,
          column: 28
        },
        end: {
          line: 285,
          column: 74
        }
      },
      "114": {
        start: {
          line: 286,
          column: 12
        },
        end: {
          line: 301,
          column: 13
        }
      },
      "115": {
        start: {
          line: 288,
          column: 20
        },
        end: {
          line: 288,
          column: 81
        }
      },
      "116": {
        start: {
          line: 290,
          column: 20
        },
        end: {
          line: 290,
          column: 92
        }
      },
      "117": {
        start: {
          line: 292,
          column: 20
        },
        end: {
          line: 292,
          column: 99
        }
      },
      "118": {
        start: {
          line: 294,
          column: 20
        },
        end: {
          line: 294,
          column: 84
        }
      },
      "119": {
        start: {
          line: 296,
          column: 20
        },
        end: {
          line: 296,
          column: 93
        }
      },
      "120": {
        start: {
          line: 298,
          column: 20
        },
        end: {
          line: 298,
          column: 84
        }
      },
      "121": {
        start: {
          line: 300,
          column: 20
        },
        end: {
          line: 300,
          column: 63
        }
      },
      "122": {
        start: {
          line: 303,
          column: 8
        },
        end: {
          line: 303,
          column: 76
        }
      },
      "123": {
        start: {
          line: 306,
          column: 41
        },
        end: {
          line: 308,
          column: 1
        }
      },
      "124": {
        start: {
          line: 307,
          column: 4
        },
        end: {
          line: 307,
          column: 43
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 6,
            column: 4
          },
          end: {
            line: 6,
            column: 5
          }
        },
        loc: {
          start: {
            line: 6,
            column: 24
          },
          end: {
            line: 8,
            column: 5
          }
        },
        line: 6
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 9,
            column: 4
          },
          end: {
            line: 9,
            column: 5
          }
        },
        loc: {
          start: {
            line: 9,
            column: 23
          },
          end: {
            line: 11,
            column: 5
          }
        },
        line: 9
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 18,
            column: 4
          },
          end: {
            line: 18,
            column: 5
          }
        },
        loc: {
          start: {
            line: 18,
            column: 53
          },
          end: {
            line: 31,
            column: 5
          }
        },
        line: 18
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 35,
            column: 4
          },
          end: {
            line: 35,
            column: 5
          }
        },
        loc: {
          start: {
            line: 35,
            column: 37
          },
          end: {
            line: 45,
            column: 5
          }
        },
        line: 35
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 49,
            column: 4
          },
          end: {
            line: 49,
            column: 5
          }
        },
        loc: {
          start: {
            line: 49,
            column: 37
          },
          end: {
            line: 59,
            column: 5
          }
        },
        line: 49
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 63,
            column: 4
          },
          end: {
            line: 63,
            column: 5
          }
        },
        loc: {
          start: {
            line: 63,
            column: 29
          },
          end: {
            line: 72,
            column: 5
          }
        },
        line: 63
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 76,
            column: 4
          },
          end: {
            line: 76,
            column: 5
          }
        },
        loc: {
          start: {
            line: 76,
            column: 26
          },
          end: {
            line: 86,
            column: 5
          }
        },
        line: 76
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 93,
            column: 4
          },
          end: {
            line: 93,
            column: 5
          }
        },
        loc: {
          start: {
            line: 93,
            column: 43
          },
          end: {
            line: 103,
            column: 5
          }
        },
        line: 93
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 107,
            column: 4
          },
          end: {
            line: 107,
            column: 5
          }
        },
        loc: {
          start: {
            line: 107,
            column: 53
          },
          end: {
            line: 117,
            column: 5
          }
        },
        line: 107
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 121,
            column: 4
          },
          end: {
            line: 121,
            column: 5
          }
        },
        loc: {
          start: {
            line: 121,
            column: 45
          },
          end: {
            line: 130,
            column: 5
          }
        },
        line: 121
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 137,
            column: 4
          },
          end: {
            line: 137,
            column: 5
          }
        },
        loc: {
          start: {
            line: 137,
            column: 33
          },
          end: {
            line: 192,
            column: 5
          }
        },
        line: 137
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 177,
            column: 35
          },
          end: {
            line: 177,
            column: 36
          }
        },
        loc: {
          start: {
            line: 177,
            column: 45
          },
          end: {
            line: 177,
            column: 80
          }
        },
        line: 177
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 199,
            column: 4
          },
          end: {
            line: 199,
            column: 5
          }
        },
        loc: {
          start: {
            line: 199,
            column: 67
          },
          end: {
            line: 204,
            column: 5
          }
        },
        line: 199
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 208,
            column: 4
          },
          end: {
            line: 208,
            column: 5
          }
        },
        loc: {
          start: {
            line: 208,
            column: 55
          },
          end: {
            line: 220,
            column: 5
          }
        },
        line: 208
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 224,
            column: 4
          },
          end: {
            line: 224,
            column: 5
          }
        },
        loc: {
          start: {
            line: 224,
            column: 45
          },
          end: {
            line: 238,
            column: 5
          }
        },
        line: 224
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 242,
            column: 4
          },
          end: {
            line: 242,
            column: 5
          }
        },
        loc: {
          start: {
            line: 242,
            column: 35
          },
          end: {
            line: 245,
            column: 5
          }
        },
        line: 242
      },
      "16": {
        name: "(anonymous_16)",
        decl: {
          start: {
            line: 249,
            column: 4
          },
          end: {
            line: 249,
            column: 5
          }
        },
        loc: {
          start: {
            line: 249,
            column: 45
          },
          end: {
            line: 263,
            column: 5
          }
        },
        line: 249
      },
      "17": {
        name: "(anonymous_17)",
        decl: {
          start: {
            line: 267,
            column: 4
          },
          end: {
            line: 267,
            column: 5
          }
        },
        loc: {
          start: {
            line: 267,
            column: 29
          },
          end: {
            line: 271,
            column: 5
          }
        },
        line: 267
      },
      "18": {
        name: "(anonymous_18)",
        decl: {
          start: {
            line: 275,
            column: 4
          },
          end: {
            line: 275,
            column: 5
          }
        },
        loc: {
          start: {
            line: 275,
            column: 30
          },
          end: {
            line: 278,
            column: 5
          }
        },
        line: 275
      },
      "19": {
        name: "(anonymous_19)",
        decl: {
          start: {
            line: 282,
            column: 4
          },
          end: {
            line: 282,
            column: 5
          }
        },
        loc: {
          start: {
            line: 282,
            column: 32
          },
          end: {
            line: 304,
            column: 5
          }
        },
        line: 282
      },
      "20": {
        name: "(anonymous_20)",
        decl: {
          start: {
            line: 306,
            column: 41
          },
          end: {
            line: 306,
            column: 42
          }
        },
        loc: {
          start: {
            line: 306,
            column: 53
          },
          end: {
            line: 308,
            column: 1
          }
        },
        line: 306
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 18,
            column: 27
          },
          end: {
            line: 18,
            column: 51
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 18,
            column: 46
          },
          end: {
            line: 18,
            column: 51
          }
        }],
        line: 18
      },
      "1": {
        loc: {
          start: {
            line: 21,
            column: 12
          },
          end: {
            line: 22,
            column: 64
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 21,
            column: 12
          },
          end: {
            line: 22,
            column: 64
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 21
      },
      "2": {
        loc: {
          start: {
            line: 25,
            column: 19
          },
          end: {
            line: 25,
            column: 44
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 25,
            column: 19
          },
          end: {
            line: 25,
            column: 38
          }
        }, {
          start: {
            line: 25,
            column: 42
          },
          end: {
            line: 25,
            column: 44
          }
        }],
        line: 25
      },
      "3": {
        loc: {
          start: {
            line: 153,
            column: 16
          },
          end: {
            line: 161,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 153,
            column: 16
          },
          end: {
            line: 161,
            column: 17
          }
        }, {
          start: {
            line: 156,
            column: 21
          },
          end: {
            line: 161,
            column: 17
          }
        }],
        line: 153
      },
      "4": {
        loc: {
          start: {
            line: 156,
            column: 21
          },
          end: {
            line: 161,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 156,
            column: 21
          },
          end: {
            line: 161,
            column: 17
          }
        }, {
          start: {
            line: 159,
            column: 21
          },
          end: {
            line: 161,
            column: 17
          }
        }],
        line: 156
      },
      "5": {
        loc: {
          start: {
            line: 164,
            column: 41
          },
          end: {
            line: 164,
            column: 67
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 164,
            column: 41
          },
          end: {
            line: 164,
            column: 62
          }
        }, {
          start: {
            line: 164,
            column: 66
          },
          end: {
            line: 164,
            column: 67
          }
        }],
        line: 164
      },
      "6": {
        loc: {
          start: {
            line: 167,
            column: 16
          },
          end: {
            line: 174,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 167,
            column: 16
          },
          end: {
            line: 174,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 167
      },
      "7": {
        loc: {
          start: {
            line: 167,
            column: 20
          },
          end: {
            line: 167,
            column: 77
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 167,
            column: 20
          },
          end: {
            line: 167,
            column: 37
          }
        }, {
          start: {
            line: 167,
            column: 41
          },
          end: {
            line: 167,
            column: 59
          }
        }, {
          start: {
            line: 167,
            column: 63
          },
          end: {
            line: 167,
            column: 77
          }
        }],
        line: 167
      },
      "8": {
        loc: {
          start: {
            line: 183,
            column: 34
          },
          end: {
            line: 183,
            column: 93
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 183,
            column: 51
          },
          end: {
            line: 183,
            column: 89
          }
        }, {
          start: {
            line: 183,
            column: 92
          },
          end: {
            line: 183,
            column: 93
          }
        }],
        line: 183
      },
      "9": {
        loc: {
          start: {
            line: 200,
            column: 8
          },
          end: {
            line: 201,
            column: 23
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 200,
            column: 8
          },
          end: {
            line: 201,
            column: 23
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 200
      },
      "10": {
        loc: {
          start: {
            line: 209,
            column: 8
          },
          end: {
            line: 219,
            column: 9
          }
        },
        type: "switch",
        locations: [{
          start: {
            line: 210,
            column: 12
          },
          end: {
            line: 211,
            column: 41
          }
        }, {
          start: {
            line: 212,
            column: 12
          },
          end: {
            line: 212,
            column: 26
          }
        }, {
          start: {
            line: 213,
            column: 12
          },
          end: {
            line: 213,
            column: 28
          }
        }, {
          start: {
            line: 214,
            column: 12
          },
          end: {
            line: 214,
            column: 24
          }
        }, {
          start: {
            line: 215,
            column: 12
          },
          end: {
            line: 216,
            column: 51
          }
        }, {
          start: {
            line: 217,
            column: 12
          },
          end: {
            line: 218,
            column: 29
          }
        }],
        line: 209
      },
      "11": {
        loc: {
          start: {
            line: 224,
            column: 31
          },
          end: {
            line: 224,
            column: 43
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 224,
            column: 38
          },
          end: {
            line: 224,
            column: 43
          }
        }],
        line: 224
      },
      "12": {
        loc: {
          start: {
            line: 244,
            column: 15
          },
          end: {
            line: 244,
            column: 68
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 244,
            column: 22
          },
          end: {
            line: 244,
            column: 50
          }
        }, {
          start: {
            line: 244,
            column: 53
          },
          end: {
            line: 244,
            column: 68
          }
        }],
        line: 244
      },
      "13": {
        loc: {
          start: {
            line: 252,
            column: 8
          },
          end: {
            line: 253,
            column: 31
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 252,
            column: 8
          },
          end: {
            line: 253,
            column: 31
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 252
      },
      "14": {
        loc: {
          start: {
            line: 254,
            column: 8
          },
          end: {
            line: 255,
            column: 29
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 254,
            column: 8
          },
          end: {
            line: 255,
            column: 29
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 254
      },
      "15": {
        loc: {
          start: {
            line: 260,
            column: 8
          },
          end: {
            line: 261,
            column: 30
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 260,
            column: 8
          },
          end: {
            line: 261,
            column: 30
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 260
      },
      "16": {
        loc: {
          start: {
            line: 283,
            column: 8
          },
          end: {
            line: 302,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 283,
            column: 8
          },
          end: {
            line: 302,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 283
      },
      "17": {
        loc: {
          start: {
            line: 285,
            column: 28
          },
          end: {
            line: 285,
            column: 74
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 285,
            column: 28
          },
          end: {
            line: 285,
            column: 57
          }
        }, {
          start: {
            line: 285,
            column: 61
          },
          end: {
            line: 285,
            column: 74
          }
        }],
        line: 285
      },
      "18": {
        loc: {
          start: {
            line: 286,
            column: 12
          },
          end: {
            line: 301,
            column: 13
          }
        },
        type: "switch",
        locations: [{
          start: {
            line: 287,
            column: 16
          },
          end: {
            line: 288,
            column: 81
          }
        }, {
          start: {
            line: 289,
            column: 16
          },
          end: {
            line: 290,
            column: 92
          }
        }, {
          start: {
            line: 291,
            column: 16
          },
          end: {
            line: 292,
            column: 99
          }
        }, {
          start: {
            line: 293,
            column: 16
          },
          end: {
            line: 294,
            column: 84
          }
        }, {
          start: {
            line: 295,
            column: 16
          },
          end: {
            line: 296,
            column: 93
          }
        }, {
          start: {
            line: 297,
            column: 16
          },
          end: {
            line: 298,
            column: 84
          }
        }, {
          start: {
            line: 299,
            column: 16
          },
          end: {
            line: 300,
            column: 63
          }
        }],
        line: 286
      },
      "19": {
        loc: {
          start: {
            line: 303,
            column: 40
          },
          end: {
            line: 303,
            column: 72
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 303,
            column: 40
          },
          end: {
            line: 303,
            column: 53
          }
        }, {
          start: {
            line: 303,
            column: 57
          },
          end: {
            line: 303,
            column: 72
          }
        }],
        line: 303
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0,
      "105": 0,
      "106": 0,
      "107": 0,
      "108": 0,
      "109": 0,
      "110": 0,
      "111": 0,
      "112": 0,
      "113": 0,
      "114": 0,
      "115": 0,
      "116": 0,
      "117": 0,
      "118": 0,
      "119": 0,
      "120": 0,
      "121": 0,
      "122": 0,
      "123": 0,
      "124": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0
    },
    b: {
      "0": [0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0, 0, 0, 0, 0],
      "11": [0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0, 0, 0, 0, 0, 0],
      "19": [0, 0]
    },
    inputSourceMap: {
      file: "/Users/peterkrzyzek/Development/clickup-mcp-server/src/clickup-client/goals-enhanced.ts",
      mappings: "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",
      names: [],
      sources: ["/Users/peterkrzyzek/Development/clickup-mcp-server/src/clickup-client/goals-enhanced.ts"],
      sourcesContent: ["import { ClickUpClient } from './index.js';\nimport axios from 'axios';\n\n// ========================================\n// GOALS TYPE DEFINITIONS\n// ========================================\n\nexport interface GoalMember {\n  id: number;\n  username: string;\n  email: string;\n  color: string;\n  initials: string;\n  profilePicture: string;\n}\n\nexport interface CreateGoalParams {\n  name: string;\n  due_date: number; // Unix timestamp\n  description?: string;\n  multiple_owners: boolean;\n  owners: number[];\n  color?: string;\n}\n\nexport interface UpdateGoalParams {\n  name?: string;\n  due_date?: number;\n  description?: string;\n  rem_owners?: number[];\n  add_owners?: number[];\n  color?: string;\n}\n\nexport interface GoalTarget {\n  id: string;\n  goal_id: string;\n  name: string;\n  creator: number;\n  type: 'number' | 'currency' | 'boolean' | 'task' | 'list';\n  date_created: string;\n  start_value: number;\n  target_value: number;\n  current_value: number;\n  unit: string | null;\n  task_statuses: string[] | null;\n  list_ids: string[] | null;\n  completed: boolean;\n  percent_completed: number;\n}\n\nexport interface Goal {\n  id: string;\n  name: string;\n  team_id: string;\n  date_created: string;\n  start_date: string | null;\n  due_date: string;\n  description: string;\n  private: boolean;\n  archived: boolean;\n  creator: number;\n  color: string;\n  pretty_id: string;\n  multiple_owners: boolean;\n  folder_id: string | null;\n  members: GoalMember[];\n  owners: GoalMember[];\n  key_results: GoalTarget[];\n  percent_completed: number;\n  pretty_url: string;\n}\n\nexport interface CreateGoalTargetParams {\n  name: string;\n  type: 'number' | 'currency' | 'boolean' | 'task' | 'list';\n  target_value: number;\n  start_value?: number;\n  unit?: string;\n  task_statuses?: string[];\n  list_ids?: string[];\n}\n\nexport interface UpdateGoalTargetParams {\n  name?: string;\n  target_value?: number;\n  unit?: string;\n  task_statuses?: string[];\n  list_ids?: string[];\n}\n\nexport interface GoalSummary {\n  total_goals: number;\n  completed_goals: number;\n  in_progress_goals: number;\n  overdue_goals: number;\n  average_progress: number;\n  goals_by_status: Record<string, number>;\n  upcoming_deadlines: Array<{\n    goal_id: string;\n    name: string;\n    due_date: string;\n    days_remaining: number;\n  }>;\n}\n\n// ========================================\n// ENHANCED GOALS CLIENT\n// ========================================\n\nexport class EnhancedGoalsClient {\n  private client: ClickUpClient;\n\n  constructor(client: ClickUpClient) {\n    this.client = client;\n  }\n\n  private getAxiosInstance() {\n    return this.client.getAxiosInstance();\n  }\n\n  // ========================================\n  // GOAL MANAGEMENT\n  // ========================================\n\n  /**\n   * Get goals for a team\n   */\n  async getGoals(teamId: string, includeCompleted: boolean = false): Promise<Goal[]> {\n    try {\n      const queryParams = new URLSearchParams();\n      if (includeCompleted) queryParams.append('include_completed', 'true');\n\n      const endpoint = `/team/${teamId}/goal?${queryParams.toString()}`;\n      const response = await this.getAxiosInstance().get(endpoint);\n      \n      return response.data.goals || [];\n    } catch (error) {\n      console.error('Error getting goals:', error);\n      throw this.handleError(error, `Failed to get goals for team ${teamId}`);\n    }\n  }\n\n  /**\n   * Create a new goal\n   */\n  async createGoal(teamId: string, params: CreateGoalParams): Promise<Goal> {\n    try {\n      const endpoint = `/team/${teamId}/goal`;\n      const response = await this.getAxiosInstance().post(endpoint, params);\n      \n      return response.data.goal;\n    } catch (error) {\n      console.error('Error creating goal:', error);\n      throw this.handleError(error, `Failed to create goal for team ${teamId}`);\n    }\n  }\n\n  /**\n   * Update an existing goal\n   */\n  async updateGoal(goalId: string, params: UpdateGoalParams): Promise<Goal> {\n    try {\n      const endpoint = `/goal/${goalId}`;\n      const response = await this.getAxiosInstance().put(endpoint, params);\n      \n      return response.data.goal;\n    } catch (error) {\n      console.error('Error updating goal:', error);\n      throw this.handleError(error, `Failed to update goal ${goalId}`);\n    }\n  }\n\n  /**\n   * Delete a goal\n   */\n  async deleteGoal(goalId: string): Promise<void> {\n    try {\n      const endpoint = `/goal/${goalId}`;\n      await this.getAxiosInstance().delete(endpoint);\n    } catch (error) {\n      console.error('Error deleting goal:', error);\n      throw this.handleError(error, `Failed to delete goal ${goalId}`);\n    }\n  }\n\n  /**\n   * Get a specific goal by ID\n   */\n  async getGoal(goalId: string): Promise<Goal> {\n    try {\n      const endpoint = `/goal/${goalId}`;\n      const response = await this.getAxiosInstance().get(endpoint);\n      \n      return response.data.goal;\n    } catch (error) {\n      console.error('Error getting goal:', error);\n      throw this.handleError(error, `Failed to get goal ${goalId}`);\n    }\n  }\n\n  // ========================================\n  // GOAL TARGET MANAGEMENT\n  // ========================================\n\n  /**\n   * Create a goal target (key result)\n   */\n  async createGoalTarget(goalId: string, params: CreateGoalTargetParams): Promise<GoalTarget> {\n    try {\n      const endpoint = `/goal/${goalId}/target`;\n      const response = await this.getAxiosInstance().post(endpoint, params);\n      \n      return response.data.target;\n    } catch (error) {\n      console.error('Error creating goal target:', error);\n      throw this.handleError(error, `Failed to create target for goal ${goalId}`);\n    }\n  }\n\n  /**\n   * Update a goal target\n   */\n  async updateGoalTarget(goalId: string, targetId: string, params: UpdateGoalTargetParams): Promise<GoalTarget> {\n    try {\n      const endpoint = `/goal/${goalId}/target/${targetId}`;\n      const response = await this.getAxiosInstance().put(endpoint, params);\n      \n      return response.data.target;\n    } catch (error) {\n      console.error('Error updating goal target:', error);\n      throw this.handleError(error, `Failed to update target ${targetId} for goal ${goalId}`);\n    }\n  }\n\n  /**\n   * Delete a goal target\n   */\n  async deleteGoalTarget(goalId: string, targetId: string): Promise<void> {\n    try {\n      const endpoint = `/goal/${goalId}/target/${targetId}`;\n      await this.getAxiosInstance().delete(endpoint);\n    } catch (error) {\n      console.error('Error deleting goal target:', error);\n      throw this.handleError(error, `Failed to delete target ${targetId} for goal ${goalId}`);\n    }\n  }\n\n  // ========================================\n  // GOAL ANALYTICS & REPORTING\n  // ========================================\n\n  /**\n   * Get goal summary and analytics for a team\n   */\n  async getGoalSummary(teamId: string): Promise<GoalSummary> {\n    try {\n      const goals = await this.getGoals(teamId, true);\n      \n      let totalGoals = goals.length;\n      let completedGoals = 0;\n      let inProgressGoals = 0;\n      let overdueGoals = 0;\n      let totalProgress = 0;\n      const goalsByStatus: Record<string, number> = {};\n      const upcomingDeadlines: Array<{\n        goal_id: string;\n        name: string;\n        due_date: string;\n        days_remaining: number;\n      }> = [];\n\n      const now = Date.now();\n\n      for (const goal of goals) {\n        const dueDate = new Date(goal.due_date).getTime();\n        const progress = goal.percent_completed;\n        totalProgress += progress;\n\n        // Categorize goals\n        if (progress >= 100) {\n          completedGoals++;\n        } else if (now > dueDate) {\n          overdueGoals++;\n        } else {\n          inProgressGoals++;\n        }\n\n        // Get goal status\n        const status = this.getGoalStatus(progress, goal.due_date);\n        goalsByStatus[status] = (goalsByStatus[status] || 0) + 1;\n\n        // Check for upcoming deadlines (within 7 days)\n        const daysRemaining = Math.ceil((dueDate - now) / (1000 * 60 * 60 * 24));\n        if (daysRemaining > 0 && daysRemaining <= 7 && progress < 100) {\n          upcomingDeadlines.push({\n            goal_id: goal.id,\n            name: goal.name,\n            due_date: goal.due_date,\n            days_remaining: daysRemaining\n          });\n        }\n      }\n\n      // Sort upcoming deadlines by days remaining\n      upcomingDeadlines.sort((a, b) => a.days_remaining - b.days_remaining);\n\n      return {\n        total_goals: totalGoals,\n        completed_goals: completedGoals,\n        in_progress_goals: inProgressGoals,\n        overdue_goals: overdueGoals,\n        average_progress: totalGoals > 0 ? Math.round(totalProgress / totalGoals) : 0,\n        goals_by_status: goalsByStatus,\n        upcoming_deadlines: upcomingDeadlines\n      };\n    } catch (error) {\n      console.error('Error getting goal summary:', error);\n      throw this.handleError(error, `Failed to get goal summary for team ${teamId}`);\n    }\n  }\n\n  // ========================================\n  // UTILITY METHODS\n  // ========================================\n\n  /**\n   * Calculate progress percentage for a target\n   */\n  calculateTargetProgress(startValue: number, currentValue: number, targetValue: number): number {\n    if (targetValue === startValue) return 100; // Avoid division by zero\n    \n    const progress = ((currentValue - startValue) / (targetValue - startValue)) * 100;\n    return Math.min(Math.max(progress, 0), 100); // Clamp between 0 and 100\n  }\n\n  /**\n   * Check if a target is completed\n   */\n  isTargetCompleted(currentValue: number, targetValue: number, type: string): boolean {\n    switch (type) {\n      case 'boolean':\n        return currentValue >= 1;\n      case 'number':\n      case 'currency':\n      case 'task':\n      case 'list':\n        return currentValue >= targetValue;\n      default:\n        return false;\n    }\n  }\n\n  /**\n   * Format currency value with unit\n   */\n  formatCurrencyValue(value: number, unit: string = 'USD'): string {\n    const formatter = new Intl.NumberFormat('en-US', {\n      style: 'currency',\n      currency: unit.toUpperCase(),\n      minimumFractionDigits: 0,\n      maximumFractionDigits: 2\n    });\n    \n    try {\n      return formatter.format(value);\n    } catch (error) {\n      // Fallback for invalid currency codes\n      return `${unit} ${value.toLocaleString()}`;\n    }\n  }\n\n  /**\n   * Format number value with unit\n   */\n  formatNumberValue(value: number, unit?: string): string {\n    const formattedNumber = value.toLocaleString();\n    return unit ? `${formattedNumber} ${unit}` : formattedNumber;\n  }\n\n  /**\n   * Get goal status based on progress and due date\n   */\n  getGoalStatus(percentCompleted: number, dueDate: string): 'completed' | 'on_track' | 'at_risk' | 'overdue' {\n    const now = Date.now();\n    const due = new Date(dueDate).getTime();\n    \n    if (percentCompleted >= 100) return 'completed';\n    if (now > due) return 'overdue';\n    \n    // Calculate if on track (simple heuristic: progress should match time elapsed)\n    const timeElapsed = now;\n    const totalTime = due;\n    const expectedProgress = (timeElapsed / totalTime) * 100;\n    \n    if (percentCompleted >= expectedProgress * 0.8) return 'on_track';\n    return 'at_risk';\n  }\n\n  /**\n   * Calculate days until due date\n   */\n  getDaysUntilDue(dueDate: string): number {\n    const now = Date.now();\n    const due = new Date(dueDate).getTime();\n    return Math.ceil((due - now) / (1000 * 60 * 60 * 24));\n  }\n\n  /**\n   * Validate goal date (must be in the future)\n   */\n  validateGoalDate(dueDate: number): boolean {\n    const now = Date.now();\n    return dueDate > now;\n  }\n\n  // ========================================\n  // ERROR HANDLING\n  // ========================================\n\n  private handleError(error: any, context: string): Error {\n    if (axios.isAxiosError(error)) {\n      const status = error.response?.status;\n      const message = error.response?.data?.message || error.message;\n      \n      switch (status) {\n        case 400:\n          return new Error(`${context}: Invalid request - ${message}`);\n        case 401:\n          return new Error(`${context}: Authentication failed - check API token`);\n        case 403:\n          return new Error(`${context}: Permission denied - insufficient access rights`);\n        case 404:\n          return new Error(`${context}: Resource not found - ${message}`);\n        case 429:\n          return new Error(`${context}: Rate limit exceeded - please retry later`);\n        case 500:\n          return new Error(`${context}: Server error - please try again`);\n        default:\n          return new Error(`${context}: ${message}`);\n      }\n    }\n    \n    return new Error(`${context}: ${error.message || 'Unknown error'}`);\n  }\n}\n\nexport const createEnhancedGoalsClient = (client: ClickUpClient): EnhancedGoalsClient => {\n  return new EnhancedGoalsClient(client);\n};\n"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "23bd25d318a5434c863769369f66308928ed12c7"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_24xqkfl5t1 = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_24xqkfl5t1();
import axios from 'axios';
// ========================================
// ENHANCED GOALS CLIENT
// ========================================
export class EnhancedGoalsClient {
  constructor(client) {
    /* istanbul ignore next */
    cov_24xqkfl5t1().f[0]++;
    cov_24xqkfl5t1().s[0]++;
    this.client = client;
  }
  getAxiosInstance() {
    /* istanbul ignore next */
    cov_24xqkfl5t1().f[1]++;
    cov_24xqkfl5t1().s[1]++;
    return this.client.getAxiosInstance();
  }
  // ========================================
  // GOAL MANAGEMENT
  // ========================================
  /**
   * Get goals for a team
   */
  async getGoals(teamId, includeCompleted =
  /* istanbul ignore next */
  (cov_24xqkfl5t1().b[0][0]++, false)) {
    /* istanbul ignore next */
    cov_24xqkfl5t1().f[2]++;
    cov_24xqkfl5t1().s[2]++;
    try {
      const queryParams =
      /* istanbul ignore next */
      (cov_24xqkfl5t1().s[3]++, new URLSearchParams());
      /* istanbul ignore next */
      cov_24xqkfl5t1().s[4]++;
      if (includeCompleted) {
        /* istanbul ignore next */
        cov_24xqkfl5t1().b[1][0]++;
        cov_24xqkfl5t1().s[5]++;
        queryParams.append('include_completed', 'true');
      } else
      /* istanbul ignore next */
      {
        cov_24xqkfl5t1().b[1][1]++;
      }
      const endpoint =
      /* istanbul ignore next */
      (cov_24xqkfl5t1().s[6]++, `/team/${teamId}/goal?${queryParams.toString()}`);
      const response =
      /* istanbul ignore next */
      (cov_24xqkfl5t1().s[7]++, await this.getAxiosInstance().get(endpoint));
      /* istanbul ignore next */
      cov_24xqkfl5t1().s[8]++;
      return /* istanbul ignore next */(cov_24xqkfl5t1().b[2][0]++, response.data.goals) ||
      /* istanbul ignore next */
      (cov_24xqkfl5t1().b[2][1]++, []);
    } catch (error) {
      /* istanbul ignore next */
      cov_24xqkfl5t1().s[9]++;
      console.error('Error getting goals:', error);
      /* istanbul ignore next */
      cov_24xqkfl5t1().s[10]++;
      throw this.handleError(error, `Failed to get goals for team ${teamId}`);
    }
  }
  /**
   * Create a new goal
   */
  async createGoal(teamId, params) {
    /* istanbul ignore next */
    cov_24xqkfl5t1().f[3]++;
    cov_24xqkfl5t1().s[11]++;
    try {
      const endpoint =
      /* istanbul ignore next */
      (cov_24xqkfl5t1().s[12]++, `/team/${teamId}/goal`);
      const response =
      /* istanbul ignore next */
      (cov_24xqkfl5t1().s[13]++, await this.getAxiosInstance().post(endpoint, params));
      /* istanbul ignore next */
      cov_24xqkfl5t1().s[14]++;
      return response.data.goal;
    } catch (error) {
      /* istanbul ignore next */
      cov_24xqkfl5t1().s[15]++;
      console.error('Error creating goal:', error);
      /* istanbul ignore next */
      cov_24xqkfl5t1().s[16]++;
      throw this.handleError(error, `Failed to create goal for team ${teamId}`);
    }
  }
  /**
   * Update an existing goal
   */
  async updateGoal(goalId, params) {
    /* istanbul ignore next */
    cov_24xqkfl5t1().f[4]++;
    cov_24xqkfl5t1().s[17]++;
    try {
      const endpoint =
      /* istanbul ignore next */
      (cov_24xqkfl5t1().s[18]++, `/goal/${goalId}`);
      const response =
      /* istanbul ignore next */
      (cov_24xqkfl5t1().s[19]++, await this.getAxiosInstance().put(endpoint, params));
      /* istanbul ignore next */
      cov_24xqkfl5t1().s[20]++;
      return response.data.goal;
    } catch (error) {
      /* istanbul ignore next */
      cov_24xqkfl5t1().s[21]++;
      console.error('Error updating goal:', error);
      /* istanbul ignore next */
      cov_24xqkfl5t1().s[22]++;
      throw this.handleError(error, `Failed to update goal ${goalId}`);
    }
  }
  /**
   * Delete a goal
   */
  async deleteGoal(goalId) {
    /* istanbul ignore next */
    cov_24xqkfl5t1().f[5]++;
    cov_24xqkfl5t1().s[23]++;
    try {
      const endpoint =
      /* istanbul ignore next */
      (cov_24xqkfl5t1().s[24]++, `/goal/${goalId}`);
      /* istanbul ignore next */
      cov_24xqkfl5t1().s[25]++;
      await this.getAxiosInstance().delete(endpoint);
    } catch (error) {
      /* istanbul ignore next */
      cov_24xqkfl5t1().s[26]++;
      console.error('Error deleting goal:', error);
      /* istanbul ignore next */
      cov_24xqkfl5t1().s[27]++;
      throw this.handleError(error, `Failed to delete goal ${goalId}`);
    }
  }
  /**
   * Get a specific goal by ID
   */
  async getGoal(goalId) {
    /* istanbul ignore next */
    cov_24xqkfl5t1().f[6]++;
    cov_24xqkfl5t1().s[28]++;
    try {
      const endpoint =
      /* istanbul ignore next */
      (cov_24xqkfl5t1().s[29]++, `/goal/${goalId}`);
      const response =
      /* istanbul ignore next */
      (cov_24xqkfl5t1().s[30]++, await this.getAxiosInstance().get(endpoint));
      /* istanbul ignore next */
      cov_24xqkfl5t1().s[31]++;
      return response.data.goal;
    } catch (error) {
      /* istanbul ignore next */
      cov_24xqkfl5t1().s[32]++;
      console.error('Error getting goal:', error);
      /* istanbul ignore next */
      cov_24xqkfl5t1().s[33]++;
      throw this.handleError(error, `Failed to get goal ${goalId}`);
    }
  }
  // ========================================
  // GOAL TARGET MANAGEMENT
  // ========================================
  /**
   * Create a goal target (key result)
   */
  async createGoalTarget(goalId, params) {
    /* istanbul ignore next */
    cov_24xqkfl5t1().f[7]++;
    cov_24xqkfl5t1().s[34]++;
    try {
      const endpoint =
      /* istanbul ignore next */
      (cov_24xqkfl5t1().s[35]++, `/goal/${goalId}/target`);
      const response =
      /* istanbul ignore next */
      (cov_24xqkfl5t1().s[36]++, await this.getAxiosInstance().post(endpoint, params));
      /* istanbul ignore next */
      cov_24xqkfl5t1().s[37]++;
      return response.data.target;
    } catch (error) {
      /* istanbul ignore next */
      cov_24xqkfl5t1().s[38]++;
      console.error('Error creating goal target:', error);
      /* istanbul ignore next */
      cov_24xqkfl5t1().s[39]++;
      throw this.handleError(error, `Failed to create target for goal ${goalId}`);
    }
  }
  /**
   * Update a goal target
   */
  async updateGoalTarget(goalId, targetId, params) {
    /* istanbul ignore next */
    cov_24xqkfl5t1().f[8]++;
    cov_24xqkfl5t1().s[40]++;
    try {
      const endpoint =
      /* istanbul ignore next */
      (cov_24xqkfl5t1().s[41]++, `/goal/${goalId}/target/${targetId}`);
      const response =
      /* istanbul ignore next */
      (cov_24xqkfl5t1().s[42]++, await this.getAxiosInstance().put(endpoint, params));
      /* istanbul ignore next */
      cov_24xqkfl5t1().s[43]++;
      return response.data.target;
    } catch (error) {
      /* istanbul ignore next */
      cov_24xqkfl5t1().s[44]++;
      console.error('Error updating goal target:', error);
      /* istanbul ignore next */
      cov_24xqkfl5t1().s[45]++;
      throw this.handleError(error, `Failed to update target ${targetId} for goal ${goalId}`);
    }
  }
  /**
   * Delete a goal target
   */
  async deleteGoalTarget(goalId, targetId) {
    /* istanbul ignore next */
    cov_24xqkfl5t1().f[9]++;
    cov_24xqkfl5t1().s[46]++;
    try {
      const endpoint =
      /* istanbul ignore next */
      (cov_24xqkfl5t1().s[47]++, `/goal/${goalId}/target/${targetId}`);
      /* istanbul ignore next */
      cov_24xqkfl5t1().s[48]++;
      await this.getAxiosInstance().delete(endpoint);
    } catch (error) {
      /* istanbul ignore next */
      cov_24xqkfl5t1().s[49]++;
      console.error('Error deleting goal target:', error);
      /* istanbul ignore next */
      cov_24xqkfl5t1().s[50]++;
      throw this.handleError(error, `Failed to delete target ${targetId} for goal ${goalId}`);
    }
  }
  // ========================================
  // GOAL ANALYTICS & REPORTING
  // ========================================
  /**
   * Get goal summary and analytics for a team
   */
  async getGoalSummary(teamId) {
    /* istanbul ignore next */
    cov_24xqkfl5t1().f[10]++;
    cov_24xqkfl5t1().s[51]++;
    try {
      const goals =
      /* istanbul ignore next */
      (cov_24xqkfl5t1().s[52]++, await this.getGoals(teamId, true));
      let totalGoals =
      /* istanbul ignore next */
      (cov_24xqkfl5t1().s[53]++, goals.length);
      let completedGoals =
      /* istanbul ignore next */
      (cov_24xqkfl5t1().s[54]++, 0);
      let inProgressGoals =
      /* istanbul ignore next */
      (cov_24xqkfl5t1().s[55]++, 0);
      let overdueGoals =
      /* istanbul ignore next */
      (cov_24xqkfl5t1().s[56]++, 0);
      let totalProgress =
      /* istanbul ignore next */
      (cov_24xqkfl5t1().s[57]++, 0);
      const goalsByStatus =
      /* istanbul ignore next */
      (cov_24xqkfl5t1().s[58]++, {});
      const upcomingDeadlines =
      /* istanbul ignore next */
      (cov_24xqkfl5t1().s[59]++, []);
      const now =
      /* istanbul ignore next */
      (cov_24xqkfl5t1().s[60]++, Date.now());
      /* istanbul ignore next */
      cov_24xqkfl5t1().s[61]++;
      for (const goal of goals) {
        const dueDate =
        /* istanbul ignore next */
        (cov_24xqkfl5t1().s[62]++, new Date(goal.due_date).getTime());
        const progress =
        /* istanbul ignore next */
        (cov_24xqkfl5t1().s[63]++, goal.percent_completed);
        /* istanbul ignore next */
        cov_24xqkfl5t1().s[64]++;
        totalProgress += progress;
        // Categorize goals
        /* istanbul ignore next */
        cov_24xqkfl5t1().s[65]++;
        if (progress >= 100) {
          /* istanbul ignore next */
          cov_24xqkfl5t1().b[3][0]++;
          cov_24xqkfl5t1().s[66]++;
          completedGoals++;
        } else {
          /* istanbul ignore next */
          cov_24xqkfl5t1().b[3][1]++;
          cov_24xqkfl5t1().s[67]++;
          if (now > dueDate) {
            /* istanbul ignore next */
            cov_24xqkfl5t1().b[4][0]++;
            cov_24xqkfl5t1().s[68]++;
            overdueGoals++;
          } else {
            /* istanbul ignore next */
            cov_24xqkfl5t1().b[4][1]++;
            cov_24xqkfl5t1().s[69]++;
            inProgressGoals++;
          }
        }
        // Get goal status
        const status =
        /* istanbul ignore next */
        (cov_24xqkfl5t1().s[70]++, this.getGoalStatus(progress, goal.due_date));
        /* istanbul ignore next */
        cov_24xqkfl5t1().s[71]++;
        goalsByStatus[status] = (
        /* istanbul ignore next */
        (cov_24xqkfl5t1().b[5][0]++, goalsByStatus[status]) ||
        /* istanbul ignore next */
        (cov_24xqkfl5t1().b[5][1]++, 0)) + 1;
        // Check for upcoming deadlines (within 7 days)
        const daysRemaining =
        /* istanbul ignore next */
        (cov_24xqkfl5t1().s[72]++, Math.ceil((dueDate - now) / (1000 * 60 * 60 * 24)));
        /* istanbul ignore next */
        cov_24xqkfl5t1().s[73]++;
        if (
        /* istanbul ignore next */
        (cov_24xqkfl5t1().b[7][0]++, daysRemaining > 0) &&
        /* istanbul ignore next */
        (cov_24xqkfl5t1().b[7][1]++, daysRemaining <= 7) &&
        /* istanbul ignore next */
        (cov_24xqkfl5t1().b[7][2]++, progress < 100)) {
          /* istanbul ignore next */
          cov_24xqkfl5t1().b[6][0]++;
          cov_24xqkfl5t1().s[74]++;
          upcomingDeadlines.push({
            goal_id: goal.id,
            name: goal.name,
            due_date: goal.due_date,
            days_remaining: daysRemaining
          });
        } else
        /* istanbul ignore next */
        {
          cov_24xqkfl5t1().b[6][1]++;
        }
      }
      // Sort upcoming deadlines by days remaining
      /* istanbul ignore next */
      cov_24xqkfl5t1().s[75]++;
      upcomingDeadlines.sort((a, b) => {
        /* istanbul ignore next */
        cov_24xqkfl5t1().f[11]++;
        cov_24xqkfl5t1().s[76]++;
        return a.days_remaining - b.days_remaining;
      });
      /* istanbul ignore next */
      cov_24xqkfl5t1().s[77]++;
      return {
        total_goals: totalGoals,
        completed_goals: completedGoals,
        in_progress_goals: inProgressGoals,
        overdue_goals: overdueGoals,
        average_progress: totalGoals > 0 ?
        /* istanbul ignore next */
        (cov_24xqkfl5t1().b[8][0]++, Math.round(totalProgress / totalGoals)) :
        /* istanbul ignore next */
        (cov_24xqkfl5t1().b[8][1]++, 0),
        goals_by_status: goalsByStatus,
        upcoming_deadlines: upcomingDeadlines
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_24xqkfl5t1().s[78]++;
      console.error('Error getting goal summary:', error);
      /* istanbul ignore next */
      cov_24xqkfl5t1().s[79]++;
      throw this.handleError(error, `Failed to get goal summary for team ${teamId}`);
    }
  }
  // ========================================
  // UTILITY METHODS
  // ========================================
  /**
   * Calculate progress percentage for a target
   */
  calculateTargetProgress(startValue, currentValue, targetValue) {
    /* istanbul ignore next */
    cov_24xqkfl5t1().f[12]++;
    cov_24xqkfl5t1().s[80]++;
    if (targetValue === startValue) {
      /* istanbul ignore next */
      cov_24xqkfl5t1().b[9][0]++;
      cov_24xqkfl5t1().s[81]++;
      return 100;
    } else
    /* istanbul ignore next */
    {
      cov_24xqkfl5t1().b[9][1]++;
    } // Avoid division by zero
    const progress =
    /* istanbul ignore next */
    (cov_24xqkfl5t1().s[82]++, (currentValue - startValue) / (targetValue - startValue) * 100);
    /* istanbul ignore next */
    cov_24xqkfl5t1().s[83]++;
    return Math.min(Math.max(progress, 0), 100); // Clamp between 0 and 100
  }
  /**
   * Check if a target is completed
   */
  isTargetCompleted(currentValue, targetValue, type) {
    /* istanbul ignore next */
    cov_24xqkfl5t1().f[13]++;
    cov_24xqkfl5t1().s[84]++;
    switch (type) {
      case 'boolean':
        /* istanbul ignore next */
        cov_24xqkfl5t1().b[10][0]++;
        cov_24xqkfl5t1().s[85]++;
        return currentValue >= 1;
      case 'number':
        /* istanbul ignore next */
        cov_24xqkfl5t1().b[10][1]++;
      case 'currency':
        /* istanbul ignore next */
        cov_24xqkfl5t1().b[10][2]++;
      case 'task':
        /* istanbul ignore next */
        cov_24xqkfl5t1().b[10][3]++;
      case 'list':
        /* istanbul ignore next */
        cov_24xqkfl5t1().b[10][4]++;
        cov_24xqkfl5t1().s[86]++;
        return currentValue >= targetValue;
      default:
        /* istanbul ignore next */
        cov_24xqkfl5t1().b[10][5]++;
        cov_24xqkfl5t1().s[87]++;
        return false;
    }
  }
  /**
   * Format currency value with unit
   */
  formatCurrencyValue(value, unit =
  /* istanbul ignore next */
  (cov_24xqkfl5t1().b[11][0]++, 'USD')) {
    /* istanbul ignore next */
    cov_24xqkfl5t1().f[14]++;
    const formatter =
    /* istanbul ignore next */
    (cov_24xqkfl5t1().s[88]++, new Intl.NumberFormat('en-US', {
      style: 'currency',
      currency: unit.toUpperCase(),
      minimumFractionDigits: 0,
      maximumFractionDigits: 2
    }));
    /* istanbul ignore next */
    cov_24xqkfl5t1().s[89]++;
    try {
      /* istanbul ignore next */
      cov_24xqkfl5t1().s[90]++;
      return formatter.format(value);
    } catch (error) {
      /* istanbul ignore next */
      cov_24xqkfl5t1().s[91]++;
      // Fallback for invalid currency codes
      return `${unit} ${value.toLocaleString()}`;
    }
  }
  /**
   * Format number value with unit
   */
  formatNumberValue(value, unit) {
    /* istanbul ignore next */
    cov_24xqkfl5t1().f[15]++;
    const formattedNumber =
    /* istanbul ignore next */
    (cov_24xqkfl5t1().s[92]++, value.toLocaleString());
    /* istanbul ignore next */
    cov_24xqkfl5t1().s[93]++;
    return unit ?
    /* istanbul ignore next */
    (cov_24xqkfl5t1().b[12][0]++, `${formattedNumber} ${unit}`) :
    /* istanbul ignore next */
    (cov_24xqkfl5t1().b[12][1]++, formattedNumber);
  }
  /**
   * Get goal status based on progress and due date
   */
  getGoalStatus(percentCompleted, dueDate) {
    /* istanbul ignore next */
    cov_24xqkfl5t1().f[16]++;
    const now =
    /* istanbul ignore next */
    (cov_24xqkfl5t1().s[94]++, Date.now());
    const due =
    /* istanbul ignore next */
    (cov_24xqkfl5t1().s[95]++, new Date(dueDate).getTime());
    /* istanbul ignore next */
    cov_24xqkfl5t1().s[96]++;
    if (percentCompleted >= 100) {
      /* istanbul ignore next */
      cov_24xqkfl5t1().b[13][0]++;
      cov_24xqkfl5t1().s[97]++;
      return 'completed';
    } else
    /* istanbul ignore next */
    {
      cov_24xqkfl5t1().b[13][1]++;
    }
    cov_24xqkfl5t1().s[98]++;
    if (now > due) {
      /* istanbul ignore next */
      cov_24xqkfl5t1().b[14][0]++;
      cov_24xqkfl5t1().s[99]++;
      return 'overdue';
    } else
    /* istanbul ignore next */
    {
      cov_24xqkfl5t1().b[14][1]++;
    }
    // Calculate if on track (simple heuristic: progress should match time elapsed)
    const timeElapsed =
    /* istanbul ignore next */
    (cov_24xqkfl5t1().s[100]++, now);
    const totalTime =
    /* istanbul ignore next */
    (cov_24xqkfl5t1().s[101]++, due);
    const expectedProgress =
    /* istanbul ignore next */
    (cov_24xqkfl5t1().s[102]++, timeElapsed / totalTime * 100);
    /* istanbul ignore next */
    cov_24xqkfl5t1().s[103]++;
    if (percentCompleted >= expectedProgress * 0.8) {
      /* istanbul ignore next */
      cov_24xqkfl5t1().b[15][0]++;
      cov_24xqkfl5t1().s[104]++;
      return 'on_track';
    } else
    /* istanbul ignore next */
    {
      cov_24xqkfl5t1().b[15][1]++;
    }
    cov_24xqkfl5t1().s[105]++;
    return 'at_risk';
  }
  /**
   * Calculate days until due date
   */
  getDaysUntilDue(dueDate) {
    /* istanbul ignore next */
    cov_24xqkfl5t1().f[17]++;
    const now =
    /* istanbul ignore next */
    (cov_24xqkfl5t1().s[106]++, Date.now());
    const due =
    /* istanbul ignore next */
    (cov_24xqkfl5t1().s[107]++, new Date(dueDate).getTime());
    /* istanbul ignore next */
    cov_24xqkfl5t1().s[108]++;
    return Math.ceil((due - now) / (1000 * 60 * 60 * 24));
  }
  /**
   * Validate goal date (must be in the future)
   */
  validateGoalDate(dueDate) {
    /* istanbul ignore next */
    cov_24xqkfl5t1().f[18]++;
    const now =
    /* istanbul ignore next */
    (cov_24xqkfl5t1().s[109]++, Date.now());
    /* istanbul ignore next */
    cov_24xqkfl5t1().s[110]++;
    return dueDate > now;
  }
  // ========================================
  // ERROR HANDLING
  // ========================================
  handleError(error, context) {
    /* istanbul ignore next */
    cov_24xqkfl5t1().f[19]++;
    cov_24xqkfl5t1().s[111]++;
    if (axios.isAxiosError(error)) {
      /* istanbul ignore next */
      cov_24xqkfl5t1().b[16][0]++;
      const status =
      /* istanbul ignore next */
      (cov_24xqkfl5t1().s[112]++, error.response?.status);
      const message =
      /* istanbul ignore next */
      (cov_24xqkfl5t1().s[113]++,
      /* istanbul ignore next */
      (cov_24xqkfl5t1().b[17][0]++, error.response?.data?.message) ||
      /* istanbul ignore next */
      (cov_24xqkfl5t1().b[17][1]++, error.message));
      /* istanbul ignore next */
      cov_24xqkfl5t1().s[114]++;
      switch (status) {
        case 400:
          /* istanbul ignore next */
          cov_24xqkfl5t1().b[18][0]++;
          cov_24xqkfl5t1().s[115]++;
          return new Error(`${context}: Invalid request - ${message}`);
        case 401:
          /* istanbul ignore next */
          cov_24xqkfl5t1().b[18][1]++;
          cov_24xqkfl5t1().s[116]++;
          return new Error(`${context}: Authentication failed - check API token`);
        case 403:
          /* istanbul ignore next */
          cov_24xqkfl5t1().b[18][2]++;
          cov_24xqkfl5t1().s[117]++;
          return new Error(`${context}: Permission denied - insufficient access rights`);
        case 404:
          /* istanbul ignore next */
          cov_24xqkfl5t1().b[18][3]++;
          cov_24xqkfl5t1().s[118]++;
          return new Error(`${context}: Resource not found - ${message}`);
        case 429:
          /* istanbul ignore next */
          cov_24xqkfl5t1().b[18][4]++;
          cov_24xqkfl5t1().s[119]++;
          return new Error(`${context}: Rate limit exceeded - please retry later`);
        case 500:
          /* istanbul ignore next */
          cov_24xqkfl5t1().b[18][5]++;
          cov_24xqkfl5t1().s[120]++;
          return new Error(`${context}: Server error - please try again`);
        default:
          /* istanbul ignore next */
          cov_24xqkfl5t1().b[18][6]++;
          cov_24xqkfl5t1().s[121]++;
          return new Error(`${context}: ${message}`);
      }
    } else
    /* istanbul ignore next */
    {
      cov_24xqkfl5t1().b[16][1]++;
    }
    cov_24xqkfl5t1().s[122]++;
    return new Error(`${context}: ${
    /* istanbul ignore next */
    (cov_24xqkfl5t1().b[19][0]++, error.message) ||
    /* istanbul ignore next */
    (cov_24xqkfl5t1().b[19][1]++, 'Unknown error')}`);
  }
}
/* istanbul ignore next */
cov_24xqkfl5t1().s[123]++;
export const createEnhancedGoalsClient = client => {
  /* istanbul ignore next */
  cov_24xqkfl5t1().f[20]++;
  cov_24xqkfl5t1().s[124]++;
  return new EnhancedGoalsClient(client);
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
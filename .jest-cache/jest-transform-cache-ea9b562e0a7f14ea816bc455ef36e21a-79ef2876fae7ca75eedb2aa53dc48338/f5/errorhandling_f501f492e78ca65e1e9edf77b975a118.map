{"version":3,"names":["cov_rykizwlco","actualCoverage","s","zod_1","require","ErrorType","f","b","exports","ErrorSeverity","createStructuredError","type","message","options","severity","MEDIUM","code","details","timestamp","Date","toISOString","requestId","userId","workspaceId","stack","originalError","retryable","retryAfter","errorToMcpResponse","error","userMessage","getUserFriendlyMessage","content","text","isError","_meta","errorType","baseMessage","additionalInfo","RATE_LIMIT","AUTHENTICATION","VALIDATION","errors","validationErrors","Array","isArray","join","handleClickUpApiError","context","response","status","data","LOW","HIGH","AUTHORIZATION","NOT_FOUND","parseInt","headers","API_ERROR","err","toString","operation","TIMEOUT","NETWORK_ERROR","INTERNAL_ERROR","handleValidationError","map","path","handleWebhookError","WEBHOOK_ERROR","webhookId","eventType","handleFileError","FILE_ERROR","filename","RetryManager","constructor","maxRetries","baseDelay","maxDelay","executeWithRetry","lastError","attempt","structuredError","Error","operationName","delay","Math","min","pow","console","warn","Promise","resolve","setTimeout","logError","logLevel","CRITICAL","logData","wrapMcpTool","toolName","schema","handler","args","generateRequestId","validatedArgs","parse","result","JSON","stringify","z","ZodError","now","random","substr","performHealthCheck","checks","startTime","envValidation","validateEnvironment","environment","isValid","duration","memoryUsage","process","memoryThreshold","memory","heapUsed","round","failedChecks","Object","values","filter","check","length"],"sources":["/Users/peterkrzyzek/Development/clickup-mcp-server/src/utils/error-handling.ts"],"sourcesContent":["import { z } from 'zod';\n\n/**\n * Comprehensive error handling utilities for the ClickUp MCP Server\n */\n\n// Error types\nexport enum ErrorType {\n  VALIDATION = 'VALIDATION',\n  AUTHENTICATION = 'AUTHENTICATION',\n  AUTHORIZATION = 'AUTHORIZATION',\n  NOT_FOUND = 'NOT_FOUND',\n  RATE_LIMIT = 'RATE_LIMIT',\n  API_ERROR = 'API_ERROR',\n  NETWORK_ERROR = 'NETWORK_ERROR',\n  TIMEOUT = 'TIMEOUT',\n  INTERNAL_ERROR = 'INTERNAL_ERROR',\n  WEBHOOK_ERROR = 'WEBHOOK_ERROR',\n  FILE_ERROR = 'FILE_ERROR'\n}\n\n// Error severity levels\nexport enum ErrorSeverity {\n  LOW = 'LOW',\n  MEDIUM = 'MEDIUM',\n  HIGH = 'HIGH',\n  CRITICAL = 'CRITICAL'\n}\n\n// Structured error interface\nexport interface StructuredError {\n  type: ErrorType;\n  severity: ErrorSeverity;\n  message: string;\n  code?: string;\n  details?: Record<string, any>;\n  timestamp: string;\n  requestId?: string;\n  userId?: number;\n  workspaceId?: string;\n  stack?: string;\n  retryable: boolean;\n  retryAfter?: number;\n}\n\n// Error response for MCP tools\nexport interface McpErrorResponse {\n  content: Array<{\n    type: 'text';\n    text: string;\n  }>;\n  isError: true;\n  _meta?: {\n    errorType: ErrorType;\n    severity: ErrorSeverity;\n    retryable: boolean;\n    retryAfter?: number;\n  };\n}\n\n/**\n * Create a structured error\n */\nexport const createStructuredError = (\n  type: ErrorType,\n  message: string,\n  options: {\n    severity?: ErrorSeverity;\n    code?: string;\n    details?: Record<string, any>;\n    requestId?: string;\n    userId?: number;\n    workspaceId?: string;\n    originalError?: Error;\n    retryable?: boolean;\n    retryAfter?: number;\n  } = {}\n): StructuredError => {\n  return {\n    type,\n    severity: options.severity || ErrorSeverity.MEDIUM,\n    message,\n    code: options.code,\n    details: options.details,\n    timestamp: new Date().toISOString(),\n    requestId: options.requestId,\n    userId: options.userId,\n    workspaceId: options.workspaceId,\n    stack: options.originalError?.stack,\n    retryable: options.retryable || false,\n    retryAfter: options.retryAfter\n  };\n};\n\n/**\n * Convert structured error to MCP response\n */\nexport const errorToMcpResponse = (error: StructuredError): McpErrorResponse => {\n  const userMessage = getUserFriendlyMessage(error);\n  \n  return {\n    content: [{\n      type: 'text',\n      text: userMessage\n    }],\n    isError: true,\n    _meta: {\n      errorType: error.type,\n      severity: error.severity,\n      retryable: error.retryable,\n      retryAfter: error.retryAfter\n    }\n  };\n};\n\n/**\n * Get user-friendly error message\n */\nexport const getUserFriendlyMessage = (error: StructuredError): string => {\n  const baseMessage = `Error: ${error.message}`;\n  \n  let additionalInfo = '';\n  \n  if (error.retryable && error.retryAfter) {\n    additionalInfo += `\\n\\nThis operation can be retried after ${error.retryAfter} seconds.`;\n  } else if (error.retryable) {\n    additionalInfo += '\\n\\nThis operation can be retried.';\n  }\n  \n  if (error.type === ErrorType.RATE_LIMIT) {\n    additionalInfo += '\\n\\nPlease reduce the frequency of requests.';\n  }\n  \n  if (error.type === ErrorType.AUTHENTICATION) {\n    additionalInfo += '\\n\\nPlease check your ClickUp API token.';\n  }\n  \n  if (error.type === ErrorType.VALIDATION && error.details?.errors) {\n    const validationErrors = Array.isArray(error.details.errors) \n      ? error.details.errors.join(', ')\n      : error.details.errors;\n    additionalInfo += `\\n\\nValidation errors: ${validationErrors}`;\n  }\n  \n  return baseMessage + additionalInfo;\n};\n\n/**\n * Handle ClickUp API errors\n */\nexport const handleClickUpApiError = (error: any, context?: {\n  operation?: string;\n  requestId?: string;\n  userId?: number;\n  workspaceId?: string;\n}): StructuredError => {\n  if (error.response) {\n    const status = error.response.status;\n    const data = error.response.data;\n    \n    // Map HTTP status codes to error types\n    let errorType: ErrorType;\n    let severity: ErrorSeverity;\n    let retryable = false;\n    let retryAfter: number | undefined;\n    \n    switch (status) {\n      case 400:\n        errorType = ErrorType.VALIDATION;\n        severity = ErrorSeverity.LOW;\n        break;\n      case 401:\n        errorType = ErrorType.AUTHENTICATION;\n        severity = ErrorSeverity.HIGH;\n        break;\n      case 403:\n        errorType = ErrorType.AUTHORIZATION;\n        severity = ErrorSeverity.HIGH;\n        break;\n      case 404:\n        errorType = ErrorType.NOT_FOUND;\n        severity = ErrorSeverity.LOW;\n        break;\n      case 429:\n        errorType = ErrorType.RATE_LIMIT;\n        severity = ErrorSeverity.MEDIUM;\n        retryable = true;\n        retryAfter = parseInt(error.response.headers['retry-after']) || 60;\n        break;\n      case 500:\n      case 502:\n      case 503:\n      case 504:\n        errorType = ErrorType.API_ERROR;\n        severity = ErrorSeverity.HIGH;\n        retryable = true;\n        retryAfter = 30;\n        break;\n      default:\n        errorType = ErrorType.API_ERROR;\n        severity = ErrorSeverity.MEDIUM;\n        retryable = status >= 500;\n    }\n    \n    return createStructuredError(\n      errorType,\n      data?.err || data?.error || error.message || `HTTP ${status} error`,\n      {\n        severity,\n        code: status.toString(),\n        details: {\n          status,\n          data,\n          operation: context?.operation\n        },\n        requestId: context?.requestId,\n        userId: context?.userId,\n        workspaceId: context?.workspaceId,\n        originalError: error,\n        retryable,\n        retryAfter\n      }\n    );\n  }\n  \n  if (error.code === 'ECONNABORTED' || error.code === 'ETIMEDOUT') {\n    return createStructuredError(\n      ErrorType.TIMEOUT,\n      'Request timed out',\n      {\n        severity: ErrorSeverity.MEDIUM,\n        code: error.code,\n        details: { operation: context?.operation },\n        requestId: context?.requestId,\n        userId: context?.userId,\n        workspaceId: context?.workspaceId,\n        originalError: error,\n        retryable: true,\n        retryAfter: 10\n      }\n    );\n  }\n  \n  if (error.code === 'ENOTFOUND' || error.code === 'ECONNREFUSED') {\n    return createStructuredError(\n      ErrorType.NETWORK_ERROR,\n      'Network connection failed',\n      {\n        severity: ErrorSeverity.HIGH,\n        code: error.code,\n        details: { operation: context?.operation },\n        requestId: context?.requestId,\n        userId: context?.userId,\n        workspaceId: context?.workspaceId,\n        originalError: error,\n        retryable: true,\n        retryAfter: 30\n      }\n    );\n  }\n  \n  return createStructuredError(\n    ErrorType.INTERNAL_ERROR,\n    error.message || 'Unknown error occurred',\n    {\n      severity: ErrorSeverity.HIGH,\n      details: { operation: context?.operation },\n      requestId: context?.requestId,\n      userId: context?.userId,\n      workspaceId: context?.workspaceId,\n      originalError: error,\n      retryable: false\n    }\n  );\n};\n\n/**\n * Handle validation errors\n */\nexport const handleValidationError = (\n  error: z.ZodError,\n  context?: {\n    operation?: string;\n    requestId?: string;\n  }\n): StructuredError => {\n  const errors = error.errors.map(err => `${err.path.join('.')}: ${err.message}`);\n  \n  return createStructuredError(\n    ErrorType.VALIDATION,\n    'Input validation failed',\n    {\n      severity: ErrorSeverity.LOW,\n      details: {\n        errors,\n        operation: context?.operation\n      },\n      requestId: context?.requestId,\n      retryable: false\n    }\n  );\n};\n\n/**\n * Handle webhook errors\n */\nexport const handleWebhookError = (\n  error: any,\n  context?: {\n    webhookId?: string;\n    eventType?: string;\n    requestId?: string;\n  }\n): StructuredError => {\n  return createStructuredError(\n    ErrorType.WEBHOOK_ERROR,\n    error.message || 'Webhook processing failed',\n    {\n      severity: ErrorSeverity.MEDIUM,\n      details: {\n        webhookId: context?.webhookId,\n        eventType: context?.eventType\n      },\n      requestId: context?.requestId,\n      originalError: error,\n      retryable: true,\n      retryAfter: 60\n    }\n  );\n};\n\n/**\n * Handle file operation errors\n */\nexport const handleFileError = (\n  error: any,\n  context?: {\n    filename?: string;\n    operation?: string;\n    requestId?: string;\n  }\n): StructuredError => {\n  let message = error.message || 'File operation failed';\n  let severity = ErrorSeverity.MEDIUM;\n  \n  if (error.code === 'ENOENT') {\n    message = 'File not found';\n    severity = ErrorSeverity.LOW;\n  } else if (error.code === 'EACCES') {\n    message = 'Permission denied';\n    severity = ErrorSeverity.HIGH;\n  } else if (error.code === 'ENOSPC') {\n    message = 'No space left on device';\n    severity = ErrorSeverity.HIGH;\n  }\n  \n  return createStructuredError(\n    ErrorType.FILE_ERROR,\n    message,\n    {\n      severity,\n      code: error.code,\n      details: {\n        filename: context?.filename,\n        operation: context?.operation\n      },\n      requestId: context?.requestId,\n      originalError: error,\n      retryable: error.code !== 'EACCES'\n    }\n  );\n};\n\n/**\n * Retry mechanism with exponential backoff\n */\nexport class RetryManager {\n  private maxRetries: number;\n  private baseDelay: number;\n  private maxDelay: number;\n  \n  constructor(maxRetries = 3, baseDelay = 1000, maxDelay = 30000) {\n    this.maxRetries = maxRetries;\n    this.baseDelay = baseDelay;\n    this.maxDelay = maxDelay;\n  }\n  \n  async executeWithRetry<T>(\n    operation: () => Promise<T>,\n    context?: {\n      operationName?: string;\n      requestId?: string;\n    }\n  ): Promise<T> {\n    let lastError: StructuredError | undefined;\n    \n    for (let attempt = 0; attempt <= this.maxRetries; attempt++) {\n      try {\n        return await operation();\n      } catch (error) {\n        const structuredError = error instanceof Error \n          ? handleClickUpApiError(error, { operation: context?.operationName, requestId: context?.requestId })\n          : error as StructuredError;\n        \n        lastError = structuredError;\n        \n        // Don't retry if not retryable or on last attempt\n        if (!structuredError.retryable || attempt === this.maxRetries) {\n          break;\n        }\n        \n        // Calculate delay with exponential backoff\n        const delay = Math.min(\n          this.baseDelay * Math.pow(2, attempt),\n          structuredError.retryAfter ? structuredError.retryAfter * 1000 : this.maxDelay\n        );\n        \n        console.warn(`Attempt ${attempt + 1} failed, retrying in ${delay}ms:`, structuredError.message);\n        await new Promise(resolve => setTimeout(resolve, delay));\n      }\n    }\n    \n    throw lastError;\n  }\n}\n\n/**\n * Global error logger\n */\nexport const logError = (error: StructuredError): void => {\n  const logLevel = error.severity === ErrorSeverity.CRITICAL ? 'error' :\n                   error.severity === ErrorSeverity.HIGH ? 'error' :\n                   error.severity === ErrorSeverity.MEDIUM ? 'warn' : 'info';\n  \n  const logData = {\n    timestamp: error.timestamp,\n    type: error.type,\n    severity: error.severity,\n    message: error.message,\n    code: error.code,\n    details: error.details,\n    requestId: error.requestId,\n    userId: error.userId,\n    workspaceId: error.workspaceId,\n    retryable: error.retryable\n  };\n  \n  console[logLevel](`[${error.type}] ${error.message}`, logData);\n  \n  // In production, send to monitoring service\n  if (error.severity === ErrorSeverity.CRITICAL) {\n    // Send alert to monitoring system\n    console.error('CRITICAL ERROR - IMMEDIATE ATTENTION REQUIRED', logData);\n  }\n};\n\n/**\n * Wrap MCP tool execution with error handling\n */\nexport const wrapMcpTool = <T extends any[], R>(\n  toolName: string,\n  schema: z.ZodSchema,\n  handler: (...args: T) => Promise<R>\n) => {\n  return async (args: any): Promise<any> => {\n    const requestId = generateRequestId();\n    \n    try {\n      // Validate input\n      const validatedArgs = schema.parse(args);\n      \n      // Execute handler with proper type casting\n      const result = await (handler as any)(validatedArgs);\n      \n      // Return success response\n      return {\n        content: [{\n          type: 'text',\n          text: typeof result === 'string' ? result : JSON.stringify(result, null, 2)\n        }]\n      };\n    } catch (error) {\n      let structuredError: StructuredError;\n      \n      if (error instanceof z.ZodError) {\n        structuredError = handleValidationError(error, { operation: toolName, requestId });\n      } else if (error instanceof Error) {\n        structuredError = handleClickUpApiError(error, { operation: toolName, requestId });\n      } else {\n        structuredError = error as StructuredError;\n      }\n      \n      // Log error\n      logError(structuredError);\n      \n      // Return error response\n      return errorToMcpResponse(structuredError);\n    }\n  };\n};\n\n/**\n * Generate unique request ID\n */\nexport const generateRequestId = (): string => {\n  return `req_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n};\n\n/**\n * Health check utilities\n */\nexport const performHealthCheck = async (): Promise<{\n  status: 'healthy' | 'degraded' | 'unhealthy';\n  checks: Record<string, {\n    status: 'pass' | 'fail';\n    message?: string;\n    duration?: number;\n  }>;\n}> => {\n  const checks: Record<string, any> = {};\n  \n  // Check environment variables\n  const startTime = Date.now();\n  try {\n    const envValidation = require('../utils/security').validateEnvironment();\n    checks.environment = {\n      status: envValidation.isValid ? 'pass' : 'fail',\n      message: envValidation.isValid ? 'All required environment variables present' : envValidation.errors.join(', '),\n      duration: Date.now() - startTime\n    };\n  } catch (error) {\n    checks.environment = {\n      status: 'fail',\n      message: 'Failed to validate environment',\n      duration: Date.now() - startTime\n    };\n  }\n  \n  // Check memory usage\n  const memoryUsage = process.memoryUsage();\n  const memoryThreshold = 500 * 1024 * 1024; // 500MB\n  checks.memory = {\n    status: memoryUsage.heapUsed < memoryThreshold ? 'pass' : 'fail',\n    message: `Heap used: ${Math.round(memoryUsage.heapUsed / 1024 / 1024)}MB`,\n    duration: 0\n  };\n  \n  // Determine overall status\n  const failedChecks = Object.values(checks).filter(check => check.status === 'fail').length;\n  const status = failedChecks === 0 ? 'healthy' : failedChecks <= 1 ? 'degraded' : 'unhealthy';\n  \n  return { status, checks };\n};\n"],"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","ignoreList":[]}
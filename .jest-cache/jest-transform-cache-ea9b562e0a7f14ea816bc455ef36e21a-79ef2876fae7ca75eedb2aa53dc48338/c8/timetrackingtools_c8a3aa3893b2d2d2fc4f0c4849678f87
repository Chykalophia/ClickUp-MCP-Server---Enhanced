7cec48c18e05f99ff3bd468f4329b3b3
/* istanbul ignore next */
function cov_1zvb3s9j39() {
  var path = "/Users/peterkrzyzek/Development/clickup-mcp-server/src/tools/time-tracking-tools.ts";
  var hash = "90ab89f734effd152be8fa46f6ba798243b92964";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/peterkrzyzek/Development/clickup-mcp-server/src/tools/time-tracking-tools.ts",
    statementMap: {
      "0": {
        start: {
          line: 5,
          column: 22
        },
        end: {
          line: 5,
          column: 43
        }
      },
      "1": {
        start: {
          line: 6,
          column: 27
        },
        end: {
          line: 6,
          column: 74
        }
      },
      "2": {
        start: {
          line: 11,
          column: 4
        },
        end: {
          line: 50,
          column: 7
        }
      },
      "3": {
        start: {
          line: 23,
          column: 8
        },
        end: {
          line: 49,
          column: 9
        }
      },
      "4": {
        start: {
          line: 24,
          column: 27
        },
        end: {
          line: 34,
          column: 13
        }
      },
      "5": {
        start: {
          line: 35,
          column: 32
        },
        end: {
          line: 35,
          column: 88
        }
      },
      "6": {
        start: {
          line: 36,
          column: 12
        },
        end: {
          line: 41,
          column: 14
        }
      },
      "7": {
        start: {
          line: 44,
          column: 12
        },
        end: {
          line: 44,
          column: 64
        }
      },
      "8": {
        start: {
          line: 45,
          column: 12
        },
        end: {
          line: 48,
          column: 14
        }
      },
      "9": {
        start: {
          line: 51,
          column: 4
        },
        end: {
          line: 90,
          column: 7
        }
      },
      "10": {
        start: {
          line: 65,
          column: 8
        },
        end: {
          line: 89,
          column: 9
        }
      },
      "11": {
        start: {
          line: 66,
          column: 27
        },
        end: {
          line: 74,
          column: 13
        }
      },
      "12": {
        start: {
          line: 75,
          column: 30
        },
        end: {
          line: 75,
          column: 87
        }
      },
      "13": {
        start: {
          line: 76,
          column: 12
        },
        end: {
          line: 81,
          column: 14
        }
      },
      "14": {
        start: {
          line: 84,
          column: 12
        },
        end: {
          line: 84,
          column: 63
        }
      },
      "15": {
        start: {
          line: 85,
          column: 12
        },
        end: {
          line: 88,
          column: 14
        }
      },
      "16": {
        start: {
          line: 91,
          column: 4
        },
        end: {
          line: 129,
          column: 7
        }
      },
      "17": {
        start: {
          line: 105,
          column: 8
        },
        end: {
          line: 128,
          column: 9
        }
      },
      "18": {
        start: {
          line: 106,
          column: 27
        },
        end: {
          line: 113,
          column: 13
        }
      },
      "19": {
        start: {
          line: 114,
          column: 37
        },
        end: {
          line: 114,
          column: 104
        }
      },
      "20": {
        start: {
          line: 115,
          column: 12
        },
        end: {
          line: 120,
          column: 14
        }
      },
      "21": {
        start: {
          line: 123,
          column: 12
        },
        end: {
          line: 123,
          column: 63
        }
      },
      "22": {
        start: {
          line: 124,
          column: 12
        },
        end: {
          line: 127,
          column: 14
        }
      },
      "23": {
        start: {
          line: 130,
          column: 4
        },
        end: {
          line: 150,
          column: 7
        }
      },
      "24": {
        start: {
          line: 134,
          column: 8
        },
        end: {
          line: 149,
          column: 9
        }
      },
      "25": {
        start: {
          line: 135,
          column: 12
        },
        end: {
          line: 135,
          column: 72
        }
      },
      "26": {
        start: {
          line: 136,
          column: 12
        },
        end: {
          line: 141,
          column: 14
        }
      },
      "27": {
        start: {
          line: 144,
          column: 12
        },
        end: {
          line: 144,
          column: 63
        }
      },
      "28": {
        start: {
          line: 145,
          column: 12
        },
        end: {
          line: 148,
          column: 14
        }
      },
      "29": {
        start: {
          line: 154,
          column: 4
        },
        end: {
          line: 174,
          column: 7
        }
      },
      "30": {
        start: {
          line: 158,
          column: 8
        },
        end: {
          line: 173,
          column: 9
        }
      },
      "31": {
        start: {
          line: 159,
          column: 34
        },
        end: {
          line: 159,
          column: 94
        }
      },
      "32": {
        start: {
          line: 160,
          column: 12
        },
        end: {
          line: 165,
          column: 14
        }
      },
      "33": {
        start: {
          line: 168,
          column: 12
        },
        end: {
          line: 168,
          column: 66
        }
      },
      "34": {
        start: {
          line: 169,
          column: 12
        },
        end: {
          line: 172,
          column: 14
        }
      },
      "35": {
        start: {
          line: 175,
          column: 4
        },
        end: {
          line: 196,
          column: 7
        }
      },
      "36": {
        start: {
          line: 180,
          column: 8
        },
        end: {
          line: 195,
          column: 9
        }
      },
      "37": {
        start: {
          line: 181,
          column: 12
        },
        end: {
          line: 181,
          column: 74
        }
      },
      "38": {
        start: {
          line: 182,
          column: 12
        },
        end: {
          line: 187,
          column: 14
        }
      },
      "39": {
        start: {
          line: 190,
          column: 12
        },
        end: {
          line: 190,
          column: 58
        }
      },
      "40": {
        start: {
          line: 191,
          column: 12
        },
        end: {
          line: 194,
          column: 14
        }
      },
      "41": {
        start: {
          line: 197,
          column: 4
        },
        end: {
          line: 218,
          column: 7
        }
      },
      "42": {
        start: {
          line: 202,
          column: 8
        },
        end: {
          line: 217,
          column: 9
        }
      },
      "43": {
        start: {
          line: 203,
          column: 12
        },
        end: {
          line: 203,
          column: 71
        }
      },
      "44": {
        start: {
          line: 204,
          column: 12
        },
        end: {
          line: 209,
          column: 14
        }
      },
      "45": {
        start: {
          line: 212,
          column: 12
        },
        end: {
          line: 212,
          column: 58
        }
      },
      "46": {
        start: {
          line: 213,
          column: 12
        },
        end: {
          line: 216,
          column: 14
        }
      },
      "47": {
        start: {
          line: 222,
          column: 4
        },
        end: {
          line: 265,
          column: 7
        }
      },
      "48": {
        start: {
          line: 232,
          column: 8
        },
        end: {
          line: 264,
          column: 9
        }
      },
      "49": {
        start: {
          line: 233,
          column: 27
        },
        end: {
          line: 241,
          column: 13
        }
      },
      "50": {
        start: {
          line: 242,
          column: 32
        },
        end: {
          line: 242,
          column: 88
        }
      },
      "51": {
        start: {
          line: 244,
          column: 35
        },
        end: {
          line: 244,
          column: 80
        }
      },
      "52": {
        start: {
          line: 244,
          column: 43
        },
        end: {
          line: 244,
          column: 80
        }
      },
      "53": {
        start: {
          line: 245,
          column: 37
        },
        end: {
          line: 250,
          column: 13
        }
      },
      "54": {
        start: {
          line: 251,
          column: 12
        },
        end: {
          line: 256,
          column: 14
        }
      },
      "55": {
        start: {
          line: 259,
          column: 12
        },
        end: {
          line: 259,
          column: 64
        }
      },
      "56": {
        start: {
          line: 260,
          column: 12
        },
        end: {
          line: 263,
          column: 14
        }
      },
      "57": {
        start: {
          line: 269,
          column: 4
        },
        end: {
          line: 304,
          column: 7
        }
      },
      "58": {
        start: {
          line: 278,
          column: 8
        },
        end: {
          line: 303,
          column: 9
        }
      },
      "59": {
        start: {
          line: 279,
          column: 32
        },
        end: {
          line: 279,
          column: 72
        }
      },
      "60": {
        start: {
          line: 281,
          column: 30
        },
        end: {
          line: 287,
          column: 14
        }
      },
      "61": {
        start: {
          line: 289,
          column: 12
        },
        end: {
          line: 289,
          column: 71
        }
      },
      "62": {
        start: {
          line: 290,
          column: 12
        },
        end: {
          line: 295,
          column: 14
        }
      },
      "63": {
        start: {
          line: 298,
          column: 12
        },
        end: {
          line: 298,
          column: 64
        }
      },
      "64": {
        start: {
          line: 299,
          column: 12
        },
        end: {
          line: 302,
          column: 14
        }
      },
      "65": {
        start: {
          line: 305,
          column: 4
        },
        end: {
          line: 327,
          column: 7
        }
      },
      "66": {
        start: {
          line: 310,
          column: 8
        },
        end: {
          line: 326,
          column: 9
        }
      },
      "67": {
        start: {
          line: 311,
          column: 38
        },
        end: {
          line: 311,
          column: 102
        }
      },
      "68": {
        start: {
          line: 312,
          column: 35
        },
        end: {
          line: 312,
          column: 91
        }
      },
      "69": {
        start: {
          line: 313,
          column: 12
        },
        end: {
          line: 318,
          column: 14
        }
      },
      "70": {
        start: {
          line: 321,
          column: 12
        },
        end: {
          line: 321,
          column: 63
        }
      },
      "71": {
        start: {
          line: 322,
          column: 12
        },
        end: {
          line: 325,
          column: 14
        }
      }
    },
    fnMap: {
      "0": {
        name: "setupTimeTrackingTools",
        decl: {
          start: {
            line: 7,
            column: 16
          },
          end: {
            line: 7,
            column: 38
          }
        },
        loc: {
          start: {
            line: 7,
            column: 47
          },
          end: {
            line: 328,
            column: 1
          }
        },
        line: 7
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 22,
            column: 7
          },
          end: {
            line: 22,
            column: 8
          }
        },
        loc: {
          start: {
            line: 22,
            column: 144
          },
          end: {
            line: 50,
            column: 5
          }
        },
        line: 22
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 64,
            column: 7
          },
          end: {
            line: 64,
            column: 8
          }
        },
        loc: {
          start: {
            line: 64,
            column: 90
          },
          end: {
            line: 90,
            column: 5
          }
        },
        line: 64
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 104,
            column: 7
          },
          end: {
            line: 104,
            column: 8
          }
        },
        loc: {
          start: {
            line: 104,
            column: 90
          },
          end: {
            line: 129,
            column: 5
          }
        },
        line: 104
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 133,
            column: 7
          },
          end: {
            line: 133,
            column: 8
          }
        },
        loc: {
          start: {
            line: 133,
            column: 40
          },
          end: {
            line: 150,
            column: 5
          }
        },
        line: 133
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 157,
            column: 7
          },
          end: {
            line: 157,
            column: 8
          }
        },
        loc: {
          start: {
            line: 157,
            column: 40
          },
          end: {
            line: 174,
            column: 5
          }
        },
        line: 157
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 179,
            column: 7
          },
          end: {
            line: 179,
            column: 8
          }
        },
        loc: {
          start: {
            line: 179,
            column: 47
          },
          end: {
            line: 196,
            column: 5
          }
        },
        line: 179
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 201,
            column: 7
          },
          end: {
            line: 201,
            column: 8
          }
        },
        loc: {
          start: {
            line: 201,
            column: 45
          },
          end: {
            line: 218,
            column: 5
          }
        },
        line: 201
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 231,
            column: 7
          },
          end: {
            line: 231,
            column: 8
          }
        },
        loc: {
          start: {
            line: 231,
            column: 101
          },
          end: {
            line: 265,
            column: 5
          }
        },
        line: 231
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 244,
            column: 35
          },
          end: {
            line: 244,
            column: 36
          }
        },
        loc: {
          start: {
            line: 244,
            column: 43
          },
          end: {
            line: 244,
            column: 80
          }
        },
        line: 244
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 277,
            column: 7
          },
          end: {
            line: 277,
            column: 8
          }
        },
        loc: {
          start: {
            line: 277,
            column: 68
          },
          end: {
            line: 304,
            column: 5
          }
        },
        line: 277
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 309,
            column: 7
          },
          end: {
            line: 309,
            column: 8
          }
        },
        loc: {
          start: {
            line: 309,
            column: 60
          },
          end: {
            line: 327,
            column: 5
          }
        },
        line: 309
      }
    },
    branchMap: {},
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0
    },
    b: {},
    inputSourceMap: {
      file: "/Users/peterkrzyzek/Development/clickup-mcp-server/src/tools/time-tracking-tools.ts",
      mappings: "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",
      names: [],
      sources: ["/Users/peterkrzyzek/Development/clickup-mcp-server/src/tools/time-tracking-tools.ts"],
      sourcesContent: ["import { McpServer } from '@modelcontextprotocol/sdk/server/mcp.js';\nimport { z } from 'zod';\nimport { createClickUpClient } from '../clickup-client/index.js';\nimport { createEnhancedTimeTrackingClient } from '../clickup-client/time-tracking-enhanced.js';\nimport { \n  TeamIdSchema, \n  TimerIdSchema, \n  CreateTimeEntrySchema,\n  UpdateTimeEntrySchema,\n  GetTimeEntriesSchema,\n  TimeEntryTagSchema\n} from '../schemas/time-tracking-schemas.js';\n\n// Create clients\nconst clickUpClient = createClickUpClient();\nconst timeTrackingClient = createEnhancedTimeTrackingClient(clickUpClient);\n\nexport function setupTimeTrackingTools(server: McpServer): void {\n\n  // ========================================\n  // TIME ENTRY MANAGEMENT OPERATIONS\n  // ========================================\n\n  server.tool(\n    'get_time_entries',\n    'Get time entries for a team with filtering options. Supports filtering by date range, user, task, and project.',\n    {\n      team_id: z.string().min(1).describe('The ID of the team to get time entries for'),\n      start_date: z.number().positive().optional().describe('Filter by start date (Unix timestamp)'),\n      end_date: z.number().positive().optional().describe('Filter by end date (Unix timestamp)'),\n      assignee: z.number().positive().optional().describe('Filter by user ID'),\n      include_task_tags: z.boolean().optional().default(false).describe('Include task tags in response'),\n      include_location_names: z.boolean().optional().default(false).describe('Include location names'),\n      space_id: z.string().optional().describe('Filter by space ID'),\n      folder_id: z.string().optional().describe('Filter by folder ID'),\n      list_id: z.string().optional().describe('Filter by list ID'),\n      task_id: z.string().optional().describe('Filter by task ID')\n    },\n    async ({ team_id, start_date, end_date, assignee, include_task_tags, include_location_names, space_id, folder_id, list_id, task_id }) => {\n      try {\n        const params = {\n          start_date,\n          end_date,\n          assignee,\n          include_task_tags,\n          include_location_names,\n          space_id,\n          folder_id,\n          list_id,\n          task_id\n        };\n\n        const timeEntries = await timeTrackingClient.getTimeEntries(team_id, params);\n\n        return {\n          content: [{ \n            type: 'text', \n            text: `Time entries for team ${team_id}:\\n\\n${JSON.stringify(timeEntries, null, 2)}` \n          }]\n        };\n      } catch (error: any) {\n        console.error('Error getting time entries:', error);\n        return {\n          content: [{ type: 'text', text: `Error getting time entries: ${error.message}` }],\n          isError: true\n        };\n      }\n    }\n  );\n\n  server.tool(\n    'create_time_entry',\n    'Create a new time entry for time tracking. Can be used for manual time logging or creating timer-based entries.',\n    {\n      team_id: z.string().min(1).describe('The ID of the team to create the time entry for'),\n      description: z.string().min(1).describe('Description of the time entry'),\n      start: z.number().positive().describe('Start time (Unix timestamp in milliseconds)'),\n      billable: z.boolean().default(false).describe('Whether the time is billable'),\n      end: z.number().positive().optional().describe('End time (Unix timestamp in milliseconds)'),\n      task_id: z.string().optional().describe('Associated task ID'),\n      assignee: z.number().positive().optional().describe('User ID for the time entry'),\n      tags: z.array(z.object({\n        name: z.string().min(1).describe('Tag name'),\n        tag_fg: z.string().optional().describe('Tag foreground color'),\n        tag_bg: z.string().optional().describe('Tag background color')\n      })).optional().describe('Array of tags for the time entry')\n    },\n    async ({ team_id, description, start, billable, end, task_id, assignee, tags }) => {\n      try {\n        const params = {\n          description,\n          start,\n          billable,\n          end,\n          task_id,\n          assignee,\n          tags\n        };\n\n        const timeEntry = await timeTrackingClient.createTimeEntry(team_id, params);\n\n        return {\n          content: [{ \n            type: 'text', \n            text: `Time entry created successfully!\\n\\n${JSON.stringify(timeEntry, null, 2)}` \n          }]\n        };\n      } catch (error: any) {\n        console.error('Error creating time entry:', error);\n        return {\n          content: [{ type: 'text', text: `Error creating time entry: ${error.message}` }],\n          isError: true\n        };\n      }\n    }\n  );\n\n  server.tool(\n    'update_time_entry',\n    'Update an existing time entry. Can modify description, times, billable status, and associated task.',\n    {\n      team_id: z.string().min(1).describe('The ID of the team'),\n      timer_id: z.string().min(1).describe('The ID of the time entry to update'),\n      description: z.string().min(1).optional().describe('New description for the time entry'),\n      start: z.number().positive().optional().describe('New start time (Unix timestamp in milliseconds)'),\n      end: z.number().positive().optional().describe('New end time (Unix timestamp in milliseconds)'),\n      billable: z.boolean().optional().describe('Update billable status'),\n      task_id: z.string().optional().describe('Change associated task ID'),\n      tags: z.array(z.object({\n        name: z.string().min(1).describe('Tag name'),\n        tag_fg: z.string().optional().describe('Tag foreground color'),\n        tag_bg: z.string().optional().describe('Tag background color')\n      })).optional().describe('Update tags for the time entry')\n    },\n    async ({ team_id, timer_id, description, start, end, billable, task_id, tags }) => {\n      try {\n        const params = {\n          description,\n          start,\n          end,\n          billable,\n          task_id,\n          tags\n        };\n\n        const updatedTimeEntry = await timeTrackingClient.updateTimeEntry(team_id, timer_id, params);\n\n        return {\n          content: [{ \n            type: 'text', \n            text: `Time entry updated successfully!\\n\\n${JSON.stringify(updatedTimeEntry, null, 2)}` \n          }]\n        };\n      } catch (error: any) {\n        console.error('Error updating time entry:', error);\n        return {\n          content: [{ type: 'text', text: `Error updating time entry: ${error.message}` }],\n          isError: true\n        };\n      }\n    }\n  );\n\n  server.tool(\n    'delete_time_entry',\n    'Delete a time entry from ClickUp. This action cannot be undone.',\n    {\n      team_id: z.string().min(1).describe('The ID of the team'),\n      timer_id: z.string().min(1).describe('The ID of the time entry to delete')\n    },\n    async ({ team_id, timer_id }) => {\n      try {\n        await timeTrackingClient.deleteTimeEntry(team_id, timer_id);\n\n        return {\n          content: [{ \n            type: 'text', \n            text: `Time entry ${timer_id} deleted successfully from team ${team_id}.` \n          }]\n        };\n      } catch (error: any) {\n        console.error('Error deleting time entry:', error);\n        return {\n          content: [{ type: 'text', text: `Error deleting time entry: ${error.message}` }],\n          isError: true\n        };\n      }\n    }\n  );\n\n  // ========================================\n  // TIMER OPERATIONS\n  // ========================================\n\n  server.tool(\n    'get_running_timers',\n    'Get currently running timers for a team. Shows active time tracking sessions.',\n    {\n      team_id: z.string().min(1).describe('The ID of the team to get running timers for'),\n      assignee: z.number().positive().optional().describe('Filter by specific user ID')\n    },\n    async ({ team_id, assignee }) => {\n      try {\n        const runningTimers = await timeTrackingClient.getRunningTimers(team_id, assignee);\n\n        return {\n          content: [{ \n            type: 'text', \n            text: `Running timers for team ${team_id}:\\n\\n${JSON.stringify(runningTimers, null, 2)}` \n          }]\n        };\n      } catch (error: any) {\n        console.error('Error getting running timers:', error);\n        return {\n          content: [{ type: 'text', text: `Error getting running timers: ${error.message}` }],\n          isError: true\n        };\n      }\n    }\n  );\n\n  server.tool(\n    'start_timer',\n    'Start a timer for time tracking. Creates an active time tracking session.',\n    {\n      team_id: z.string().min(1).describe('The ID of the team'),\n      timer_id: z.string().min(1).describe('The ID of the time entry to start timing'),\n      start: z.number().positive().optional().describe('Custom start time (Unix timestamp in milliseconds, defaults to current time)')\n    },\n    async ({ team_id, timer_id, start }) => {\n      try {\n        await timeTrackingClient.startTimer(team_id, timer_id, start);\n\n        return {\n          content: [{ \n            type: 'text', \n            text: `Timer started successfully for time entry ${timer_id} in team ${team_id}.` \n          }]\n        };\n      } catch (error: any) {\n        console.error('Error starting timer:', error);\n        return {\n          content: [{ type: 'text', text: `Error starting timer: ${error.message}` }],\n          isError: true\n        };\n      }\n    }\n  );\n\n  server.tool(\n    'stop_timer',\n    'Stop a running timer. Ends the active time tracking session and records the duration.',\n    {\n      team_id: z.string().min(1).describe('The ID of the team'),\n      timer_id: z.string().min(1).describe('The ID of the time entry to stop timing'),\n      end: z.number().positive().optional().describe('Custom end time (Unix timestamp in milliseconds, defaults to current time)')\n    },\n    async ({ team_id, timer_id, end }) => {\n      try {\n        await timeTrackingClient.stopTimer(team_id, timer_id, end);\n\n        return {\n          content: [{ \n            type: 'text', \n            text: `Timer stopped successfully for time entry ${timer_id} in team ${team_id}.` \n          }]\n        };\n      } catch (error: any) {\n        console.error('Error stopping timer:', error);\n        return {\n          content: [{ type: 'text', text: `Error stopping timer: ${error.message}` }],\n          isError: true\n        };\n      }\n    }\n  );\n\n  // ========================================\n  // TIME ANALYTICS & REPORTING\n  // ========================================\n\n  server.tool(\n    'get_time_summary',\n    'Get time tracking summary and analytics. Provides aggregated time data with breakdowns by user and task.',\n    {\n      team_id: z.string().min(1).describe('The ID of the team to get time summary for'),\n      start_date: z.number().positive().optional().describe('Filter by start date (Unix timestamp)'),\n      end_date: z.number().positive().optional().describe('Filter by end date (Unix timestamp)'),\n      assignee: z.number().positive().optional().describe('Filter by user ID'),\n      task_id: z.string().optional().describe('Filter by task ID'),\n      list_id: z.string().optional().describe('Filter by list ID'),\n      folder_id: z.string().optional().describe('Filter by folder ID'),\n      space_id: z.string().optional().describe('Filter by space ID')\n    },\n    async ({ team_id, start_date, end_date, assignee, task_id, list_id, folder_id, space_id }) => {\n      try {\n        const params = {\n          start_date,\n          end_date,\n          assignee,\n          task_id,\n          list_id,\n          folder_id,\n          space_id\n        };\n\n        const timeSummary = await timeTrackingClient.getTimeSummary(team_id, params);\n\n        // Format durations for better readability\n        const formatDuration = (ms: number) => timeTrackingClient.formatDuration(ms);\n\n        const formattedSummary = {\n          ...timeSummary,\n          total_duration_formatted: formatDuration(timeSummary.total_duration),\n          billable_duration_formatted: formatDuration(timeSummary.billable_duration),\n          non_billable_duration_formatted: formatDuration(timeSummary.non_billable_duration)\n        };\n\n        return {\n          content: [{ \n            type: 'text', \n            text: `Time summary for team ${team_id}:\\n\\n${JSON.stringify(formattedSummary, null, 2)}` \n          }]\n        };\n      } catch (error: any) {\n        console.error('Error getting time summary:', error);\n        return {\n          content: [{ type: 'text', text: `Error getting time summary: ${error.message}` }],\n          isError: true\n        };\n      }\n    }\n  );\n\n  // ========================================\n  // HELPER TOOLS\n  // ========================================\n\n  server.tool(\n    'create_timer_entry',\n    'Create a new time entry and immediately start the timer. Convenient for starting time tracking in one step.',\n    {\n      team_id: z.string().min(1).describe('The ID of the team'),\n      description: z.string().min(1).describe('Description of what you are working on'),\n      task_id: z.string().optional().describe('Associated task ID'),\n      billable: z.boolean().default(false).describe('Whether the time is billable'),\n      tags: z.array(z.object({\n        name: z.string().min(1).describe('Tag name')\n      })).optional().describe('Array of tags for the time entry')\n    },\n    async ({ team_id, description, task_id, billable, tags }) => {\n      try {\n        const currentTime = timeTrackingClient.getCurrentTimestamp();\n        \n        // Create time entry\n        const timeEntry = await timeTrackingClient.createTimeEntry(team_id, {\n          description,\n          start: currentTime,\n          billable,\n          task_id,\n          tags\n        });\n\n        // Start the timer\n        await timeTrackingClient.startTimer(team_id, timeEntry.id);\n\n        return {\n          content: [{ \n            type: 'text', \n            text: `Timer started successfully! Time entry created and timer is now running.\\n\\nTime Entry: ${JSON.stringify(timeEntry, null, 2)}` \n          }]\n        };\n      } catch (error: any) {\n        console.error('Error creating timer entry:', error);\n        return {\n          content: [{ type: 'text', text: `Error creating timer entry: ${error.message}` }],\n          isError: true\n        };\n      }\n    }\n  );\n\n  server.tool(\n    'format_duration',\n    'Format a duration from milliseconds to human-readable format. Useful for displaying time tracking data.',\n    {\n      milliseconds: z.number().min(0).describe('Duration in milliseconds'),\n      include_seconds: z.boolean().optional().default(true).describe('Whether to include seconds in the formatted output'),\n      format: z.enum(['milliseconds', 'seconds', 'minutes', 'hours']).optional().default('milliseconds').describe('Convert to specific time unit')\n    },\n    async ({ milliseconds, include_seconds, format }) => {\n      try {\n        const formattedDuration = timeTrackingClient.formatDuration(milliseconds, include_seconds);\n        const convertedValue = timeTrackingClient.convertDuration(milliseconds, format);\n\n        return {\n          content: [{ \n            type: 'text', \n            text: `Duration formatting:\\n\\nOriginal: ${milliseconds} milliseconds\\nFormatted: ${formattedDuration}\\nConverted to ${format}: ${convertedValue}` \n          }]\n        };\n      } catch (error: any) {\n        console.error('Error formatting duration:', error);\n        return {\n          content: [{ type: 'text', text: `Error formatting duration: ${error.message}` }],\n          isError: true\n        };\n      }\n    }\n  );\n}\n"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "90ab89f734effd152be8fa46f6ba798243b92964"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_1zvb3s9j39 = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_1zvb3s9j39();
import { z } from 'zod';
import { createClickUpClient } from '../clickup-client/index.js';
import { createEnhancedTimeTrackingClient } from '../clickup-client/time-tracking-enhanced.js';
// Create clients
const clickUpClient =
/* istanbul ignore next */
(cov_1zvb3s9j39().s[0]++, createClickUpClient());
const timeTrackingClient =
/* istanbul ignore next */
(cov_1zvb3s9j39().s[1]++, createEnhancedTimeTrackingClient(clickUpClient));
export function setupTimeTrackingTools(server) {
  /* istanbul ignore next */
  cov_1zvb3s9j39().f[0]++;
  cov_1zvb3s9j39().s[2]++;
  // ========================================
  // TIME ENTRY MANAGEMENT OPERATIONS
  // ========================================
  server.tool('get_time_entries', 'Get time entries for a team with filtering options. Supports filtering by date range, user, task, and project.', {
    team_id: z.string().min(1).describe('The ID of the team to get time entries for'),
    start_date: z.number().positive().optional().describe('Filter by start date (Unix timestamp)'),
    end_date: z.number().positive().optional().describe('Filter by end date (Unix timestamp)'),
    assignee: z.number().positive().optional().describe('Filter by user ID'),
    include_task_tags: z.boolean().optional().default(false).describe('Include task tags in response'),
    include_location_names: z.boolean().optional().default(false).describe('Include location names'),
    space_id: z.string().optional().describe('Filter by space ID'),
    folder_id: z.string().optional().describe('Filter by folder ID'),
    list_id: z.string().optional().describe('Filter by list ID'),
    task_id: z.string().optional().describe('Filter by task ID')
  }, async ({
    team_id,
    start_date,
    end_date,
    assignee,
    include_task_tags,
    include_location_names,
    space_id,
    folder_id,
    list_id,
    task_id
  }) => {
    /* istanbul ignore next */
    cov_1zvb3s9j39().f[1]++;
    cov_1zvb3s9j39().s[3]++;
    try {
      const params =
      /* istanbul ignore next */
      (cov_1zvb3s9j39().s[4]++, {
        start_date,
        end_date,
        assignee,
        include_task_tags,
        include_location_names,
        space_id,
        folder_id,
        list_id,
        task_id
      });
      const timeEntries =
      /* istanbul ignore next */
      (cov_1zvb3s9j39().s[5]++, await timeTrackingClient.getTimeEntries(team_id, params));
      /* istanbul ignore next */
      cov_1zvb3s9j39().s[6]++;
      return {
        content: [{
          type: 'text',
          text: `Time entries for team ${team_id}:\n\n${JSON.stringify(timeEntries, null, 2)}`
        }]
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_1zvb3s9j39().s[7]++;
      console.error('Error getting time entries:', error);
      /* istanbul ignore next */
      cov_1zvb3s9j39().s[8]++;
      return {
        content: [{
          type: 'text',
          text: `Error getting time entries: ${error.message}`
        }],
        isError: true
      };
    }
  });
  /* istanbul ignore next */
  cov_1zvb3s9j39().s[9]++;
  server.tool('create_time_entry', 'Create a new time entry for time tracking. Can be used for manual time logging or creating timer-based entries.', {
    team_id: z.string().min(1).describe('The ID of the team to create the time entry for'),
    description: z.string().min(1).describe('Description of the time entry'),
    start: z.number().positive().describe('Start time (Unix timestamp in milliseconds)'),
    billable: z.boolean().default(false).describe('Whether the time is billable'),
    end: z.number().positive().optional().describe('End time (Unix timestamp in milliseconds)'),
    task_id: z.string().optional().describe('Associated task ID'),
    assignee: z.number().positive().optional().describe('User ID for the time entry'),
    tags: z.array(z.object({
      name: z.string().min(1).describe('Tag name'),
      tag_fg: z.string().optional().describe('Tag foreground color'),
      tag_bg: z.string().optional().describe('Tag background color')
    })).optional().describe('Array of tags for the time entry')
  }, async ({
    team_id,
    description,
    start,
    billable,
    end,
    task_id,
    assignee,
    tags
  }) => {
    /* istanbul ignore next */
    cov_1zvb3s9j39().f[2]++;
    cov_1zvb3s9j39().s[10]++;
    try {
      const params =
      /* istanbul ignore next */
      (cov_1zvb3s9j39().s[11]++, {
        description,
        start,
        billable,
        end,
        task_id,
        assignee,
        tags
      });
      const timeEntry =
      /* istanbul ignore next */
      (cov_1zvb3s9j39().s[12]++, await timeTrackingClient.createTimeEntry(team_id, params));
      /* istanbul ignore next */
      cov_1zvb3s9j39().s[13]++;
      return {
        content: [{
          type: 'text',
          text: `Time entry created successfully!\n\n${JSON.stringify(timeEntry, null, 2)}`
        }]
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_1zvb3s9j39().s[14]++;
      console.error('Error creating time entry:', error);
      /* istanbul ignore next */
      cov_1zvb3s9j39().s[15]++;
      return {
        content: [{
          type: 'text',
          text: `Error creating time entry: ${error.message}`
        }],
        isError: true
      };
    }
  });
  /* istanbul ignore next */
  cov_1zvb3s9j39().s[16]++;
  server.tool('update_time_entry', 'Update an existing time entry. Can modify description, times, billable status, and associated task.', {
    team_id: z.string().min(1).describe('The ID of the team'),
    timer_id: z.string().min(1).describe('The ID of the time entry to update'),
    description: z.string().min(1).optional().describe('New description for the time entry'),
    start: z.number().positive().optional().describe('New start time (Unix timestamp in milliseconds)'),
    end: z.number().positive().optional().describe('New end time (Unix timestamp in milliseconds)'),
    billable: z.boolean().optional().describe('Update billable status'),
    task_id: z.string().optional().describe('Change associated task ID'),
    tags: z.array(z.object({
      name: z.string().min(1).describe('Tag name'),
      tag_fg: z.string().optional().describe('Tag foreground color'),
      tag_bg: z.string().optional().describe('Tag background color')
    })).optional().describe('Update tags for the time entry')
  }, async ({
    team_id,
    timer_id,
    description,
    start,
    end,
    billable,
    task_id,
    tags
  }) => {
    /* istanbul ignore next */
    cov_1zvb3s9j39().f[3]++;
    cov_1zvb3s9j39().s[17]++;
    try {
      const params =
      /* istanbul ignore next */
      (cov_1zvb3s9j39().s[18]++, {
        description,
        start,
        end,
        billable,
        task_id,
        tags
      });
      const updatedTimeEntry =
      /* istanbul ignore next */
      (cov_1zvb3s9j39().s[19]++, await timeTrackingClient.updateTimeEntry(team_id, timer_id, params));
      /* istanbul ignore next */
      cov_1zvb3s9j39().s[20]++;
      return {
        content: [{
          type: 'text',
          text: `Time entry updated successfully!\n\n${JSON.stringify(updatedTimeEntry, null, 2)}`
        }]
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_1zvb3s9j39().s[21]++;
      console.error('Error updating time entry:', error);
      /* istanbul ignore next */
      cov_1zvb3s9j39().s[22]++;
      return {
        content: [{
          type: 'text',
          text: `Error updating time entry: ${error.message}`
        }],
        isError: true
      };
    }
  });
  /* istanbul ignore next */
  cov_1zvb3s9j39().s[23]++;
  server.tool('delete_time_entry', 'Delete a time entry from ClickUp. This action cannot be undone.', {
    team_id: z.string().min(1).describe('The ID of the team'),
    timer_id: z.string().min(1).describe('The ID of the time entry to delete')
  }, async ({
    team_id,
    timer_id
  }) => {
    /* istanbul ignore next */
    cov_1zvb3s9j39().f[4]++;
    cov_1zvb3s9j39().s[24]++;
    try {
      /* istanbul ignore next */
      cov_1zvb3s9j39().s[25]++;
      await timeTrackingClient.deleteTimeEntry(team_id, timer_id);
      /* istanbul ignore next */
      cov_1zvb3s9j39().s[26]++;
      return {
        content: [{
          type: 'text',
          text: `Time entry ${timer_id} deleted successfully from team ${team_id}.`
        }]
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_1zvb3s9j39().s[27]++;
      console.error('Error deleting time entry:', error);
      /* istanbul ignore next */
      cov_1zvb3s9j39().s[28]++;
      return {
        content: [{
          type: 'text',
          text: `Error deleting time entry: ${error.message}`
        }],
        isError: true
      };
    }
  });
  // ========================================
  // TIMER OPERATIONS
  // ========================================
  /* istanbul ignore next */
  cov_1zvb3s9j39().s[29]++;
  server.tool('get_running_timers', 'Get currently running timers for a team. Shows active time tracking sessions.', {
    team_id: z.string().min(1).describe('The ID of the team to get running timers for'),
    assignee: z.number().positive().optional().describe('Filter by specific user ID')
  }, async ({
    team_id,
    assignee
  }) => {
    /* istanbul ignore next */
    cov_1zvb3s9j39().f[5]++;
    cov_1zvb3s9j39().s[30]++;
    try {
      const runningTimers =
      /* istanbul ignore next */
      (cov_1zvb3s9j39().s[31]++, await timeTrackingClient.getRunningTimers(team_id, assignee));
      /* istanbul ignore next */
      cov_1zvb3s9j39().s[32]++;
      return {
        content: [{
          type: 'text',
          text: `Running timers for team ${team_id}:\n\n${JSON.stringify(runningTimers, null, 2)}`
        }]
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_1zvb3s9j39().s[33]++;
      console.error('Error getting running timers:', error);
      /* istanbul ignore next */
      cov_1zvb3s9j39().s[34]++;
      return {
        content: [{
          type: 'text',
          text: `Error getting running timers: ${error.message}`
        }],
        isError: true
      };
    }
  });
  /* istanbul ignore next */
  cov_1zvb3s9j39().s[35]++;
  server.tool('start_timer', 'Start a timer for time tracking. Creates an active time tracking session.', {
    team_id: z.string().min(1).describe('The ID of the team'),
    timer_id: z.string().min(1).describe('The ID of the time entry to start timing'),
    start: z.number().positive().optional().describe('Custom start time (Unix timestamp in milliseconds, defaults to current time)')
  }, async ({
    team_id,
    timer_id,
    start
  }) => {
    /* istanbul ignore next */
    cov_1zvb3s9j39().f[6]++;
    cov_1zvb3s9j39().s[36]++;
    try {
      /* istanbul ignore next */
      cov_1zvb3s9j39().s[37]++;
      await timeTrackingClient.startTimer(team_id, timer_id, start);
      /* istanbul ignore next */
      cov_1zvb3s9j39().s[38]++;
      return {
        content: [{
          type: 'text',
          text: `Timer started successfully for time entry ${timer_id} in team ${team_id}.`
        }]
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_1zvb3s9j39().s[39]++;
      console.error('Error starting timer:', error);
      /* istanbul ignore next */
      cov_1zvb3s9j39().s[40]++;
      return {
        content: [{
          type: 'text',
          text: `Error starting timer: ${error.message}`
        }],
        isError: true
      };
    }
  });
  /* istanbul ignore next */
  cov_1zvb3s9j39().s[41]++;
  server.tool('stop_timer', 'Stop a running timer. Ends the active time tracking session and records the duration.', {
    team_id: z.string().min(1).describe('The ID of the team'),
    timer_id: z.string().min(1).describe('The ID of the time entry to stop timing'),
    end: z.number().positive().optional().describe('Custom end time (Unix timestamp in milliseconds, defaults to current time)')
  }, async ({
    team_id,
    timer_id,
    end
  }) => {
    /* istanbul ignore next */
    cov_1zvb3s9j39().f[7]++;
    cov_1zvb3s9j39().s[42]++;
    try {
      /* istanbul ignore next */
      cov_1zvb3s9j39().s[43]++;
      await timeTrackingClient.stopTimer(team_id, timer_id, end);
      /* istanbul ignore next */
      cov_1zvb3s9j39().s[44]++;
      return {
        content: [{
          type: 'text',
          text: `Timer stopped successfully for time entry ${timer_id} in team ${team_id}.`
        }]
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_1zvb3s9j39().s[45]++;
      console.error('Error stopping timer:', error);
      /* istanbul ignore next */
      cov_1zvb3s9j39().s[46]++;
      return {
        content: [{
          type: 'text',
          text: `Error stopping timer: ${error.message}`
        }],
        isError: true
      };
    }
  });
  // ========================================
  // TIME ANALYTICS & REPORTING
  // ========================================
  /* istanbul ignore next */
  cov_1zvb3s9j39().s[47]++;
  server.tool('get_time_summary', 'Get time tracking summary and analytics. Provides aggregated time data with breakdowns by user and task.', {
    team_id: z.string().min(1).describe('The ID of the team to get time summary for'),
    start_date: z.number().positive().optional().describe('Filter by start date (Unix timestamp)'),
    end_date: z.number().positive().optional().describe('Filter by end date (Unix timestamp)'),
    assignee: z.number().positive().optional().describe('Filter by user ID'),
    task_id: z.string().optional().describe('Filter by task ID'),
    list_id: z.string().optional().describe('Filter by list ID'),
    folder_id: z.string().optional().describe('Filter by folder ID'),
    space_id: z.string().optional().describe('Filter by space ID')
  }, async ({
    team_id,
    start_date,
    end_date,
    assignee,
    task_id,
    list_id,
    folder_id,
    space_id
  }) => {
    /* istanbul ignore next */
    cov_1zvb3s9j39().f[8]++;
    cov_1zvb3s9j39().s[48]++;
    try {
      const params =
      /* istanbul ignore next */
      (cov_1zvb3s9j39().s[49]++, {
        start_date,
        end_date,
        assignee,
        task_id,
        list_id,
        folder_id,
        space_id
      });
      const timeSummary =
      /* istanbul ignore next */
      (cov_1zvb3s9j39().s[50]++, await timeTrackingClient.getTimeSummary(team_id, params));
      // Format durations for better readability
      /* istanbul ignore next */
      cov_1zvb3s9j39().s[51]++;
      const formatDuration = ms => {
        /* istanbul ignore next */
        cov_1zvb3s9j39().f[9]++;
        cov_1zvb3s9j39().s[52]++;
        return timeTrackingClient.formatDuration(ms);
      };
      const formattedSummary =
      /* istanbul ignore next */
      (cov_1zvb3s9j39().s[53]++, {
        ...timeSummary,
        total_duration_formatted: formatDuration(timeSummary.total_duration),
        billable_duration_formatted: formatDuration(timeSummary.billable_duration),
        non_billable_duration_formatted: formatDuration(timeSummary.non_billable_duration)
      });
      /* istanbul ignore next */
      cov_1zvb3s9j39().s[54]++;
      return {
        content: [{
          type: 'text',
          text: `Time summary for team ${team_id}:\n\n${JSON.stringify(formattedSummary, null, 2)}`
        }]
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_1zvb3s9j39().s[55]++;
      console.error('Error getting time summary:', error);
      /* istanbul ignore next */
      cov_1zvb3s9j39().s[56]++;
      return {
        content: [{
          type: 'text',
          text: `Error getting time summary: ${error.message}`
        }],
        isError: true
      };
    }
  });
  // ========================================
  // HELPER TOOLS
  // ========================================
  /* istanbul ignore next */
  cov_1zvb3s9j39().s[57]++;
  server.tool('create_timer_entry', 'Create a new time entry and immediately start the timer. Convenient for starting time tracking in one step.', {
    team_id: z.string().min(1).describe('The ID of the team'),
    description: z.string().min(1).describe('Description of what you are working on'),
    task_id: z.string().optional().describe('Associated task ID'),
    billable: z.boolean().default(false).describe('Whether the time is billable'),
    tags: z.array(z.object({
      name: z.string().min(1).describe('Tag name')
    })).optional().describe('Array of tags for the time entry')
  }, async ({
    team_id,
    description,
    task_id,
    billable,
    tags
  }) => {
    /* istanbul ignore next */
    cov_1zvb3s9j39().f[10]++;
    cov_1zvb3s9j39().s[58]++;
    try {
      const currentTime =
      /* istanbul ignore next */
      (cov_1zvb3s9j39().s[59]++, timeTrackingClient.getCurrentTimestamp());
      // Create time entry
      const timeEntry =
      /* istanbul ignore next */
      (cov_1zvb3s9j39().s[60]++, await timeTrackingClient.createTimeEntry(team_id, {
        description,
        start: currentTime,
        billable,
        task_id,
        tags
      }));
      // Start the timer
      /* istanbul ignore next */
      cov_1zvb3s9j39().s[61]++;
      await timeTrackingClient.startTimer(team_id, timeEntry.id);
      /* istanbul ignore next */
      cov_1zvb3s9j39().s[62]++;
      return {
        content: [{
          type: 'text',
          text: `Timer started successfully! Time entry created and timer is now running.\n\nTime Entry: ${JSON.stringify(timeEntry, null, 2)}`
        }]
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_1zvb3s9j39().s[63]++;
      console.error('Error creating timer entry:', error);
      /* istanbul ignore next */
      cov_1zvb3s9j39().s[64]++;
      return {
        content: [{
          type: 'text',
          text: `Error creating timer entry: ${error.message}`
        }],
        isError: true
      };
    }
  });
  /* istanbul ignore next */
  cov_1zvb3s9j39().s[65]++;
  server.tool('format_duration', 'Format a duration from milliseconds to human-readable format. Useful for displaying time tracking data.', {
    milliseconds: z.number().min(0).describe('Duration in milliseconds'),
    include_seconds: z.boolean().optional().default(true).describe('Whether to include seconds in the formatted output'),
    format: z.enum(['milliseconds', 'seconds', 'minutes', 'hours']).optional().default('milliseconds').describe('Convert to specific time unit')
  }, async ({
    milliseconds,
    include_seconds,
    format
  }) => {
    /* istanbul ignore next */
    cov_1zvb3s9j39().f[11]++;
    cov_1zvb3s9j39().s[66]++;
    try {
      const formattedDuration =
      /* istanbul ignore next */
      (cov_1zvb3s9j39().s[67]++, timeTrackingClient.formatDuration(milliseconds, include_seconds));
      const convertedValue =
      /* istanbul ignore next */
      (cov_1zvb3s9j39().s[68]++, timeTrackingClient.convertDuration(milliseconds, format));
      /* istanbul ignore next */
      cov_1zvb3s9j39().s[69]++;
      return {
        content: [{
          type: 'text',
          text: `Duration formatting:\n\nOriginal: ${milliseconds} milliseconds\nFormatted: ${formattedDuration}\nConverted to ${format}: ${convertedValue}`
        }]
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_1zvb3s9j39().s[70]++;
      console.error('Error formatting duration:', error);
      /* istanbul ignore next */
      cov_1zvb3s9j39().s[71]++;
      return {
        content: [{
          type: 'text',
          text: `Error formatting duration: ${error.message}`
        }],
        isError: true
      };
    }
  });
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJjb3ZfMXp2YjNzOWozOSIsImFjdHVhbENvdmVyYWdlIiwieiIsImNyZWF0ZUNsaWNrVXBDbGllbnQiLCJjcmVhdGVFbmhhbmNlZFRpbWVUcmFja2luZ0NsaWVudCIsImNsaWNrVXBDbGllbnQiLCJzIiwidGltZVRyYWNraW5nQ2xpZW50Iiwic2V0dXBUaW1lVHJhY2tpbmdUb29scyIsInNlcnZlciIsImYiLCJ0b29sIiwidGVhbV9pZCIsInN0cmluZyIsIm1pbiIsImRlc2NyaWJlIiwic3RhcnRfZGF0ZSIsIm51bWJlciIsInBvc2l0aXZlIiwib3B0aW9uYWwiLCJlbmRfZGF0ZSIsImFzc2lnbmVlIiwiaW5jbHVkZV90YXNrX3RhZ3MiLCJib29sZWFuIiwiZGVmYXVsdCIsImluY2x1ZGVfbG9jYXRpb25fbmFtZXMiLCJzcGFjZV9pZCIsImZvbGRlcl9pZCIsImxpc3RfaWQiLCJ0YXNrX2lkIiwicGFyYW1zIiwidGltZUVudHJpZXMiLCJnZXRUaW1lRW50cmllcyIsImNvbnRlbnQiLCJ0eXBlIiwidGV4dCIsIkpTT04iLCJzdHJpbmdpZnkiLCJlcnJvciIsImNvbnNvbGUiLCJtZXNzYWdlIiwiaXNFcnJvciIsImRlc2NyaXB0aW9uIiwic3RhcnQiLCJiaWxsYWJsZSIsImVuZCIsInRhZ3MiLCJhcnJheSIsIm9iamVjdCIsIm5hbWUiLCJ0YWdfZmciLCJ0YWdfYmciLCJ0aW1lRW50cnkiLCJjcmVhdGVUaW1lRW50cnkiLCJ0aW1lcl9pZCIsInVwZGF0ZWRUaW1lRW50cnkiLCJ1cGRhdGVUaW1lRW50cnkiLCJkZWxldGVUaW1lRW50cnkiLCJydW5uaW5nVGltZXJzIiwiZ2V0UnVubmluZ1RpbWVycyIsInN0YXJ0VGltZXIiLCJzdG9wVGltZXIiLCJ0aW1lU3VtbWFyeSIsImdldFRpbWVTdW1tYXJ5IiwiZm9ybWF0RHVyYXRpb24iLCJtcyIsImZvcm1hdHRlZFN1bW1hcnkiLCJ0b3RhbF9kdXJhdGlvbl9mb3JtYXR0ZWQiLCJ0b3RhbF9kdXJhdGlvbiIsImJpbGxhYmxlX2R1cmF0aW9uX2Zvcm1hdHRlZCIsImJpbGxhYmxlX2R1cmF0aW9uIiwibm9uX2JpbGxhYmxlX2R1cmF0aW9uX2Zvcm1hdHRlZCIsIm5vbl9iaWxsYWJsZV9kdXJhdGlvbiIsImN1cnJlbnRUaW1lIiwiZ2V0Q3VycmVudFRpbWVzdGFtcCIsImlkIiwibWlsbGlzZWNvbmRzIiwiaW5jbHVkZV9zZWNvbmRzIiwiZm9ybWF0IiwiZW51bSIsImZvcm1hdHRlZER1cmF0aW9uIiwiY29udmVydGVkVmFsdWUiLCJjb252ZXJ0RHVyYXRpb24iXSwic291cmNlcyI6WyIvVXNlcnMvcGV0ZXJrcnp5emVrL0RldmVsb3BtZW50L2NsaWNrdXAtbWNwLXNlcnZlci9zcmMvdG9vbHMvdGltZS10cmFja2luZy10b29scy50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBNY3BTZXJ2ZXIgfSBmcm9tICdAbW9kZWxjb250ZXh0cHJvdG9jb2wvc2RrL3NlcnZlci9tY3AuanMnO1xuaW1wb3J0IHsgeiB9IGZyb20gJ3pvZCc7XG5pbXBvcnQgeyBjcmVhdGVDbGlja1VwQ2xpZW50IH0gZnJvbSAnLi4vY2xpY2t1cC1jbGllbnQvaW5kZXguanMnO1xuaW1wb3J0IHsgY3JlYXRlRW5oYW5jZWRUaW1lVHJhY2tpbmdDbGllbnQgfSBmcm9tICcuLi9jbGlja3VwLWNsaWVudC90aW1lLXRyYWNraW5nLWVuaGFuY2VkLmpzJztcbmltcG9ydCB7IFxuICBUZWFtSWRTY2hlbWEsIFxuICBUaW1lcklkU2NoZW1hLCBcbiAgQ3JlYXRlVGltZUVudHJ5U2NoZW1hLFxuICBVcGRhdGVUaW1lRW50cnlTY2hlbWEsXG4gIEdldFRpbWVFbnRyaWVzU2NoZW1hLFxuICBUaW1lRW50cnlUYWdTY2hlbWFcbn0gZnJvbSAnLi4vc2NoZW1hcy90aW1lLXRyYWNraW5nLXNjaGVtYXMuanMnO1xuXG4vLyBDcmVhdGUgY2xpZW50c1xuY29uc3QgY2xpY2tVcENsaWVudCA9IGNyZWF0ZUNsaWNrVXBDbGllbnQoKTtcbmNvbnN0IHRpbWVUcmFja2luZ0NsaWVudCA9IGNyZWF0ZUVuaGFuY2VkVGltZVRyYWNraW5nQ2xpZW50KGNsaWNrVXBDbGllbnQpO1xuXG5leHBvcnQgZnVuY3Rpb24gc2V0dXBUaW1lVHJhY2tpbmdUb29scyhzZXJ2ZXI6IE1jcFNlcnZlcik6IHZvaWQge1xuXG4gIC8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAgLy8gVElNRSBFTlRSWSBNQU5BR0VNRU5UIE9QRVJBVElPTlNcbiAgLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuXG4gIHNlcnZlci50b29sKFxuICAgICdnZXRfdGltZV9lbnRyaWVzJyxcbiAgICAnR2V0IHRpbWUgZW50cmllcyBmb3IgYSB0ZWFtIHdpdGggZmlsdGVyaW5nIG9wdGlvbnMuIFN1cHBvcnRzIGZpbHRlcmluZyBieSBkYXRlIHJhbmdlLCB1c2VyLCB0YXNrLCBhbmQgcHJvamVjdC4nLFxuICAgIHtcbiAgICAgIHRlYW1faWQ6IHouc3RyaW5nKCkubWluKDEpLmRlc2NyaWJlKCdUaGUgSUQgb2YgdGhlIHRlYW0gdG8gZ2V0IHRpbWUgZW50cmllcyBmb3InKSxcbiAgICAgIHN0YXJ0X2RhdGU6IHoubnVtYmVyKCkucG9zaXRpdmUoKS5vcHRpb25hbCgpLmRlc2NyaWJlKCdGaWx0ZXIgYnkgc3RhcnQgZGF0ZSAoVW5peCB0aW1lc3RhbXApJyksXG4gICAgICBlbmRfZGF0ZTogei5udW1iZXIoKS5wb3NpdGl2ZSgpLm9wdGlvbmFsKCkuZGVzY3JpYmUoJ0ZpbHRlciBieSBlbmQgZGF0ZSAoVW5peCB0aW1lc3RhbXApJyksXG4gICAgICBhc3NpZ25lZTogei5udW1iZXIoKS5wb3NpdGl2ZSgpLm9wdGlvbmFsKCkuZGVzY3JpYmUoJ0ZpbHRlciBieSB1c2VyIElEJyksXG4gICAgICBpbmNsdWRlX3Rhc2tfdGFnczogei5ib29sZWFuKCkub3B0aW9uYWwoKS5kZWZhdWx0KGZhbHNlKS5kZXNjcmliZSgnSW5jbHVkZSB0YXNrIHRhZ3MgaW4gcmVzcG9uc2UnKSxcbiAgICAgIGluY2x1ZGVfbG9jYXRpb25fbmFtZXM6IHouYm9vbGVhbigpLm9wdGlvbmFsKCkuZGVmYXVsdChmYWxzZSkuZGVzY3JpYmUoJ0luY2x1ZGUgbG9jYXRpb24gbmFtZXMnKSxcbiAgICAgIHNwYWNlX2lkOiB6LnN0cmluZygpLm9wdGlvbmFsKCkuZGVzY3JpYmUoJ0ZpbHRlciBieSBzcGFjZSBJRCcpLFxuICAgICAgZm9sZGVyX2lkOiB6LnN0cmluZygpLm9wdGlvbmFsKCkuZGVzY3JpYmUoJ0ZpbHRlciBieSBmb2xkZXIgSUQnKSxcbiAgICAgIGxpc3RfaWQ6IHouc3RyaW5nKCkub3B0aW9uYWwoKS5kZXNjcmliZSgnRmlsdGVyIGJ5IGxpc3QgSUQnKSxcbiAgICAgIHRhc2tfaWQ6IHouc3RyaW5nKCkub3B0aW9uYWwoKS5kZXNjcmliZSgnRmlsdGVyIGJ5IHRhc2sgSUQnKVxuICAgIH0sXG4gICAgYXN5bmMgKHsgdGVhbV9pZCwgc3RhcnRfZGF0ZSwgZW5kX2RhdGUsIGFzc2lnbmVlLCBpbmNsdWRlX3Rhc2tfdGFncywgaW5jbHVkZV9sb2NhdGlvbl9uYW1lcywgc3BhY2VfaWQsIGZvbGRlcl9pZCwgbGlzdF9pZCwgdGFza19pZCB9KSA9PiB7XG4gICAgICB0cnkge1xuICAgICAgICBjb25zdCBwYXJhbXMgPSB7XG4gICAgICAgICAgc3RhcnRfZGF0ZSxcbiAgICAgICAgICBlbmRfZGF0ZSxcbiAgICAgICAgICBhc3NpZ25lZSxcbiAgICAgICAgICBpbmNsdWRlX3Rhc2tfdGFncyxcbiAgICAgICAgICBpbmNsdWRlX2xvY2F0aW9uX25hbWVzLFxuICAgICAgICAgIHNwYWNlX2lkLFxuICAgICAgICAgIGZvbGRlcl9pZCxcbiAgICAgICAgICBsaXN0X2lkLFxuICAgICAgICAgIHRhc2tfaWRcbiAgICAgICAgfTtcblxuICAgICAgICBjb25zdCB0aW1lRW50cmllcyA9IGF3YWl0IHRpbWVUcmFja2luZ0NsaWVudC5nZXRUaW1lRW50cmllcyh0ZWFtX2lkLCBwYXJhbXMpO1xuXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgY29udGVudDogW3sgXG4gICAgICAgICAgICB0eXBlOiAndGV4dCcsIFxuICAgICAgICAgICAgdGV4dDogYFRpbWUgZW50cmllcyBmb3IgdGVhbSAke3RlYW1faWR9OlxcblxcbiR7SlNPTi5zdHJpbmdpZnkodGltZUVudHJpZXMsIG51bGwsIDIpfWAgXG4gICAgICAgICAgfV1cbiAgICAgICAgfTtcbiAgICAgIH0gY2F0Y2ggKGVycm9yOiBhbnkpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcignRXJyb3IgZ2V0dGluZyB0aW1lIGVudHJpZXM6JywgZXJyb3IpO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIGNvbnRlbnQ6IFt7IHR5cGU6ICd0ZXh0JywgdGV4dDogYEVycm9yIGdldHRpbmcgdGltZSBlbnRyaWVzOiAke2Vycm9yLm1lc3NhZ2V9YCB9XSxcbiAgICAgICAgICBpc0Vycm9yOiB0cnVlXG4gICAgICAgIH07XG4gICAgICB9XG4gICAgfVxuICApO1xuXG4gIHNlcnZlci50b29sKFxuICAgICdjcmVhdGVfdGltZV9lbnRyeScsXG4gICAgJ0NyZWF0ZSBhIG5ldyB0aW1lIGVudHJ5IGZvciB0aW1lIHRyYWNraW5nLiBDYW4gYmUgdXNlZCBmb3IgbWFudWFsIHRpbWUgbG9nZ2luZyBvciBjcmVhdGluZyB0aW1lci1iYXNlZCBlbnRyaWVzLicsXG4gICAge1xuICAgICAgdGVhbV9pZDogei5zdHJpbmcoKS5taW4oMSkuZGVzY3JpYmUoJ1RoZSBJRCBvZiB0aGUgdGVhbSB0byBjcmVhdGUgdGhlIHRpbWUgZW50cnkgZm9yJyksXG4gICAgICBkZXNjcmlwdGlvbjogei5zdHJpbmcoKS5taW4oMSkuZGVzY3JpYmUoJ0Rlc2NyaXB0aW9uIG9mIHRoZSB0aW1lIGVudHJ5JyksXG4gICAgICBzdGFydDogei5udW1iZXIoKS5wb3NpdGl2ZSgpLmRlc2NyaWJlKCdTdGFydCB0aW1lIChVbml4IHRpbWVzdGFtcCBpbiBtaWxsaXNlY29uZHMpJyksXG4gICAgICBiaWxsYWJsZTogei5ib29sZWFuKCkuZGVmYXVsdChmYWxzZSkuZGVzY3JpYmUoJ1doZXRoZXIgdGhlIHRpbWUgaXMgYmlsbGFibGUnKSxcbiAgICAgIGVuZDogei5udW1iZXIoKS5wb3NpdGl2ZSgpLm9wdGlvbmFsKCkuZGVzY3JpYmUoJ0VuZCB0aW1lIChVbml4IHRpbWVzdGFtcCBpbiBtaWxsaXNlY29uZHMpJyksXG4gICAgICB0YXNrX2lkOiB6LnN0cmluZygpLm9wdGlvbmFsKCkuZGVzY3JpYmUoJ0Fzc29jaWF0ZWQgdGFzayBJRCcpLFxuICAgICAgYXNzaWduZWU6IHoubnVtYmVyKCkucG9zaXRpdmUoKS5vcHRpb25hbCgpLmRlc2NyaWJlKCdVc2VyIElEIGZvciB0aGUgdGltZSBlbnRyeScpLFxuICAgICAgdGFnczogei5hcnJheSh6Lm9iamVjdCh7XG4gICAgICAgIG5hbWU6IHouc3RyaW5nKCkubWluKDEpLmRlc2NyaWJlKCdUYWcgbmFtZScpLFxuICAgICAgICB0YWdfZmc6IHouc3RyaW5nKCkub3B0aW9uYWwoKS5kZXNjcmliZSgnVGFnIGZvcmVncm91bmQgY29sb3InKSxcbiAgICAgICAgdGFnX2JnOiB6LnN0cmluZygpLm9wdGlvbmFsKCkuZGVzY3JpYmUoJ1RhZyBiYWNrZ3JvdW5kIGNvbG9yJylcbiAgICAgIH0pKS5vcHRpb25hbCgpLmRlc2NyaWJlKCdBcnJheSBvZiB0YWdzIGZvciB0aGUgdGltZSBlbnRyeScpXG4gICAgfSxcbiAgICBhc3luYyAoeyB0ZWFtX2lkLCBkZXNjcmlwdGlvbiwgc3RhcnQsIGJpbGxhYmxlLCBlbmQsIHRhc2tfaWQsIGFzc2lnbmVlLCB0YWdzIH0pID0+IHtcbiAgICAgIHRyeSB7XG4gICAgICAgIGNvbnN0IHBhcmFtcyA9IHtcbiAgICAgICAgICBkZXNjcmlwdGlvbixcbiAgICAgICAgICBzdGFydCxcbiAgICAgICAgICBiaWxsYWJsZSxcbiAgICAgICAgICBlbmQsXG4gICAgICAgICAgdGFza19pZCxcbiAgICAgICAgICBhc3NpZ25lZSxcbiAgICAgICAgICB0YWdzXG4gICAgICAgIH07XG5cbiAgICAgICAgY29uc3QgdGltZUVudHJ5ID0gYXdhaXQgdGltZVRyYWNraW5nQ2xpZW50LmNyZWF0ZVRpbWVFbnRyeSh0ZWFtX2lkLCBwYXJhbXMpO1xuXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgY29udGVudDogW3sgXG4gICAgICAgICAgICB0eXBlOiAndGV4dCcsIFxuICAgICAgICAgICAgdGV4dDogYFRpbWUgZW50cnkgY3JlYXRlZCBzdWNjZXNzZnVsbHkhXFxuXFxuJHtKU09OLnN0cmluZ2lmeSh0aW1lRW50cnksIG51bGwsIDIpfWAgXG4gICAgICAgICAgfV1cbiAgICAgICAgfTtcbiAgICAgIH0gY2F0Y2ggKGVycm9yOiBhbnkpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcignRXJyb3IgY3JlYXRpbmcgdGltZSBlbnRyeTonLCBlcnJvcik7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgY29udGVudDogW3sgdHlwZTogJ3RleHQnLCB0ZXh0OiBgRXJyb3IgY3JlYXRpbmcgdGltZSBlbnRyeTogJHtlcnJvci5tZXNzYWdlfWAgfV0sXG4gICAgICAgICAgaXNFcnJvcjogdHJ1ZVxuICAgICAgICB9O1xuICAgICAgfVxuICAgIH1cbiAgKTtcblxuICBzZXJ2ZXIudG9vbChcbiAgICAndXBkYXRlX3RpbWVfZW50cnknLFxuICAgICdVcGRhdGUgYW4gZXhpc3RpbmcgdGltZSBlbnRyeS4gQ2FuIG1vZGlmeSBkZXNjcmlwdGlvbiwgdGltZXMsIGJpbGxhYmxlIHN0YXR1cywgYW5kIGFzc29jaWF0ZWQgdGFzay4nLFxuICAgIHtcbiAgICAgIHRlYW1faWQ6IHouc3RyaW5nKCkubWluKDEpLmRlc2NyaWJlKCdUaGUgSUQgb2YgdGhlIHRlYW0nKSxcbiAgICAgIHRpbWVyX2lkOiB6LnN0cmluZygpLm1pbigxKS5kZXNjcmliZSgnVGhlIElEIG9mIHRoZSB0aW1lIGVudHJ5IHRvIHVwZGF0ZScpLFxuICAgICAgZGVzY3JpcHRpb246IHouc3RyaW5nKCkubWluKDEpLm9wdGlvbmFsKCkuZGVzY3JpYmUoJ05ldyBkZXNjcmlwdGlvbiBmb3IgdGhlIHRpbWUgZW50cnknKSxcbiAgICAgIHN0YXJ0OiB6Lm51bWJlcigpLnBvc2l0aXZlKCkub3B0aW9uYWwoKS5kZXNjcmliZSgnTmV3IHN0YXJ0IHRpbWUgKFVuaXggdGltZXN0YW1wIGluIG1pbGxpc2Vjb25kcyknKSxcbiAgICAgIGVuZDogei5udW1iZXIoKS5wb3NpdGl2ZSgpLm9wdGlvbmFsKCkuZGVzY3JpYmUoJ05ldyBlbmQgdGltZSAoVW5peCB0aW1lc3RhbXAgaW4gbWlsbGlzZWNvbmRzKScpLFxuICAgICAgYmlsbGFibGU6IHouYm9vbGVhbigpLm9wdGlvbmFsKCkuZGVzY3JpYmUoJ1VwZGF0ZSBiaWxsYWJsZSBzdGF0dXMnKSxcbiAgICAgIHRhc2tfaWQ6IHouc3RyaW5nKCkub3B0aW9uYWwoKS5kZXNjcmliZSgnQ2hhbmdlIGFzc29jaWF0ZWQgdGFzayBJRCcpLFxuICAgICAgdGFnczogei5hcnJheSh6Lm9iamVjdCh7XG4gICAgICAgIG5hbWU6IHouc3RyaW5nKCkubWluKDEpLmRlc2NyaWJlKCdUYWcgbmFtZScpLFxuICAgICAgICB0YWdfZmc6IHouc3RyaW5nKCkub3B0aW9uYWwoKS5kZXNjcmliZSgnVGFnIGZvcmVncm91bmQgY29sb3InKSxcbiAgICAgICAgdGFnX2JnOiB6LnN0cmluZygpLm9wdGlvbmFsKCkuZGVzY3JpYmUoJ1RhZyBiYWNrZ3JvdW5kIGNvbG9yJylcbiAgICAgIH0pKS5vcHRpb25hbCgpLmRlc2NyaWJlKCdVcGRhdGUgdGFncyBmb3IgdGhlIHRpbWUgZW50cnknKVxuICAgIH0sXG4gICAgYXN5bmMgKHsgdGVhbV9pZCwgdGltZXJfaWQsIGRlc2NyaXB0aW9uLCBzdGFydCwgZW5kLCBiaWxsYWJsZSwgdGFza19pZCwgdGFncyB9KSA9PiB7XG4gICAgICB0cnkge1xuICAgICAgICBjb25zdCBwYXJhbXMgPSB7XG4gICAgICAgICAgZGVzY3JpcHRpb24sXG4gICAgICAgICAgc3RhcnQsXG4gICAgICAgICAgZW5kLFxuICAgICAgICAgIGJpbGxhYmxlLFxuICAgICAgICAgIHRhc2tfaWQsXG4gICAgICAgICAgdGFnc1xuICAgICAgICB9O1xuXG4gICAgICAgIGNvbnN0IHVwZGF0ZWRUaW1lRW50cnkgPSBhd2FpdCB0aW1lVHJhY2tpbmdDbGllbnQudXBkYXRlVGltZUVudHJ5KHRlYW1faWQsIHRpbWVyX2lkLCBwYXJhbXMpO1xuXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgY29udGVudDogW3sgXG4gICAgICAgICAgICB0eXBlOiAndGV4dCcsIFxuICAgICAgICAgICAgdGV4dDogYFRpbWUgZW50cnkgdXBkYXRlZCBzdWNjZXNzZnVsbHkhXFxuXFxuJHtKU09OLnN0cmluZ2lmeSh1cGRhdGVkVGltZUVudHJ5LCBudWxsLCAyKX1gIFxuICAgICAgICAgIH1dXG4gICAgICAgIH07XG4gICAgICB9IGNhdGNoIChlcnJvcjogYW55KSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoJ0Vycm9yIHVwZGF0aW5nIHRpbWUgZW50cnk6JywgZXJyb3IpO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIGNvbnRlbnQ6IFt7IHR5cGU6ICd0ZXh0JywgdGV4dDogYEVycm9yIHVwZGF0aW5nIHRpbWUgZW50cnk6ICR7ZXJyb3IubWVzc2FnZX1gIH1dLFxuICAgICAgICAgIGlzRXJyb3I6IHRydWVcbiAgICAgICAgfTtcbiAgICAgIH1cbiAgICB9XG4gICk7XG5cbiAgc2VydmVyLnRvb2woXG4gICAgJ2RlbGV0ZV90aW1lX2VudHJ5JyxcbiAgICAnRGVsZXRlIGEgdGltZSBlbnRyeSBmcm9tIENsaWNrVXAuIFRoaXMgYWN0aW9uIGNhbm5vdCBiZSB1bmRvbmUuJyxcbiAgICB7XG4gICAgICB0ZWFtX2lkOiB6LnN0cmluZygpLm1pbigxKS5kZXNjcmliZSgnVGhlIElEIG9mIHRoZSB0ZWFtJyksXG4gICAgICB0aW1lcl9pZDogei5zdHJpbmcoKS5taW4oMSkuZGVzY3JpYmUoJ1RoZSBJRCBvZiB0aGUgdGltZSBlbnRyeSB0byBkZWxldGUnKVxuICAgIH0sXG4gICAgYXN5bmMgKHsgdGVhbV9pZCwgdGltZXJfaWQgfSkgPT4ge1xuICAgICAgdHJ5IHtcbiAgICAgICAgYXdhaXQgdGltZVRyYWNraW5nQ2xpZW50LmRlbGV0ZVRpbWVFbnRyeSh0ZWFtX2lkLCB0aW1lcl9pZCk7XG5cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICBjb250ZW50OiBbeyBcbiAgICAgICAgICAgIHR5cGU6ICd0ZXh0JywgXG4gICAgICAgICAgICB0ZXh0OiBgVGltZSBlbnRyeSAke3RpbWVyX2lkfSBkZWxldGVkIHN1Y2Nlc3NmdWxseSBmcm9tIHRlYW0gJHt0ZWFtX2lkfS5gIFxuICAgICAgICAgIH1dXG4gICAgICAgIH07XG4gICAgICB9IGNhdGNoIChlcnJvcjogYW55KSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoJ0Vycm9yIGRlbGV0aW5nIHRpbWUgZW50cnk6JywgZXJyb3IpO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIGNvbnRlbnQ6IFt7IHR5cGU6ICd0ZXh0JywgdGV4dDogYEVycm9yIGRlbGV0aW5nIHRpbWUgZW50cnk6ICR7ZXJyb3IubWVzc2FnZX1gIH1dLFxuICAgICAgICAgIGlzRXJyb3I6IHRydWVcbiAgICAgICAgfTtcbiAgICAgIH1cbiAgICB9XG4gICk7XG5cbiAgLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICAvLyBUSU1FUiBPUEVSQVRJT05TXG4gIC8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cblxuICBzZXJ2ZXIudG9vbChcbiAgICAnZ2V0X3J1bm5pbmdfdGltZXJzJyxcbiAgICAnR2V0IGN1cnJlbnRseSBydW5uaW5nIHRpbWVycyBmb3IgYSB0ZWFtLiBTaG93cyBhY3RpdmUgdGltZSB0cmFja2luZyBzZXNzaW9ucy4nLFxuICAgIHtcbiAgICAgIHRlYW1faWQ6IHouc3RyaW5nKCkubWluKDEpLmRlc2NyaWJlKCdUaGUgSUQgb2YgdGhlIHRlYW0gdG8gZ2V0IHJ1bm5pbmcgdGltZXJzIGZvcicpLFxuICAgICAgYXNzaWduZWU6IHoubnVtYmVyKCkucG9zaXRpdmUoKS5vcHRpb25hbCgpLmRlc2NyaWJlKCdGaWx0ZXIgYnkgc3BlY2lmaWMgdXNlciBJRCcpXG4gICAgfSxcbiAgICBhc3luYyAoeyB0ZWFtX2lkLCBhc3NpZ25lZSB9KSA9PiB7XG4gICAgICB0cnkge1xuICAgICAgICBjb25zdCBydW5uaW5nVGltZXJzID0gYXdhaXQgdGltZVRyYWNraW5nQ2xpZW50LmdldFJ1bm5pbmdUaW1lcnModGVhbV9pZCwgYXNzaWduZWUpO1xuXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgY29udGVudDogW3sgXG4gICAgICAgICAgICB0eXBlOiAndGV4dCcsIFxuICAgICAgICAgICAgdGV4dDogYFJ1bm5pbmcgdGltZXJzIGZvciB0ZWFtICR7dGVhbV9pZH06XFxuXFxuJHtKU09OLnN0cmluZ2lmeShydW5uaW5nVGltZXJzLCBudWxsLCAyKX1gIFxuICAgICAgICAgIH1dXG4gICAgICAgIH07XG4gICAgICB9IGNhdGNoIChlcnJvcjogYW55KSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoJ0Vycm9yIGdldHRpbmcgcnVubmluZyB0aW1lcnM6JywgZXJyb3IpO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIGNvbnRlbnQ6IFt7IHR5cGU6ICd0ZXh0JywgdGV4dDogYEVycm9yIGdldHRpbmcgcnVubmluZyB0aW1lcnM6ICR7ZXJyb3IubWVzc2FnZX1gIH1dLFxuICAgICAgICAgIGlzRXJyb3I6IHRydWVcbiAgICAgICAgfTtcbiAgICAgIH1cbiAgICB9XG4gICk7XG5cbiAgc2VydmVyLnRvb2woXG4gICAgJ3N0YXJ0X3RpbWVyJyxcbiAgICAnU3RhcnQgYSB0aW1lciBmb3IgdGltZSB0cmFja2luZy4gQ3JlYXRlcyBhbiBhY3RpdmUgdGltZSB0cmFja2luZyBzZXNzaW9uLicsXG4gICAge1xuICAgICAgdGVhbV9pZDogei5zdHJpbmcoKS5taW4oMSkuZGVzY3JpYmUoJ1RoZSBJRCBvZiB0aGUgdGVhbScpLFxuICAgICAgdGltZXJfaWQ6IHouc3RyaW5nKCkubWluKDEpLmRlc2NyaWJlKCdUaGUgSUQgb2YgdGhlIHRpbWUgZW50cnkgdG8gc3RhcnQgdGltaW5nJyksXG4gICAgICBzdGFydDogei5udW1iZXIoKS5wb3NpdGl2ZSgpLm9wdGlvbmFsKCkuZGVzY3JpYmUoJ0N1c3RvbSBzdGFydCB0aW1lIChVbml4IHRpbWVzdGFtcCBpbiBtaWxsaXNlY29uZHMsIGRlZmF1bHRzIHRvIGN1cnJlbnQgdGltZSknKVxuICAgIH0sXG4gICAgYXN5bmMgKHsgdGVhbV9pZCwgdGltZXJfaWQsIHN0YXJ0IH0pID0+IHtcbiAgICAgIHRyeSB7XG4gICAgICAgIGF3YWl0IHRpbWVUcmFja2luZ0NsaWVudC5zdGFydFRpbWVyKHRlYW1faWQsIHRpbWVyX2lkLCBzdGFydCk7XG5cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICBjb250ZW50OiBbeyBcbiAgICAgICAgICAgIHR5cGU6ICd0ZXh0JywgXG4gICAgICAgICAgICB0ZXh0OiBgVGltZXIgc3RhcnRlZCBzdWNjZXNzZnVsbHkgZm9yIHRpbWUgZW50cnkgJHt0aW1lcl9pZH0gaW4gdGVhbSAke3RlYW1faWR9LmAgXG4gICAgICAgICAgfV1cbiAgICAgICAgfTtcbiAgICAgIH0gY2F0Y2ggKGVycm9yOiBhbnkpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcignRXJyb3Igc3RhcnRpbmcgdGltZXI6JywgZXJyb3IpO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIGNvbnRlbnQ6IFt7IHR5cGU6ICd0ZXh0JywgdGV4dDogYEVycm9yIHN0YXJ0aW5nIHRpbWVyOiAke2Vycm9yLm1lc3NhZ2V9YCB9XSxcbiAgICAgICAgICBpc0Vycm9yOiB0cnVlXG4gICAgICAgIH07XG4gICAgICB9XG4gICAgfVxuICApO1xuXG4gIHNlcnZlci50b29sKFxuICAgICdzdG9wX3RpbWVyJyxcbiAgICAnU3RvcCBhIHJ1bm5pbmcgdGltZXIuIEVuZHMgdGhlIGFjdGl2ZSB0aW1lIHRyYWNraW5nIHNlc3Npb24gYW5kIHJlY29yZHMgdGhlIGR1cmF0aW9uLicsXG4gICAge1xuICAgICAgdGVhbV9pZDogei5zdHJpbmcoKS5taW4oMSkuZGVzY3JpYmUoJ1RoZSBJRCBvZiB0aGUgdGVhbScpLFxuICAgICAgdGltZXJfaWQ6IHouc3RyaW5nKCkubWluKDEpLmRlc2NyaWJlKCdUaGUgSUQgb2YgdGhlIHRpbWUgZW50cnkgdG8gc3RvcCB0aW1pbmcnKSxcbiAgICAgIGVuZDogei5udW1iZXIoKS5wb3NpdGl2ZSgpLm9wdGlvbmFsKCkuZGVzY3JpYmUoJ0N1c3RvbSBlbmQgdGltZSAoVW5peCB0aW1lc3RhbXAgaW4gbWlsbGlzZWNvbmRzLCBkZWZhdWx0cyB0byBjdXJyZW50IHRpbWUpJylcbiAgICB9LFxuICAgIGFzeW5jICh7IHRlYW1faWQsIHRpbWVyX2lkLCBlbmQgfSkgPT4ge1xuICAgICAgdHJ5IHtcbiAgICAgICAgYXdhaXQgdGltZVRyYWNraW5nQ2xpZW50LnN0b3BUaW1lcih0ZWFtX2lkLCB0aW1lcl9pZCwgZW5kKTtcblxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIGNvbnRlbnQ6IFt7IFxuICAgICAgICAgICAgdHlwZTogJ3RleHQnLCBcbiAgICAgICAgICAgIHRleHQ6IGBUaW1lciBzdG9wcGVkIHN1Y2Nlc3NmdWxseSBmb3IgdGltZSBlbnRyeSAke3RpbWVyX2lkfSBpbiB0ZWFtICR7dGVhbV9pZH0uYCBcbiAgICAgICAgICB9XVxuICAgICAgICB9O1xuICAgICAgfSBjYXRjaCAoZXJyb3I6IGFueSkge1xuICAgICAgICBjb25zb2xlLmVycm9yKCdFcnJvciBzdG9wcGluZyB0aW1lcjonLCBlcnJvcik7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgY29udGVudDogW3sgdHlwZTogJ3RleHQnLCB0ZXh0OiBgRXJyb3Igc3RvcHBpbmcgdGltZXI6ICR7ZXJyb3IubWVzc2FnZX1gIH1dLFxuICAgICAgICAgIGlzRXJyb3I6IHRydWVcbiAgICAgICAgfTtcbiAgICAgIH1cbiAgICB9XG4gICk7XG5cbiAgLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICAvLyBUSU1FIEFOQUxZVElDUyAmIFJFUE9SVElOR1xuICAvLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG5cbiAgc2VydmVyLnRvb2woXG4gICAgJ2dldF90aW1lX3N1bW1hcnknLFxuICAgICdHZXQgdGltZSB0cmFja2luZyBzdW1tYXJ5IGFuZCBhbmFseXRpY3MuIFByb3ZpZGVzIGFnZ3JlZ2F0ZWQgdGltZSBkYXRhIHdpdGggYnJlYWtkb3ducyBieSB1c2VyIGFuZCB0YXNrLicsXG4gICAge1xuICAgICAgdGVhbV9pZDogei5zdHJpbmcoKS5taW4oMSkuZGVzY3JpYmUoJ1RoZSBJRCBvZiB0aGUgdGVhbSB0byBnZXQgdGltZSBzdW1tYXJ5IGZvcicpLFxuICAgICAgc3RhcnRfZGF0ZTogei5udW1iZXIoKS5wb3NpdGl2ZSgpLm9wdGlvbmFsKCkuZGVzY3JpYmUoJ0ZpbHRlciBieSBzdGFydCBkYXRlIChVbml4IHRpbWVzdGFtcCknKSxcbiAgICAgIGVuZF9kYXRlOiB6Lm51bWJlcigpLnBvc2l0aXZlKCkub3B0aW9uYWwoKS5kZXNjcmliZSgnRmlsdGVyIGJ5IGVuZCBkYXRlIChVbml4IHRpbWVzdGFtcCknKSxcbiAgICAgIGFzc2lnbmVlOiB6Lm51bWJlcigpLnBvc2l0aXZlKCkub3B0aW9uYWwoKS5kZXNjcmliZSgnRmlsdGVyIGJ5IHVzZXIgSUQnKSxcbiAgICAgIHRhc2tfaWQ6IHouc3RyaW5nKCkub3B0aW9uYWwoKS5kZXNjcmliZSgnRmlsdGVyIGJ5IHRhc2sgSUQnKSxcbiAgICAgIGxpc3RfaWQ6IHouc3RyaW5nKCkub3B0aW9uYWwoKS5kZXNjcmliZSgnRmlsdGVyIGJ5IGxpc3QgSUQnKSxcbiAgICAgIGZvbGRlcl9pZDogei5zdHJpbmcoKS5vcHRpb25hbCgpLmRlc2NyaWJlKCdGaWx0ZXIgYnkgZm9sZGVyIElEJyksXG4gICAgICBzcGFjZV9pZDogei5zdHJpbmcoKS5vcHRpb25hbCgpLmRlc2NyaWJlKCdGaWx0ZXIgYnkgc3BhY2UgSUQnKVxuICAgIH0sXG4gICAgYXN5bmMgKHsgdGVhbV9pZCwgc3RhcnRfZGF0ZSwgZW5kX2RhdGUsIGFzc2lnbmVlLCB0YXNrX2lkLCBsaXN0X2lkLCBmb2xkZXJfaWQsIHNwYWNlX2lkIH0pID0+IHtcbiAgICAgIHRyeSB7XG4gICAgICAgIGNvbnN0IHBhcmFtcyA9IHtcbiAgICAgICAgICBzdGFydF9kYXRlLFxuICAgICAgICAgIGVuZF9kYXRlLFxuICAgICAgICAgIGFzc2lnbmVlLFxuICAgICAgICAgIHRhc2tfaWQsXG4gICAgICAgICAgbGlzdF9pZCxcbiAgICAgICAgICBmb2xkZXJfaWQsXG4gICAgICAgICAgc3BhY2VfaWRcbiAgICAgICAgfTtcblxuICAgICAgICBjb25zdCB0aW1lU3VtbWFyeSA9IGF3YWl0IHRpbWVUcmFja2luZ0NsaWVudC5nZXRUaW1lU3VtbWFyeSh0ZWFtX2lkLCBwYXJhbXMpO1xuXG4gICAgICAgIC8vIEZvcm1hdCBkdXJhdGlvbnMgZm9yIGJldHRlciByZWFkYWJpbGl0eVxuICAgICAgICBjb25zdCBmb3JtYXREdXJhdGlvbiA9IChtczogbnVtYmVyKSA9PiB0aW1lVHJhY2tpbmdDbGllbnQuZm9ybWF0RHVyYXRpb24obXMpO1xuXG4gICAgICAgIGNvbnN0IGZvcm1hdHRlZFN1bW1hcnkgPSB7XG4gICAgICAgICAgLi4udGltZVN1bW1hcnksXG4gICAgICAgICAgdG90YWxfZHVyYXRpb25fZm9ybWF0dGVkOiBmb3JtYXREdXJhdGlvbih0aW1lU3VtbWFyeS50b3RhbF9kdXJhdGlvbiksXG4gICAgICAgICAgYmlsbGFibGVfZHVyYXRpb25fZm9ybWF0dGVkOiBmb3JtYXREdXJhdGlvbih0aW1lU3VtbWFyeS5iaWxsYWJsZV9kdXJhdGlvbiksXG4gICAgICAgICAgbm9uX2JpbGxhYmxlX2R1cmF0aW9uX2Zvcm1hdHRlZDogZm9ybWF0RHVyYXRpb24odGltZVN1bW1hcnkubm9uX2JpbGxhYmxlX2R1cmF0aW9uKVxuICAgICAgICB9O1xuXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgY29udGVudDogW3sgXG4gICAgICAgICAgICB0eXBlOiAndGV4dCcsIFxuICAgICAgICAgICAgdGV4dDogYFRpbWUgc3VtbWFyeSBmb3IgdGVhbSAke3RlYW1faWR9OlxcblxcbiR7SlNPTi5zdHJpbmdpZnkoZm9ybWF0dGVkU3VtbWFyeSwgbnVsbCwgMil9YCBcbiAgICAgICAgICB9XVxuICAgICAgICB9O1xuICAgICAgfSBjYXRjaCAoZXJyb3I6IGFueSkge1xuICAgICAgICBjb25zb2xlLmVycm9yKCdFcnJvciBnZXR0aW5nIHRpbWUgc3VtbWFyeTonLCBlcnJvcik7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgY29udGVudDogW3sgdHlwZTogJ3RleHQnLCB0ZXh0OiBgRXJyb3IgZ2V0dGluZyB0aW1lIHN1bW1hcnk6ICR7ZXJyb3IubWVzc2FnZX1gIH1dLFxuICAgICAgICAgIGlzRXJyb3I6IHRydWVcbiAgICAgICAgfTtcbiAgICAgIH1cbiAgICB9XG4gICk7XG5cbiAgLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICAvLyBIRUxQRVIgVE9PTFNcbiAgLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuXG4gIHNlcnZlci50b29sKFxuICAgICdjcmVhdGVfdGltZXJfZW50cnknLFxuICAgICdDcmVhdGUgYSBuZXcgdGltZSBlbnRyeSBhbmQgaW1tZWRpYXRlbHkgc3RhcnQgdGhlIHRpbWVyLiBDb252ZW5pZW50IGZvciBzdGFydGluZyB0aW1lIHRyYWNraW5nIGluIG9uZSBzdGVwLicsXG4gICAge1xuICAgICAgdGVhbV9pZDogei5zdHJpbmcoKS5taW4oMSkuZGVzY3JpYmUoJ1RoZSBJRCBvZiB0aGUgdGVhbScpLFxuICAgICAgZGVzY3JpcHRpb246IHouc3RyaW5nKCkubWluKDEpLmRlc2NyaWJlKCdEZXNjcmlwdGlvbiBvZiB3aGF0IHlvdSBhcmUgd29ya2luZyBvbicpLFxuICAgICAgdGFza19pZDogei5zdHJpbmcoKS5vcHRpb25hbCgpLmRlc2NyaWJlKCdBc3NvY2lhdGVkIHRhc2sgSUQnKSxcbiAgICAgIGJpbGxhYmxlOiB6LmJvb2xlYW4oKS5kZWZhdWx0KGZhbHNlKS5kZXNjcmliZSgnV2hldGhlciB0aGUgdGltZSBpcyBiaWxsYWJsZScpLFxuICAgICAgdGFnczogei5hcnJheSh6Lm9iamVjdCh7XG4gICAgICAgIG5hbWU6IHouc3RyaW5nKCkubWluKDEpLmRlc2NyaWJlKCdUYWcgbmFtZScpXG4gICAgICB9KSkub3B0aW9uYWwoKS5kZXNjcmliZSgnQXJyYXkgb2YgdGFncyBmb3IgdGhlIHRpbWUgZW50cnknKVxuICAgIH0sXG4gICAgYXN5bmMgKHsgdGVhbV9pZCwgZGVzY3JpcHRpb24sIHRhc2tfaWQsIGJpbGxhYmxlLCB0YWdzIH0pID0+IHtcbiAgICAgIHRyeSB7XG4gICAgICAgIGNvbnN0IGN1cnJlbnRUaW1lID0gdGltZVRyYWNraW5nQ2xpZW50LmdldEN1cnJlbnRUaW1lc3RhbXAoKTtcbiAgICAgICAgXG4gICAgICAgIC8vIENyZWF0ZSB0aW1lIGVudHJ5XG4gICAgICAgIGNvbnN0IHRpbWVFbnRyeSA9IGF3YWl0IHRpbWVUcmFja2luZ0NsaWVudC5jcmVhdGVUaW1lRW50cnkodGVhbV9pZCwge1xuICAgICAgICAgIGRlc2NyaXB0aW9uLFxuICAgICAgICAgIHN0YXJ0OiBjdXJyZW50VGltZSxcbiAgICAgICAgICBiaWxsYWJsZSxcbiAgICAgICAgICB0YXNrX2lkLFxuICAgICAgICAgIHRhZ3NcbiAgICAgICAgfSk7XG5cbiAgICAgICAgLy8gU3RhcnQgdGhlIHRpbWVyXG4gICAgICAgIGF3YWl0IHRpbWVUcmFja2luZ0NsaWVudC5zdGFydFRpbWVyKHRlYW1faWQsIHRpbWVFbnRyeS5pZCk7XG5cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICBjb250ZW50OiBbeyBcbiAgICAgICAgICAgIHR5cGU6ICd0ZXh0JywgXG4gICAgICAgICAgICB0ZXh0OiBgVGltZXIgc3RhcnRlZCBzdWNjZXNzZnVsbHkhIFRpbWUgZW50cnkgY3JlYXRlZCBhbmQgdGltZXIgaXMgbm93IHJ1bm5pbmcuXFxuXFxuVGltZSBFbnRyeTogJHtKU09OLnN0cmluZ2lmeSh0aW1lRW50cnksIG51bGwsIDIpfWAgXG4gICAgICAgICAgfV1cbiAgICAgICAgfTtcbiAgICAgIH0gY2F0Y2ggKGVycm9yOiBhbnkpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcignRXJyb3IgY3JlYXRpbmcgdGltZXIgZW50cnk6JywgZXJyb3IpO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIGNvbnRlbnQ6IFt7IHR5cGU6ICd0ZXh0JywgdGV4dDogYEVycm9yIGNyZWF0aW5nIHRpbWVyIGVudHJ5OiAke2Vycm9yLm1lc3NhZ2V9YCB9XSxcbiAgICAgICAgICBpc0Vycm9yOiB0cnVlXG4gICAgICAgIH07XG4gICAgICB9XG4gICAgfVxuICApO1xuXG4gIHNlcnZlci50b29sKFxuICAgICdmb3JtYXRfZHVyYXRpb24nLFxuICAgICdGb3JtYXQgYSBkdXJhdGlvbiBmcm9tIG1pbGxpc2Vjb25kcyB0byBodW1hbi1yZWFkYWJsZSBmb3JtYXQuIFVzZWZ1bCBmb3IgZGlzcGxheWluZyB0aW1lIHRyYWNraW5nIGRhdGEuJyxcbiAgICB7XG4gICAgICBtaWxsaXNlY29uZHM6IHoubnVtYmVyKCkubWluKDApLmRlc2NyaWJlKCdEdXJhdGlvbiBpbiBtaWxsaXNlY29uZHMnKSxcbiAgICAgIGluY2x1ZGVfc2Vjb25kczogei5ib29sZWFuKCkub3B0aW9uYWwoKS5kZWZhdWx0KHRydWUpLmRlc2NyaWJlKCdXaGV0aGVyIHRvIGluY2x1ZGUgc2Vjb25kcyBpbiB0aGUgZm9ybWF0dGVkIG91dHB1dCcpLFxuICAgICAgZm9ybWF0OiB6LmVudW0oWydtaWxsaXNlY29uZHMnLCAnc2Vjb25kcycsICdtaW51dGVzJywgJ2hvdXJzJ10pLm9wdGlvbmFsKCkuZGVmYXVsdCgnbWlsbGlzZWNvbmRzJykuZGVzY3JpYmUoJ0NvbnZlcnQgdG8gc3BlY2lmaWMgdGltZSB1bml0JylcbiAgICB9LFxuICAgIGFzeW5jICh7IG1pbGxpc2Vjb25kcywgaW5jbHVkZV9zZWNvbmRzLCBmb3JtYXQgfSkgPT4ge1xuICAgICAgdHJ5IHtcbiAgICAgICAgY29uc3QgZm9ybWF0dGVkRHVyYXRpb24gPSB0aW1lVHJhY2tpbmdDbGllbnQuZm9ybWF0RHVyYXRpb24obWlsbGlzZWNvbmRzLCBpbmNsdWRlX3NlY29uZHMpO1xuICAgICAgICBjb25zdCBjb252ZXJ0ZWRWYWx1ZSA9IHRpbWVUcmFja2luZ0NsaWVudC5jb252ZXJ0RHVyYXRpb24obWlsbGlzZWNvbmRzLCBmb3JtYXQpO1xuXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgY29udGVudDogW3sgXG4gICAgICAgICAgICB0eXBlOiAndGV4dCcsIFxuICAgICAgICAgICAgdGV4dDogYER1cmF0aW9uIGZvcm1hdHRpbmc6XFxuXFxuT3JpZ2luYWw6ICR7bWlsbGlzZWNvbmRzfSBtaWxsaXNlY29uZHNcXG5Gb3JtYXR0ZWQ6ICR7Zm9ybWF0dGVkRHVyYXRpb259XFxuQ29udmVydGVkIHRvICR7Zm9ybWF0fTogJHtjb252ZXJ0ZWRWYWx1ZX1gIFxuICAgICAgICAgIH1dXG4gICAgICAgIH07XG4gICAgICB9IGNhdGNoIChlcnJvcjogYW55KSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoJ0Vycm9yIGZvcm1hdHRpbmcgZHVyYXRpb246JywgZXJyb3IpO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIGNvbnRlbnQ6IFt7IHR5cGU6ICd0ZXh0JywgdGV4dDogYEVycm9yIGZvcm1hdHRpbmcgZHVyYXRpb246ICR7ZXJyb3IubWVzc2FnZX1gIH1dLFxuICAgICAgICAgIGlzRXJyb3I6IHRydWVcbiAgICAgICAgfTtcbiAgICAgIH1cbiAgICB9XG4gICk7XG59XG4iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7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
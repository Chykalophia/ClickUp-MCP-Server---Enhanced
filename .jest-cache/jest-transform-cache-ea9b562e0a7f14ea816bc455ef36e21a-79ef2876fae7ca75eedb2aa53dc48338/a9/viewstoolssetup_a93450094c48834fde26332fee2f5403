7a8f3dcc4e8c30e1fa109b2e8812e495
/* istanbul ignore next */
function cov_vw3tgx67f() {
  var path = "/Users/peterkrzyzek/Development/clickup-mcp-server/src/tools/views-tools-setup.ts";
  var hash = "365a9f3b19c9724c62b9d10f6bcbadbdccaf6249";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/peterkrzyzek/Development/clickup-mcp-server/src/tools/views-tools-setup.ts",
    statementMap: {
      "0": {
        start: {
          line: 6,
          column: 22
        },
        end: {
          line: 6,
          column: 43
        }
      },
      "1": {
        start: {
          line: 7,
          column: 20
        },
        end: {
          line: 7,
          column: 74
        }
      },
      "2": {
        start: {
          line: 12,
          column: 4
        },
        end: {
          line: 49,
          column: 7
        }
      },
      "3": {
        start: {
          line: 30,
          column: 8
        },
        end: {
          line: 48,
          column: 9
        }
      },
      "4": {
        start: {
          line: 31,
          column: 28
        },
        end: {
          line: 31,
          column: 56
        }
      },
      "5": {
        start: {
          line: 32,
          column: 27
        },
        end: {
          line: 32,
          column: 64
        }
      },
      "6": {
        start: {
          line: 33,
          column: 12
        },
        end: {
          line: 38,
          column: 14
        }
      },
      "7": {
        start: {
          line: 41,
          column: 12
        },
        end: {
          line: 47,
          column: 14
        }
      },
      "8": {
        start: {
          line: 50,
          column: 4
        },
        end: {
          line: 75,
          column: 7
        }
      },
      "9": {
        start: {
          line: 56,
          column: 8
        },
        end: {
          line: 74,
          column: 9
        }
      },
      "10": {
        start: {
          line: 57,
          column: 27
        },
        end: {
          line: 57,
          column: 59
        }
      },
      "11": {
        start: {
          line: 58,
          column: 27
        },
        end: {
          line: 58,
          column: 61
        }
      },
      "12": {
        start: {
          line: 59,
          column: 12
        },
        end: {
          line: 64,
          column: 14
        }
      },
      "13": {
        start: {
          line: 67,
          column: 12
        },
        end: {
          line: 73,
          column: 14
        }
      },
      "14": {
        start: {
          line: 76,
          column: 4
        },
        end: {
          line: 97,
          column: 7
        }
      },
      "15": {
        start: {
          line: 79,
          column: 8
        },
        end: {
          line: 96,
          column: 9
        }
      },
      "16": {
        start: {
          line: 80,
          column: 27
        },
        end: {
          line: 80,
          column: 66
        }
      },
      "17": {
        start: {
          line: 81,
          column: 12
        },
        end: {
          line: 86,
          column: 14
        }
      },
      "18": {
        start: {
          line: 89,
          column: 12
        },
        end: {
          line: 95,
          column: 14
        }
      },
      "19": {
        start: {
          line: 98,
          column: 4
        },
        end: {
          line: 133,
          column: 7
        }
      },
      "20": {
        start: {
          line: 114,
          column: 8
        },
        end: {
          line: 132,
          column: 9
        }
      },
      "21": {
        start: {
          line: 115,
          column: 28
        },
        end: {
          line: 115,
          column: 56
        }
      },
      "22": {
        start: {
          line: 116,
          column: 27
        },
        end: {
          line: 116,
          column: 64
        }
      },
      "23": {
        start: {
          line: 117,
          column: 12
        },
        end: {
          line: 122,
          column: 14
        }
      },
      "24": {
        start: {
          line: 125,
          column: 12
        },
        end: {
          line: 131,
          column: 14
        }
      },
      "25": {
        start: {
          line: 134,
          column: 4
        },
        end: {
          line: 155,
          column: 7
        }
      },
      "26": {
        start: {
          line: 137,
          column: 8
        },
        end: {
          line: 154,
          column: 9
        }
      },
      "27": {
        start: {
          line: 138,
          column: 27
        },
        end: {
          line: 138,
          column: 69
        }
      },
      "28": {
        start: {
          line: 139,
          column: 12
        },
        end: {
          line: 144,
          column: 14
        }
      },
      "29": {
        start: {
          line: 147,
          column: 12
        },
        end: {
          line: 153,
          column: 14
        }
      },
      "30": {
        start: {
          line: 156,
          column: 4
        },
        end: {
          line: 179,
          column: 7
        }
      },
      "31": {
        start: {
          line: 160,
          column: 8
        },
        end: {
          line: 178,
          column: 9
        }
      },
      "32": {
        start: {
          line: 161,
          column: 28
        },
        end: {
          line: 161,
          column: 60
        }
      },
      "33": {
        start: {
          line: 162,
          column: 27
        },
        end: {
          line: 162,
          column: 68
        }
      },
      "34": {
        start: {
          line: 163,
          column: 12
        },
        end: {
          line: 168,
          column: 14
        }
      },
      "35": {
        start: {
          line: 171,
          column: 12
        },
        end: {
          line: 177,
          column: 14
        }
      },
      "36": {
        start: {
          line: 180,
          column: 4
        },
        end: {
          line: 203,
          column: 7
        }
      },
      "37": {
        start: {
          line: 184,
          column: 8
        },
        end: {
          line: 202,
          column: 9
        }
      },
      "38": {
        start: {
          line: 185,
          column: 28
        },
        end: {
          line: 185,
          column: 61
        }
      },
      "39": {
        start: {
          line: 186,
          column: 27
        },
        end: {
          line: 186,
          column: 69
        }
      },
      "40": {
        start: {
          line: 187,
          column: 12
        },
        end: {
          line: 192,
          column: 14
        }
      },
      "41": {
        start: {
          line: 195,
          column: 12
        },
        end: {
          line: 201,
          column: 14
        }
      },
      "42": {
        start: {
          line: 204,
          column: 4
        },
        end: {
          line: 227,
          column: 7
        }
      },
      "43": {
        start: {
          line: 208,
          column: 8
        },
        end: {
          line: 226,
          column: 9
        }
      },
      "44": {
        start: {
          line: 209,
          column: 28
        },
        end: {
          line: 209,
          column: 60
        }
      },
      "45": {
        start: {
          line: 210,
          column: 27
        },
        end: {
          line: 210,
          column: 68
        }
      },
      "46": {
        start: {
          line: 211,
          column: 12
        },
        end: {
          line: 216,
          column: 14
        }
      },
      "47": {
        start: {
          line: 219,
          column: 12
        },
        end: {
          line: 225,
          column: 14
        }
      },
      "48": {
        start: {
          line: 228,
          column: 4
        },
        end: {
          line: 257,
          column: 7
        }
      },
      "49": {
        start: {
          line: 238,
          column: 8
        },
        end: {
          line: 256,
          column: 9
        }
      },
      "50": {
        start: {
          line: 239,
          column: 28
        },
        end: {
          line: 239,
          column: 64
        }
      },
      "51": {
        start: {
          line: 240,
          column: 27
        },
        end: {
          line: 240,
          column: 72
        }
      },
      "52": {
        start: {
          line: 241,
          column: 12
        },
        end: {
          line: 246,
          column: 14
        }
      },
      "53": {
        start: {
          line: 249,
          column: 12
        },
        end: {
          line: 255,
          column: 14
        }
      },
      "54": {
        start: {
          line: 261,
          column: 4
        },
        end: {
          line: 283,
          column: 7
        }
      },
      "55": {
        start: {
          line: 265,
          column: 8
        },
        end: {
          line: 282,
          column: 9
        }
      },
      "56": {
        start: {
          line: 266,
          column: 27
        },
        end: {
          line: 266,
          column: 82
        }
      },
      "57": {
        start: {
          line: 267,
          column: 12
        },
        end: {
          line: 272,
          column: 14
        }
      },
      "58": {
        start: {
          line: 275,
          column: 12
        },
        end: {
          line: 281,
          column: 14
        }
      },
      "59": {
        start: {
          line: 284,
          column: 4
        },
        end: {
          line: 306,
          column: 7
        }
      },
      "60": {
        start: {
          line: 288,
          column: 8
        },
        end: {
          line: 305,
          column: 9
        }
      },
      "61": {
        start: {
          line: 289,
          column: 27
        },
        end: {
          line: 289,
          column: 83
        }
      },
      "62": {
        start: {
          line: 290,
          column: 12
        },
        end: {
          line: 295,
          column: 14
        }
      },
      "63": {
        start: {
          line: 298,
          column: 12
        },
        end: {
          line: 304,
          column: 14
        }
      },
      "64": {
        start: {
          line: 307,
          column: 4
        },
        end: {
          line: 332,
          column: 7
        }
      },
      "65": {
        start: {
          line: 313,
          column: 8
        },
        end: {
          line: 331,
          column: 9
        }
      },
      "66": {
        start: {
          line: 314,
          column: 28
        },
        end: {
          line: 314,
          column: 57
        }
      },
      "67": {
        start: {
          line: 315,
          column: 27
        },
        end: {
          line: 315,
          column: 71
        }
      },
      "68": {
        start: {
          line: 316,
          column: 12
        },
        end: {
          line: 321,
          column: 14
        }
      },
      "69": {
        start: {
          line: 324,
          column: 12
        },
        end: {
          line: 330,
          column: 14
        }
      },
      "70": {
        start: {
          line: 333,
          column: 4
        },
        end: {
          line: 355,
          column: 7
        }
      },
      "71": {
        start: {
          line: 337,
          column: 8
        },
        end: {
          line: 354,
          column: 9
        }
      },
      "72": {
        start: {
          line: 338,
          column: 27
        },
        end: {
          line: 338,
          column: 92
        }
      },
      "73": {
        start: {
          line: 339,
          column: 12
        },
        end: {
          line: 344,
          column: 14
        }
      },
      "74": {
        start: {
          line: 347,
          column: 12
        },
        end: {
          line: 353,
          column: 14
        }
      }
    },
    fnMap: {
      "0": {
        name: "setupViewsTools",
        decl: {
          start: {
            line: 8,
            column: 16
          },
          end: {
            line: 8,
            column: 31
          }
        },
        loc: {
          start: {
            line: 8,
            column: 40
          },
          end: {
            line: 356,
            column: 1
          }
        },
        line: 8
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 29,
            column: 7
          },
          end: {
            line: 29,
            column: 8
          }
        },
        loc: {
          start: {
            line: 29,
            column: 23
          },
          end: {
            line: 49,
            column: 5
          }
        },
        line: 29
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 55,
            column: 7
          },
          end: {
            line: 55,
            column: 8
          }
        },
        loc: {
          start: {
            line: 55,
            column: 23
          },
          end: {
            line: 75,
            column: 5
          }
        },
        line: 55
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 78,
            column: 7
          },
          end: {
            line: 78,
            column: 8
          }
        },
        loc: {
          start: {
            line: 78,
            column: 23
          },
          end: {
            line: 97,
            column: 5
          }
        },
        line: 78
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 113,
            column: 7
          },
          end: {
            line: 113,
            column: 8
          }
        },
        loc: {
          start: {
            line: 113,
            column: 23
          },
          end: {
            line: 133,
            column: 5
          }
        },
        line: 113
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 136,
            column: 7
          },
          end: {
            line: 136,
            column: 8
          }
        },
        loc: {
          start: {
            line: 136,
            column: 23
          },
          end: {
            line: 155,
            column: 5
          }
        },
        line: 136
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 159,
            column: 7
          },
          end: {
            line: 159,
            column: 8
          }
        },
        loc: {
          start: {
            line: 159,
            column: 23
          },
          end: {
            line: 179,
            column: 5
          }
        },
        line: 159
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 183,
            column: 7
          },
          end: {
            line: 183,
            column: 8
          }
        },
        loc: {
          start: {
            line: 183,
            column: 23
          },
          end: {
            line: 203,
            column: 5
          }
        },
        line: 183
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 207,
            column: 7
          },
          end: {
            line: 207,
            column: 8
          }
        },
        loc: {
          start: {
            line: 207,
            column: 23
          },
          end: {
            line: 227,
            column: 5
          }
        },
        line: 207
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 237,
            column: 7
          },
          end: {
            line: 237,
            column: 8
          }
        },
        loc: {
          start: {
            line: 237,
            column: 23
          },
          end: {
            line: 257,
            column: 5
          }
        },
        line: 237
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 264,
            column: 7
          },
          end: {
            line: 264,
            column: 8
          }
        },
        loc: {
          start: {
            line: 264,
            column: 23
          },
          end: {
            line: 283,
            column: 5
          }
        },
        line: 264
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 287,
            column: 7
          },
          end: {
            line: 287,
            column: 8
          }
        },
        loc: {
          start: {
            line: 287,
            column: 23
          },
          end: {
            line: 306,
            column: 5
          }
        },
        line: 287
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 312,
            column: 7
          },
          end: {
            line: 312,
            column: 8
          }
        },
        loc: {
          start: {
            line: 312,
            column: 23
          },
          end: {
            line: 332,
            column: 5
          }
        },
        line: 312
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 336,
            column: 7
          },
          end: {
            line: 336,
            column: 8
          }
        },
        loc: {
          start: {
            line: 336,
            column: 23
          },
          end: {
            line: 355,
            column: 5
          }
        },
        line: 336
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 44,
            column: 54
          },
          end: {
            line: 44,
            column: 110
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 44,
            column: 79
          },
          end: {
            line: 44,
            column: 92
          }
        }, {
          start: {
            line: 44,
            column: 95
          },
          end: {
            line: 44,
            column: 110
          }
        }],
        line: 44
      },
      "1": {
        loc: {
          start: {
            line: 70,
            column: 54
          },
          end: {
            line: 70,
            column: 110
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 70,
            column: 79
          },
          end: {
            line: 70,
            column: 92
          }
        }, {
          start: {
            line: 70,
            column: 95
          },
          end: {
            line: 70,
            column: 110
          }
        }],
        line: 70
      },
      "2": {
        loc: {
          start: {
            line: 92,
            column: 53
          },
          end: {
            line: 92,
            column: 109
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 92,
            column: 78
          },
          end: {
            line: 92,
            column: 91
          }
        }, {
          start: {
            line: 92,
            column: 94
          },
          end: {
            line: 92,
            column: 109
          }
        }],
        line: 92
      },
      "3": {
        loc: {
          start: {
            line: 128,
            column: 54
          },
          end: {
            line: 128,
            column: 110
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 128,
            column: 79
          },
          end: {
            line: 128,
            column: 92
          }
        }, {
          start: {
            line: 128,
            column: 95
          },
          end: {
            line: 128,
            column: 110
          }
        }],
        line: 128
      },
      "4": {
        loc: {
          start: {
            line: 150,
            column: 54
          },
          end: {
            line: 150,
            column: 110
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 150,
            column: 79
          },
          end: {
            line: 150,
            column: 92
          }
        }, {
          start: {
            line: 150,
            column: 95
          },
          end: {
            line: 150,
            column: 110
          }
        }],
        line: 150
      },
      "5": {
        loc: {
          start: {
            line: 174,
            column: 61
          },
          end: {
            line: 174,
            column: 117
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 174,
            column: 86
          },
          end: {
            line: 174,
            column: 99
          }
        }, {
          start: {
            line: 174,
            column: 102
          },
          end: {
            line: 174,
            column: 117
          }
        }],
        line: 174
      },
      "6": {
        loc: {
          start: {
            line: 198,
            column: 62
          },
          end: {
            line: 198,
            column: 118
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 198,
            column: 87
          },
          end: {
            line: 198,
            column: 100
          }
        }, {
          start: {
            line: 198,
            column: 103
          },
          end: {
            line: 198,
            column: 118
          }
        }],
        line: 198
      },
      "7": {
        loc: {
          start: {
            line: 222,
            column: 61
          },
          end: {
            line: 222,
            column: 117
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 222,
            column: 86
          },
          end: {
            line: 222,
            column: 99
          }
        }, {
          start: {
            line: 222,
            column: 102
          },
          end: {
            line: 222,
            column: 117
          }
        }],
        line: 222
      },
      "8": {
        loc: {
          start: {
            line: 252,
            column: 63
          },
          end: {
            line: 252,
            column: 119
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 252,
            column: 88
          },
          end: {
            line: 252,
            column: 101
          }
        }, {
          start: {
            line: 252,
            column: 104
          },
          end: {
            line: 252,
            column: 119
          }
        }],
        line: 252
      },
      "9": {
        loc: {
          start: {
            line: 278,
            column: 59
          },
          end: {
            line: 278,
            column: 115
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 278,
            column: 84
          },
          end: {
            line: 278,
            column: 97
          }
        }, {
          start: {
            line: 278,
            column: 100
          },
          end: {
            line: 278,
            column: 115
          }
        }],
        line: 278
      },
      "10": {
        loc: {
          start: {
            line: 301,
            column: 57
          },
          end: {
            line: 301,
            column: 113
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 301,
            column: 82
          },
          end: {
            line: 301,
            column: 95
          }
        }, {
          start: {
            line: 301,
            column: 98
          },
          end: {
            line: 301,
            column: 113
          }
        }],
        line: 301
      },
      "11": {
        loc: {
          start: {
            line: 327,
            column: 62
          },
          end: {
            line: 327,
            column: 118
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 327,
            column: 87
          },
          end: {
            line: 327,
            column: 100
          }
        }, {
          start: {
            line: 327,
            column: 103
          },
          end: {
            line: 327,
            column: 118
          }
        }],
        line: 327
      },
      "12": {
        loc: {
          start: {
            line: 350,
            column: 60
          },
          end: {
            line: 350,
            column: 116
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 350,
            column: 85
          },
          end: {
            line: 350,
            column: 98
          }
        }, {
          start: {
            line: 350,
            column: 101
          },
          end: {
            line: 350,
            column: 116
          }
        }],
        line: 350
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0]
    },
    inputSourceMap: {
      file: "/Users/peterkrzyzek/Development/clickup-mcp-server/src/tools/views-tools-setup.ts",
      mappings: "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",
      names: [],
      sources: ["/Users/peterkrzyzek/Development/clickup-mcp-server/src/tools/views-tools-setup.ts"],
      sourcesContent: ["import { McpServer } from '@modelcontextprotocol/sdk/server/mcp.js';\nimport { z } from 'zod';\nimport { createClickUpClient } from '../clickup-client/index.js';\nimport { ViewsEnhancedClient } from '../clickup-client/views-enhanced.js';\nimport {\n  CreateViewSchema,\n  UpdateViewSchema,\n  GetViewsFilterSchema,\n  SetViewFiltersSchema,\n  SetViewGroupingSchema,\n  SetViewSortingSchema,\n  UpdateViewSettingsSchema,\n  ViewSharingSchema,\n  ViewTypeSchema,\n  ViewAccessSchema,\n  FilterOperatorSchema,\n  ViewFilterSchema,\n  ViewGroupingSchema,\n  ViewSortingSchema,\n  BoardViewSettingsSchema,\n  CalendarViewSettingsSchema,\n  GanttViewSettingsSchema,\n  TableViewSettingsSchema\n} from '../schemas/views-schemas.js';\n\n// Create clients\nconst clickUpClient = createClickUpClient();\nconst viewsClient = new ViewsEnhancedClient(process.env.CLICKUP_API_TOKEN!);\n\nexport function setupViewsTools(server: McpServer): void {\n\n  // ========================================\n  // VIEW MANAGEMENT OPERATIONS\n  // ========================================\n\n  server.tool(\n    'create_view',\n    'Create a new view in a ClickUp space, folder, or list. Supports all view types including list, board, calendar, gantt, and more.',\n    {\n      parent_id: z.string().min(1).describe('The ID of the parent (space, folder, or list)'),\n      parent_type: z.enum(['space', 'folder', 'list']).describe('The type of parent container'),\n      name: z.string().min(1).describe('The name of the view'),\n      type: ViewTypeSchema.describe('The type of view to create'),\n      access: ViewAccessSchema.default('private').describe('Access level for the view'),\n      filters: z.array(ViewFilterSchema).optional().describe('Initial filters for the view'),\n      grouping: z.array(ViewGroupingSchema).optional().describe('Grouping configuration for the view'),\n      sorting: z.array(ViewSortingSchema).optional().describe('Sorting configuration for the view'),\n      settings: z.union([\n        BoardViewSettingsSchema,\n        CalendarViewSettingsSchema,\n        GanttViewSettingsSchema,\n        TableViewSettingsSchema,\n        z.object({})\n      ]).optional().describe('View-specific settings'),\n      description: z.string().optional().describe('Description of the view')\n    },\n    async (args) => {\n      try {\n        const request = CreateViewSchema.parse(args);\n        const result = await viewsClient.createView(request);\n        \n        return {\n          content: [{ \n            type: 'text', \n            text: `View created successfully:\\n\\n${JSON.stringify(result, null, 2)}` \n          }]\n        };\n      } catch (error) {\n        return {\n          content: [{ \n            type: 'text', \n            text: `Error creating view: ${error instanceof Error ? error.message : 'Unknown error'}` \n          }],\n          isError: true\n        };\n      }\n    }\n  );\n\n  server.tool(\n    'get_views',\n    'Get all views for a space, folder, or list with optional filtering by type and access level.',\n    {\n      parent_id: z.string().min(1).describe('The ID of the parent (space, folder, or list)'),\n      parent_type: z.enum(['space', 'folder', 'list']).describe('The type of parent container'),\n      type: ViewTypeSchema.optional().describe('Filter views by type'),\n      access: ViewAccessSchema.optional().describe('Filter views by access level')\n    },\n    async (args) => {\n      try {\n        const filter = GetViewsFilterSchema.parse(args);\n        const result = await viewsClient.getViews(filter);\n        \n        return {\n          content: [{ \n            type: 'text', \n            text: `Views for ${args.parent_type} ${args.parent_id}:\\n\\n${JSON.stringify(result, null, 2)}` \n          }]\n        };\n      } catch (error) {\n        return {\n          content: [{ \n            type: 'text', \n            text: `Error getting views: ${error instanceof Error ? error.message : 'Unknown error'}` \n          }],\n          isError: true\n        };\n      }\n    }\n  );\n\n  server.tool(\n    'get_view',\n    'Get detailed information about a specific view by its ID.',\n    {\n      view_id: z.string().min(1).describe('The ID of the view to get')\n    },\n    async (args) => {\n      try {\n        const result = await viewsClient.getView(args.view_id);\n        \n        return {\n          content: [{ \n            type: 'text', \n            text: `View details:\\n\\n${JSON.stringify(result, null, 2)}` \n          }]\n        };\n      } catch (error) {\n        return {\n          content: [{ \n            type: 'text', \n            text: `Error getting view: ${error instanceof Error ? error.message : 'Unknown error'}` \n          }],\n          isError: true\n        };\n      }\n    }\n  );\n\n  server.tool(\n    'update_view',\n    'Update an existing view\\'s properties including name, access, filters, grouping, sorting, and settings.',\n    {\n      view_id: z.string().min(1).describe('The ID of the view to update'),\n      name: z.string().optional().describe('New name for the view'),\n      access: ViewAccessSchema.optional().describe('New access level for the view'),\n      filters: z.array(ViewFilterSchema).optional().describe('New filters for the view'),\n      grouping: z.array(ViewGroupingSchema).optional().describe('New grouping configuration'),\n      sorting: z.array(ViewSortingSchema).optional().describe('New sorting configuration'),\n      settings: z.union([\n        BoardViewSettingsSchema,\n        CalendarViewSettingsSchema,\n        GanttViewSettingsSchema,\n        TableViewSettingsSchema,\n        z.object({})\n      ]).optional().describe('New view-specific settings'),\n      description: z.string().optional().describe('New description for the view')\n    },\n    async (args) => {\n      try {\n        const request = UpdateViewSchema.parse(args);\n        const result = await viewsClient.updateView(request);\n        \n        return {\n          content: [{ \n            type: 'text', \n            text: `View updated successfully:\\n\\n${JSON.stringify(result, null, 2)}` \n          }]\n        };\n      } catch (error) {\n        return {\n          content: [{ \n            type: 'text', \n            text: `Error updating view: ${error instanceof Error ? error.message : 'Unknown error'}` \n          }],\n          isError: true\n        };\n      }\n    }\n  );\n\n  server.tool(\n    'delete_view',\n    'Delete a view from ClickUp. This action cannot be undone.',\n    {\n      view_id: z.string().min(1).describe('The ID of the view to delete')\n    },\n    async (args) => {\n      try {\n        const result = await viewsClient.deleteView(args.view_id);\n        \n        return {\n          content: [{ \n            type: 'text', \n            text: `View deleted successfully: ${JSON.stringify(result, null, 2)}` \n          }]\n        };\n      } catch (error) {\n        return {\n          content: [{ \n            type: 'text', \n            text: `Error deleting view: ${error instanceof Error ? error.message : 'Unknown error'}` \n          }],\n          isError: true\n        };\n      }\n    }\n  );\n\n  server.tool(\n    'set_view_filters',\n    'Set or update filters for a view. Filters determine which tasks are visible in the view.',\n    {\n      view_id: z.string().min(1).describe('The ID of the view to update'),\n      filters: z.array(ViewFilterSchema).describe('Array of filters to apply to the view')\n    },\n    async (args) => {\n      try {\n        const request = SetViewFiltersSchema.parse(args);\n        const result = await viewsClient.setViewFilters(request);\n        \n        return {\n          content: [{ \n            type: 'text', \n            text: `View filters updated successfully:\\n\\n${JSON.stringify(result, null, 2)}` \n          }]\n        };\n      } catch (error) {\n        return {\n          content: [{ \n            type: 'text', \n            text: `Error setting view filters: ${error instanceof Error ? error.message : 'Unknown error'}` \n          }],\n          isError: true\n        };\n      }\n    }\n  );\n\n  server.tool(\n    'set_view_grouping',\n    'Set or update grouping configuration for a view. Grouping organizes tasks into sections.',\n    {\n      view_id: z.string().min(1).describe('The ID of the view to update'),\n      grouping: z.array(ViewGroupingSchema).describe('Array of grouping configurations')\n    },\n    async (args) => {\n      try {\n        const request = SetViewGroupingSchema.parse(args);\n        const result = await viewsClient.setViewGrouping(request);\n        \n        return {\n          content: [{ \n            type: 'text', \n            text: `View grouping updated successfully:\\n\\n${JSON.stringify(result, null, 2)}` \n          }]\n        };\n      } catch (error) {\n        return {\n          content: [{ \n            type: 'text', \n            text: `Error setting view grouping: ${error instanceof Error ? error.message : 'Unknown error'}` \n          }],\n          isError: true\n        };\n      }\n    }\n  );\n\n  server.tool(\n    'set_view_sorting',\n    'Set or update sorting configuration for a view. Sorting determines the order of tasks.',\n    {\n      view_id: z.string().min(1).describe('The ID of the view to update'),\n      sorting: z.array(ViewSortingSchema).describe('Array of sorting configurations')\n    },\n    async (args) => {\n      try {\n        const request = SetViewSortingSchema.parse(args);\n        const result = await viewsClient.setViewSorting(request);\n        \n        return {\n          content: [{ \n            type: 'text', \n            text: `View sorting updated successfully:\\n\\n${JSON.stringify(result, null, 2)}` \n          }]\n        };\n      } catch (error) {\n        return {\n          content: [{ \n            type: 'text', \n            text: `Error setting view sorting: ${error instanceof Error ? error.message : 'Unknown error'}` \n          }],\n          isError: true\n        };\n      }\n    }\n  );\n\n  server.tool(\n    'update_view_settings',\n    'Update view-specific settings such as board columns, calendar date fields, or table configurations.',\n    {\n      view_id: z.string().min(1).describe('The ID of the view to update'),\n      settings: z.union([\n        BoardViewSettingsSchema,\n        CalendarViewSettingsSchema,\n        GanttViewSettingsSchema,\n        TableViewSettingsSchema,\n        z.object({})\n      ]).describe('View-specific settings object')\n    },\n    async (args) => {\n      try {\n        const request = UpdateViewSettingsSchema.parse(args);\n        const result = await viewsClient.updateViewSettings(request);\n        \n        return {\n          content: [{ \n            type: 'text', \n            text: `View settings updated successfully:\\n\\n${JSON.stringify(result, null, 2)}` \n          }]\n        };\n      } catch (error) {\n        return {\n          content: [{ \n            type: 'text', \n            text: `Error updating view settings: ${error instanceof Error ? error.message : 'Unknown error'}` \n          }],\n          isError: true\n        };\n      }\n    }\n  );\n\n  // ========================================\n  // ADDITIONAL VIEW OPERATIONS\n  // ========================================\n\n  server.tool(\n    'get_view_tasks',\n    'Get tasks that are visible in a specific view, respecting the view\\'s filters and settings.',\n    {\n      view_id: z.string().min(1).describe('The ID of the view to get tasks from'),\n      page: z.number().positive().optional().describe('Page number for pagination')\n    },\n    async (args) => {\n      try {\n        const result = await viewsClient.getViewTasks(args.view_id, args.page);\n        \n        return {\n          content: [{ \n            type: 'text', \n            text: `Tasks in view ${args.view_id}:\\n\\n${JSON.stringify(result, null, 2)}` \n          }]\n        };\n      } catch (error) {\n        return {\n          content: [{ \n            type: 'text', \n            text: `Error getting view tasks: ${error instanceof Error ? error.message : 'Unknown error'}` \n          }],\n          isError: true\n        };\n      }\n    }\n  );\n\n  server.tool(\n    'duplicate_view',\n    'Create a duplicate of an existing view with a new name.',\n    {\n      view_id: z.string().min(1).describe('The ID of the view to duplicate'),\n      name: z.string().min(1).describe('Name for the duplicated view')\n    },\n    async (args) => {\n      try {\n        const result = await viewsClient.duplicateView(args.view_id, args.name);\n        \n        return {\n          content: [{ \n            type: 'text', \n            text: `View duplicated successfully:\\n\\n${JSON.stringify(result, null, 2)}` \n          }]\n        };\n      } catch (error) {\n        return {\n          content: [{ \n            type: 'text', \n            text: `Error duplicating view: ${error instanceof Error ? error.message : 'Unknown error'}` \n          }],\n          isError: true\n        };\n      }\n    }\n  );\n\n  server.tool(\n    'update_view_sharing',\n    'Update sharing settings for a view including access level, password protection, and expiration.',\n    {\n      view_id: z.string().min(1).describe('The ID of the view to update sharing for'),\n      access: ViewAccessSchema.describe('Access level for the view'),\n      password: z.string().optional().describe('Password for password-protected views'),\n      expires_at: z.number().optional().describe('Expiration timestamp (Unix timestamp)')\n    },\n    async (args) => {\n      try {\n        const request = ViewSharingSchema.parse(args);\n        const result = await viewsClient.updateViewSharing(request);\n        \n        return {\n          content: [{ \n            type: 'text', \n            text: `View sharing updated successfully:\\n\\n${JSON.stringify(result, null, 2)}` \n          }]\n        };\n      } catch (error) {\n        return {\n          content: [{ \n            type: 'text', \n            text: `Error updating view sharing: ${error instanceof Error ? error.message : 'Unknown error'}` \n          }],\n          isError: true\n        };\n      }\n    }\n  );\n\n  server.tool(\n    'get_view_fields',\n    'Get available fields that can be used for filtering, grouping, and sorting in views for a specific parent.',\n    {\n      parent_id: z.string().min(1).describe('The ID of the parent (space, folder, or list)'),\n      parent_type: z.enum(['space', 'folder', 'list']).describe('The type of parent container')\n    },\n    async (args) => {\n      try {\n        const result = await viewsClient.getViewFields(args.parent_type, args.parent_id);\n        \n        return {\n          content: [{ \n            type: 'text', \n            text: `Available fields for ${args.parent_type} ${args.parent_id}:\\n\\n${JSON.stringify(result, null, 2)}` \n          }]\n        };\n      } catch (error) {\n        return {\n          content: [{ \n            type: 'text', \n            text: `Error getting view fields: ${error instanceof Error ? error.message : 'Unknown error'}` \n          }],\n          isError: true\n        };\n      }\n    }\n  );\n}\n"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "365a9f3b19c9724c62b9d10f6bcbadbdccaf6249"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_vw3tgx67f = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_vw3tgx67f();
import { z } from 'zod';
import { createClickUpClient } from '../clickup-client/index.js';
import { ViewsEnhancedClient } from '../clickup-client/views-enhanced.js';
import { CreateViewSchema, UpdateViewSchema, GetViewsFilterSchema, SetViewFiltersSchema, SetViewGroupingSchema, SetViewSortingSchema, UpdateViewSettingsSchema, ViewSharingSchema, ViewTypeSchema, ViewAccessSchema, ViewFilterSchema, ViewGroupingSchema, ViewSortingSchema, BoardViewSettingsSchema, CalendarViewSettingsSchema, GanttViewSettingsSchema, TableViewSettingsSchema } from '../schemas/views-schemas.js';
// Create clients
const clickUpClient =
/* istanbul ignore next */
(cov_vw3tgx67f().s[0]++, createClickUpClient());
const viewsClient =
/* istanbul ignore next */
(cov_vw3tgx67f().s[1]++, new ViewsEnhancedClient(process.env.CLICKUP_API_TOKEN));
export function setupViewsTools(server) {
  /* istanbul ignore next */
  cov_vw3tgx67f().f[0]++;
  cov_vw3tgx67f().s[2]++;
  // ========================================
  // VIEW MANAGEMENT OPERATIONS
  // ========================================
  server.tool('create_view', 'Create a new view in a ClickUp space, folder, or list. Supports all view types including list, board, calendar, gantt, and more.', {
    parent_id: z.string().min(1).describe('The ID of the parent (space, folder, or list)'),
    parent_type: z.enum(['space', 'folder', 'list']).describe('The type of parent container'),
    name: z.string().min(1).describe('The name of the view'),
    type: ViewTypeSchema.describe('The type of view to create'),
    access: ViewAccessSchema.default('private').describe('Access level for the view'),
    filters: z.array(ViewFilterSchema).optional().describe('Initial filters for the view'),
    grouping: z.array(ViewGroupingSchema).optional().describe('Grouping configuration for the view'),
    sorting: z.array(ViewSortingSchema).optional().describe('Sorting configuration for the view'),
    settings: z.union([BoardViewSettingsSchema, CalendarViewSettingsSchema, GanttViewSettingsSchema, TableViewSettingsSchema, z.object({})]).optional().describe('View-specific settings'),
    description: z.string().optional().describe('Description of the view')
  }, async args => {
    /* istanbul ignore next */
    cov_vw3tgx67f().f[1]++;
    cov_vw3tgx67f().s[3]++;
    try {
      const request =
      /* istanbul ignore next */
      (cov_vw3tgx67f().s[4]++, CreateViewSchema.parse(args));
      const result =
      /* istanbul ignore next */
      (cov_vw3tgx67f().s[5]++, await viewsClient.createView(request));
      /* istanbul ignore next */
      cov_vw3tgx67f().s[6]++;
      return {
        content: [{
          type: 'text',
          text: `View created successfully:\n\n${JSON.stringify(result, null, 2)}`
        }]
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_vw3tgx67f().s[7]++;
      return {
        content: [{
          type: 'text',
          text: `Error creating view: ${error instanceof Error ?
          /* istanbul ignore next */
          (cov_vw3tgx67f().b[0][0]++, error.message) :
          /* istanbul ignore next */
          (cov_vw3tgx67f().b[0][1]++, 'Unknown error')}`
        }],
        isError: true
      };
    }
  });
  /* istanbul ignore next */
  cov_vw3tgx67f().s[8]++;
  server.tool('get_views', 'Get all views for a space, folder, or list with optional filtering by type and access level.', {
    parent_id: z.string().min(1).describe('The ID of the parent (space, folder, or list)'),
    parent_type: z.enum(['space', 'folder', 'list']).describe('The type of parent container'),
    type: ViewTypeSchema.optional().describe('Filter views by type'),
    access: ViewAccessSchema.optional().describe('Filter views by access level')
  }, async args => {
    /* istanbul ignore next */
    cov_vw3tgx67f().f[2]++;
    cov_vw3tgx67f().s[9]++;
    try {
      const filter =
      /* istanbul ignore next */
      (cov_vw3tgx67f().s[10]++, GetViewsFilterSchema.parse(args));
      const result =
      /* istanbul ignore next */
      (cov_vw3tgx67f().s[11]++, await viewsClient.getViews(filter));
      /* istanbul ignore next */
      cov_vw3tgx67f().s[12]++;
      return {
        content: [{
          type: 'text',
          text: `Views for ${args.parent_type} ${args.parent_id}:\n\n${JSON.stringify(result, null, 2)}`
        }]
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_vw3tgx67f().s[13]++;
      return {
        content: [{
          type: 'text',
          text: `Error getting views: ${error instanceof Error ?
          /* istanbul ignore next */
          (cov_vw3tgx67f().b[1][0]++, error.message) :
          /* istanbul ignore next */
          (cov_vw3tgx67f().b[1][1]++, 'Unknown error')}`
        }],
        isError: true
      };
    }
  });
  /* istanbul ignore next */
  cov_vw3tgx67f().s[14]++;
  server.tool('get_view', 'Get detailed information about a specific view by its ID.', {
    view_id: z.string().min(1).describe('The ID of the view to get')
  }, async args => {
    /* istanbul ignore next */
    cov_vw3tgx67f().f[3]++;
    cov_vw3tgx67f().s[15]++;
    try {
      const result =
      /* istanbul ignore next */
      (cov_vw3tgx67f().s[16]++, await viewsClient.getView(args.view_id));
      /* istanbul ignore next */
      cov_vw3tgx67f().s[17]++;
      return {
        content: [{
          type: 'text',
          text: `View details:\n\n${JSON.stringify(result, null, 2)}`
        }]
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_vw3tgx67f().s[18]++;
      return {
        content: [{
          type: 'text',
          text: `Error getting view: ${error instanceof Error ?
          /* istanbul ignore next */
          (cov_vw3tgx67f().b[2][0]++, error.message) :
          /* istanbul ignore next */
          (cov_vw3tgx67f().b[2][1]++, 'Unknown error')}`
        }],
        isError: true
      };
    }
  });
  /* istanbul ignore next */
  cov_vw3tgx67f().s[19]++;
  server.tool('update_view', 'Update an existing view\'s properties including name, access, filters, grouping, sorting, and settings.', {
    view_id: z.string().min(1).describe('The ID of the view to update'),
    name: z.string().optional().describe('New name for the view'),
    access: ViewAccessSchema.optional().describe('New access level for the view'),
    filters: z.array(ViewFilterSchema).optional().describe('New filters for the view'),
    grouping: z.array(ViewGroupingSchema).optional().describe('New grouping configuration'),
    sorting: z.array(ViewSortingSchema).optional().describe('New sorting configuration'),
    settings: z.union([BoardViewSettingsSchema, CalendarViewSettingsSchema, GanttViewSettingsSchema, TableViewSettingsSchema, z.object({})]).optional().describe('New view-specific settings'),
    description: z.string().optional().describe('New description for the view')
  }, async args => {
    /* istanbul ignore next */
    cov_vw3tgx67f().f[4]++;
    cov_vw3tgx67f().s[20]++;
    try {
      const request =
      /* istanbul ignore next */
      (cov_vw3tgx67f().s[21]++, UpdateViewSchema.parse(args));
      const result =
      /* istanbul ignore next */
      (cov_vw3tgx67f().s[22]++, await viewsClient.updateView(request));
      /* istanbul ignore next */
      cov_vw3tgx67f().s[23]++;
      return {
        content: [{
          type: 'text',
          text: `View updated successfully:\n\n${JSON.stringify(result, null, 2)}`
        }]
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_vw3tgx67f().s[24]++;
      return {
        content: [{
          type: 'text',
          text: `Error updating view: ${error instanceof Error ?
          /* istanbul ignore next */
          (cov_vw3tgx67f().b[3][0]++, error.message) :
          /* istanbul ignore next */
          (cov_vw3tgx67f().b[3][1]++, 'Unknown error')}`
        }],
        isError: true
      };
    }
  });
  /* istanbul ignore next */
  cov_vw3tgx67f().s[25]++;
  server.tool('delete_view', 'Delete a view from ClickUp. This action cannot be undone.', {
    view_id: z.string().min(1).describe('The ID of the view to delete')
  }, async args => {
    /* istanbul ignore next */
    cov_vw3tgx67f().f[5]++;
    cov_vw3tgx67f().s[26]++;
    try {
      const result =
      /* istanbul ignore next */
      (cov_vw3tgx67f().s[27]++, await viewsClient.deleteView(args.view_id));
      /* istanbul ignore next */
      cov_vw3tgx67f().s[28]++;
      return {
        content: [{
          type: 'text',
          text: `View deleted successfully: ${JSON.stringify(result, null, 2)}`
        }]
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_vw3tgx67f().s[29]++;
      return {
        content: [{
          type: 'text',
          text: `Error deleting view: ${error instanceof Error ?
          /* istanbul ignore next */
          (cov_vw3tgx67f().b[4][0]++, error.message) :
          /* istanbul ignore next */
          (cov_vw3tgx67f().b[4][1]++, 'Unknown error')}`
        }],
        isError: true
      };
    }
  });
  /* istanbul ignore next */
  cov_vw3tgx67f().s[30]++;
  server.tool('set_view_filters', 'Set or update filters for a view. Filters determine which tasks are visible in the view.', {
    view_id: z.string().min(1).describe('The ID of the view to update'),
    filters: z.array(ViewFilterSchema).describe('Array of filters to apply to the view')
  }, async args => {
    /* istanbul ignore next */
    cov_vw3tgx67f().f[6]++;
    cov_vw3tgx67f().s[31]++;
    try {
      const request =
      /* istanbul ignore next */
      (cov_vw3tgx67f().s[32]++, SetViewFiltersSchema.parse(args));
      const result =
      /* istanbul ignore next */
      (cov_vw3tgx67f().s[33]++, await viewsClient.setViewFilters(request));
      /* istanbul ignore next */
      cov_vw3tgx67f().s[34]++;
      return {
        content: [{
          type: 'text',
          text: `View filters updated successfully:\n\n${JSON.stringify(result, null, 2)}`
        }]
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_vw3tgx67f().s[35]++;
      return {
        content: [{
          type: 'text',
          text: `Error setting view filters: ${error instanceof Error ?
          /* istanbul ignore next */
          (cov_vw3tgx67f().b[5][0]++, error.message) :
          /* istanbul ignore next */
          (cov_vw3tgx67f().b[5][1]++, 'Unknown error')}`
        }],
        isError: true
      };
    }
  });
  /* istanbul ignore next */
  cov_vw3tgx67f().s[36]++;
  server.tool('set_view_grouping', 'Set or update grouping configuration for a view. Grouping organizes tasks into sections.', {
    view_id: z.string().min(1).describe('The ID of the view to update'),
    grouping: z.array(ViewGroupingSchema).describe('Array of grouping configurations')
  }, async args => {
    /* istanbul ignore next */
    cov_vw3tgx67f().f[7]++;
    cov_vw3tgx67f().s[37]++;
    try {
      const request =
      /* istanbul ignore next */
      (cov_vw3tgx67f().s[38]++, SetViewGroupingSchema.parse(args));
      const result =
      /* istanbul ignore next */
      (cov_vw3tgx67f().s[39]++, await viewsClient.setViewGrouping(request));
      /* istanbul ignore next */
      cov_vw3tgx67f().s[40]++;
      return {
        content: [{
          type: 'text',
          text: `View grouping updated successfully:\n\n${JSON.stringify(result, null, 2)}`
        }]
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_vw3tgx67f().s[41]++;
      return {
        content: [{
          type: 'text',
          text: `Error setting view grouping: ${error instanceof Error ?
          /* istanbul ignore next */
          (cov_vw3tgx67f().b[6][0]++, error.message) :
          /* istanbul ignore next */
          (cov_vw3tgx67f().b[6][1]++, 'Unknown error')}`
        }],
        isError: true
      };
    }
  });
  /* istanbul ignore next */
  cov_vw3tgx67f().s[42]++;
  server.tool('set_view_sorting', 'Set or update sorting configuration for a view. Sorting determines the order of tasks.', {
    view_id: z.string().min(1).describe('The ID of the view to update'),
    sorting: z.array(ViewSortingSchema).describe('Array of sorting configurations')
  }, async args => {
    /* istanbul ignore next */
    cov_vw3tgx67f().f[8]++;
    cov_vw3tgx67f().s[43]++;
    try {
      const request =
      /* istanbul ignore next */
      (cov_vw3tgx67f().s[44]++, SetViewSortingSchema.parse(args));
      const result =
      /* istanbul ignore next */
      (cov_vw3tgx67f().s[45]++, await viewsClient.setViewSorting(request));
      /* istanbul ignore next */
      cov_vw3tgx67f().s[46]++;
      return {
        content: [{
          type: 'text',
          text: `View sorting updated successfully:\n\n${JSON.stringify(result, null, 2)}`
        }]
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_vw3tgx67f().s[47]++;
      return {
        content: [{
          type: 'text',
          text: `Error setting view sorting: ${error instanceof Error ?
          /* istanbul ignore next */
          (cov_vw3tgx67f().b[7][0]++, error.message) :
          /* istanbul ignore next */
          (cov_vw3tgx67f().b[7][1]++, 'Unknown error')}`
        }],
        isError: true
      };
    }
  });
  /* istanbul ignore next */
  cov_vw3tgx67f().s[48]++;
  server.tool('update_view_settings', 'Update view-specific settings such as board columns, calendar date fields, or table configurations.', {
    view_id: z.string().min(1).describe('The ID of the view to update'),
    settings: z.union([BoardViewSettingsSchema, CalendarViewSettingsSchema, GanttViewSettingsSchema, TableViewSettingsSchema, z.object({})]).describe('View-specific settings object')
  }, async args => {
    /* istanbul ignore next */
    cov_vw3tgx67f().f[9]++;
    cov_vw3tgx67f().s[49]++;
    try {
      const request =
      /* istanbul ignore next */
      (cov_vw3tgx67f().s[50]++, UpdateViewSettingsSchema.parse(args));
      const result =
      /* istanbul ignore next */
      (cov_vw3tgx67f().s[51]++, await viewsClient.updateViewSettings(request));
      /* istanbul ignore next */
      cov_vw3tgx67f().s[52]++;
      return {
        content: [{
          type: 'text',
          text: `View settings updated successfully:\n\n${JSON.stringify(result, null, 2)}`
        }]
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_vw3tgx67f().s[53]++;
      return {
        content: [{
          type: 'text',
          text: `Error updating view settings: ${error instanceof Error ?
          /* istanbul ignore next */
          (cov_vw3tgx67f().b[8][0]++, error.message) :
          /* istanbul ignore next */
          (cov_vw3tgx67f().b[8][1]++, 'Unknown error')}`
        }],
        isError: true
      };
    }
  });
  // ========================================
  // ADDITIONAL VIEW OPERATIONS
  // ========================================
  /* istanbul ignore next */
  cov_vw3tgx67f().s[54]++;
  server.tool('get_view_tasks', 'Get tasks that are visible in a specific view, respecting the view\'s filters and settings.', {
    view_id: z.string().min(1).describe('The ID of the view to get tasks from'),
    page: z.number().positive().optional().describe('Page number for pagination')
  }, async args => {
    /* istanbul ignore next */
    cov_vw3tgx67f().f[10]++;
    cov_vw3tgx67f().s[55]++;
    try {
      const result =
      /* istanbul ignore next */
      (cov_vw3tgx67f().s[56]++, await viewsClient.getViewTasks(args.view_id, args.page));
      /* istanbul ignore next */
      cov_vw3tgx67f().s[57]++;
      return {
        content: [{
          type: 'text',
          text: `Tasks in view ${args.view_id}:\n\n${JSON.stringify(result, null, 2)}`
        }]
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_vw3tgx67f().s[58]++;
      return {
        content: [{
          type: 'text',
          text: `Error getting view tasks: ${error instanceof Error ?
          /* istanbul ignore next */
          (cov_vw3tgx67f().b[9][0]++, error.message) :
          /* istanbul ignore next */
          (cov_vw3tgx67f().b[9][1]++, 'Unknown error')}`
        }],
        isError: true
      };
    }
  });
  /* istanbul ignore next */
  cov_vw3tgx67f().s[59]++;
  server.tool('duplicate_view', 'Create a duplicate of an existing view with a new name.', {
    view_id: z.string().min(1).describe('The ID of the view to duplicate'),
    name: z.string().min(1).describe('Name for the duplicated view')
  }, async args => {
    /* istanbul ignore next */
    cov_vw3tgx67f().f[11]++;
    cov_vw3tgx67f().s[60]++;
    try {
      const result =
      /* istanbul ignore next */
      (cov_vw3tgx67f().s[61]++, await viewsClient.duplicateView(args.view_id, args.name));
      /* istanbul ignore next */
      cov_vw3tgx67f().s[62]++;
      return {
        content: [{
          type: 'text',
          text: `View duplicated successfully:\n\n${JSON.stringify(result, null, 2)}`
        }]
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_vw3tgx67f().s[63]++;
      return {
        content: [{
          type: 'text',
          text: `Error duplicating view: ${error instanceof Error ?
          /* istanbul ignore next */
          (cov_vw3tgx67f().b[10][0]++, error.message) :
          /* istanbul ignore next */
          (cov_vw3tgx67f().b[10][1]++, 'Unknown error')}`
        }],
        isError: true
      };
    }
  });
  /* istanbul ignore next */
  cov_vw3tgx67f().s[64]++;
  server.tool('update_view_sharing', 'Update sharing settings for a view including access level, password protection, and expiration.', {
    view_id: z.string().min(1).describe('The ID of the view to update sharing for'),
    access: ViewAccessSchema.describe('Access level for the view'),
    password: z.string().optional().describe('Password for password-protected views'),
    expires_at: z.number().optional().describe('Expiration timestamp (Unix timestamp)')
  }, async args => {
    /* istanbul ignore next */
    cov_vw3tgx67f().f[12]++;
    cov_vw3tgx67f().s[65]++;
    try {
      const request =
      /* istanbul ignore next */
      (cov_vw3tgx67f().s[66]++, ViewSharingSchema.parse(args));
      const result =
      /* istanbul ignore next */
      (cov_vw3tgx67f().s[67]++, await viewsClient.updateViewSharing(request));
      /* istanbul ignore next */
      cov_vw3tgx67f().s[68]++;
      return {
        content: [{
          type: 'text',
          text: `View sharing updated successfully:\n\n${JSON.stringify(result, null, 2)}`
        }]
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_vw3tgx67f().s[69]++;
      return {
        content: [{
          type: 'text',
          text: `Error updating view sharing: ${error instanceof Error ?
          /* istanbul ignore next */
          (cov_vw3tgx67f().b[11][0]++, error.message) :
          /* istanbul ignore next */
          (cov_vw3tgx67f().b[11][1]++, 'Unknown error')}`
        }],
        isError: true
      };
    }
  });
  /* istanbul ignore next */
  cov_vw3tgx67f().s[70]++;
  server.tool('get_view_fields', 'Get available fields that can be used for filtering, grouping, and sorting in views for a specific parent.', {
    parent_id: z.string().min(1).describe('The ID of the parent (space, folder, or list)'),
    parent_type: z.enum(['space', 'folder', 'list']).describe('The type of parent container')
  }, async args => {
    /* istanbul ignore next */
    cov_vw3tgx67f().f[13]++;
    cov_vw3tgx67f().s[71]++;
    try {
      const result =
      /* istanbul ignore next */
      (cov_vw3tgx67f().s[72]++, await viewsClient.getViewFields(args.parent_type, args.parent_id));
      /* istanbul ignore next */
      cov_vw3tgx67f().s[73]++;
      return {
        content: [{
          type: 'text',
          text: `Available fields for ${args.parent_type} ${args.parent_id}:\n\n${JSON.stringify(result, null, 2)}`
        }]
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_vw3tgx67f().s[74]++;
      return {
        content: [{
          type: 'text',
          text: `Error getting view fields: ${error instanceof Error ?
          /* istanbul ignore next */
          (cov_vw3tgx67f().b[12][0]++, error.message) :
          /* istanbul ignore next */
          (cov_vw3tgx67f().b[12][1]++, 'Unknown error')}`
        }],
        isError: true
      };
    }
  });
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
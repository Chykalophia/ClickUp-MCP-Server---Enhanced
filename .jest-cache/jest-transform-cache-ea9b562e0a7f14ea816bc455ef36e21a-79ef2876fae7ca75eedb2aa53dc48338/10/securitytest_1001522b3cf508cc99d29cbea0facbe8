b3d3b75b18a8106fdc5aa20cd851fac3
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const globals_1 = require("@jest/globals");
const crypto_1 = __importDefault(require("crypto"));
const security_js_1 = require("../utils/security.js");
(0, globals_1.describe)('Security Utilities', () => {
    (0, globals_1.beforeEach)(() => {
        // Reset rate limiter before each test
        security_js_1.rateLimiter.reset();
    });
    (0, globals_1.describe)('validateApiToken', () => {
        (0, globals_1.it)('should validate correct API token', () => {
            const result = (0, security_js_1.validateApiToken)('pk_1234567890abcdef');
            (0, globals_1.expect)(result.isValid).toBe(true);
            (0, globals_1.expect)(result.error).toBeUndefined();
        });
        (0, globals_1.it)('should reject empty token', () => {
            const result = (0, security_js_1.validateApiToken)('');
            (0, globals_1.expect)(result.isValid).toBe(false);
            (0, globals_1.expect)(result.error).toBe('API token is required');
        });
        (0, globals_1.it)('should reject non-string token', () => {
            const result = (0, security_js_1.validateApiToken)(123);
            (0, globals_1.expect)(result.isValid).toBe(false);
            (0, globals_1.expect)(result.error).toBe('API token must be a string');
        });
        (0, globals_1.it)('should reject too short token', () => {
            const result = (0, security_js_1.validateApiToken)('short');
            (0, globals_1.expect)(result.isValid).toBe(false);
            (0, globals_1.expect)(result.error).toBe('API token appears to be too short');
        });
        (0, globals_1.it)('should reject token with invalid characters', () => {
            const result = (0, security_js_1.validateApiToken)('token with spaces');
            (0, globals_1.expect)(result.isValid).toBe(false);
            (0, globals_1.expect)(result.error).toBe('API token contains invalid characters');
        });
    });
    (0, globals_1.describe)('sanitizeInput', () => {
        (0, globals_1.it)('should sanitize string input', () => {
            const input = '<script>alert("xss")</script>';
            const result = (0, security_js_1.sanitizeInput)(input);
            (0, globals_1.expect)(result).toBe('scriptalert("xss")/script');
        });
        (0, globals_1.it)('should sanitize object input', () => {
            const input = {
                name: '<script>alert("xss")</script>',
                description: 'javascript:alert("xss")'
            };
            const result = (0, security_js_1.sanitizeInput)(input);
            (0, globals_1.expect)(result.name).toBe('scriptalert("xss")/script');
            (0, globals_1.expect)(result.description).toBe('alert("xss")');
        });
        (0, globals_1.it)('should sanitize array input', () => {
            const input = ['<script>', 'javascript:alert()'];
            const result = (0, security_js_1.sanitizeInput)(input);
            (0, globals_1.expect)(result).toEqual(['script', 'alert()']);
        });
        (0, globals_1.it)('should handle non-string input', () => {
            (0, globals_1.expect)((0, security_js_1.sanitizeInput)(123)).toBe(123);
            (0, globals_1.expect)((0, security_js_1.sanitizeInput)(null)).toBe(null);
            (0, globals_1.expect)((0, security_js_1.sanitizeInput)(undefined)).toBe(undefined);
        });
    });
    (0, globals_1.describe)('validateWebhookSignature', () => {
        const secret = 'test-secret';
        const payload = '{"test": "data"}';
        (0, globals_1.it)('should validate correct signature', () => {
            const signature = crypto_1.default.createHmac('sha256', secret).update(payload).digest('hex');
            const result = (0, security_js_1.validateWebhookSignature)(payload, signature, secret);
            (0, globals_1.expect)(result.isValid).toBe(true);
            (0, globals_1.expect)(result.error).toBeUndefined();
        });
        (0, globals_1.it)('should validate signature with sha256 prefix', () => {
            const signature = crypto_1.default.createHmac('sha256', secret).update(payload).digest('hex');
            const result = (0, security_js_1.validateWebhookSignature)(payload, `sha256=${signature}`, secret);
            (0, globals_1.expect)(result.isValid).toBe(true);
        });
        (0, globals_1.it)('should reject invalid signature', () => {
            const result = (0, security_js_1.validateWebhookSignature)(payload, 'invalid-signature', secret);
            (0, globals_1.expect)(result.isValid).toBe(false);
            (0, globals_1.expect)(result.error).toBe('Invalid signature format');
        });
        (0, globals_1.it)('should reject missing parameters', () => {
            const result = (0, security_js_1.validateWebhookSignature)('', '', '');
            (0, globals_1.expect)(result.isValid).toBe(false);
            (0, globals_1.expect)(result.error).toBe('Missing required parameters for signature validation');
        });
    });
    (0, globals_1.describe)('validateFileUpload', () => {
        (0, globals_1.it)('should validate safe file', () => {
            const result = (0, security_js_1.validateFileUpload)('document.pdf', 'application/pdf', 1024);
            (0, globals_1.expect)(result.isValid).toBe(true);
            (0, globals_1.expect)(result.errors).toHaveLength(0);
        });
        (0, globals_1.it)('should reject dangerous file extension', () => {
            const result = (0, security_js_1.validateFileUpload)('malware.exe');
            (0, globals_1.expect)(result.isValid).toBe(false);
            (0, globals_1.expect)(result.errors).toContain('File type not allowed for security reasons');
        });
        (0, globals_1.it)('should reject path traversal attempts', () => {
            const result = (0, security_js_1.validateFileUpload)('../../../etc/passwd');
            (0, globals_1.expect)(result.isValid).toBe(false);
            (0, globals_1.expect)(result.errors).toContain('Filename contains invalid path characters');
        });
        (0, globals_1.it)('should reject oversized files', () => {
            const result = (0, security_js_1.validateFileUpload)('large.pdf', 'application/pdf', 200 * 1024 * 1024);
            (0, globals_1.expect)(result.isValid).toBe(false);
            (0, globals_1.expect)(result.errors).toContain('File size too large (max 104857600 bytes)');
        });
        (0, globals_1.it)('should reject disallowed mimetype', () => {
            const result = (0, security_js_1.validateFileUpload)('script.js', 'application/javascript');
            (0, globals_1.expect)(result.isValid).toBe(false);
            (0, globals_1.expect)(result.errors).toContain("Mimetype 'application/javascript' not allowed");
        });
    });
    (0, globals_1.describe)('validateUrl', () => {
        (0, globals_1.it)('should validate HTTPS URL', () => {
            const result = (0, security_js_1.validateUrl)('https://example.com/webhook');
            (0, globals_1.expect)(result.isValid).toBe(true);
            (0, globals_1.expect)(result.error).toBeUndefined();
        });
        (0, globals_1.it)('should validate HTTP URL', () => {
            const result = (0, security_js_1.validateUrl)('http://example.com/webhook');
            (0, globals_1.expect)(result.isValid).toBe(true);
        });
        (0, globals_1.it)('should reject non-HTTP protocols', () => {
            const result = (0, security_js_1.validateUrl)('ftp://example.com/file');
            (0, globals_1.expect)(result.isValid).toBe(false);
            (0, globals_1.expect)(result.error).toBe('Only HTTP and HTTPS URLs are allowed');
        });
        (0, globals_1.it)('should reject localhost URLs', () => {
            const result = (0, security_js_1.validateUrl)('http://localhost:3000/webhook');
            (0, globals_1.expect)(result.isValid).toBe(false);
            (0, globals_1.expect)(result.error).toBe('Private and localhost URLs are not allowed');
        });
        (0, globals_1.it)('should reject private IP addresses', () => {
            const result = (0, security_js_1.validateUrl)('http://192.168.1.1/webhook');
            (0, globals_1.expect)(result.isValid).toBe(false);
            (0, globals_1.expect)(result.error).toBe('Private and localhost URLs are not allowed');
        });
        (0, globals_1.it)('should reject invalid URL format', () => {
            const result = (0, security_js_1.validateUrl)('not-a-url');
            (0, globals_1.expect)(result.isValid).toBe(false);
            (0, globals_1.expect)(result.error).toBe('Invalid URL format');
        });
    });
    (0, globals_1.describe)('generateSecureToken', () => {
        (0, globals_1.it)('should generate token of correct length', () => {
            const token = (0, security_js_1.generateSecureToken)(16);
            (0, globals_1.expect)(token).toHaveLength(32); // 16 bytes = 32 hex chars
        });
        (0, globals_1.it)('should generate different tokens', () => {
            const token1 = (0, security_js_1.generateSecureToken)();
            const token2 = (0, security_js_1.generateSecureToken)();
            (0, globals_1.expect)(token1).not.toBe(token2);
        });
        (0, globals_1.it)('should generate hex string', () => {
            const token = (0, security_js_1.generateSecureToken)();
            (0, globals_1.expect)(/^[a-f0-9]+$/.test(token)).toBe(true);
        });
    });
    (0, globals_1.describe)('validateEnvironment', () => {
        const originalEnv = process.env;
        (0, globals_1.beforeEach)(() => {
            process.env = { ...originalEnv };
        });
        afterEach(() => {
            process.env = originalEnv;
        });
        (0, globals_1.it)('should validate with required environment variables', () => {
            process.env.CLICKUP_API_TOKEN = 'pk_1234567890abcdef';
            const result = (0, security_js_1.validateEnvironment)();
            (0, globals_1.expect)(result.isValid).toBe(true);
            (0, globals_1.expect)(result.errors).toHaveLength(0);
        });
        (0, globals_1.it)('should reject missing API token', () => {
            delete process.env.CLICKUP_API_TOKEN;
            const result = (0, security_js_1.validateEnvironment)();
            (0, globals_1.expect)(result.isValid).toBe(false);
            (0, globals_1.expect)(result.errors).toContain('Missing required environment variable: CLICKUP_API_TOKEN');
        });
        (0, globals_1.it)('should reject invalid API token', () => {
            process.env.CLICKUP_API_TOKEN = 'invalid';
            const result = (0, security_js_1.validateEnvironment)();
            (0, globals_1.expect)(result.isValid).toBe(false);
            (0, globals_1.expect)(result.errors[0]).toContain('Invalid CLICKUP_API_TOKEN');
        });
    });
    (0, globals_1.describe)('rateLimiter', () => {
        (0, globals_1.it)('should allow requests under limit', () => {
            const config = { windowMs: 60000, maxRequests: 5 };
            for (let i = 0; i < 5; i++) {
                (0, globals_1.expect)(security_js_1.rateLimiter.isAllowed('test-key', config)).toBe(true);
            }
        });
        (0, globals_1.it)('should reject requests over limit', () => {
            const config = { windowMs: 60000, maxRequests: 2 };
            (0, globals_1.expect)(security_js_1.rateLimiter.isAllowed('test-key', config)).toBe(true);
            (0, globals_1.expect)(security_js_1.rateLimiter.isAllowed('test-key', config)).toBe(true);
            (0, globals_1.expect)(security_js_1.rateLimiter.isAllowed('test-key', config)).toBe(false);
        });
        (0, globals_1.it)('should reset limits after window', async () => {
            const config = { windowMs: 100, maxRequests: 1 };
            (0, globals_1.expect)(security_js_1.rateLimiter.isAllowed('test-key', config)).toBe(true);
            (0, globals_1.expect)(security_js_1.rateLimiter.isAllowed('test-key', config)).toBe(false);
            // Wait for window to expire
            await new Promise(resolve => setTimeout(resolve, 150));
            (0, globals_1.expect)(security_js_1.rateLimiter.isAllowed('test-key', config)).toBe(true);
        });
        (0, globals_1.it)('should handle different keys separately', () => {
            const config = { windowMs: 60000, maxRequests: 1 };
            (0, globals_1.expect)(security_js_1.rateLimiter.isAllowed('key1', config)).toBe(true);
            (0, globals_1.expect)(security_js_1.rateLimiter.isAllowed('key2', config)).toBe(true);
            (0, globals_1.expect)(security_js_1.rateLimiter.isAllowed('key1', config)).toBe(false);
            (0, globals_1.expect)(security_js_1.rateLimiter.isAllowed('key2', config)).toBe(false);
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
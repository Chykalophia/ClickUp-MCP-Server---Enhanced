26ba4295c50a21723ea67e028737134f
/* istanbul ignore next */
function cov_10y76djwd7() {
  var path = "/Users/peterkrzyzek/Development/clickup-mcp-server/src/clickup-client/comments-enhanced.ts";
  var hash = "be8e2afcb8120103de907bc5fba7c91af67883ff";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/peterkrzyzek/Development/clickup-mcp-server/src/clickup-client/comments-enhanced.ts",
    statementMap: {
      "0": {
        start: {
          line: 9,
          column: 22
        },
        end: {
          line: 9,
          column: 36
        }
      },
      "1": {
        start: {
          line: 11,
          column: 4
        },
        end: {
          line: 20,
          column: 5
        }
      },
      "2": {
        start: {
          line: 12,
          column: 8
        },
        end: {
          line: 19,
          column: 9
        }
      },
      "3": {
        start: {
          line: 13,
          column: 12
        },
        end: {
          line: 13,
          column: 98
        }
      },
      "4": {
        start: {
          line: 16,
          column: 12
        },
        end: {
          line: 16,
          column: 82
        }
      },
      "5": {
        start: {
          line: 18,
          column: 12
        },
        end: {
          line: 18,
          column: 70
        }
      },
      "6": {
        start: {
          line: 21,
          column: 4
        },
        end: {
          line: 21,
          column: 21
        }
      },
      "7": {
        start: {
          line: 28,
          column: 4
        },
        end: {
          line: 37,
          column: 5
        }
      },
      "8": {
        start: {
          line: 30,
          column: 34
        },
        end: {
          line: 30,
          column: 79
        }
      },
      "9": {
        start: {
          line: 31,
          column: 8
        },
        end: {
          line: 36,
          column: 10
        }
      },
      "10": {
        start: {
          line: 38,
          column: 4
        },
        end: {
          line: 38,
          column: 18
        }
      },
      "11": {
        start: {
          line: 42,
          column: 8
        },
        end: {
          line: 42,
          column: 29
        }
      },
      "12": {
        start: {
          line: 51,
          column: 23
        },
        end: {
          line: 51,
          column: 79
        }
      },
      "13": {
        start: {
          line: 53,
          column: 8
        },
        end: {
          line: 55,
          column: 9
        }
      },
      "14": {
        start: {
          line: 54,
          column: 12
        },
        end: {
          line: 54,
          column: 96
        }
      },
      "15": {
        start: {
          line: 54,
          column: 63
        },
        end: {
          line: 54,
          column: 94
        }
      },
      "16": {
        start: {
          line: 56,
          column: 8
        },
        end: {
          line: 56,
          column: 22
        }
      },
      "17": {
        start: {
          line: 69,
          column: 24
        },
        end: {
          line: 72,
          column: 9
        }
      },
      "18": {
        start: {
          line: 73,
          column: 8
        },
        end: {
          line: 73,
          column: 44
        }
      },
      "19": {
        start: {
          line: 74,
          column: 8
        },
        end: {
          line: 74,
          column: 55
        }
      },
      "20": {
        start: {
          line: 75,
          column: 8
        },
        end: {
          line: 75,
          column: 66
        }
      },
      "21": {
        start: {
          line: 76,
          column: 8
        },
        end: {
          line: 76,
          column: 43
        }
      },
      "22": {
        start: {
          line: 78,
          column: 23
        },
        end: {
          line: 78,
          column: 81
        }
      },
      "23": {
        start: {
          line: 79,
          column: 8
        },
        end: {
          line: 79,
          column: 48
        }
      },
      "24": {
        start: {
          line: 80,
          column: 8
        },
        end: {
          line: 80,
          column: 66
        }
      },
      "25": {
        start: {
          line: 81,
          column: 8
        },
        end: {
          line: 81,
          column: 48
        }
      },
      "26": {
        start: {
          line: 83,
          column: 8
        },
        end: {
          line: 83,
          column: 22
        }
      },
      "27": {
        start: {
          line: 87,
          column: 34
        },
        end: {
          line: 87,
          column: 79
        }
      },
      "28": {
        start: {
          line: 88,
          column: 24
        },
        end: {
          line: 92,
          column: 9
        }
      },
      "29": {
        start: {
          line: 94,
          column: 8
        },
        end: {
          line: 94,
          column: 61
        }
      },
      "30": {
        start: {
          line: 95,
          column: 8
        },
        end: {
          line: 95,
          column: 55
        }
      },
      "31": {
        start: {
          line: 96,
          column: 8
        },
        end: {
          line: 96,
          column: 66
        }
      },
      "32": {
        start: {
          line: 97,
          column: 8
        },
        end: {
          line: 97,
          column: 61
        }
      },
      "33": {
        start: {
          line: 98,
          column: 23
        },
        end: {
          line: 98,
          column: 81
        }
      },
      "34": {
        start: {
          line: 100,
          column: 8
        },
        end: {
          line: 100,
          column: 59
        }
      },
      "35": {
        start: {
          line: 101,
          column: 8
        },
        end: {
          line: 101,
          column: 70
        }
      },
      "36": {
        start: {
          line: 102,
          column: 8
        },
        end: {
          line: 102,
          column: 59
        }
      },
      "37": {
        start: {
          line: 103,
          column: 8
        },
        end: {
          line: 103,
          column: 46
        }
      },
      "38": {
        start: {
          line: 112,
          column: 23
        },
        end: {
          line: 112,
          column: 79
        }
      },
      "39": {
        start: {
          line: 114,
          column: 8
        },
        end: {
          line: 116,
          column: 9
        }
      },
      "40": {
        start: {
          line: 115,
          column: 12
        },
        end: {
          line: 115,
          column: 96
        }
      },
      "41": {
        start: {
          line: 115,
          column: 63
        },
        end: {
          line: 115,
          column: 94
        }
      },
      "42": {
        start: {
          line: 117,
          column: 8
        },
        end: {
          line: 117,
          column: 22
        }
      },
      "43": {
        start: {
          line: 127,
          column: 34
        },
        end: {
          line: 127,
          column: 79
        }
      },
      "44": {
        start: {
          line: 128,
          column: 24
        },
        end: {
          line: 131,
          column: 9
        }
      },
      "45": {
        start: {
          line: 132,
          column: 23
        },
        end: {
          line: 132,
          column: 81
        }
      },
      "46": {
        start: {
          line: 133,
          column: 8
        },
        end: {
          line: 133,
          column: 46
        }
      },
      "47": {
        start: {
          line: 142,
          column: 23
        },
        end: {
          line: 142,
          column: 79
        }
      },
      "48": {
        start: {
          line: 144,
          column: 8
        },
        end: {
          line: 146,
          column: 9
        }
      },
      "49": {
        start: {
          line: 145,
          column: 12
        },
        end: {
          line: 145,
          column: 96
        }
      },
      "50": {
        start: {
          line: 145,
          column: 63
        },
        end: {
          line: 145,
          column: 94
        }
      },
      "51": {
        start: {
          line: 147,
          column: 8
        },
        end: {
          line: 147,
          column: 22
        }
      },
      "52": {
        start: {
          line: 157,
          column: 34
        },
        end: {
          line: 157,
          column: 79
        }
      },
      "53": {
        start: {
          line: 158,
          column: 24
        },
        end: {
          line: 162,
          column: 9
        }
      },
      "54": {
        start: {
          line: 163,
          column: 23
        },
        end: {
          line: 163,
          column: 81
        }
      },
      "55": {
        start: {
          line: 164,
          column: 8
        },
        end: {
          line: 164,
          column: 46
        }
      },
      "56": {
        start: {
          line: 174,
          column: 34
        },
        end: {
          line: 174,
          column: 79
        }
      },
      "57": {
        start: {
          line: 175,
          column: 24
        },
        end: {
          line: 179,
          column: 9
        }
      },
      "58": {
        start: {
          line: 180,
          column: 23
        },
        end: {
          line: 180,
          column: 78
        }
      },
      "59": {
        start: {
          line: 181,
          column: 8
        },
        end: {
          line: 181,
          column: 46
        }
      },
      "60": {
        start: {
          line: 189,
          column: 8
        },
        end: {
          line: 189,
          column: 59
        }
      },
      "61": {
        start: {
          line: 198,
          column: 23
        },
        end: {
          line: 198,
          column: 83
        }
      },
      "62": {
        start: {
          line: 200,
          column: 8
        },
        end: {
          line: 202,
          column: 9
        }
      },
      "63": {
        start: {
          line: 201,
          column: 12
        },
        end: {
          line: 201,
          column: 96
        }
      },
      "64": {
        start: {
          line: 201,
          column: 63
        },
        end: {
          line: 201,
          column: 94
        }
      },
      "65": {
        start: {
          line: 203,
          column: 8
        },
        end: {
          line: 203,
          column: 22
        }
      },
      "66": {
        start: {
          line: 213,
          column: 34
        },
        end: {
          line: 213,
          column: 79
        }
      },
      "67": {
        start: {
          line: 214,
          column: 24
        },
        end: {
          line: 217,
          column: 9
        }
      },
      "68": {
        start: {
          line: 218,
          column: 23
        },
        end: {
          line: 218,
          column: 85
        }
      },
      "69": {
        start: {
          line: 219,
          column: 8
        },
        end: {
          line: 219,
          column: 46
        }
      },
      "70": {
        start: {
          line: 222,
          column: 44
        },
        end: {
          line: 224,
          column: 1
        }
      },
      "71": {
        start: {
          line: 223,
          column: 4
        },
        end: {
          line: 223,
          column: 46
        }
      }
    },
    fnMap: {
      "0": {
        name: "processCommentResponse",
        decl: {
          start: {
            line: 6,
            column: 9
          },
          end: {
            line: 6,
            column: 31
          }
        },
        loc: {
          start: {
            line: 6,
            column: 41
          },
          end: {
            line: 22,
            column: 1
          }
        },
        line: 6
      },
      "1": {
        name: "prepareCommentParams",
        decl: {
          start: {
            line: 27,
            column: 9
          },
          end: {
            line: 27,
            column: 29
          }
        },
        loc: {
          start: {
            line: 27,
            column: 38
          },
          end: {
            line: 39,
            column: 1
          }
        },
        line: 27
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 41,
            column: 4
          },
          end: {
            line: 41,
            column: 5
          }
        },
        loc: {
          start: {
            line: 41,
            column: 24
          },
          end: {
            line: 43,
            column: 5
          }
        },
        line: 41
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 50,
            column: 4
          },
          end: {
            line: 50,
            column: 5
          }
        },
        loc: {
          start: {
            line: 50,
            column: 42
          },
          end: {
            line: 57,
            column: 5
          }
        },
        line: 50
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 54,
            column: 50
          },
          end: {
            line: 54,
            column: 51
          }
        },
        loc: {
          start: {
            line: 54,
            column: 63
          },
          end: {
            line: 54,
            column: 94
          }
        },
        line: 54
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 67,
            column: 4
          },
          end: {
            line: 67,
            column: 5
          }
        },
        loc: {
          start: {
            line: 67,
            column: 52
          },
          end: {
            line: 84,
            column: 5
          }
        },
        line: 67
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 85,
            column: 4
          },
          end: {
            line: 85,
            column: 5
          }
        },
        loc: {
          start: {
            line: 85,
            column: 44
          },
          end: {
            line: 104,
            column: 5
          }
        },
        line: 85
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 111,
            column: 4
          },
          end: {
            line: 111,
            column: 5
          }
        },
        loc: {
          start: {
            line: 111,
            column: 46
          },
          end: {
            line: 118,
            column: 5
          }
        },
        line: 111
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 115,
            column: 50
          },
          end: {
            line: 115,
            column: 51
          }
        },
        loc: {
          start: {
            line: 115,
            column: 63
          },
          end: {
            line: 115,
            column: 94
          }
        },
        line: 115
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 125,
            column: 4
          },
          end: {
            line: 125,
            column: 5
          }
        },
        loc: {
          start: {
            line: 125,
            column: 48
          },
          end: {
            line: 134,
            column: 5
          }
        },
        line: 125
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 141,
            column: 4
          },
          end: {
            line: 141,
            column: 5
          }
        },
        loc: {
          start: {
            line: 141,
            column: 42
          },
          end: {
            line: 148,
            column: 5
          }
        },
        line: 141
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 145,
            column: 50
          },
          end: {
            line: 145,
            column: 51
          }
        },
        loc: {
          start: {
            line: 145,
            column: 63
          },
          end: {
            line: 145,
            column: 94
          }
        },
        line: 145
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 155,
            column: 4
          },
          end: {
            line: 155,
            column: 5
          }
        },
        loc: {
          start: {
            line: 155,
            column: 44
          },
          end: {
            line: 165,
            column: 5
          }
        },
        line: 155
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 172,
            column: 4
          },
          end: {
            line: 172,
            column: 5
          }
        },
        loc: {
          start: {
            line: 172,
            column: 43
          },
          end: {
            line: 182,
            column: 5
          }
        },
        line: 172
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 188,
            column: 4
          },
          end: {
            line: 188,
            column: 5
          }
        },
        loc: {
          start: {
            line: 188,
            column: 35
          },
          end: {
            line: 190,
            column: 5
          }
        },
        line: 188
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 197,
            column: 4
          },
          end: {
            line: 197,
            column: 5
          }
        },
        loc: {
          start: {
            line: 197,
            column: 49
          },
          end: {
            line: 204,
            column: 5
          }
        },
        line: 197
      },
      "16": {
        name: "(anonymous_16)",
        decl: {
          start: {
            line: 201,
            column: 50
          },
          end: {
            line: 201,
            column: 51
          }
        },
        loc: {
          start: {
            line: 201,
            column: 63
          },
          end: {
            line: 201,
            column: 94
          }
        },
        line: 201
      },
      "17": {
        name: "(anonymous_17)",
        decl: {
          start: {
            line: 211,
            column: 4
          },
          end: {
            line: 211,
            column: 5
          }
        },
        loc: {
          start: {
            line: 211,
            column: 51
          },
          end: {
            line: 220,
            column: 5
          }
        },
        line: 211
      },
      "18": {
        name: "(anonymous_18)",
        decl: {
          start: {
            line: 222,
            column: 44
          },
          end: {
            line: 222,
            column: 45
          }
        },
        loc: {
          start: {
            line: 222,
            column: 56
          },
          end: {
            line: 224,
            column: 1
          }
        },
        line: 222
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 11,
            column: 4
          },
          end: {
            line: 20,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 11,
            column: 4
          },
          end: {
            line: 20,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 11
      },
      "1": {
        loc: {
          start: {
            line: 11,
            column: 8
          },
          end: {
            line: 11,
            column: 61
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 11,
            column: 8
          },
          end: {
            line: 11,
            column: 25
          }
        }, {
          start: {
            line: 11,
            column: 29
          },
          end: {
            line: 11,
            column: 61
          }
        }],
        line: 11
      },
      "2": {
        loc: {
          start: {
            line: 18,
            column: 41
          },
          end: {
            line: 18,
            column: 69
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 18,
            column: 41
          },
          end: {
            line: 18,
            column: 63
          }
        }, {
          start: {
            line: 18,
            column: 67
          },
          end: {
            line: 18,
            column: 69
          }
        }],
        line: 18
      },
      "3": {
        loc: {
          start: {
            line: 28,
            column: 4
          },
          end: {
            line: 37,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 28,
            column: 4
          },
          end: {
            line: 37,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 28
      },
      "4": {
        loc: {
          start: {
            line: 32,
            column: 24
          },
          end: {
            line: 32,
            column: 50
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 32,
            column: 24
          },
          end: {
            line: 32,
            column: 41
          }
        }, {
          start: {
            line: 32,
            column: 45
          },
          end: {
            line: 32,
            column: 50
          }
        }],
        line: 32
      },
      "5": {
        loc: {
          start: {
            line: 53,
            column: 8
          },
          end: {
            line: 55,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 53,
            column: 8
          },
          end: {
            line: 55,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 53
      },
      "6": {
        loc: {
          start: {
            line: 53,
            column: 12
          },
          end: {
            line: 53,
            column: 61
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 53,
            column: 12
          },
          end: {
            line: 53,
            column: 27
          }
        }, {
          start: {
            line: 53,
            column: 31
          },
          end: {
            line: 53,
            column: 61
          }
        }],
        line: 53
      },
      "7": {
        loc: {
          start: {
            line: 89,
            column: 24
          },
          end: {
            line: 89,
            column: 50
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 89,
            column: 24
          },
          end: {
            line: 89,
            column: 41
          }
        }, {
          start: {
            line: 89,
            column: 45
          },
          end: {
            line: 89,
            column: 50
          }
        }],
        line: 89
      },
      "8": {
        loc: {
          start: {
            line: 114,
            column: 8
          },
          end: {
            line: 116,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 114,
            column: 8
          },
          end: {
            line: 116,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 114
      },
      "9": {
        loc: {
          start: {
            line: 114,
            column: 12
          },
          end: {
            line: 114,
            column: 61
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 114,
            column: 12
          },
          end: {
            line: 114,
            column: 27
          }
        }, {
          start: {
            line: 114,
            column: 31
          },
          end: {
            line: 114,
            column: 61
          }
        }],
        line: 114
      },
      "10": {
        loc: {
          start: {
            line: 129,
            column: 24
          },
          end: {
            line: 129,
            column: 50
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 129,
            column: 24
          },
          end: {
            line: 129,
            column: 41
          }
        }, {
          start: {
            line: 129,
            column: 45
          },
          end: {
            line: 129,
            column: 50
          }
        }],
        line: 129
      },
      "11": {
        loc: {
          start: {
            line: 144,
            column: 8
          },
          end: {
            line: 146,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 144,
            column: 8
          },
          end: {
            line: 146,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 144
      },
      "12": {
        loc: {
          start: {
            line: 144,
            column: 12
          },
          end: {
            line: 144,
            column: 61
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 144,
            column: 12
          },
          end: {
            line: 144,
            column: 27
          }
        }, {
          start: {
            line: 144,
            column: 31
          },
          end: {
            line: 144,
            column: 61
          }
        }],
        line: 144
      },
      "13": {
        loc: {
          start: {
            line: 159,
            column: 24
          },
          end: {
            line: 159,
            column: 50
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 159,
            column: 24
          },
          end: {
            line: 159,
            column: 41
          }
        }, {
          start: {
            line: 159,
            column: 45
          },
          end: {
            line: 159,
            column: 50
          }
        }],
        line: 159
      },
      "14": {
        loc: {
          start: {
            line: 200,
            column: 8
          },
          end: {
            line: 202,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 200,
            column: 8
          },
          end: {
            line: 202,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 200
      },
      "15": {
        loc: {
          start: {
            line: 200,
            column: 12
          },
          end: {
            line: 200,
            column: 61
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 200,
            column: 12
          },
          end: {
            line: 200,
            column: 27
          }
        }, {
          start: {
            line: 200,
            column: 31
          },
          end: {
            line: 200,
            column: 61
          }
        }],
        line: 200
      },
      "16": {
        loc: {
          start: {
            line: 215,
            column: 24
          },
          end: {
            line: 215,
            column: 50
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 215,
            column: 24
          },
          end: {
            line: 215,
            column: 41
          }
        }, {
          start: {
            line: 215,
            column: 45
          },
          end: {
            line: 215,
            column: 50
          }
        }],
        line: 215
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0]
    },
    inputSourceMap: {
      file: "/Users/peterkrzyzek/Development/clickup-mcp-server/src/clickup-client/comments-enhanced.ts",
      mappings: "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",
      names: [],
      sources: ["/Users/peterkrzyzek/Development/clickup-mcp-server/src/clickup-client/comments-enhanced.ts"],
      sourcesContent: ["import { ClickUpClient } from './index.js';\nimport { processClickUpResponse } from '../utils/markdown.js';\nimport { prepareCommentForClickUp, clickUpCommentToMarkdown, ClickUpCommentBlock, cleanClickUpCommentResponse } from '../utils/clickup-comment-formatter.js';\n\nexport interface Comment {\n  id: string;\n  comment: ClickUpCommentBlock[]; // ClickUp's structured comment format\n  comment_text: string; // Plain text representation\n  comment_markdown?: string; // Markdown version for display\n  user: {\n    id: number;\n    username: string;\n    email: string;\n    color: string;\n    profilePicture?: string;\n  };\n  resolved: boolean;\n  assignee?: {\n    id: number;\n    username: string;\n    email: string;\n    color: string;\n    profilePicture?: string;\n  };\n  assigned_by?: {\n    id: number;\n    username: string;\n    email: string;\n    color: string;\n    profilePicture?: string;\n  };\n  reactions?: {\n    [key: string]: {\n      count: number;\n      users: Array<{\n        id: number;\n        username: string;\n        email: string;\n      }>;\n    };\n  };\n  date: string;\n  start_date?: string;\n  due_date?: string;\n  parent?: string;\n  replies_count?: number;\n}\n\nexport interface GetTaskCommentsParams {\n  start?: number;\n  start_id?: string;\n}\n\nexport interface CreateTaskCommentParams {\n  comment_text: string;\n  assignee?: number;\n  notify_all?: boolean;\n}\n\nexport interface GetChatViewCommentsParams {\n  start?: number;\n  start_id?: string;\n}\n\nexport interface CreateChatViewCommentParams {\n  comment_text: string;\n  notify_all?: boolean;\n}\n\nexport interface GetListCommentsParams {\n  start?: number;\n  start_id?: string;\n}\n\nexport interface CreateListCommentParams {\n  comment_text: string;\n  assignee?: number;\n  notify_all?: boolean;\n}\n\nexport interface UpdateCommentParams {\n  comment_text: string;\n  assignee?: number;\n  resolved?: boolean;\n}\n\nexport interface GetThreadedCommentsParams {\n  start?: number;\n  start_id?: string;\n}\n\nexport interface CreateThreadedCommentParams {\n  comment_text: string;\n  notify_all?: boolean;\n}\n\n/**\n * Process comment response to add markdown representation\n * SIMPLIFIED VERSION to avoid duplication issues\n */\nfunction processCommentResponse(comment: any): Comment {\n  // Skip the cleanClickUpCommentResponse and processClickUpResponse chain\n  // that was causing duplication - just return the comment as-is with minimal processing\n  \n  const processed = { ...comment };\n  \n  // Only add markdown conversion if we have structured comment data\n  if (processed.comment && Array.isArray(processed.comment)) {\n    try {\n      processed.comment_markdown = clickUpCommentToMarkdown({ comment: processed.comment });\n    } catch (error) {\n      console.warn('Failed to convert ClickUp comment to markdown:', error);\n      // Fallback to comment_text if available\n      processed.comment_markdown = processed.comment_text || '';\n    }\n  }\n  \n  return processed;\n}\n\n/**\n * Prepare comment parameters for ClickUp API using structured comment format\n * This uses ClickUp's structured comment array format for proper markdown rendering\n */\nfunction prepareCommentParams(params: any): any {\n  if (params.comment_text) {\n    // Use the structured comment format instead of plain comment_text\n    const structuredComment = prepareCommentForClickUp(params.comment_text);\n    \n    return {\n      notify_all: params.notify_all || false,\n      assignee: params.assignee,\n      resolved: params.resolved,\n      ...structuredComment // This includes the 'comment' array\n    };\n  }\n  \n  return params;\n}\n\nexport class CommentsEnhancedClient {\n  private client: ClickUpClient;\n\n  constructor(client: ClickUpClient) {\n    this.client = client;\n  }\n\n  /**\n   * Get comments for a specific task\n   * @param taskId The ID of the task to get comments for\n   * @param params Optional parameters for pagination\n   * @returns A list of comments with processed content and markdown representation\n   */\n  async getTaskComments(taskId: string, params?: GetTaskCommentsParams): Promise<{ comments: Comment[] }> {\n    const result = await this.client.get(`/task/${taskId}/comment`, params);\n    \n    // Process each comment's content\n    if (result.comments && Array.isArray(result.comments)) {\n      result.comments = result.comments.map((comment: any) => processCommentResponse(comment));\n    }\n    \n    return result;\n  }\n\n  /**\n   * Create a new comment on a task\n   * @param taskId The ID of the task to comment on\n   * @param params The comment parameters (supports markdown in comment_text)\n   * @returns The created comment with processed content\n   */\n  /**\n   * RAW API TEST - Bypass all processing and send exactly like ClickUp's official example\n   */\n  async createTaskCommentRaw(taskId: string, commentText: string): Promise<any> {\n    // Exact match to ClickUp's official Node.js example\n    const payload = {\n      notify_all: false,\n      comment_text: commentText\n    };\n    \n    console.log('=== RAW API TEST ===');\n    console.log('URL:', `/task/${taskId}/comment`);\n    console.log('Payload:', JSON.stringify(payload, null, 2));\n    console.log('===================');\n    \n    // Send raw request without any processing\n    const result = await this.client.post(`/task/${taskId}/comment`, payload);\n    \n    console.log('=== RAW API RESPONSE ===');\n    console.log('Response:', JSON.stringify(result, null, 2));\n    console.log('========================');\n    \n    // Return raw response without any processing\n    return result;\n  }\n\n  async createTaskComment(taskId: string, params: CreateTaskCommentParams): Promise<Comment> {\n    // Convert comment_text to structured array format\n    const structuredComment = prepareCommentForClickUp(params.comment_text);\n    \n    const payload = {\n      notify_all: params.notify_all || false,\n      assignee: params.assignee,\n      ...structuredComment // This adds the 'comment' array, NOT comment_text\n    };\n    \n    // DEBUG: Log exactly what we're sending to ClickUp API\n    console.log('=== DEBUG: Sending to ClickUp API ===');\n    console.log('URL:', `/task/${taskId}/comment`);\n    console.log('Payload:', JSON.stringify(payload, null, 2));\n    console.log('=====================================');\n    \n    const result = await this.client.post(`/task/${taskId}/comment`, payload);\n    \n    // DEBUG: Log what ClickUp returns\n    console.log('=== DEBUG: ClickUp API Response ===');\n    console.log('Raw Response:', JSON.stringify(result, null, 2));\n    console.log('===================================');\n    \n    return processCommentResponse(result);\n  }\n\n  /**\n   * Get comments for a chat view\n   * @param viewId The ID of the chat view to get comments for\n   * @param params Optional parameters for pagination\n   * @returns A list of comments with processed content and markdown representation\n   */\n  async getChatViewComments(viewId: string, params?: GetChatViewCommentsParams): Promise<{ comments: Comment[] }> {\n    const result = await this.client.get(`/view/${viewId}/comment`, params);\n    \n    // Process each comment's content\n    if (result.comments && Array.isArray(result.comments)) {\n      result.comments = result.comments.map((comment: any) => processCommentResponse(comment));\n    }\n    \n    return result;\n  }\n\n  /**\n   * Create a new comment on a chat view\n   * @param viewId The ID of the chat view to comment on\n   * @param params The comment parameters (supports markdown in comment_text)\n   * @returns The created comment with processed content\n   */\n  async createChatViewComment(viewId: string, params: CreateChatViewCommentParams): Promise<Comment> {\n    // Convert comment_text to structured array format\n    const structuredComment = prepareCommentForClickUp(params.comment_text);\n    \n    const payload = {\n      notify_all: params.notify_all || false,\n      ...structuredComment // This adds the 'comment' array, NOT comment_text\n    };\n    \n    const result = await this.client.post(`/view/${viewId}/comment`, payload);\n    return processCommentResponse(result);\n  }\n\n  /**\n   * Get comments for a list\n   * @param listId The ID of the list to get comments for\n   * @param params Optional parameters for pagination\n   * @returns A list of comments with processed content and markdown representation\n   */\n  async getListComments(listId: string, params?: GetListCommentsParams): Promise<{ comments: Comment[] }> {\n    const result = await this.client.get(`/list/${listId}/comment`, params);\n    \n    // Process each comment's content\n    if (result.comments && Array.isArray(result.comments)) {\n      result.comments = result.comments.map((comment: any) => processCommentResponse(comment));\n    }\n    \n    return result;\n  }\n\n  /**\n   * Create a new comment on a list\n   * @param listId The ID of the list to comment on\n   * @param params The comment parameters (supports markdown in comment_text)\n   * @returns The created comment with processed content\n   */\n  async createListComment(listId: string, params: CreateListCommentParams): Promise<Comment> {\n    // Convert comment_text to structured array format\n    const structuredComment = prepareCommentForClickUp(params.comment_text);\n    \n    const payload = {\n      notify_all: params.notify_all || false,\n      assignee: params.assignee,\n      ...structuredComment // This adds the 'comment' array, NOT comment_text\n    };\n    \n    const result = await this.client.post(`/list/${listId}/comment`, payload);\n    return processCommentResponse(result);\n  }\n\n  /**\n   * Update an existing comment\n   * @param commentId The ID of the comment to update\n   * @param params The comment parameters to update (supports markdown in comment_text)\n   * @returns The updated comment with processed content\n   */\n  async updateComment(commentId: string, params: UpdateCommentParams): Promise<Comment> {\n    // Convert comment_text to structured array format\n    const structuredComment = prepareCommentForClickUp(params.comment_text);\n    \n    const payload = {\n      assignee: params.assignee,\n      resolved: params.resolved,\n      ...structuredComment // This adds the 'comment' array, NOT comment_text\n    };\n    \n    const result = await this.client.put(`/comment/${commentId}`, payload);\n    return processCommentResponse(result);\n  }\n\n  /**\n   * Delete a comment\n   * @param commentId The ID of the comment to delete\n   * @returns Success message\n   */\n  async deleteComment(commentId: string): Promise<{ success: boolean }> {\n    return this.client.delete(`/comment/${commentId}`);\n  }\n\n  /**\n   * Get threaded comments for a parent comment\n   * @param commentId The ID of the parent comment\n   * @param params Optional parameters for pagination\n   * @returns A list of threaded comments with processed content and markdown representation\n   */\n  async getThreadedComments(commentId: string, params?: GetThreadedCommentsParams): Promise<{ comments: Comment[] }> {\n    const result = await this.client.get(`/comment/${commentId}/reply`, params);\n    \n    // Process each comment's content\n    if (result.comments && Array.isArray(result.comments)) {\n      result.comments = result.comments.map((comment: any) => processCommentResponse(comment));\n    }\n    \n    return result;\n  }\n\n  /**\n   * Create a new threaded comment on a parent comment\n   * @param commentId The ID of the parent comment\n   * @param params The comment parameters (supports markdown in comment_text)\n   * @returns The created threaded comment with processed content\n   */\n  async createThreadedComment(commentId: string, params: CreateThreadedCommentParams): Promise<Comment> {\n    // Convert comment_text to structured array format\n    const structuredComment = prepareCommentForClickUp(params.comment_text);\n    \n    const payload = {\n      notify_all: params.notify_all || false,\n      ...structuredComment // This adds the 'comment' array, NOT comment_text\n    };\n    \n    const result = await this.client.post(`/comment/${commentId}/reply`, payload);\n    return processCommentResponse(result);\n  }\n}\n\nexport const createCommentsEnhancedClient = (client: ClickUpClient): CommentsEnhancedClient => {\n  return new CommentsEnhancedClient(client);\n};\n"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "be8e2afcb8120103de907bc5fba7c91af67883ff"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_10y76djwd7 = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_10y76djwd7();
import { prepareCommentForClickUp, clickUpCommentToMarkdown } from '../utils/clickup-comment-formatter.js';
/**
 * Process comment response to add markdown representation
 * SIMPLIFIED VERSION to avoid duplication issues
 */
function processCommentResponse(comment) {
  /* istanbul ignore next */
  cov_10y76djwd7().f[0]++;
  // Skip the cleanClickUpCommentResponse and processClickUpResponse chain
  // that was causing duplication - just return the comment as-is with minimal processing
  const processed =
  /* istanbul ignore next */
  (cov_10y76djwd7().s[0]++, {
    ...comment
  });
  // Only add markdown conversion if we have structured comment data
  /* istanbul ignore next */
  cov_10y76djwd7().s[1]++;
  if (
  /* istanbul ignore next */
  (cov_10y76djwd7().b[1][0]++, processed.comment) &&
  /* istanbul ignore next */
  (cov_10y76djwd7().b[1][1]++, Array.isArray(processed.comment))) {
    /* istanbul ignore next */
    cov_10y76djwd7().b[0][0]++;
    cov_10y76djwd7().s[2]++;
    try {
      /* istanbul ignore next */
      cov_10y76djwd7().s[3]++;
      processed.comment_markdown = clickUpCommentToMarkdown({
        comment: processed.comment
      });
    } catch (error) {
      /* istanbul ignore next */
      cov_10y76djwd7().s[4]++;
      console.warn('Failed to convert ClickUp comment to markdown:', error);
      // Fallback to comment_text if available
      /* istanbul ignore next */
      cov_10y76djwd7().s[5]++;
      processed.comment_markdown =
      /* istanbul ignore next */
      (cov_10y76djwd7().b[2][0]++, processed.comment_text) ||
      /* istanbul ignore next */
      (cov_10y76djwd7().b[2][1]++, '');
    }
  } else
  /* istanbul ignore next */
  {
    cov_10y76djwd7().b[0][1]++;
  }
  cov_10y76djwd7().s[6]++;
  return processed;
}
/**
 * Prepare comment parameters for ClickUp API using structured comment format
 * This uses ClickUp's structured comment array format for proper markdown rendering
 */
function prepareCommentParams(params) {
  /* istanbul ignore next */
  cov_10y76djwd7().f[1]++;
  cov_10y76djwd7().s[7]++;
  if (params.comment_text) {
    /* istanbul ignore next */
    cov_10y76djwd7().b[3][0]++;
    // Use the structured comment format instead of plain comment_text
    const structuredComment =
    /* istanbul ignore next */
    (cov_10y76djwd7().s[8]++, prepareCommentForClickUp(params.comment_text));
    /* istanbul ignore next */
    cov_10y76djwd7().s[9]++;
    return {
      notify_all:
      /* istanbul ignore next */
      (cov_10y76djwd7().b[4][0]++, params.notify_all) ||
      /* istanbul ignore next */
      (cov_10y76djwd7().b[4][1]++, false),
      assignee: params.assignee,
      resolved: params.resolved,
      ...structuredComment // This includes the 'comment' array
    };
  } else
  /* istanbul ignore next */
  {
    cov_10y76djwd7().b[3][1]++;
  }
  cov_10y76djwd7().s[10]++;
  return params;
}
export class CommentsEnhancedClient {
  constructor(client) {
    /* istanbul ignore next */
    cov_10y76djwd7().f[2]++;
    cov_10y76djwd7().s[11]++;
    this.client = client;
  }
  /**
   * Get comments for a specific task
   * @param taskId The ID of the task to get comments for
   * @param params Optional parameters for pagination
   * @returns A list of comments with processed content and markdown representation
   */
  async getTaskComments(taskId, params) {
    /* istanbul ignore next */
    cov_10y76djwd7().f[3]++;
    const result =
    /* istanbul ignore next */
    (cov_10y76djwd7().s[12]++, await this.client.get(`/task/${taskId}/comment`, params));
    // Process each comment's content
    /* istanbul ignore next */
    cov_10y76djwd7().s[13]++;
    if (
    /* istanbul ignore next */
    (cov_10y76djwd7().b[6][0]++, result.comments) &&
    /* istanbul ignore next */
    (cov_10y76djwd7().b[6][1]++, Array.isArray(result.comments))) {
      /* istanbul ignore next */
      cov_10y76djwd7().b[5][0]++;
      cov_10y76djwd7().s[14]++;
      result.comments = result.comments.map(comment => {
        /* istanbul ignore next */
        cov_10y76djwd7().f[4]++;
        cov_10y76djwd7().s[15]++;
        return processCommentResponse(comment);
      });
    } else
    /* istanbul ignore next */
    {
      cov_10y76djwd7().b[5][1]++;
    }
    cov_10y76djwd7().s[16]++;
    return result;
  }
  /**
   * Create a new comment on a task
   * @param taskId The ID of the task to comment on
   * @param params The comment parameters (supports markdown in comment_text)
   * @returns The created comment with processed content
   */
  /**
   * RAW API TEST - Bypass all processing and send exactly like ClickUp's official example
   */
  async createTaskCommentRaw(taskId, commentText) {
    /* istanbul ignore next */
    cov_10y76djwd7().f[5]++;
    // Exact match to ClickUp's official Node.js example
    const payload =
    /* istanbul ignore next */
    (cov_10y76djwd7().s[17]++, {
      notify_all: false,
      comment_text: commentText
    });
    /* istanbul ignore next */
    cov_10y76djwd7().s[18]++;
    console.log('=== RAW API TEST ===');
    /* istanbul ignore next */
    cov_10y76djwd7().s[19]++;
    console.log('URL:', `/task/${taskId}/comment`);
    /* istanbul ignore next */
    cov_10y76djwd7().s[20]++;
    console.log('Payload:', JSON.stringify(payload, null, 2));
    /* istanbul ignore next */
    cov_10y76djwd7().s[21]++;
    console.log('===================');
    // Send raw request without any processing
    const result =
    /* istanbul ignore next */
    (cov_10y76djwd7().s[22]++, await this.client.post(`/task/${taskId}/comment`, payload));
    /* istanbul ignore next */
    cov_10y76djwd7().s[23]++;
    console.log('=== RAW API RESPONSE ===');
    /* istanbul ignore next */
    cov_10y76djwd7().s[24]++;
    console.log('Response:', JSON.stringify(result, null, 2));
    /* istanbul ignore next */
    cov_10y76djwd7().s[25]++;
    console.log('========================');
    // Return raw response without any processing
    /* istanbul ignore next */
    cov_10y76djwd7().s[26]++;
    return result;
  }
  async createTaskComment(taskId, params) {
    /* istanbul ignore next */
    cov_10y76djwd7().f[6]++;
    // Convert comment_text to structured array format
    const structuredComment =
    /* istanbul ignore next */
    (cov_10y76djwd7().s[27]++, prepareCommentForClickUp(params.comment_text));
    const payload =
    /* istanbul ignore next */
    (cov_10y76djwd7().s[28]++, {
      notify_all:
      /* istanbul ignore next */
      (cov_10y76djwd7().b[7][0]++, params.notify_all) ||
      /* istanbul ignore next */
      (cov_10y76djwd7().b[7][1]++, false),
      assignee: params.assignee,
      ...structuredComment // This adds the 'comment' array, NOT comment_text
    });
    // DEBUG: Log exactly what we're sending to ClickUp API
    /* istanbul ignore next */
    cov_10y76djwd7().s[29]++;
    console.log('=== DEBUG: Sending to ClickUp API ===');
    /* istanbul ignore next */
    cov_10y76djwd7().s[30]++;
    console.log('URL:', `/task/${taskId}/comment`);
    /* istanbul ignore next */
    cov_10y76djwd7().s[31]++;
    console.log('Payload:', JSON.stringify(payload, null, 2));
    /* istanbul ignore next */
    cov_10y76djwd7().s[32]++;
    console.log('=====================================');
    const result =
    /* istanbul ignore next */
    (cov_10y76djwd7().s[33]++, await this.client.post(`/task/${taskId}/comment`, payload));
    // DEBUG: Log what ClickUp returns
    /* istanbul ignore next */
    cov_10y76djwd7().s[34]++;
    console.log('=== DEBUG: ClickUp API Response ===');
    /* istanbul ignore next */
    cov_10y76djwd7().s[35]++;
    console.log('Raw Response:', JSON.stringify(result, null, 2));
    /* istanbul ignore next */
    cov_10y76djwd7().s[36]++;
    console.log('===================================');
    /* istanbul ignore next */
    cov_10y76djwd7().s[37]++;
    return processCommentResponse(result);
  }
  /**
   * Get comments for a chat view
   * @param viewId The ID of the chat view to get comments for
   * @param params Optional parameters for pagination
   * @returns A list of comments with processed content and markdown representation
   */
  async getChatViewComments(viewId, params) {
    /* istanbul ignore next */
    cov_10y76djwd7().f[7]++;
    const result =
    /* istanbul ignore next */
    (cov_10y76djwd7().s[38]++, await this.client.get(`/view/${viewId}/comment`, params));
    // Process each comment's content
    /* istanbul ignore next */
    cov_10y76djwd7().s[39]++;
    if (
    /* istanbul ignore next */
    (cov_10y76djwd7().b[9][0]++, result.comments) &&
    /* istanbul ignore next */
    (cov_10y76djwd7().b[9][1]++, Array.isArray(result.comments))) {
      /* istanbul ignore next */
      cov_10y76djwd7().b[8][0]++;
      cov_10y76djwd7().s[40]++;
      result.comments = result.comments.map(comment => {
        /* istanbul ignore next */
        cov_10y76djwd7().f[8]++;
        cov_10y76djwd7().s[41]++;
        return processCommentResponse(comment);
      });
    } else
    /* istanbul ignore next */
    {
      cov_10y76djwd7().b[8][1]++;
    }
    cov_10y76djwd7().s[42]++;
    return result;
  }
  /**
   * Create a new comment on a chat view
   * @param viewId The ID of the chat view to comment on
   * @param params The comment parameters (supports markdown in comment_text)
   * @returns The created comment with processed content
   */
  async createChatViewComment(viewId, params) {
    /* istanbul ignore next */
    cov_10y76djwd7().f[9]++;
    // Convert comment_text to structured array format
    const structuredComment =
    /* istanbul ignore next */
    (cov_10y76djwd7().s[43]++, prepareCommentForClickUp(params.comment_text));
    const payload =
    /* istanbul ignore next */
    (cov_10y76djwd7().s[44]++, {
      notify_all:
      /* istanbul ignore next */
      (cov_10y76djwd7().b[10][0]++, params.notify_all) ||
      /* istanbul ignore next */
      (cov_10y76djwd7().b[10][1]++, false),
      ...structuredComment // This adds the 'comment' array, NOT comment_text
    });
    const result =
    /* istanbul ignore next */
    (cov_10y76djwd7().s[45]++, await this.client.post(`/view/${viewId}/comment`, payload));
    /* istanbul ignore next */
    cov_10y76djwd7().s[46]++;
    return processCommentResponse(result);
  }
  /**
   * Get comments for a list
   * @param listId The ID of the list to get comments for
   * @param params Optional parameters for pagination
   * @returns A list of comments with processed content and markdown representation
   */
  async getListComments(listId, params) {
    /* istanbul ignore next */
    cov_10y76djwd7().f[10]++;
    const result =
    /* istanbul ignore next */
    (cov_10y76djwd7().s[47]++, await this.client.get(`/list/${listId}/comment`, params));
    // Process each comment's content
    /* istanbul ignore next */
    cov_10y76djwd7().s[48]++;
    if (
    /* istanbul ignore next */
    (cov_10y76djwd7().b[12][0]++, result.comments) &&
    /* istanbul ignore next */
    (cov_10y76djwd7().b[12][1]++, Array.isArray(result.comments))) {
      /* istanbul ignore next */
      cov_10y76djwd7().b[11][0]++;
      cov_10y76djwd7().s[49]++;
      result.comments = result.comments.map(comment => {
        /* istanbul ignore next */
        cov_10y76djwd7().f[11]++;
        cov_10y76djwd7().s[50]++;
        return processCommentResponse(comment);
      });
    } else
    /* istanbul ignore next */
    {
      cov_10y76djwd7().b[11][1]++;
    }
    cov_10y76djwd7().s[51]++;
    return result;
  }
  /**
   * Create a new comment on a list
   * @param listId The ID of the list to comment on
   * @param params The comment parameters (supports markdown in comment_text)
   * @returns The created comment with processed content
   */
  async createListComment(listId, params) {
    /* istanbul ignore next */
    cov_10y76djwd7().f[12]++;
    // Convert comment_text to structured array format
    const structuredComment =
    /* istanbul ignore next */
    (cov_10y76djwd7().s[52]++, prepareCommentForClickUp(params.comment_text));
    const payload =
    /* istanbul ignore next */
    (cov_10y76djwd7().s[53]++, {
      notify_all:
      /* istanbul ignore next */
      (cov_10y76djwd7().b[13][0]++, params.notify_all) ||
      /* istanbul ignore next */
      (cov_10y76djwd7().b[13][1]++, false),
      assignee: params.assignee,
      ...structuredComment // This adds the 'comment' array, NOT comment_text
    });
    const result =
    /* istanbul ignore next */
    (cov_10y76djwd7().s[54]++, await this.client.post(`/list/${listId}/comment`, payload));
    /* istanbul ignore next */
    cov_10y76djwd7().s[55]++;
    return processCommentResponse(result);
  }
  /**
   * Update an existing comment
   * @param commentId The ID of the comment to update
   * @param params The comment parameters to update (supports markdown in comment_text)
   * @returns The updated comment with processed content
   */
  async updateComment(commentId, params) {
    /* istanbul ignore next */
    cov_10y76djwd7().f[13]++;
    // Convert comment_text to structured array format
    const structuredComment =
    /* istanbul ignore next */
    (cov_10y76djwd7().s[56]++, prepareCommentForClickUp(params.comment_text));
    const payload =
    /* istanbul ignore next */
    (cov_10y76djwd7().s[57]++, {
      assignee: params.assignee,
      resolved: params.resolved,
      ...structuredComment // This adds the 'comment' array, NOT comment_text
    });
    const result =
    /* istanbul ignore next */
    (cov_10y76djwd7().s[58]++, await this.client.put(`/comment/${commentId}`, payload));
    /* istanbul ignore next */
    cov_10y76djwd7().s[59]++;
    return processCommentResponse(result);
  }
  /**
   * Delete a comment
   * @param commentId The ID of the comment to delete
   * @returns Success message
   */
  async deleteComment(commentId) {
    /* istanbul ignore next */
    cov_10y76djwd7().f[14]++;
    cov_10y76djwd7().s[60]++;
    return this.client.delete(`/comment/${commentId}`);
  }
  /**
   * Get threaded comments for a parent comment
   * @param commentId The ID of the parent comment
   * @param params Optional parameters for pagination
   * @returns A list of threaded comments with processed content and markdown representation
   */
  async getThreadedComments(commentId, params) {
    /* istanbul ignore next */
    cov_10y76djwd7().f[15]++;
    const result =
    /* istanbul ignore next */
    (cov_10y76djwd7().s[61]++, await this.client.get(`/comment/${commentId}/reply`, params));
    // Process each comment's content
    /* istanbul ignore next */
    cov_10y76djwd7().s[62]++;
    if (
    /* istanbul ignore next */
    (cov_10y76djwd7().b[15][0]++, result.comments) &&
    /* istanbul ignore next */
    (cov_10y76djwd7().b[15][1]++, Array.isArray(result.comments))) {
      /* istanbul ignore next */
      cov_10y76djwd7().b[14][0]++;
      cov_10y76djwd7().s[63]++;
      result.comments = result.comments.map(comment => {
        /* istanbul ignore next */
        cov_10y76djwd7().f[16]++;
        cov_10y76djwd7().s[64]++;
        return processCommentResponse(comment);
      });
    } else
    /* istanbul ignore next */
    {
      cov_10y76djwd7().b[14][1]++;
    }
    cov_10y76djwd7().s[65]++;
    return result;
  }
  /**
   * Create a new threaded comment on a parent comment
   * @param commentId The ID of the parent comment
   * @param params The comment parameters (supports markdown in comment_text)
   * @returns The created threaded comment with processed content
   */
  async createThreadedComment(commentId, params) {
    /* istanbul ignore next */
    cov_10y76djwd7().f[17]++;
    // Convert comment_text to structured array format
    const structuredComment =
    /* istanbul ignore next */
    (cov_10y76djwd7().s[66]++, prepareCommentForClickUp(params.comment_text));
    const payload =
    /* istanbul ignore next */
    (cov_10y76djwd7().s[67]++, {
      notify_all:
      /* istanbul ignore next */
      (cov_10y76djwd7().b[16][0]++, params.notify_all) ||
      /* istanbul ignore next */
      (cov_10y76djwd7().b[16][1]++, false),
      ...structuredComment // This adds the 'comment' array, NOT comment_text
    });
    const result =
    /* istanbul ignore next */
    (cov_10y76djwd7().s[68]++, await this.client.post(`/comment/${commentId}/reply`, payload));
    /* istanbul ignore next */
    cov_10y76djwd7().s[69]++;
    return processCommentResponse(result);
  }
}
/* istanbul ignore next */
cov_10y76djwd7().s[70]++;
export const createCommentsEnhancedClient = client => {
  /* istanbul ignore next */
  cov_10y76djwd7().f[18]++;
  cov_10y76djwd7().s[71]++;
  return new CommentsEnhancedClient(client);
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
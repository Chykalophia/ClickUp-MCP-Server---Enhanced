d0defe628235140225791eea95b81b9b
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.createClickUpClient = exports.ClickUpClient = void 0;
const axios_1 = __importDefault(require("axios"));
// ClickUp API base URL
const API_BASE_URL = 'https://api.clickup.com/api/v2';
class ClickUpClient {
    constructor(config) {
        if (!config.apiToken) {
            throw new Error('ClickUp API token is required');
        }
        this.axiosInstance = axios_1.default.create({
            baseURL: config.baseUrl || API_BASE_URL,
            headers: {
                'accept': 'application/json',
                'content-type': 'application/json',
                'Authorization': config.apiToken
            }
        });
        // Add response interceptor for error handling
        this.axiosInstance.interceptors.response.use(response => response, error => {
            if (error.response) {
                // Format error message with status and data
                const message = `ClickUp API Error (${error.response.status}): ${error.response.data?.err || error.message}`;
                error.message = message;
            }
            return Promise.reject(error);
        });
    }
    // Helper method to get the axios instance for use in other modules
    getAxiosInstance() {
        return this.axiosInstance;
    }
    // Basic API methods that can be used directly
    async get(endpoint, params) {
        const response = await this.axiosInstance.get(endpoint, { params });
        return response.data;
    }
    async post(endpoint, data) {
        const response = await this.axiosInstance.post(endpoint, data);
        return response.data;
    }
    async put(endpoint, data) {
        const response = await this.axiosInstance.put(endpoint, data);
        return response.data;
    }
    async delete(endpoint) {
        const response = await this.axiosInstance.delete(endpoint);
        return response.data;
    }
}
exports.ClickUpClient = ClickUpClient;
// Create a singleton instance using environment variables
const createClickUpClient = () => {
    const apiToken = process.env.CLICKUP_API_TOKEN;
    if (!apiToken) {
        throw new Error('CLICKUP_API_TOKEN environment variable is required');
    }
    return new ClickUpClient({ apiToken });
};
exports.createClickUpClient = createClickUpClient;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL3BldGVya3J6eXplay9EZXZlbG9wbWVudC9jbGlja3VwLW1jcC1zZXJ2ZXIvc3JjL2NsaWNrdXAtY2xpZW50L2luZGV4LnRzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUFBLGtEQUE2QztBQUU3Qyx1QkFBdUI7QUFDdkIsTUFBTSxZQUFZLEdBQUcsZ0NBQWdDLENBQUM7QUFPdEQsTUFBYSxhQUFhO0lBR3hCLFlBQVksTUFBMkI7UUFDckMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxRQUFRLEVBQUUsQ0FBQztZQUNyQixNQUFNLElBQUksS0FBSyxDQUFDLCtCQUErQixDQUFDLENBQUM7UUFDbkQsQ0FBQztRQUVELElBQUksQ0FBQyxhQUFhLEdBQUcsZUFBSyxDQUFDLE1BQU0sQ0FBQztZQUNoQyxPQUFPLEVBQUUsTUFBTSxDQUFDLE9BQU8sSUFBSSxZQUFZO1lBQ3ZDLE9BQU8sRUFBRTtnQkFDUCxRQUFRLEVBQUUsa0JBQWtCO2dCQUM1QixjQUFjLEVBQUUsa0JBQWtCO2dCQUNsQyxlQUFlLEVBQUUsTUFBTSxDQUFDLFFBQVE7YUFDakM7U0FDRixDQUFDLENBQUM7UUFFSCw4Q0FBOEM7UUFDOUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxZQUFZLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FDMUMsUUFBUSxDQUFDLEVBQUUsQ0FBQyxRQUFRLEVBQ3BCLEtBQUssQ0FBQyxFQUFFO1lBQ04sSUFBSSxLQUFLLENBQUMsUUFBUSxFQUFFLENBQUM7Z0JBQ25CLDRDQUE0QztnQkFDNUMsTUFBTSxPQUFPLEdBQUcsc0JBQXNCLEtBQUssQ0FBQyxRQUFRLENBQUMsTUFBTSxNQUN6RCxLQUFLLENBQUMsUUFBUSxDQUFDLElBQUksRUFBRSxHQUFHLElBQUksS0FBSyxDQUFDLE9BQ3BDLEVBQUUsQ0FBQztnQkFDSCxLQUFLLENBQUMsT0FBTyxHQUFHLE9BQU8sQ0FBQztZQUMxQixDQUFDO1lBQ0QsT0FBTyxPQUFPLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQy9CLENBQUMsQ0FDRixDQUFDO0lBQ0osQ0FBQztJQUVELG1FQUFtRTtJQUNuRSxnQkFBZ0I7UUFDZCxPQUFPLElBQUksQ0FBQyxhQUFhLENBQUM7SUFDNUIsQ0FBQztJQUVELDhDQUE4QztJQUM5QyxLQUFLLENBQUMsR0FBRyxDQUFVLFFBQWdCLEVBQUUsTUFBWTtRQUMvQyxNQUFNLFFBQVEsR0FBRyxNQUFNLElBQUksQ0FBQyxhQUFhLENBQUMsR0FBRyxDQUFDLFFBQVEsRUFBRSxFQUFFLE1BQU0sRUFBRSxDQUFDLENBQUM7UUFDcEUsT0FBTyxRQUFRLENBQUMsSUFBSSxDQUFDO0lBQ3ZCLENBQUM7SUFFRCxLQUFLLENBQUMsSUFBSSxDQUFVLFFBQWdCLEVBQUUsSUFBVTtRQUM5QyxNQUFNLFFBQVEsR0FBRyxNQUFNLElBQUksQ0FBQyxhQUFhLENBQUMsSUFBSSxDQUFDLFFBQVEsRUFBRSxJQUFJLENBQUMsQ0FBQztRQUMvRCxPQUFPLFFBQVEsQ0FBQyxJQUFJLENBQUM7SUFDdkIsQ0FBQztJQUVELEtBQUssQ0FBQyxHQUFHLENBQVUsUUFBZ0IsRUFBRSxJQUFVO1FBQzdDLE1BQU0sUUFBUSxHQUFHLE1BQU0sSUFBSSxDQUFDLGFBQWEsQ0FBQyxHQUFHLENBQUMsUUFBUSxFQUFFLElBQUksQ0FBQyxDQUFDO1FBQzlELE9BQU8sUUFBUSxDQUFDLElBQUksQ0FBQztJQUN2QixDQUFDO0lBRUQsS0FBSyxDQUFDLE1BQU0sQ0FBVSxRQUFnQjtRQUNwQyxNQUFNLFFBQVEsR0FBRyxNQUFNLElBQUksQ0FBQyxhQUFhLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxDQUFDO1FBQzNELE9BQU8sUUFBUSxDQUFDLElBQUksQ0FBQztJQUN2QixDQUFDO0NBQ0Y7QUExREQsc0NBMERDO0FBRUQsMERBQTBEO0FBQ25ELE1BQU0sbUJBQW1CLEdBQUcsR0FBa0IsRUFBRTtJQUNyRCxNQUFNLFFBQVEsR0FBRyxPQUFPLENBQUMsR0FBRyxDQUFDLGlCQUFpQixDQUFDO0lBRS9DLElBQUksQ0FBQyxRQUFRLEVBQUUsQ0FBQztRQUNkLE1BQU0sSUFBSSxLQUFLLENBQUMsb0RBQW9ELENBQUMsQ0FBQztJQUN4RSxDQUFDO0lBRUQsT0FBTyxJQUFJLGFBQWEsQ0FBQyxFQUFFLFFBQVEsRUFBRSxDQUFDLENBQUM7QUFDekMsQ0FBQyxDQUFDO0FBUlcsUUFBQSxtQkFBbUIsdUJBUTlCIiwibmFtZXMiOltdLCJzb3VyY2VzIjpbIi9Vc2Vycy9wZXRlcmtyenl6ZWsvRGV2ZWxvcG1lbnQvY2xpY2t1cC1tY3Atc2VydmVyL3NyYy9jbGlja3VwLWNsaWVudC9pbmRleC50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgYXhpb3MsIHsgQXhpb3NJbnN0YW5jZSB9IGZyb20gJ2F4aW9zJztcblxuLy8gQ2xpY2tVcCBBUEkgYmFzZSBVUkxcbmNvbnN0IEFQSV9CQVNFX1VSTCA9ICdodHRwczovL2FwaS5jbGlja3VwLmNvbS9hcGkvdjInO1xuXG5leHBvcnQgaW50ZXJmYWNlIENsaWNrVXBDbGllbnRDb25maWcge1xuICBhcGlUb2tlbjogc3RyaW5nO1xuICBiYXNlVXJsPzogc3RyaW5nO1xufVxuXG5leHBvcnQgY2xhc3MgQ2xpY2tVcENsaWVudCB7XG4gIHByaXZhdGUgYXhpb3NJbnN0YW5jZTogQXhpb3NJbnN0YW5jZTtcbiAgXG4gIGNvbnN0cnVjdG9yKGNvbmZpZzogQ2xpY2tVcENsaWVudENvbmZpZykge1xuICAgIGlmICghY29uZmlnLmFwaVRva2VuKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0NsaWNrVXAgQVBJIHRva2VuIGlzIHJlcXVpcmVkJyk7XG4gICAgfVxuXG4gICAgdGhpcy5heGlvc0luc3RhbmNlID0gYXhpb3MuY3JlYXRlKHtcbiAgICAgIGJhc2VVUkw6IGNvbmZpZy5iYXNlVXJsIHx8IEFQSV9CQVNFX1VSTCxcbiAgICAgIGhlYWRlcnM6IHtcbiAgICAgICAgJ2FjY2VwdCc6ICdhcHBsaWNhdGlvbi9qc29uJyxcbiAgICAgICAgJ2NvbnRlbnQtdHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uJyxcbiAgICAgICAgJ0F1dGhvcml6YXRpb24nOiBjb25maWcuYXBpVG9rZW5cbiAgICAgIH1cbiAgICB9KTtcblxuICAgIC8vIEFkZCByZXNwb25zZSBpbnRlcmNlcHRvciBmb3IgZXJyb3IgaGFuZGxpbmdcbiAgICB0aGlzLmF4aW9zSW5zdGFuY2UuaW50ZXJjZXB0b3JzLnJlc3BvbnNlLnVzZShcbiAgICAgIHJlc3BvbnNlID0+IHJlc3BvbnNlLFxuICAgICAgZXJyb3IgPT4ge1xuICAgICAgICBpZiAoZXJyb3IucmVzcG9uc2UpIHtcbiAgICAgICAgICAvLyBGb3JtYXQgZXJyb3IgbWVzc2FnZSB3aXRoIHN0YXR1cyBhbmQgZGF0YVxuICAgICAgICAgIGNvbnN0IG1lc3NhZ2UgPSBgQ2xpY2tVcCBBUEkgRXJyb3IgKCR7ZXJyb3IucmVzcG9uc2Uuc3RhdHVzfSk6ICR7XG4gICAgICAgICAgICBlcnJvci5yZXNwb25zZS5kYXRhPy5lcnIgfHwgZXJyb3IubWVzc2FnZVxuICAgICAgICAgIH1gO1xuICAgICAgICAgIGVycm9yLm1lc3NhZ2UgPSBtZXNzYWdlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdChlcnJvcik7XG4gICAgICB9XG4gICAgKTtcbiAgfVxuXG4gIC8vIEhlbHBlciBtZXRob2QgdG8gZ2V0IHRoZSBheGlvcyBpbnN0YW5jZSBmb3IgdXNlIGluIG90aGVyIG1vZHVsZXNcbiAgZ2V0QXhpb3NJbnN0YW5jZSgpOiBBeGlvc0luc3RhbmNlIHtcbiAgICByZXR1cm4gdGhpcy5heGlvc0luc3RhbmNlO1xuICB9XG5cbiAgLy8gQmFzaWMgQVBJIG1ldGhvZHMgdGhhdCBjYW4gYmUgdXNlZCBkaXJlY3RseVxuICBhc3luYyBnZXQ8VCA9IGFueT4oZW5kcG9pbnQ6IHN0cmluZywgcGFyYW1zPzogYW55KTogUHJvbWlzZTxUPiB7XG4gICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCB0aGlzLmF4aW9zSW5zdGFuY2UuZ2V0KGVuZHBvaW50LCB7IHBhcmFtcyB9KTtcbiAgICByZXR1cm4gcmVzcG9uc2UuZGF0YTtcbiAgfVxuXG4gIGFzeW5jIHBvc3Q8VCA9IGFueT4oZW5kcG9pbnQ6IHN0cmluZywgZGF0YT86IGFueSk6IFByb21pc2U8VD4ge1xuICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgdGhpcy5heGlvc0luc3RhbmNlLnBvc3QoZW5kcG9pbnQsIGRhdGEpO1xuICAgIHJldHVybiByZXNwb25zZS5kYXRhO1xuICB9XG5cbiAgYXN5bmMgcHV0PFQgPSBhbnk+KGVuZHBvaW50OiBzdHJpbmcsIGRhdGE/OiBhbnkpOiBQcm9taXNlPFQ+IHtcbiAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IHRoaXMuYXhpb3NJbnN0YW5jZS5wdXQoZW5kcG9pbnQsIGRhdGEpO1xuICAgIHJldHVybiByZXNwb25zZS5kYXRhO1xuICB9XG5cbiAgYXN5bmMgZGVsZXRlPFQgPSBhbnk+KGVuZHBvaW50OiBzdHJpbmcpOiBQcm9taXNlPFQ+IHtcbiAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IHRoaXMuYXhpb3NJbnN0YW5jZS5kZWxldGUoZW5kcG9pbnQpO1xuICAgIHJldHVybiByZXNwb25zZS5kYXRhO1xuICB9XG59XG5cbi8vIENyZWF0ZSBhIHNpbmdsZXRvbiBpbnN0YW5jZSB1c2luZyBlbnZpcm9ubWVudCB2YXJpYWJsZXNcbmV4cG9ydCBjb25zdCBjcmVhdGVDbGlja1VwQ2xpZW50ID0gKCk6IENsaWNrVXBDbGllbnQgPT4ge1xuICBjb25zdCBhcGlUb2tlbiA9IHByb2Nlc3MuZW52LkNMSUNLVVBfQVBJX1RPS0VOO1xuICBcbiAgaWYgKCFhcGlUb2tlbikge1xuICAgIHRocm93IG5ldyBFcnJvcignQ0xJQ0tVUF9BUElfVE9LRU4gZW52aXJvbm1lbnQgdmFyaWFibGUgaXMgcmVxdWlyZWQnKTtcbiAgfVxuICBcbiAgcmV0dXJuIG5ldyBDbGlja1VwQ2xpZW50KHsgYXBpVG9rZW4gfSk7XG59O1xuIl0sInZlcnNpb24iOjN9
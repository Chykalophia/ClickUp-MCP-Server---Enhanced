{"version":3,"names":["cov_21n5rabedb","actualCoverage","z","AttachmentTypeSchema","s","enum","UploadSourceSchema","AttachmentParentSchema","UploadAttachmentSchema","object","parent_id","string","min","describe","parent_type","filename","file_data","optional","file_url","url","source","default","description","tags","array","UpdateAttachmentMetadataSchema","attachment_id","GetAttachmentsFilterSchema","type","filename_contains","date_from","number","date_to","limit","positive","offset","AttachmentSharingSchema","access_level","expires_at","password","BulkAttachmentOperationSchema","operation","attachment_ids","target_parent_id","target_parent_type","getAttachmentTypeFromMimetype","mimetype","f","startsWith","b","documentTypes","includes","spreadsheetTypes","presentationTypes","archiveTypes","getAttachmentTypeFromExtension","extension","split","pop","toLowerCase","imageExtensions","videoExtensions","audioExtensions","documentExtensions","spreadsheetExtensions","presentationExtensions","archiveExtensions","formatFileSize","bytes","units","size","unitIndex","length","toFixed","validateFileUpload","request","errors","push","invalidChars","test","URL","tag","isValid","generateAttachmentPreview","attachment","previewableImages","previewableVideos","previewableAudio","previewableDocuments","previewableText","canPreview","previewType","previewUrl","preview_url"],"sources":["/Users/peterkrzyzek/Development/clickup-mcp-server/src/schemas/attachments-schemas.ts"],"sourcesContent":["import { z } from 'zod';\n\n// Attachment types\nexport const AttachmentTypeSchema = z.enum([\n  'file',\n  'image',\n  'video',\n  'audio',\n  'document',\n  'spreadsheet',\n  'presentation',\n  'archive',\n  'other'\n]);\n\n// Upload source types\nexport const UploadSourceSchema = z.enum([\n  'local',\n  'url',\n  'google_drive',\n  'dropbox',\n  'onedrive',\n  'box'\n]);\n\n// Attachment parent types\nexport const AttachmentParentSchema = z.enum([\n  'task',\n  'comment',\n  'doc',\n  'chat'\n]);\n\n// Upload attachment schema\nexport const UploadAttachmentSchema = z.object({\n  parent_id: z.string().min(1).describe('The ID of the parent (task, comment, etc.)'),\n  parent_type: AttachmentParentSchema.describe('The type of parent object'),\n  filename: z.string().min(1).describe('The name of the file'),\n  file_data: z.string().optional().describe('Base64 encoded file data for direct upload'),\n  file_url: z.string().url().optional().describe('URL to download file from'),\n  source: UploadSourceSchema.default('local').describe('Source of the file upload'),\n  description: z.string().optional().describe('Description of the attachment'),\n  tags: z.array(z.string()).optional().describe('Tags to associate with the attachment')\n});\n\n// Update attachment metadata schema\nexport const UpdateAttachmentMetadataSchema = z.object({\n  attachment_id: z.string().min(1).describe('The ID of the attachment to update'),\n  filename: z.string().optional().describe('New filename'),\n  description: z.string().optional().describe('New description'),\n  tags: z.array(z.string()).optional().describe('New tags for the attachment')\n});\n\n// Get attachments filter schema\nexport const GetAttachmentsFilterSchema = z.object({\n  parent_id: z.string().min(1).describe('The ID of the parent object'),\n  parent_type: AttachmentParentSchema.describe('The type of parent object'),\n  type: AttachmentTypeSchema.optional().describe('Filter by attachment type'),\n  filename_contains: z.string().optional().describe('Filter by filename containing text'),\n  tags: z.array(z.string()).optional().describe('Filter by tags'),\n  date_from: z.number().optional().describe('Filter attachments created after this date (Unix timestamp)'),\n  date_to: z.number().optional().describe('Filter attachments created before this date (Unix timestamp)'),\n  limit: z.number().positive().optional().describe('Maximum number of attachments to return'),\n  offset: z.number().min(0).optional().describe('Number of attachments to skip for pagination')\n});\n\n// Attachment sharing schema\nexport const AttachmentSharingSchema = z.object({\n  attachment_id: z.string().min(1).describe('The ID of the attachment to share'),\n  access_level: z.enum(['private', 'team', 'public']).describe('Access level for the attachment'),\n  expires_at: z.number().optional().describe('Expiration timestamp for public links (Unix timestamp)'),\n  password: z.string().optional().describe('Password protection for public links')\n});\n\n// Bulk attachment operations schema\nexport const BulkAttachmentOperationSchema = z.object({\n  operation: z.enum(['delete', 'move', 'copy', 'update_tags']).describe('The bulk operation to perform'),\n  attachment_ids: z.array(z.string()).describe('Array of attachment IDs to operate on'),\n  target_parent_id: z.string().optional().describe('Target parent ID for move/copy operations'),\n  target_parent_type: AttachmentParentSchema.optional().describe('Target parent type for move/copy operations'),\n  tags: z.array(z.string()).optional().describe('Tags for bulk tag update operations')\n});\n\n// Type exports\nexport type AttachmentType = z.infer<typeof AttachmentTypeSchema>;\nexport type UploadSource = z.infer<typeof UploadSourceSchema>;\nexport type AttachmentParent = z.infer<typeof AttachmentParentSchema>;\nexport type UploadAttachmentRequest = z.infer<typeof UploadAttachmentSchema>;\nexport type UpdateAttachmentMetadataRequest = z.infer<typeof UpdateAttachmentMetadataSchema>;\nexport type GetAttachmentsFilter = z.infer<typeof GetAttachmentsFilterSchema>;\nexport type AttachmentSharingRequest = z.infer<typeof AttachmentSharingSchema>;\nexport type BulkAttachmentOperation = z.infer<typeof BulkAttachmentOperationSchema>;\n\n// Attachment response interfaces\nexport interface AttachmentResponse {\n  id: string;\n  filename: string;\n  url: string;\n  parent: {\n    id: string;\n    type: AttachmentParent;\n  };\n  size: number;\n  mimetype: string;\n  type: AttachmentType;\n  extension: string;\n  is_folder: boolean;\n  date_created: string;\n  date_updated: string;\n  uploaded_by: {\n    id: number;\n    username: string;\n    email: string;\n    profilePicture?: string;\n  };\n  description?: string;\n  tags: string[];\n  thumbnail_url?: string;\n  preview_url?: string;\n  download_count: number;\n  sharing: {\n    access_level: 'private' | 'team' | 'public';\n    public_url?: string;\n    expires_at?: string;\n    password_protected: boolean;\n  };\n  metadata: {\n    width?: number;\n    height?: number;\n    duration?: number;\n    pages?: number;\n    [key: string]: any;\n  };\n}\n\nexport interface AttachmentListResponse {\n  attachments: AttachmentResponse[];\n  total_count: number;\n  has_more: boolean;\n}\n\nexport interface AttachmentUploadResponse {\n  attachment: AttachmentResponse;\n  upload_url?: string;\n  upload_fields?: Record<string, string>;\n}\n\nexport interface AttachmentStatsResponse {\n  total_attachments: number;\n  total_size_bytes: number;\n  total_size_formatted: string;\n  by_type: Record<AttachmentType, {\n    count: number;\n    size_bytes: number;\n    size_formatted: string;\n  }>;\n  by_parent_type: Record<AttachmentParent, {\n    count: number;\n    size_bytes: number;\n  }>;\n  recent_uploads: AttachmentResponse[];\n  largest_files: AttachmentResponse[];\n  most_downloaded: AttachmentResponse[];\n}\n\n// Utility functions\nexport const getAttachmentTypeFromMimetype = (mimetype: string): AttachmentType => {\n  if (mimetype.startsWith('image/')) return 'image';\n  if (mimetype.startsWith('video/')) return 'video';\n  if (mimetype.startsWith('audio/')) return 'audio';\n  \n  const documentTypes = [\n    'application/pdf',\n    'application/msword',\n    'application/vnd.openxmlformats-officedocument.wordprocessingml.document',\n    'text/plain',\n    'text/rtf'\n  ];\n  if (documentTypes.includes(mimetype)) return 'document';\n  \n  const spreadsheetTypes = [\n    'application/vnd.ms-excel',\n    'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',\n    'text/csv'\n  ];\n  if (spreadsheetTypes.includes(mimetype)) return 'spreadsheet';\n  \n  const presentationTypes = [\n    'application/vnd.ms-powerpoint',\n    'application/vnd.openxmlformats-officedocument.presentationml.presentation'\n  ];\n  if (presentationTypes.includes(mimetype)) return 'presentation';\n  \n  const archiveTypes = [\n    'application/zip',\n    'application/x-rar-compressed',\n    'application/x-7z-compressed',\n    'application/gzip',\n    'application/x-tar'\n  ];\n  if (archiveTypes.includes(mimetype)) return 'archive';\n  \n  return 'other';\n};\n\nexport const getAttachmentTypeFromExtension = (filename: string): AttachmentType => {\n  const extension = filename.split('.').pop()?.toLowerCase();\n  if (!extension) return 'other';\n  \n  const imageExtensions = ['jpg', 'jpeg', 'png', 'gif', 'bmp', 'svg', 'webp'];\n  if (imageExtensions.includes(extension)) return 'image';\n  \n  const videoExtensions = ['mp4', 'avi', 'mov', 'wmv', 'flv', 'webm', 'mkv'];\n  if (videoExtensions.includes(extension)) return 'video';\n  \n  const audioExtensions = ['mp3', 'wav', 'flac', 'aac', 'ogg', 'm4a'];\n  if (audioExtensions.includes(extension)) return 'audio';\n  \n  const documentExtensions = ['pdf', 'doc', 'docx', 'txt', 'rtf'];\n  if (documentExtensions.includes(extension)) return 'document';\n  \n  const spreadsheetExtensions = ['xls', 'xlsx', 'csv', 'ods'];\n  if (spreadsheetExtensions.includes(extension)) return 'spreadsheet';\n  \n  const presentationExtensions = ['ppt', 'pptx', 'odp'];\n  if (presentationExtensions.includes(extension)) return 'presentation';\n  \n  const archiveExtensions = ['zip', 'rar', '7z', 'tar', 'gz'];\n  if (archiveExtensions.includes(extension)) return 'archive';\n  \n  return 'other';\n};\n\nexport const formatFileSize = (bytes: number): string => {\n  const units = ['B', 'KB', 'MB', 'GB', 'TB'];\n  let size = bytes;\n  let unitIndex = 0;\n  \n  while (size >= 1024 && unitIndex < units.length - 1) {\n    size /= 1024;\n    unitIndex++;\n  }\n  \n  return `${size.toFixed(unitIndex === 0 ? 0 : 1)} ${units[unitIndex]}`;\n};\n\nexport const validateFileUpload = (request: UploadAttachmentRequest): {\n  isValid: boolean;\n  errors: string[];\n} => {\n  const errors: string[] = [];\n  \n  // Check if either file_data or file_url is provided\n  if (!request.file_data && !request.file_url) {\n    errors.push('Either file_data or file_url must be provided');\n  }\n  \n  // Check if both are provided (not allowed)\n  if (request.file_data && request.file_url) {\n    errors.push('Cannot provide both file_data and file_url');\n  }\n  \n  // Validate filename\n  if (request.filename.length > 255) {\n    errors.push('Filename cannot exceed 255 characters');\n  }\n  \n  // Check for invalid characters in filename\n  const invalidChars = /[<>:\"/\\\\|?*]/;\n  if (invalidChars.test(request.filename)) {\n    errors.push('Filename contains invalid characters');\n  }\n  \n  // Validate file_url format if provided\n  if (request.file_url) {\n    try {\n      new URL(request.file_url);\n    } catch {\n      errors.push('Invalid file_url format');\n    }\n  }\n  \n  // Validate description length\n  if (request.description && request.description.length > 1000) {\n    errors.push('Description cannot exceed 1000 characters');\n  }\n  \n  // Validate tags\n  if (request.tags) {\n    if (request.tags.length > 10) {\n      errors.push('Cannot have more than 10 tags');\n    }\n    \n    for (const tag of request.tags) {\n      if (tag.length > 50) {\n        errors.push('Tag cannot exceed 50 characters');\n      }\n    }\n  }\n  \n  return {\n    isValid: errors.length === 0,\n    errors\n  };\n};\n\nexport const generateAttachmentPreview = (attachment: AttachmentResponse): {\n  canPreview: boolean;\n  previewType: 'image' | 'video' | 'audio' | 'document' | 'text' | 'none';\n  previewUrl?: string;\n} => {\n  const previewableImages = ['image/jpeg', 'image/png', 'image/gif', 'image/webp'];\n  const previewableVideos = ['video/mp4', 'video/webm'];\n  const previewableAudio = ['audio/mp3', 'audio/wav', 'audio/ogg'];\n  const previewableDocuments = ['application/pdf'];\n  const previewableText = ['text/plain', 'text/csv'];\n  \n  if (previewableImages.includes(attachment.mimetype)) {\n    return {\n      canPreview: true,\n      previewType: 'image',\n      previewUrl: attachment.preview_url || attachment.url\n    };\n  }\n  \n  if (previewableVideos.includes(attachment.mimetype)) {\n    return {\n      canPreview: true,\n      previewType: 'video',\n      previewUrl: attachment.preview_url || attachment.url\n    };\n  }\n  \n  if (previewableAudio.includes(attachment.mimetype)) {\n    return {\n      canPreview: true,\n      previewType: 'audio',\n      previewUrl: attachment.url\n    };\n  }\n  \n  if (previewableDocuments.includes(attachment.mimetype)) {\n    return {\n      canPreview: true,\n      previewType: 'document',\n      previewUrl: attachment.preview_url\n    };\n  }\n  \n  if (previewableText.includes(attachment.mimetype)) {\n    return {\n      canPreview: true,\n      previewType: 'text',\n      previewUrl: attachment.url\n    };\n  }\n  \n  return {\n    canPreview: false,\n    previewType: 'none'\n  };\n};\n"],"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","ignoreList":[]}
f2e20e9c3b91264b7bd25a286f7a7bc8
/* istanbul ignore next */
function cov_kdgclanos() {
  var path = "/Users/peterkrzyzek/Development/clickup-mcp-server/src/schemas/goals-schemas.ts";
  var hash = "111b0561eb47e75afe5fa372675ec9a1cc8625fc";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/peterkrzyzek/Development/clickup-mcp-server/src/schemas/goals-schemas.ts",
    statementMap: {
      "0": {
        start: {
          line: 6,
          column: 28
        },
        end: {
          line: 6,
          column: 68
        }
      },
      "1": {
        start: {
          line: 8,
          column: 28
        },
        end: {
          line: 8,
          column: 68
        }
      },
      "2": {
        start: {
          line: 10,
          column: 30
        },
        end: {
          line: 10,
          column: 72
        }
      },
      "3": {
        start: {
          line: 12,
          column: 28
        },
        end: {
          line: 12,
          column: 75
        }
      },
      "4": {
        start: {
          line: 17,
          column: 31
        },
        end: {
          line: 17,
          column: 103
        }
      },
      "5": {
        start: {
          line: 19,
          column: 32
        },
        end: {
          line: 27,
          column: 2
        }
      },
      "6": {
        start: {
          line: 29,
          column: 32
        },
        end: {
          line: 37,
          column: 2
        }
      },
      "7": {
        start: {
          line: 39,
          column: 32
        },
        end: {
          line: 41,
          column: 2
        }
      },
      "8": {
        start: {
          line: 43,
          column: 30
        },
        end: {
          line: 46,
          column: 2
        }
      },
      "9": {
        start: {
          line: 51,
          column: 36
        },
        end: {
          line: 51,
          column: 93
        }
      },
      "10": {
        start: {
          line: 53,
          column: 32
        },
        end: {
          line: 56,
          column: 2
        }
      },
      "11": {
        start: {
          line: 58,
          column: 34
        },
        end: {
          line: 63,
          column: 2
        }
      },
      "12": {
        start: {
          line: 65,
          column: 36
        },
        end: {
          line: 70,
          column: 2
        }
      },
      "13": {
        start: {
          line: 72,
          column: 35
        },
        end: {
          line: 76,
          column: 2
        }
      },
      "14": {
        start: {
          line: 78,
          column: 32
        },
        end: {
          line: 84,
          column: 2
        }
      },
      "15": {
        start: {
          line: 86,
          column: 32
        },
        end: {
          line: 91,
          column: 2
        }
      },
      "16": {
        start: {
          line: 93,
          column: 38
        },
        end: {
          line: 99,
          column: 2
        }
      },
      "17": {
        start: {
          line: 101,
          column: 38
        },
        end: {
          line: 109,
          column: 2
        }
      },
      "18": {
        start: {
          line: 111,
          column: 38
        },
        end: {
          line: 114,
          column: 2
        }
      },
      "19": {
        start: {
          line: 119,
          column: 40
        },
        end: {
          line: 123,
          column: 2
        }
      },
      "20": {
        start: {
          line: 125,
          column: 34
        },
        end: {
          line: 135,
          column: 2
        }
      },
      "21": {
        start: {
          line: 140,
          column: 32
        },
        end: {
          line: 147,
          column: 2
        }
      },
      "22": {
        start: {
          line: 149,
          column: 40
        },
        end: {
          line: 164,
          column: 2
        }
      },
      "23": {
        start: {
          line: 166,
          column: 34
        },
        end: {
          line: 186,
          column: 2
        }
      },
      "24": {
        start: {
          line: 194,
          column: 4
        },
        end: {
          line: 195,
          column: 19
        }
      },
      "25": {
        start: {
          line: 195,
          column: 8
        },
        end: {
          line: 195,
          column: 19
        }
      },
      "26": {
        start: {
          line: 196,
          column: 21
        },
        end: {
          line: 196,
          column: 85
        }
      },
      "27": {
        start: {
          line: 197,
          column: 4
        },
        end: {
          line: 197,
          column: 48
        }
      },
      "28": {
        start: {
          line: 203,
          column: 4
        },
        end: {
          line: 213,
          column: 5
        }
      },
      "29": {
        start: {
          line: 205,
          column: 12
        },
        end: {
          line: 205,
          column: 37
        }
      },
      "30": {
        start: {
          line: 210,
          column: 12
        },
        end: {
          line: 210,
          column: 47
        }
      },
      "31": {
        start: {
          line: 212,
          column: 12
        },
        end: {
          line: 212,
          column: 25
        }
      },
      "32": {
        start: {
          line: 219,
          column: 22
        },
        end: {
          line: 224,
          column: 6
        }
      },
      "33": {
        start: {
          line: 225,
          column: 4
        },
        end: {
          line: 231,
          column: 5
        }
      },
      "34": {
        start: {
          line: 226,
          column: 8
        },
        end: {
          line: 226,
          column: 39
        }
      },
      "35": {
        start: {
          line: 230,
          column: 8
        },
        end: {
          line: 230,
          column: 51
        }
      },
      "36": {
        start: {
          line: 237,
          column: 28
        },
        end: {
          line: 237,
          column: 50
        }
      },
      "37": {
        start: {
          line: 238,
          column: 4
        },
        end: {
          line: 238,
          column: 65
        }
      },
      "38": {
        start: {
          line: 244,
          column: 16
        },
        end: {
          line: 244,
          column: 26
        }
      },
      "39": {
        start: {
          line: 245,
          column: 4
        },
        end: {
          line: 245,
          column: 25
        }
      },
      "40": {
        start: {
          line: 251,
          column: 4
        },
        end: {
          line: 252,
          column: 17
        }
      },
      "41": {
        start: {
          line: 252,
          column: 8
        },
        end: {
          line: 252,
          column: 17
        }
      },
      "42": {
        start: {
          line: 253,
          column: 26
        },
        end: {
          line: 253,
          column: 92
        }
      },
      "43": {
        start: {
          line: 253,
          column: 58
        },
        end: {
          line: 253,
          column: 88
        }
      },
      "44": {
        start: {
          line: 254,
          column: 4
        },
        end: {
          line: 254,
          column: 54
        }
      },
      "45": {
        start: {
          line: 260,
          column: 16
        },
        end: {
          line: 260,
          column: 26
        }
      },
      "46": {
        start: {
          line: 261,
          column: 16
        },
        end: {
          line: 261,
          column: 43
        }
      },
      "47": {
        start: {
          line: 262,
          column: 4
        },
        end: {
          line: 263,
          column: 27
        }
      },
      "48": {
        start: {
          line: 263,
          column: 8
        },
        end: {
          line: 263,
          column: 27
        }
      },
      "49": {
        start: {
          line: 264,
          column: 4
        },
        end: {
          line: 265,
          column: 25
        }
      },
      "50": {
        start: {
          line: 265,
          column: 8
        },
        end: {
          line: 265,
          column: 25
        }
      },
      "51": {
        start: {
          line: 267,
          column: 24
        },
        end: {
          line: 267,
          column: 27
        }
      },
      "52": {
        start: {
          line: 268,
          column: 22
        },
        end: {
          line: 268,
          column: 25
        }
      },
      "53": {
        start: {
          line: 269,
          column: 29
        },
        end: {
          line: 269,
          column: 60
        }
      },
      "54": {
        start: {
          line: 270,
          column: 4
        },
        end: {
          line: 271,
          column: 26
        }
      },
      "55": {
        start: {
          line: 271,
          column: 8
        },
        end: {
          line: 271,
          column: 26
        }
      },
      "56": {
        start: {
          line: 272,
          column: 4
        },
        end: {
          line: 272,
          column: 21
        }
      },
      "57": {
        start: {
          line: 277,
          column: 32
        },
        end: {
          line: 292,
          column: 1
        }
      }
    },
    fnMap: {
      "0": {
        name: "calculateTargetProgress",
        decl: {
          start: {
            line: 193,
            column: 16
          },
          end: {
            line: 193,
            column: 39
          }
        },
        loc: {
          start: {
            line: 193,
            column: 79
          },
          end: {
            line: 198,
            column: 1
          }
        },
        line: 193
      },
      "1": {
        name: "isTargetCompleted",
        decl: {
          start: {
            line: 202,
            column: 16
          },
          end: {
            line: 202,
            column: 33
          }
        },
        loc: {
          start: {
            line: 202,
            column: 67
          },
          end: {
            line: 214,
            column: 1
          }
        },
        line: 202
      },
      "2": {
        name: "formatCurrencyValue",
        decl: {
          start: {
            line: 218,
            column: 16
          },
          end: {
            line: 218,
            column: 35
          }
        },
        loc: {
          start: {
            line: 218,
            column: 57
          },
          end: {
            line: 232,
            column: 1
          }
        },
        line: 218
      },
      "3": {
        name: "formatNumberValue",
        decl: {
          start: {
            line: 236,
            column: 16
          },
          end: {
            line: 236,
            column: 33
          }
        },
        loc: {
          start: {
            line: 236,
            column: 47
          },
          end: {
            line: 239,
            column: 1
          }
        },
        line: 236
      },
      "4": {
        name: "validateGoalDate",
        decl: {
          start: {
            line: 243,
            column: 16
          },
          end: {
            line: 243,
            column: 32
          }
        },
        loc: {
          start: {
            line: 243,
            column: 42
          },
          end: {
            line: 246,
            column: 1
          }
        },
        line: 243
      },
      "5": {
        name: "calculateGoalProgress",
        decl: {
          start: {
            line: 250,
            column: 16
          },
          end: {
            line: 250,
            column: 37
          }
        },
        loc: {
          start: {
            line: 250,
            column: 47
          },
          end: {
            line: 255,
            column: 1
          }
        },
        line: 250
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 253,
            column: 41
          },
          end: {
            line: 253,
            column: 42
          }
        },
        loc: {
          start: {
            line: 253,
            column: 58
          },
          end: {
            line: 253,
            column: 88
          }
        },
        line: 253
      },
      "7": {
        name: "getGoalStatus",
        decl: {
          start: {
            line: 259,
            column: 16
          },
          end: {
            line: 259,
            column: 29
          }
        },
        loc: {
          start: {
            line: 259,
            column: 57
          },
          end: {
            line: 273,
            column: 1
          }
        },
        line: 259
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 194,
            column: 4
          },
          end: {
            line: 195,
            column: 19
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 194,
            column: 4
          },
          end: {
            line: 195,
            column: 19
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 194
      },
      "1": {
        loc: {
          start: {
            line: 203,
            column: 4
          },
          end: {
            line: 213,
            column: 5
          }
        },
        type: "switch",
        locations: [{
          start: {
            line: 204,
            column: 8
          },
          end: {
            line: 205,
            column: 37
          }
        }, {
          start: {
            line: 206,
            column: 8
          },
          end: {
            line: 206,
            column: 22
          }
        }, {
          start: {
            line: 207,
            column: 8
          },
          end: {
            line: 207,
            column: 24
          }
        }, {
          start: {
            line: 208,
            column: 8
          },
          end: {
            line: 208,
            column: 20
          }
        }, {
          start: {
            line: 209,
            column: 8
          },
          end: {
            line: 210,
            column: 47
          }
        }, {
          start: {
            line: 211,
            column: 8
          },
          end: {
            line: 212,
            column: 25
          }
        }],
        line: 203
      },
      "2": {
        loc: {
          start: {
            line: 218,
            column: 43
          },
          end: {
            line: 218,
            column: 55
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 218,
            column: 50
          },
          end: {
            line: 218,
            column: 55
          }
        }],
        line: 218
      },
      "3": {
        loc: {
          start: {
            line: 238,
            column: 11
          },
          end: {
            line: 238,
            column: 64
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 238,
            column: 18
          },
          end: {
            line: 238,
            column: 46
          }
        }, {
          start: {
            line: 238,
            column: 49
          },
          end: {
            line: 238,
            column: 64
          }
        }],
        line: 238
      },
      "4": {
        loc: {
          start: {
            line: 251,
            column: 4
          },
          end: {
            line: 252,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 251,
            column: 4
          },
          end: {
            line: 252,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 251
      },
      "5": {
        loc: {
          start: {
            line: 262,
            column: 4
          },
          end: {
            line: 263,
            column: 27
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 262,
            column: 4
          },
          end: {
            line: 263,
            column: 27
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 262
      },
      "6": {
        loc: {
          start: {
            line: 264,
            column: 4
          },
          end: {
            line: 265,
            column: 25
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 264,
            column: 4
          },
          end: {
            line: 265,
            column: 25
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 264
      },
      "7": {
        loc: {
          start: {
            line: 270,
            column: 4
          },
          end: {
            line: 271,
            column: 26
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 270,
            column: 4
          },
          end: {
            line: 271,
            column: 26
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 270
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0, 0, 0, 0, 0],
      "2": [0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0]
    },
    inputSourceMap: {
      file: "/Users/peterkrzyzek/Development/clickup-mcp-server/src/schemas/goals-schemas.ts",
      mappings: "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",
      names: [],
      sources: ["/Users/peterkrzyzek/Development/clickup-mcp-server/src/schemas/goals-schemas.ts"],
      sourcesContent: ["import { z } from 'zod';\n\n// ========================================\n// GOALS VALIDATION SCHEMAS\n// ========================================\n\n// Team ID validation\nexport const TeamIdSchema = z.string().min(1, 'Team ID is required');\n\n// Goal ID validation\nexport const GoalIdSchema = z.string().min(1, 'Goal ID is required');\n\n// Target ID validation\nexport const TargetIdSchema = z.string().min(1, 'Target ID is required');\n\n// User ID validation\nexport const UserIdSchema = z.number().positive('User ID must be positive');\n\n// ========================================\n// GOAL SCHEMAS\n// ========================================\n\n// Goal color validation (hex color)\nexport const GoalColorSchema = z.string().regex(/^#[0-9A-Fa-f]{6}$/, 'Color must be a valid hex color');\n\n// Create goal schema\nexport const CreateGoalSchema = z.object({\n  team_id: TeamIdSchema,\n  name: z.string().min(1, 'Goal name is required').max(255, 'Goal name too long'),\n  due_date: z.number().positive('Due date must be a positive Unix timestamp'),\n  description: z.string().optional(),\n  multiple_owners: z.boolean().default(false),\n  owners: z.array(UserIdSchema).min(1, 'At least one owner is required'),\n  color: GoalColorSchema.optional().default('#007cff')\n});\n\n// Update goal schema\nexport const UpdateGoalSchema = z.object({\n  goal_id: GoalIdSchema,\n  name: z.string().min(1).max(255).optional(),\n  due_date: z.number().positive().optional(),\n  description: z.string().optional(),\n  rem_owners: z.array(UserIdSchema).optional(),\n  add_owners: z.array(UserIdSchema).optional(),\n  color: GoalColorSchema.optional()\n});\n\n// Delete goal schema\nexport const DeleteGoalSchema = z.object({\n  goal_id: GoalIdSchema\n});\n\n// Get goals schema\nexport const GetGoalsSchema = z.object({\n  team_id: TeamIdSchema,\n  include_completed: z.boolean().optional().default(false)\n});\n\n// ========================================\n// GOAL TARGET SCHEMAS\n// ========================================\n\n// Goal target types\nexport const GoalTargetTypeSchema = z.enum(['number', 'currency', 'boolean', 'task', 'list']);\n\n// Base target schema\nexport const BaseTargetSchema = z.object({\n  name: z.string().min(1, 'Target name is required').max(255, 'Target name too long'),\n  type: GoalTargetTypeSchema\n});\n\n// Number target schema\nexport const NumberTargetSchema = BaseTargetSchema.extend({\n  type: z.literal('number'),\n  target_value: z.number().min(0, 'Target value must be non-negative'),\n  start_value: z.number().optional().default(0),\n  unit: z.string().optional()\n});\n\n// Currency target schema\nexport const CurrencyTargetSchema = BaseTargetSchema.extend({\n  type: z.literal('currency'),\n  target_value: z.number().min(0, 'Target value must be non-negative'),\n  start_value: z.number().optional().default(0),\n  unit: z.string().optional().default('USD')\n});\n\n// Boolean target schema\nexport const BooleanTargetSchema = BaseTargetSchema.extend({\n  type: z.literal('boolean'),\n  target_value: z.literal(1), // Boolean targets are always 1 (true)\n  start_value: z.literal(0).optional().default(0)\n});\n\n// Task target schema\nexport const TaskTargetSchema = BaseTargetSchema.extend({\n  type: z.literal('task'),\n  target_value: z.number().min(1, 'Target value must be at least 1'),\n  start_value: z.number().optional().default(0),\n  task_statuses: z.array(z.string()).optional(),\n  list_ids: z.array(z.string()).optional()\n});\n\n// List target schema\nexport const ListTargetSchema = BaseTargetSchema.extend({\n  type: z.literal('list'),\n  target_value: z.number().min(1, 'Target value must be at least 1'),\n  start_value: z.number().optional().default(0),\n  list_ids: z.array(z.string()).min(1, 'At least one list ID is required')\n});\n\n// Union schema for all target types\nexport const CreateGoalTargetSchema = z.discriminatedUnion('type', [\n  NumberTargetSchema,\n  CurrencyTargetSchema,\n  BooleanTargetSchema,\n  TaskTargetSchema,\n  ListTargetSchema\n]);\n\n// Update target schema\nexport const UpdateGoalTargetSchema = z.object({\n  goal_id: GoalIdSchema,\n  target_id: TargetIdSchema,\n  name: z.string().min(1).max(255).optional(),\n  target_value: z.number().min(0).optional(),\n  unit: z.string().optional(),\n  task_statuses: z.array(z.string()).optional(),\n  list_ids: z.array(z.string()).optional()\n});\n\n// Delete target schema\nexport const DeleteGoalTargetSchema = z.object({\n  goal_id: GoalIdSchema,\n  target_id: TargetIdSchema\n});\n\n// ========================================\n// GOAL PROGRESS SCHEMAS\n// ========================================\n\n// Progress update schema\nexport const UpdateGoalProgressSchema = z.object({\n  goal_id: GoalIdSchema,\n  target_id: TargetIdSchema,\n  current_value: z.number().min(0, 'Current value must be non-negative')\n});\n\n// Progress calculation schema\nexport const GoalProgressSchema = z.object({\n  target_id: z.string(),\n  name: z.string(),\n  type: GoalTargetTypeSchema,\n  start_value: z.number(),\n  target_value: z.number(),\n  current_value: z.number(),\n  percent_completed: z.number().min(0).max(100),\n  completed: z.boolean(),\n  unit: z.string().nullable()\n});\n\n// ========================================\n// RESPONSE TYPE SCHEMAS\n// ========================================\n\n// Goal member schema\nexport const GoalMemberSchema = z.object({\n  id: z.number(),\n  username: z.string(),\n  email: z.string(),\n  color: z.string(),\n  initials: z.string(),\n  profilePicture: z.string()\n});\n\n// Goal target response schema\nexport const GoalTargetResponseSchema = z.object({\n  id: z.string(),\n  goal_id: z.string(),\n  name: z.string(),\n  creator: z.number(),\n  type: GoalTargetTypeSchema,\n  date_created: z.string(),\n  start_value: z.number(),\n  target_value: z.number(),\n  current_value: z.number(),\n  unit: z.string().nullable(),\n  task_statuses: z.array(z.string()).nullable(),\n  list_ids: z.array(z.string()).nullable(),\n  completed: z.boolean(),\n  percent_completed: z.number()\n});\n\n// Goal response schema\nexport const GoalResponseSchema = z.object({\n  id: z.string(),\n  name: z.string(),\n  team_id: z.string(),\n  date_created: z.string(),\n  start_date: z.string().nullable(),\n  due_date: z.string(),\n  description: z.string(),\n  private: z.boolean(),\n  archived: z.boolean(),\n  creator: z.number(),\n  color: z.string(),\n  pretty_id: z.string(),\n  multiple_owners: z.boolean(),\n  folder_id: z.string().nullable(),\n  members: z.array(GoalMemberSchema),\n  owners: z.array(GoalMemberSchema),\n  key_results: z.array(GoalTargetResponseSchema),\n  percent_completed: z.number(),\n  pretty_url: z.string()\n});\n\n// ========================================\n// UTILITY FUNCTIONS\n// ========================================\n\n/**\n * Calculate progress percentage for a target\n */\nexport function calculateTargetProgress(startValue: number, currentValue: number, targetValue: number): number {\n  if (targetValue === startValue) return 100; // Avoid division by zero\n  \n  const progress = ((currentValue - startValue) / (targetValue - startValue)) * 100;\n  return Math.min(Math.max(progress, 0), 100); // Clamp between 0 and 100\n}\n\n/**\n * Check if a target is completed\n */\nexport function isTargetCompleted(currentValue: number, targetValue: number, type: string): boolean {\n  switch (type) {\n    case 'boolean':\n      return currentValue >= 1;\n    case 'number':\n    case 'currency':\n    case 'task':\n    case 'list':\n      return currentValue >= targetValue;\n    default:\n      return false;\n  }\n}\n\n/**\n * Format currency value with unit\n */\nexport function formatCurrencyValue(value: number, unit: string = 'USD'): string {\n  const formatter = new Intl.NumberFormat('en-US', {\n    style: 'currency',\n    currency: unit.toUpperCase(),\n    minimumFractionDigits: 0,\n    maximumFractionDigits: 2\n  });\n  \n  try {\n    return formatter.format(value);\n  } catch (error) {\n    // Fallback for invalid currency codes\n    return `${unit} ${value.toLocaleString()}`;\n  }\n}\n\n/**\n * Format number value with unit\n */\nexport function formatNumberValue(value: number, unit?: string): string {\n  const formattedNumber = value.toLocaleString();\n  return unit ? `${formattedNumber} ${unit}` : formattedNumber;\n}\n\n/**\n * Validate goal date (must be in the future)\n */\nexport function validateGoalDate(dueDate: number): boolean {\n  const now = Date.now();\n  return dueDate > now;\n}\n\n/**\n * Calculate overall goal progress from targets\n */\nexport function calculateGoalProgress(targets: Array<{\n  id: string;\n  percent_completed: number;\n}>): number {\n  if (targets.length === 0) return 0;\n  \n  const totalProgress = targets.reduce((sum, target) => sum + target.percent_completed, 0);\n  return Math.round(totalProgress / targets.length);\n}\n\n/**\n * Get goal status based on progress and due date\n */\nexport function getGoalStatus(percentCompleted: number, dueDate: string): 'completed' | 'on_track' | 'at_risk' | 'overdue' {\n  const now = Date.now();\n  const due = new Date(dueDate).getTime();\n  \n  if (percentCompleted >= 100) return 'completed';\n  if (now > due) return 'overdue';\n  \n  // Calculate if on track (simple heuristic: progress should match time elapsed)\n  const timeElapsed = now;\n  const totalTime = due;\n  const expectedProgress = (timeElapsed / totalTime) * 100;\n  \n  if (percentCompleted >= expectedProgress * 0.8) return 'on_track';\n  return 'at_risk';\n}\n\n// ========================================\n// COMBINED TOOL SCHEMAS\n// ========================================\n\nexport const GoalsToolSchemas = {\n  // Goal operations\n  getGoals: GetGoalsSchema,\n  createGoal: CreateGoalSchema,\n  updateGoal: UpdateGoalSchema,\n  deleteGoal: DeleteGoalSchema,\n\n  // Target operations\n  createGoalTarget: z.object({\n    goal_id: GoalIdSchema,\n    target: CreateGoalTargetSchema\n  }),\n  updateGoalTarget: UpdateGoalTargetSchema,\n  deleteGoalTarget: DeleteGoalTargetSchema,\n\n  // Progress operations\n  updateGoalProgress: UpdateGoalProgressSchema\n};\n"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "111b0561eb47e75afe5fa372675ec9a1cc8625fc"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_kdgclanos = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_kdgclanos();
import { z } from 'zod';
// ========================================
// GOALS VALIDATION SCHEMAS
// ========================================
// Team ID validation
export const TeamIdSchema =
/* istanbul ignore next */
(cov_kdgclanos().s[0]++, z.string().min(1, 'Team ID is required'));
// Goal ID validation
export const GoalIdSchema =
/* istanbul ignore next */
(cov_kdgclanos().s[1]++, z.string().min(1, 'Goal ID is required'));
// Target ID validation
export const TargetIdSchema =
/* istanbul ignore next */
(cov_kdgclanos().s[2]++, z.string().min(1, 'Target ID is required'));
// User ID validation
export const UserIdSchema =
/* istanbul ignore next */
(cov_kdgclanos().s[3]++, z.number().positive('User ID must be positive'));
// ========================================
// GOAL SCHEMAS
// ========================================
// Goal color validation (hex color)
export const GoalColorSchema =
/* istanbul ignore next */
(cov_kdgclanos().s[4]++, z.string().regex(/^#[0-9A-Fa-f]{6}$/, 'Color must be a valid hex color'));
// Create goal schema
export const CreateGoalSchema =
/* istanbul ignore next */
(cov_kdgclanos().s[5]++, z.object({
  team_id: TeamIdSchema,
  name: z.string().min(1, 'Goal name is required').max(255, 'Goal name too long'),
  due_date: z.number().positive('Due date must be a positive Unix timestamp'),
  description: z.string().optional(),
  multiple_owners: z.boolean().default(false),
  owners: z.array(UserIdSchema).min(1, 'At least one owner is required'),
  color: GoalColorSchema.optional().default('#007cff')
}));
// Update goal schema
export const UpdateGoalSchema =
/* istanbul ignore next */
(cov_kdgclanos().s[6]++, z.object({
  goal_id: GoalIdSchema,
  name: z.string().min(1).max(255).optional(),
  due_date: z.number().positive().optional(),
  description: z.string().optional(),
  rem_owners: z.array(UserIdSchema).optional(),
  add_owners: z.array(UserIdSchema).optional(),
  color: GoalColorSchema.optional()
}));
// Delete goal schema
export const DeleteGoalSchema =
/* istanbul ignore next */
(cov_kdgclanos().s[7]++, z.object({
  goal_id: GoalIdSchema
}));
// Get goals schema
export const GetGoalsSchema =
/* istanbul ignore next */
(cov_kdgclanos().s[8]++, z.object({
  team_id: TeamIdSchema,
  include_completed: z.boolean().optional().default(false)
}));
// ========================================
// GOAL TARGET SCHEMAS
// ========================================
// Goal target types
export const GoalTargetTypeSchema =
/* istanbul ignore next */
(cov_kdgclanos().s[9]++, z.enum(['number', 'currency', 'boolean', 'task', 'list']));
// Base target schema
export const BaseTargetSchema =
/* istanbul ignore next */
(cov_kdgclanos().s[10]++, z.object({
  name: z.string().min(1, 'Target name is required').max(255, 'Target name too long'),
  type: GoalTargetTypeSchema
}));
// Number target schema
export const NumberTargetSchema =
/* istanbul ignore next */
(cov_kdgclanos().s[11]++, BaseTargetSchema.extend({
  type: z.literal('number'),
  target_value: z.number().min(0, 'Target value must be non-negative'),
  start_value: z.number().optional().default(0),
  unit: z.string().optional()
}));
// Currency target schema
export const CurrencyTargetSchema =
/* istanbul ignore next */
(cov_kdgclanos().s[12]++, BaseTargetSchema.extend({
  type: z.literal('currency'),
  target_value: z.number().min(0, 'Target value must be non-negative'),
  start_value: z.number().optional().default(0),
  unit: z.string().optional().default('USD')
}));
// Boolean target schema
export const BooleanTargetSchema =
/* istanbul ignore next */
(cov_kdgclanos().s[13]++, BaseTargetSchema.extend({
  type: z.literal('boolean'),
  target_value: z.literal(1),
  // Boolean targets are always 1 (true)
  start_value: z.literal(0).optional().default(0)
}));
// Task target schema
export const TaskTargetSchema =
/* istanbul ignore next */
(cov_kdgclanos().s[14]++, BaseTargetSchema.extend({
  type: z.literal('task'),
  target_value: z.number().min(1, 'Target value must be at least 1'),
  start_value: z.number().optional().default(0),
  task_statuses: z.array(z.string()).optional(),
  list_ids: z.array(z.string()).optional()
}));
// List target schema
export const ListTargetSchema =
/* istanbul ignore next */
(cov_kdgclanos().s[15]++, BaseTargetSchema.extend({
  type: z.literal('list'),
  target_value: z.number().min(1, 'Target value must be at least 1'),
  start_value: z.number().optional().default(0),
  list_ids: z.array(z.string()).min(1, 'At least one list ID is required')
}));
// Union schema for all target types
export const CreateGoalTargetSchema =
/* istanbul ignore next */
(cov_kdgclanos().s[16]++, z.discriminatedUnion('type', [NumberTargetSchema, CurrencyTargetSchema, BooleanTargetSchema, TaskTargetSchema, ListTargetSchema]));
// Update target schema
export const UpdateGoalTargetSchema =
/* istanbul ignore next */
(cov_kdgclanos().s[17]++, z.object({
  goal_id: GoalIdSchema,
  target_id: TargetIdSchema,
  name: z.string().min(1).max(255).optional(),
  target_value: z.number().min(0).optional(),
  unit: z.string().optional(),
  task_statuses: z.array(z.string()).optional(),
  list_ids: z.array(z.string()).optional()
}));
// Delete target schema
export const DeleteGoalTargetSchema =
/* istanbul ignore next */
(cov_kdgclanos().s[18]++, z.object({
  goal_id: GoalIdSchema,
  target_id: TargetIdSchema
}));
// ========================================
// GOAL PROGRESS SCHEMAS
// ========================================
// Progress update schema
export const UpdateGoalProgressSchema =
/* istanbul ignore next */
(cov_kdgclanos().s[19]++, z.object({
  goal_id: GoalIdSchema,
  target_id: TargetIdSchema,
  current_value: z.number().min(0, 'Current value must be non-negative')
}));
// Progress calculation schema
export const GoalProgressSchema =
/* istanbul ignore next */
(cov_kdgclanos().s[20]++, z.object({
  target_id: z.string(),
  name: z.string(),
  type: GoalTargetTypeSchema,
  start_value: z.number(),
  target_value: z.number(),
  current_value: z.number(),
  percent_completed: z.number().min(0).max(100),
  completed: z.boolean(),
  unit: z.string().nullable()
}));
// ========================================
// RESPONSE TYPE SCHEMAS
// ========================================
// Goal member schema
export const GoalMemberSchema =
/* istanbul ignore next */
(cov_kdgclanos().s[21]++, z.object({
  id: z.number(),
  username: z.string(),
  email: z.string(),
  color: z.string(),
  initials: z.string(),
  profilePicture: z.string()
}));
// Goal target response schema
export const GoalTargetResponseSchema =
/* istanbul ignore next */
(cov_kdgclanos().s[22]++, z.object({
  id: z.string(),
  goal_id: z.string(),
  name: z.string(),
  creator: z.number(),
  type: GoalTargetTypeSchema,
  date_created: z.string(),
  start_value: z.number(),
  target_value: z.number(),
  current_value: z.number(),
  unit: z.string().nullable(),
  task_statuses: z.array(z.string()).nullable(),
  list_ids: z.array(z.string()).nullable(),
  completed: z.boolean(),
  percent_completed: z.number()
}));
// Goal response schema
export const GoalResponseSchema =
/* istanbul ignore next */
(cov_kdgclanos().s[23]++, z.object({
  id: z.string(),
  name: z.string(),
  team_id: z.string(),
  date_created: z.string(),
  start_date: z.string().nullable(),
  due_date: z.string(),
  description: z.string(),
  private: z.boolean(),
  archived: z.boolean(),
  creator: z.number(),
  color: z.string(),
  pretty_id: z.string(),
  multiple_owners: z.boolean(),
  folder_id: z.string().nullable(),
  members: z.array(GoalMemberSchema),
  owners: z.array(GoalMemberSchema),
  key_results: z.array(GoalTargetResponseSchema),
  percent_completed: z.number(),
  pretty_url: z.string()
}));
// ========================================
// UTILITY FUNCTIONS
// ========================================
/**
 * Calculate progress percentage for a target
 */
export function calculateTargetProgress(startValue, currentValue, targetValue) {
  /* istanbul ignore next */
  cov_kdgclanos().f[0]++;
  cov_kdgclanos().s[24]++;
  if (targetValue === startValue) {
    /* istanbul ignore next */
    cov_kdgclanos().b[0][0]++;
    cov_kdgclanos().s[25]++;
    return 100;
  } else
  /* istanbul ignore next */
  {
    cov_kdgclanos().b[0][1]++;
  } // Avoid division by zero
  const progress =
  /* istanbul ignore next */
  (cov_kdgclanos().s[26]++, (currentValue - startValue) / (targetValue - startValue) * 100);
  /* istanbul ignore next */
  cov_kdgclanos().s[27]++;
  return Math.min(Math.max(progress, 0), 100); // Clamp between 0 and 100
}
/**
 * Check if a target is completed
 */
export function isTargetCompleted(currentValue, targetValue, type) {
  /* istanbul ignore next */
  cov_kdgclanos().f[1]++;
  cov_kdgclanos().s[28]++;
  switch (type) {
    case 'boolean':
      /* istanbul ignore next */
      cov_kdgclanos().b[1][0]++;
      cov_kdgclanos().s[29]++;
      return currentValue >= 1;
    case 'number':
      /* istanbul ignore next */
      cov_kdgclanos().b[1][1]++;
    case 'currency':
      /* istanbul ignore next */
      cov_kdgclanos().b[1][2]++;
    case 'task':
      /* istanbul ignore next */
      cov_kdgclanos().b[1][3]++;
    case 'list':
      /* istanbul ignore next */
      cov_kdgclanos().b[1][4]++;
      cov_kdgclanos().s[30]++;
      return currentValue >= targetValue;
    default:
      /* istanbul ignore next */
      cov_kdgclanos().b[1][5]++;
      cov_kdgclanos().s[31]++;
      return false;
  }
}
/**
 * Format currency value with unit
 */
export function formatCurrencyValue(value, unit =
/* istanbul ignore next */
(cov_kdgclanos().b[2][0]++, 'USD')) {
  /* istanbul ignore next */
  cov_kdgclanos().f[2]++;
  const formatter =
  /* istanbul ignore next */
  (cov_kdgclanos().s[32]++, new Intl.NumberFormat('en-US', {
    style: 'currency',
    currency: unit.toUpperCase(),
    minimumFractionDigits: 0,
    maximumFractionDigits: 2
  }));
  /* istanbul ignore next */
  cov_kdgclanos().s[33]++;
  try {
    /* istanbul ignore next */
    cov_kdgclanos().s[34]++;
    return formatter.format(value);
  } catch (error) {
    /* istanbul ignore next */
    cov_kdgclanos().s[35]++;
    // Fallback for invalid currency codes
    return `${unit} ${value.toLocaleString()}`;
  }
}
/**
 * Format number value with unit
 */
export function formatNumberValue(value, unit) {
  /* istanbul ignore next */
  cov_kdgclanos().f[3]++;
  const formattedNumber =
  /* istanbul ignore next */
  (cov_kdgclanos().s[36]++, value.toLocaleString());
  /* istanbul ignore next */
  cov_kdgclanos().s[37]++;
  return unit ?
  /* istanbul ignore next */
  (cov_kdgclanos().b[3][0]++, `${formattedNumber} ${unit}`) :
  /* istanbul ignore next */
  (cov_kdgclanos().b[3][1]++, formattedNumber);
}
/**
 * Validate goal date (must be in the future)
 */
export function validateGoalDate(dueDate) {
  /* istanbul ignore next */
  cov_kdgclanos().f[4]++;
  const now =
  /* istanbul ignore next */
  (cov_kdgclanos().s[38]++, Date.now());
  /* istanbul ignore next */
  cov_kdgclanos().s[39]++;
  return dueDate > now;
}
/**
 * Calculate overall goal progress from targets
 */
export function calculateGoalProgress(targets) {
  /* istanbul ignore next */
  cov_kdgclanos().f[5]++;
  cov_kdgclanos().s[40]++;
  if (targets.length === 0) {
    /* istanbul ignore next */
    cov_kdgclanos().b[4][0]++;
    cov_kdgclanos().s[41]++;
    return 0;
  } else
  /* istanbul ignore next */
  {
    cov_kdgclanos().b[4][1]++;
  }
  const totalProgress =
  /* istanbul ignore next */
  (cov_kdgclanos().s[42]++, targets.reduce((sum, target) => {
    /* istanbul ignore next */
    cov_kdgclanos().f[6]++;
    cov_kdgclanos().s[43]++;
    return sum + target.percent_completed;
  }, 0));
  /* istanbul ignore next */
  cov_kdgclanos().s[44]++;
  return Math.round(totalProgress / targets.length);
}
/**
 * Get goal status based on progress and due date
 */
export function getGoalStatus(percentCompleted, dueDate) {
  /* istanbul ignore next */
  cov_kdgclanos().f[7]++;
  const now =
  /* istanbul ignore next */
  (cov_kdgclanos().s[45]++, Date.now());
  const due =
  /* istanbul ignore next */
  (cov_kdgclanos().s[46]++, new Date(dueDate).getTime());
  /* istanbul ignore next */
  cov_kdgclanos().s[47]++;
  if (percentCompleted >= 100) {
    /* istanbul ignore next */
    cov_kdgclanos().b[5][0]++;
    cov_kdgclanos().s[48]++;
    return 'completed';
  } else
  /* istanbul ignore next */
  {
    cov_kdgclanos().b[5][1]++;
  }
  cov_kdgclanos().s[49]++;
  if (now > due) {
    /* istanbul ignore next */
    cov_kdgclanos().b[6][0]++;
    cov_kdgclanos().s[50]++;
    return 'overdue';
  } else
  /* istanbul ignore next */
  {
    cov_kdgclanos().b[6][1]++;
  }
  // Calculate if on track (simple heuristic: progress should match time elapsed)
  const timeElapsed =
  /* istanbul ignore next */
  (cov_kdgclanos().s[51]++, now);
  const totalTime =
  /* istanbul ignore next */
  (cov_kdgclanos().s[52]++, due);
  const expectedProgress =
  /* istanbul ignore next */
  (cov_kdgclanos().s[53]++, timeElapsed / totalTime * 100);
  /* istanbul ignore next */
  cov_kdgclanos().s[54]++;
  if (percentCompleted >= expectedProgress * 0.8) {
    /* istanbul ignore next */
    cov_kdgclanos().b[7][0]++;
    cov_kdgclanos().s[55]++;
    return 'on_track';
  } else
  /* istanbul ignore next */
  {
    cov_kdgclanos().b[7][1]++;
  }
  cov_kdgclanos().s[56]++;
  return 'at_risk';
}
// ========================================
// COMBINED TOOL SCHEMAS
// ========================================
export const GoalsToolSchemas =
/* istanbul ignore next */
(cov_kdgclanos().s[57]++, {
  // Goal operations
  getGoals: GetGoalsSchema,
  createGoal: CreateGoalSchema,
  updateGoal: UpdateGoalSchema,
  deleteGoal: DeleteGoalSchema,
  // Target operations
  createGoalTarget: z.object({
    goal_id: GoalIdSchema,
    target: CreateGoalTargetSchema
  }),
  updateGoalTarget: UpdateGoalTargetSchema,
  deleteGoalTarget: DeleteGoalTargetSchema,
  // Progress operations
  updateGoalProgress: UpdateGoalProgressSchema
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
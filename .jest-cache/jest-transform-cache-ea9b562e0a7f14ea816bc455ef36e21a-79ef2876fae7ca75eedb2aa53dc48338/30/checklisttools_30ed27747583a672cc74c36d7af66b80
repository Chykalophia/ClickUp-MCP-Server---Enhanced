e6057ede1940e8840aa12fd6bb1bd132
/* istanbul ignore next */
function cov_291caxep2r() {
  var path = "/Users/peterkrzyzek/Development/clickup-mcp-server/src/tools/checklist-tools.ts";
  var hash = "1cb746232bc3abfa8582c5da1346def935a25e96";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/peterkrzyzek/Development/clickup-mcp-server/src/tools/checklist-tools.ts",
    statementMap: {
      "0": {
        start: {
          line: 5,
          column: 22
        },
        end: {
          line: 5,
          column: 43
        }
      },
      "1": {
        start: {
          line: 6,
          column: 25
        },
        end: {
          line: 6,
          column: 62
        }
      },
      "2": {
        start: {
          line: 9,
          column: 4
        },
        end: {
          line: 26,
          column: 7
        }
      },
      "3": {
        start: {
          line: 13,
          column: 8
        },
        end: {
          line: 25,
          column: 9
        }
      },
      "4": {
        start: {
          line: 14,
          column: 30
        },
        end: {
          line: 14,
          column: 87
        }
      },
      "5": {
        start: {
          line: 15,
          column: 12
        },
        end: {
          line: 17,
          column: 14
        }
      },
      "6": {
        start: {
          line: 20,
          column: 12
        },
        end: {
          line: 20,
          column: 62
        }
      },
      "7": {
        start: {
          line: 21,
          column: 12
        },
        end: {
          line: 24,
          column: 14
        }
      },
      "8": {
        start: {
          line: 28,
          column: 4
        },
        end: {
          line: 45,
          column: 7
        }
      },
      "9": {
        start: {
          line: 32,
          column: 8
        },
        end: {
          line: 44,
          column: 9
        }
      },
      "10": {
        start: {
          line: 33,
          column: 30
        },
        end: {
          line: 33,
          column: 92
        }
      },
      "11": {
        start: {
          line: 34,
          column: 12
        },
        end: {
          line: 36,
          column: 14
        }
      },
      "12": {
        start: {
          line: 39,
          column: 12
        },
        end: {
          line: 39,
          column: 62
        }
      },
      "13": {
        start: {
          line: 40,
          column: 12
        },
        end: {
          line: 43,
          column: 14
        }
      },
      "14": {
        start: {
          line: 47,
          column: 4
        },
        end: {
          line: 63,
          column: 7
        }
      },
      "15": {
        start: {
          line: 50,
          column: 8
        },
        end: {
          line: 62,
          column: 9
        }
      },
      "16": {
        start: {
          line: 51,
          column: 27
        },
        end: {
          line: 51,
          column: 79
        }
      },
      "17": {
        start: {
          line: 52,
          column: 12
        },
        end: {
          line: 54,
          column: 14
        }
      },
      "18": {
        start: {
          line: 57,
          column: 12
        },
        end: {
          line: 57,
          column: 62
        }
      },
      "19": {
        start: {
          line: 58,
          column: 12
        },
        end: {
          line: 61,
          column: 14
        }
      },
      "20": {
        start: {
          line: 65,
          column: 4
        },
        end: {
          line: 89,
          column: 7
        }
      },
      "21": {
        start: {
          line: 71,
          column: 8
        },
        end: {
          line: 88,
          column: 9
        }
      },
      "22": {
        start: {
          line: 72,
          column: 31
        },
        end: {
          line: 72,
          column: 39
        }
      },
      "23": {
        start: {
          line: 73,
          column: 12
        },
        end: {
          line: 74,
          column: 47
        }
      },
      "24": {
        start: {
          line: 74,
          column: 16
        },
        end: {
          line: 74,
          column: 47
        }
      },
      "25": {
        start: {
          line: 75,
          column: 12
        },
        end: {
          line: 76,
          column: 47
        }
      },
      "26": {
        start: {
          line: 76,
          column: 16
        },
        end: {
          line: 76,
          column: 47
        }
      },
      "27": {
        start: {
          line: 77,
          column: 34
        },
        end: {
          line: 77,
          column: 102
        }
      },
      "28": {
        start: {
          line: 78,
          column: 12
        },
        end: {
          line: 80,
          column: 14
        }
      },
      "29": {
        start: {
          line: 83,
          column: 12
        },
        end: {
          line: 83,
          column: 67
        }
      },
      "30": {
        start: {
          line: 84,
          column: 12
        },
        end: {
          line: 87,
          column: 14
        }
      },
      "31": {
        start: {
          line: 91,
          column: 4
        },
        end: {
          line: 118,
          column: 7
        }
      },
      "32": {
        start: {
          line: 98,
          column: 8
        },
        end: {
          line: 117,
          column: 9
        }
      },
      "33": {
        start: {
          line: 99,
          column: 31
        },
        end: {
          line: 99,
          column: 33
        }
      },
      "34": {
        start: {
          line: 100,
          column: 12
        },
        end: {
          line: 101,
          column: 39
        }
      },
      "35": {
        start: {
          line: 101,
          column: 16
        },
        end: {
          line: 101,
          column: 39
        }
      },
      "36": {
        start: {
          line: 102,
          column: 12
        },
        end: {
          line: 103,
          column: 47
        }
      },
      "37": {
        start: {
          line: 103,
          column: 16
        },
        end: {
          line: 103,
          column: 47
        }
      },
      "38": {
        start: {
          line: 104,
          column: 12
        },
        end: {
          line: 105,
          column: 47
        }
      },
      "39": {
        start: {
          line: 105,
          column: 16
        },
        end: {
          line: 105,
          column: 47
        }
      },
      "40": {
        start: {
          line: 106,
          column: 34
        },
        end: {
          line: 106,
          column: 121
        }
      },
      "41": {
        start: {
          line: 107,
          column: 12
        },
        end: {
          line: 109,
          column: 14
        }
      },
      "42": {
        start: {
          line: 112,
          column: 12
        },
        end: {
          line: 112,
          column: 67
        }
      },
      "43": {
        start: {
          line: 113,
          column: 12
        },
        end: {
          line: 116,
          column: 14
        }
      },
      "44": {
        start: {
          line: 120,
          column: 4
        },
        end: {
          line: 137,
          column: 7
        }
      },
      "45": {
        start: {
          line: 124,
          column: 8
        },
        end: {
          line: 136,
          column: 9
        }
      },
      "46": {
        start: {
          line: 125,
          column: 27
        },
        end: {
          line: 125,
          column: 102
        }
      },
      "47": {
        start: {
          line: 126,
          column: 12
        },
        end: {
          line: 128,
          column: 14
        }
      },
      "48": {
        start: {
          line: 131,
          column: 12
        },
        end: {
          line: 131,
          column: 67
        }
      },
      "49": {
        start: {
          line: 132,
          column: 12
        },
        end: {
          line: 135,
          column: 14
        }
      }
    },
    fnMap: {
      "0": {
        name: "setupChecklistTools",
        decl: {
          start: {
            line: 7,
            column: 16
          },
          end: {
            line: 7,
            column: 35
          }
        },
        loc: {
          start: {
            line: 7,
            column: 44
          },
          end: {
            line: 138,
            column: 1
          }
        },
        line: 7
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 12,
            column: 7
          },
          end: {
            line: 12,
            column: 8
          }
        },
        loc: {
          start: {
            line: 12,
            column: 36
          },
          end: {
            line: 26,
            column: 5
          }
        },
        line: 12
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 31,
            column: 7
          },
          end: {
            line: 31,
            column: 8
          }
        },
        loc: {
          start: {
            line: 31,
            column: 41
          },
          end: {
            line: 45,
            column: 5
          }
        },
        line: 31
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 49,
            column: 7
          },
          end: {
            line: 49,
            column: 8
          }
        },
        loc: {
          start: {
            line: 49,
            column: 35
          },
          end: {
            line: 63,
            column: 5
          }
        },
        line: 49
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 70,
            column: 7
          },
          end: {
            line: 70,
            column: 8
          }
        },
        loc: {
          start: {
            line: 70,
            column: 61
          },
          end: {
            line: 89,
            column: 5
          }
        },
        line: 70
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 97,
            column: 7
          },
          end: {
            line: 97,
            column: 8
          }
        },
        loc: {
          start: {
            line: 97,
            column: 80
          },
          end: {
            line: 118,
            column: 5
          }
        },
        line: 97
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 123,
            column: 7
          },
          end: {
            line: 123,
            column: 8
          }
        },
        loc: {
          start: {
            line: 123,
            column: 54
          },
          end: {
            line: 137,
            column: 5
          }
        },
        line: 123
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 73,
            column: 12
          },
          end: {
            line: 74,
            column: 47
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 73,
            column: 12
          },
          end: {
            line: 74,
            column: 47
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 73
      },
      "1": {
        loc: {
          start: {
            line: 75,
            column: 12
          },
          end: {
            line: 76,
            column: 47
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 75,
            column: 12
          },
          end: {
            line: 76,
            column: 47
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 75
      },
      "2": {
        loc: {
          start: {
            line: 100,
            column: 12
          },
          end: {
            line: 101,
            column: 39
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 100,
            column: 12
          },
          end: {
            line: 101,
            column: 39
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 100
      },
      "3": {
        loc: {
          start: {
            line: 102,
            column: 12
          },
          end: {
            line: 103,
            column: 47
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 102,
            column: 12
          },
          end: {
            line: 103,
            column: 47
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 102
      },
      "4": {
        loc: {
          start: {
            line: 104,
            column: 12
          },
          end: {
            line: 105,
            column: 47
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 104,
            column: 12
          },
          end: {
            line: 105,
            column: 47
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 104
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0]
    },
    inputSourceMap: {
      file: "/Users/peterkrzyzek/Development/clickup-mcp-server/src/tools/checklist-tools.ts",
      mappings: "AACA,OAAO,EAAE,CAAC,EAAE,MAAM,KAAK,CAAC;AACxB,OAAO,EAAE,mBAAmB,EAAE,MAAM,4BAA4B,CAAC;AACjE,OAAO,EAAE,sBAAsB,EAAsG,MAAM,iCAAiC,CAAC;AAE7K,iBAAiB;AACjB,MAAM,aAAa,GAAG,mBAAmB,EAAE,CAAC;AAC5C,MAAM,gBAAgB,GAAG,sBAAsB,CAAC,aAAa,CAAC,CAAC;AAE/D,MAAM,UAAU,mBAAmB,CAAC,MAAiB;IACnD,iCAAiC;IACjC,MAAM,CAAC,IAAI,CACT,kBAAkB,EAClB,kFAAkF,EAClF;QACE,OAAO,EAAE,CAAC,CAAC,MAAM,EAAE,CAAC,QAAQ,CAAC,+CAA+C,CAAC;QAC7E,IAAI,EAAE,CAAC,CAAC,MAAM,EAAE,CAAC,QAAQ,CAAC,2BAA2B,CAAC;KACvD,EACD,KAAK,EAAE,EAAE,OAAO,EAAE,IAAI,EAAE,EAAE,EAAE;QAC1B,IAAI,CAAC;YACH,MAAM,SAAS,GAAG,MAAM,gBAAgB,CAAC,eAAe,CAAC,OAAO,EAAE,EAAE,IAAI,EAA2B,CAAC,CAAC;YAErG,OAAO;gBACL,OAAO,EAAE,CAAC,EAAE,IAAI,EAAE,MAAM,EAAE,IAAI,EAAE,IAAI,CAAC,SAAS,CAAC,SAAS,EAAE,IAAI,EAAE,CAAC,CAAC,EAAE,CAAC;aACtE,CAAC;QACJ,CAAC;QAAC,OAAO,KAAU,EAAE,CAAC;YACpB,OAAO,CAAC,KAAK,CAAC,2BAA2B,EAAE,KAAK,CAAC,CAAC;YAClD,OAAO;gBACL,OAAO,EAAE,CAAC,EAAE,IAAI,EAAE,MAAM,EAAE,IAAI,EAAE,6BAA6B,KAAK,CAAC,OAAO,EAAE,EAAE,CAAC;gBAC/E,OAAO,EAAE,IAAI;aACd,CAAC;QACJ,CAAC;IACH,CAAC,CACF,CAAC;IAEF,iCAAiC;IACjC,MAAM,CAAC,IAAI,CACT,kBAAkB,EAClB,+CAA+C,EAC/C;QACE,YAAY,EAAE,CAAC,CAAC,MAAM,EAAE,CAAC,QAAQ,CAAC,mCAAmC,CAAC;QACtE,IAAI,EAAE,CAAC,CAAC,MAAM,EAAE,CAAC,QAAQ,CAAC,+BAA+B,CAAC;KAC3D,EACD,KAAK,EAAE,EAAE,YAAY,EAAE,IAAI,EAAE,EAAE,EAAE;QAC/B,IAAI,CAAC;YACH,MAAM,SAAS,GAAG,MAAM,gBAAgB,CAAC,eAAe,CAAC,YAAY,EAAE,EAAE,IAAI,EAAE,CAAC,CAAC;YAEjF,OAAO;gBACL,OAAO,EAAE,CAAC,EAAE,IAAI,EAAE,MAAM,EAAE,IAAI,EAAE,IAAI,CAAC,SAAS,CAAC,SAAS,EAAE,IAAI,EAAE,CAAC,CAAC,EAAE,CAAC;aACtE,CAAC;QACJ,CAAC;QAAC,OAAO,KAAU,EAAE,CAAC;YACpB,OAAO,CAAC,KAAK,CAAC,2BAA2B,EAAE,KAAK,CAAC,CAAC;YAClD,OAAO;gBACL,OAAO,EAAE,CAAC,EAAE,IAAI,EAAE,MAAM,EAAE,IAAI,EAAE,6BAA6B,KAAK,CAAC,OAAO,EAAE,EAAE,CAAC;gBAC/E,OAAO,EAAE,IAAI;aACd,CAAC;QACJ,CAAC;IACH,CAAC,CACF,CAAC;IAEF,iCAAiC;IACjC,MAAM,CAAC,IAAI,CACT,kBAAkB,EAClB,kFAAkF,EAClF;QACE,YAAY,EAAE,CAAC,CAAC,MAAM,EAAE,CAAC,QAAQ,CAAC,mCAAmC,CAAC;KACvE,EACD,KAAK,EAAE,EAAE,YAAY,EAAE,EAAE,EAAE;QACzB,IAAI,CAAC;YACH,MAAM,MAAM,GAAG,MAAM,gBAAgB,CAAC,eAAe,CAAC,YAAY,CAAC,CAAC;YAEpE,OAAO;gBACL,OAAO,EAAE,CAAC,EAAE,IAAI,EAAE,MAAM,EAAE,IAAI,EAAE,IAAI,CAAC,SAAS,CAAC,MAAM,EAAE,IAAI,EAAE,CAAC,CAAC,EAAE,CAAC;aACnE,CAAC;QACJ,CAAC;QAAC,OAAO,KAAU,EAAE,CAAC;YACpB,OAAO,CAAC,KAAK,CAAC,2BAA2B,EAAE,KAAK,CAAC,CAAC;YAClD,OAAO;gBACL,OAAO,EAAE,CAAC,EAAE,IAAI,EAAE,MAAM,EAAE,IAAI,EAAE,6BAA6B,KAAK,CAAC,OAAO,EAAE,EAAE,CAAC;gBAC/E,OAAO,EAAE,IAAI;aACd,CAAC;QACJ,CAAC;IACH,CAAC,CACF,CAAC;IAEF,sCAAsC;IACtC,MAAM,CAAC,IAAI,CACT,uBAAuB,EACvB,2FAA2F,EAC3F;QACE,YAAY,EAAE,CAAC,CAAC,MAAM,EAAE,CAAC,QAAQ,CAAC,+CAA+C,CAAC;QAClF,IAAI,EAAE,CAAC,CAAC,MAAM,EAAE,CAAC,QAAQ,CAAC,gCAAgC,CAAC;QAC3D,QAAQ,EAAE,CAAC,CAAC,MAAM,EAAE,CAAC,QAAQ,EAAE,CAAC,QAAQ,CAAC,oDAAoD,CAAC;QAC9F,QAAQ,EAAE,CAAC,CAAC,OAAO,EAAE,CAAC,QAAQ,EAAE,CAAC,QAAQ,CAAC,wCAAwC,CAAC;KACpF,EACD,KAAK,EAAE,EAAE,YAAY,EAAE,IAAI,EAAE,QAAQ,EAAE,QAAQ,EAAE,EAAE,EAAE;QACnD,IAAI,CAAC;YACH,MAAM,UAAU,GAA8B,EAAE,IAAI,EAAE,CAAC;YACvD,IAAI,QAAQ,KAAK,SAAS;gBAAE,UAAU,CAAC,QAAQ,GAAG,QAAQ,CAAC;YAC3D,IAAI,QAAQ,KAAK,SAAS;gBAAE,UAAU,CAAC,QAAQ,GAAG,QAAQ,CAAC;YAE3D,MAAM,aAAa,GAAG,MAAM,gBAAgB,CAAC,mBAAmB,CAAC,YAAY,EAAE,UAAU,CAAC,CAAC;YAE3F,OAAO;gBACL,OAAO,EAAE,CAAC,EAAE,IAAI,EAAE,MAAM,EAAE,IAAI,EAAE,IAAI,CAAC,SAAS,CAAC,aAAa,EAAE,IAAI,EAAE,CAAC,CAAC,EAAE,CAAC;aAC1E,CAAC;QACJ,CAAC;QAAC,OAAO,KAAU,EAAE,CAAC;YACpB,OAAO,CAAC,KAAK,CAAC,gCAAgC,EAAE,KAAK,CAAC,CAAC;YACvD,OAAO;gBACL,OAAO,EAAE,CAAC,EAAE,IAAI,EAAE,MAAM,EAAE,IAAI,EAAE,kCAAkC,KAAK,CAAC,OAAO,EAAE,EAAE,CAAC;gBACpF,OAAO,EAAE,IAAI;aACd,CAAC;QACJ,CAAC;IACH,CAAC,CACF,CAAC;IAEF,sCAAsC;IACtC,MAAM,CAAC,IAAI,CACT,uBAAuB,EACvB,wGAAwG,EACxG;QACE,YAAY,EAAE,CAAC,CAAC,MAAM,EAAE,CAAC,QAAQ,CAAC,6CAA6C,CAAC;QAChF,iBAAiB,EAAE,CAAC,CAAC,MAAM,EAAE,CAAC,QAAQ,CAAC,wCAAwC,CAAC;QAChF,IAAI,EAAE,CAAC,CAAC,MAAM,EAAE,CAAC,QAAQ,EAAE,CAAC,QAAQ,CAAC,oCAAoC,CAAC;QAC1E,QAAQ,EAAE,CAAC,CAAC,MAAM,EAAE,CAAC,QAAQ,EAAE,CAAC,QAAQ,CAAC,oDAAoD,CAAC;QAC9F,QAAQ,EAAE,CAAC,CAAC,OAAO,EAAE,CAAC,QAAQ,EAAE,CAAC,QAAQ,CAAC,wCAAwC,CAAC;KACpF,EACD,KAAK,EAAE,EAAE,YAAY,EAAE,iBAAiB,EAAE,IAAI,EAAE,QAAQ,EAAE,QAAQ,EAAE,EAAE,EAAE;QACtE,IAAI,CAAC;YACH,MAAM,UAAU,GAA8B,EAAE,CAAC;YACjD,IAAI,IAAI,KAAK,SAAS;gBAAE,UAAU,CAAC,IAAI,GAAG,IAAI,CAAC;YAC/C,IAAI,QAAQ,KAAK,SAAS;gBAAE,UAAU,CAAC,QAAQ,GAAG,QAAQ,CAAC;YAC3D,IAAI,QAAQ,KAAK,SAAS;gBAAE,UAAU,CAAC,QAAQ,GAAG,QAAQ,CAAC;YAE3D,MAAM,aAAa,GAAG,MAAM,gBAAgB,CAAC,mBAAmB,CAAC,YAAY,EAAE,iBAAiB,EAAE,UAAU,CAAC,CAAC;YAE9G,OAAO;gBACL,OAAO,EAAE,CAAC,EAAE,IAAI,EAAE,MAAM,EAAE,IAAI,EAAE,IAAI,CAAC,SAAS,CAAC,aAAa,EAAE,IAAI,EAAE,CAAC,CAAC,EAAE,CAAC;aAC1E,CAAC;QACJ,CAAC;QAAC,OAAO,KAAU,EAAE,CAAC;YACpB,OAAO,CAAC,KAAK,CAAC,gCAAgC,EAAE,KAAK,CAAC,CAAC;YACvD,OAAO;gBACL,OAAO,EAAE,CAAC,EAAE,IAAI,EAAE,MAAM,EAAE,IAAI,EAAE,kCAAkC,KAAK,CAAC,OAAO,EAAE,EAAE,CAAC;gBACpF,OAAO,EAAE,IAAI;aACd,CAAC;QACJ,CAAC;IACH,CAAC,CACF,CAAC;IAEF,sCAAsC;IACtC,MAAM,CAAC,IAAI,CACT,uBAAuB,EACvB,0CAA0C,EAC1C;QACE,YAAY,EAAE,CAAC,CAAC,MAAM,EAAE,CAAC,QAAQ,CAAC,6CAA6C,CAAC;QAChF,iBAAiB,EAAE,CAAC,CAAC,MAAM,EAAE,CAAC,QAAQ,CAAC,wCAAwC,CAAC;KACjF,EACD,KAAK,EAAE,EAAE,YAAY,EAAE,iBAAiB,EAAE,EAAE,EAAE;QAC5C,IAAI,CAAC;YACH,MAAM,MAAM,GAAG,MAAM,gBAAgB,CAAC,mBAAmB,CAAC,YAAY,EAAE,iBAAiB,CAAC,CAAC;YAE3F,OAAO;gBACL,OAAO,EAAE,CAAC,EAAE,IAAI,EAAE,MAAM,EAAE,IAAI,EAAE,IAAI,CAAC,SAAS,CAAC,MAAM,EAAE,IAAI,EAAE,CAAC,CAAC,EAAE,CAAC;aACnE,CAAC;QACJ,CAAC;QAAC,OAAO,KAAU,EAAE,CAAC;YACpB,OAAO,CAAC,KAAK,CAAC,gCAAgC,EAAE,KAAK,CAAC,CAAC;YACvD,OAAO;gBACL,OAAO,EAAE,CAAC,EAAE,IAAI,EAAE,MAAM,EAAE,IAAI,EAAE,kCAAkC,KAAK,CAAC,OAAO,EAAE,EAAE,CAAC;gBACpF,OAAO,EAAE,IAAI;aACd,CAAC;QACJ,CAAC;IACH,CAAC,CACF,CAAC;AACJ,CAAC",
      names: [],
      sources: ["/Users/peterkrzyzek/Development/clickup-mcp-server/src/tools/checklist-tools.ts"],
      sourcesContent: ["import { McpServer } from '@modelcontextprotocol/sdk/server/mcp.js';\nimport { z } from 'zod';\nimport { createClickUpClient } from '../clickup-client/index.js';\nimport { createChecklistsClient, CreateChecklistParams, UpdateChecklistParams, CreateChecklistItemParams, UpdateChecklistItemParams } from '../clickup-client/checklists.js';\n\n// Create clients\nconst clickUpClient = createClickUpClient();\nconst checklistsClient = createChecklistsClient(clickUpClient);\n\nexport function setupChecklistTools(server: McpServer): void {\n  // Register create_checklist tool\n  server.tool(\n    'create_checklist',\n    'Create a new checklist in a ClickUp task. Returns the created checklist details.',\n    {\n      task_id: z.string().describe('The ID of the task to create the checklist in'),\n      name: z.string().describe('The name of the checklist')\n    },\n    async ({ task_id, name }) => {\n      try {\n        const checklist = await checklistsClient.createChecklist(task_id, { name } as CreateChecklistParams);\n        \n        return {\n          content: [{ type: 'text', text: JSON.stringify(checklist, null, 2) }]\n        };\n      } catch (error: any) {\n        console.error('Error creating checklist:', error);\n        return {\n          content: [{ type: 'text', text: `Error creating checklist: ${error.message}` }],\n          isError: true\n        };\n      }\n    }\n  );\n\n  // Register update_checklist tool\n  server.tool(\n    'update_checklist',\n    'Update an existing ClickUp checklist\\'s name.',\n    {\n      checklist_id: z.string().describe('The ID of the checklist to update'),\n      name: z.string().describe('The new name of the checklist')\n    },\n    async ({ checklist_id, name }) => {\n      try {\n        const checklist = await checklistsClient.updateChecklist(checklist_id, { name });\n        \n        return {\n          content: [{ type: 'text', text: JSON.stringify(checklist, null, 2) }]\n        };\n      } catch (error: any) {\n        console.error('Error updating checklist:', error);\n        return {\n          content: [{ type: 'text', text: `Error updating checklist: ${error.message}` }],\n          isError: true\n        };\n      }\n    }\n  );\n\n  // Register delete_checklist tool\n  server.tool(\n    'delete_checklist',\n    'Delete a checklist from a ClickUp task. Removes the checklist and all its items.',\n    {\n      checklist_id: z.string().describe('The ID of the checklist to delete')\n    },\n    async ({ checklist_id }) => {\n      try {\n        const result = await checklistsClient.deleteChecklist(checklist_id);\n        \n        return {\n          content: [{ type: 'text', text: JSON.stringify(result, null, 2) }]\n        };\n      } catch (error: any) {\n        console.error('Error deleting checklist:', error);\n        return {\n          content: [{ type: 'text', text: `Error deleting checklist: ${error.message}` }],\n          isError: true\n        };\n      }\n    }\n  );\n\n  // Register create_checklist_item tool\n  server.tool(\n    'create_checklist_item',\n    'Create a new item in a ClickUp checklist. Supports optional assignee and resolved status.',\n    {\n      checklist_id: z.string().describe('The ID of the checklist to create the item in'),\n      name: z.string().describe('The name of the checklist item'),\n      assignee: z.number().optional().describe('The ID of the user to assign to the checklist item'),\n      resolved: z.boolean().optional().describe('Whether the checklist item is resolved')\n    },\n    async ({ checklist_id, name, assignee, resolved }) => {\n      try {\n        const itemParams: CreateChecklistItemParams = { name };\n        if (assignee !== undefined) itemParams.assignee = assignee;\n        if (resolved !== undefined) itemParams.resolved = resolved;\n        \n        const checklistItem = await checklistsClient.createChecklistItem(checklist_id, itemParams);\n        \n        return {\n          content: [{ type: 'text', text: JSON.stringify(checklistItem, null, 2) }]\n        };\n      } catch (error: any) {\n        console.error('Error creating checklist item:', error);\n        return {\n          content: [{ type: 'text', text: `Error creating checklist item: ${error.message}` }],\n          isError: true\n        };\n      }\n    }\n  );\n\n  // Register update_checklist_item tool\n  server.tool(\n    'update_checklist_item',\n    'Update an existing ClickUp checklist item\\'s properties including name, assignee, and resolved status.',\n    {\n      checklist_id: z.string().describe('The ID of the checklist containing the item'),\n      checklist_item_id: z.string().describe('The ID of the checklist item to update'),\n      name: z.string().optional().describe('The new name of the checklist item'),\n      assignee: z.number().optional().describe('The ID of the user to assign to the checklist item'),\n      resolved: z.boolean().optional().describe('Whether the checklist item is resolved')\n    },\n    async ({ checklist_id, checklist_item_id, name, assignee, resolved }) => {\n      try {\n        const itemParams: UpdateChecklistItemParams = {};\n        if (name !== undefined) itemParams.name = name;\n        if (assignee !== undefined) itemParams.assignee = assignee;\n        if (resolved !== undefined) itemParams.resolved = resolved;\n        \n        const checklistItem = await checklistsClient.updateChecklistItem(checklist_id, checklist_item_id, itemParams);\n        \n        return {\n          content: [{ type: 'text', text: JSON.stringify(checklistItem, null, 2) }]\n        };\n      } catch (error: any) {\n        console.error('Error updating checklist item:', error);\n        return {\n          content: [{ type: 'text', text: `Error updating checklist item: ${error.message}` }],\n          isError: true\n        };\n      }\n    }\n  );\n\n  // Register delete_checklist_item tool\n  server.tool(\n    'delete_checklist_item',\n    'Delete an item from a ClickUp checklist.',\n    {\n      checklist_id: z.string().describe('The ID of the checklist containing the item'),\n      checklist_item_id: z.string().describe('The ID of the checklist item to delete')\n    },\n    async ({ checklist_id, checklist_item_id }) => {\n      try {\n        const result = await checklistsClient.deleteChecklistItem(checklist_id, checklist_item_id);\n        \n        return {\n          content: [{ type: 'text', text: JSON.stringify(result, null, 2) }]\n        };\n      } catch (error: any) {\n        console.error('Error deleting checklist item:', error);\n        return {\n          content: [{ type: 'text', text: `Error deleting checklist item: ${error.message}` }],\n          isError: true\n        };\n      }\n    }\n  );\n}\n"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "1cb746232bc3abfa8582c5da1346def935a25e96"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_291caxep2r = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_291caxep2r();
import { z } from 'zod';
import { createClickUpClient } from '../clickup-client/index.js';
import { createChecklistsClient } from '../clickup-client/checklists.js';
// Create clients
const clickUpClient =
/* istanbul ignore next */
(cov_291caxep2r().s[0]++, createClickUpClient());
const checklistsClient =
/* istanbul ignore next */
(cov_291caxep2r().s[1]++, createChecklistsClient(clickUpClient));
export function setupChecklistTools(server) {
  /* istanbul ignore next */
  cov_291caxep2r().f[0]++;
  cov_291caxep2r().s[2]++;
  // Register create_checklist tool
  server.tool('create_checklist', 'Create a new checklist in a ClickUp task. Returns the created checklist details.', {
    task_id: z.string().describe('The ID of the task to create the checklist in'),
    name: z.string().describe('The name of the checklist')
  }, async ({
    task_id,
    name
  }) => {
    /* istanbul ignore next */
    cov_291caxep2r().f[1]++;
    cov_291caxep2r().s[3]++;
    try {
      const checklist =
      /* istanbul ignore next */
      (cov_291caxep2r().s[4]++, await checklistsClient.createChecklist(task_id, {
        name
      }));
      /* istanbul ignore next */
      cov_291caxep2r().s[5]++;
      return {
        content: [{
          type: 'text',
          text: JSON.stringify(checklist, null, 2)
        }]
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_291caxep2r().s[6]++;
      console.error('Error creating checklist:', error);
      /* istanbul ignore next */
      cov_291caxep2r().s[7]++;
      return {
        content: [{
          type: 'text',
          text: `Error creating checklist: ${error.message}`
        }],
        isError: true
      };
    }
  });
  // Register update_checklist tool
  /* istanbul ignore next */
  cov_291caxep2r().s[8]++;
  server.tool('update_checklist', 'Update an existing ClickUp checklist\'s name.', {
    checklist_id: z.string().describe('The ID of the checklist to update'),
    name: z.string().describe('The new name of the checklist')
  }, async ({
    checklist_id,
    name
  }) => {
    /* istanbul ignore next */
    cov_291caxep2r().f[2]++;
    cov_291caxep2r().s[9]++;
    try {
      const checklist =
      /* istanbul ignore next */
      (cov_291caxep2r().s[10]++, await checklistsClient.updateChecklist(checklist_id, {
        name
      }));
      /* istanbul ignore next */
      cov_291caxep2r().s[11]++;
      return {
        content: [{
          type: 'text',
          text: JSON.stringify(checklist, null, 2)
        }]
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_291caxep2r().s[12]++;
      console.error('Error updating checklist:', error);
      /* istanbul ignore next */
      cov_291caxep2r().s[13]++;
      return {
        content: [{
          type: 'text',
          text: `Error updating checklist: ${error.message}`
        }],
        isError: true
      };
    }
  });
  // Register delete_checklist tool
  /* istanbul ignore next */
  cov_291caxep2r().s[14]++;
  server.tool('delete_checklist', 'Delete a checklist from a ClickUp task. Removes the checklist and all its items.', {
    checklist_id: z.string().describe('The ID of the checklist to delete')
  }, async ({
    checklist_id
  }) => {
    /* istanbul ignore next */
    cov_291caxep2r().f[3]++;
    cov_291caxep2r().s[15]++;
    try {
      const result =
      /* istanbul ignore next */
      (cov_291caxep2r().s[16]++, await checklistsClient.deleteChecklist(checklist_id));
      /* istanbul ignore next */
      cov_291caxep2r().s[17]++;
      return {
        content: [{
          type: 'text',
          text: JSON.stringify(result, null, 2)
        }]
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_291caxep2r().s[18]++;
      console.error('Error deleting checklist:', error);
      /* istanbul ignore next */
      cov_291caxep2r().s[19]++;
      return {
        content: [{
          type: 'text',
          text: `Error deleting checklist: ${error.message}`
        }],
        isError: true
      };
    }
  });
  // Register create_checklist_item tool
  /* istanbul ignore next */
  cov_291caxep2r().s[20]++;
  server.tool('create_checklist_item', 'Create a new item in a ClickUp checklist. Supports optional assignee and resolved status.', {
    checklist_id: z.string().describe('The ID of the checklist to create the item in'),
    name: z.string().describe('The name of the checklist item'),
    assignee: z.number().optional().describe('The ID of the user to assign to the checklist item'),
    resolved: z.boolean().optional().describe('Whether the checklist item is resolved')
  }, async ({
    checklist_id,
    name,
    assignee,
    resolved
  }) => {
    /* istanbul ignore next */
    cov_291caxep2r().f[4]++;
    cov_291caxep2r().s[21]++;
    try {
      const itemParams =
      /* istanbul ignore next */
      (cov_291caxep2r().s[22]++, {
        name
      });
      /* istanbul ignore next */
      cov_291caxep2r().s[23]++;
      if (assignee !== undefined) {
        /* istanbul ignore next */
        cov_291caxep2r().b[0][0]++;
        cov_291caxep2r().s[24]++;
        itemParams.assignee = assignee;
      } else
      /* istanbul ignore next */
      {
        cov_291caxep2r().b[0][1]++;
      }
      cov_291caxep2r().s[25]++;
      if (resolved !== undefined) {
        /* istanbul ignore next */
        cov_291caxep2r().b[1][0]++;
        cov_291caxep2r().s[26]++;
        itemParams.resolved = resolved;
      } else
      /* istanbul ignore next */
      {
        cov_291caxep2r().b[1][1]++;
      }
      const checklistItem =
      /* istanbul ignore next */
      (cov_291caxep2r().s[27]++, await checklistsClient.createChecklistItem(checklist_id, itemParams));
      /* istanbul ignore next */
      cov_291caxep2r().s[28]++;
      return {
        content: [{
          type: 'text',
          text: JSON.stringify(checklistItem, null, 2)
        }]
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_291caxep2r().s[29]++;
      console.error('Error creating checklist item:', error);
      /* istanbul ignore next */
      cov_291caxep2r().s[30]++;
      return {
        content: [{
          type: 'text',
          text: `Error creating checklist item: ${error.message}`
        }],
        isError: true
      };
    }
  });
  // Register update_checklist_item tool
  /* istanbul ignore next */
  cov_291caxep2r().s[31]++;
  server.tool('update_checklist_item', 'Update an existing ClickUp checklist item\'s properties including name, assignee, and resolved status.', {
    checklist_id: z.string().describe('The ID of the checklist containing the item'),
    checklist_item_id: z.string().describe('The ID of the checklist item to update'),
    name: z.string().optional().describe('The new name of the checklist item'),
    assignee: z.number().optional().describe('The ID of the user to assign to the checklist item'),
    resolved: z.boolean().optional().describe('Whether the checklist item is resolved')
  }, async ({
    checklist_id,
    checklist_item_id,
    name,
    assignee,
    resolved
  }) => {
    /* istanbul ignore next */
    cov_291caxep2r().f[5]++;
    cov_291caxep2r().s[32]++;
    try {
      const itemParams =
      /* istanbul ignore next */
      (cov_291caxep2r().s[33]++, {});
      /* istanbul ignore next */
      cov_291caxep2r().s[34]++;
      if (name !== undefined) {
        /* istanbul ignore next */
        cov_291caxep2r().b[2][0]++;
        cov_291caxep2r().s[35]++;
        itemParams.name = name;
      } else
      /* istanbul ignore next */
      {
        cov_291caxep2r().b[2][1]++;
      }
      cov_291caxep2r().s[36]++;
      if (assignee !== undefined) {
        /* istanbul ignore next */
        cov_291caxep2r().b[3][0]++;
        cov_291caxep2r().s[37]++;
        itemParams.assignee = assignee;
      } else
      /* istanbul ignore next */
      {
        cov_291caxep2r().b[3][1]++;
      }
      cov_291caxep2r().s[38]++;
      if (resolved !== undefined) {
        /* istanbul ignore next */
        cov_291caxep2r().b[4][0]++;
        cov_291caxep2r().s[39]++;
        itemParams.resolved = resolved;
      } else
      /* istanbul ignore next */
      {
        cov_291caxep2r().b[4][1]++;
      }
      const checklistItem =
      /* istanbul ignore next */
      (cov_291caxep2r().s[40]++, await checklistsClient.updateChecklistItem(checklist_id, checklist_item_id, itemParams));
      /* istanbul ignore next */
      cov_291caxep2r().s[41]++;
      return {
        content: [{
          type: 'text',
          text: JSON.stringify(checklistItem, null, 2)
        }]
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_291caxep2r().s[42]++;
      console.error('Error updating checklist item:', error);
      /* istanbul ignore next */
      cov_291caxep2r().s[43]++;
      return {
        content: [{
          type: 'text',
          text: `Error updating checklist item: ${error.message}`
        }],
        isError: true
      };
    }
  });
  // Register delete_checklist_item tool
  /* istanbul ignore next */
  cov_291caxep2r().s[44]++;
  server.tool('delete_checklist_item', 'Delete an item from a ClickUp checklist.', {
    checklist_id: z.string().describe('The ID of the checklist containing the item'),
    checklist_item_id: z.string().describe('The ID of the checklist item to delete')
  }, async ({
    checklist_id,
    checklist_item_id
  }) => {
    /* istanbul ignore next */
    cov_291caxep2r().f[6]++;
    cov_291caxep2r().s[45]++;
    try {
      const result =
      /* istanbul ignore next */
      (cov_291caxep2r().s[46]++, await checklistsClient.deleteChecklistItem(checklist_id, checklist_item_id));
      /* istanbul ignore next */
      cov_291caxep2r().s[47]++;
      return {
        content: [{
          type: 'text',
          text: JSON.stringify(result, null, 2)
        }]
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_291caxep2r().s[48]++;
      console.error('Error deleting checklist item:', error);
      /* istanbul ignore next */
      cov_291caxep2r().s[49]++;
      return {
        content: [{
          type: 'text',
          text: `Error deleting checklist item: ${error.message}`
        }],
        isError: true
      };
    }
  });
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
b923e7004f9e72b3cd52eee887b85d87
"use strict";

/* istanbul ignore next */
function cov_rykizwlco() {
  var path = "/Users/peterkrzyzek/Development/clickup-mcp-server/src/utils/error-handling.ts";
  var hash = "3c47d6c5b42fd6d299e07815fbe36cae35a84b4c";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/peterkrzyzek/Development/clickup-mcp-server/src/utils/error-handling.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 2,
          column: 62
        }
      },
      "1": {
        start: {
          line: 3,
          column: 0
        },
        end: {
          line: 3,
          column: 385
        }
      },
      "2": {
        start: {
          line: 4,
          column: 14
        },
        end: {
          line: 4,
          column: 28
        }
      },
      "3": {
        start: {
          line: 10,
          column: 0
        },
        end: {
          line: 22,
          column: 54
        }
      },
      "4": {
        start: {
          line: 11,
          column: 4
        },
        end: {
          line: 11,
          column: 43
        }
      },
      "5": {
        start: {
          line: 12,
          column: 4
        },
        end: {
          line: 12,
          column: 51
        }
      },
      "6": {
        start: {
          line: 13,
          column: 4
        },
        end: {
          line: 13,
          column: 49
        }
      },
      "7": {
        start: {
          line: 14,
          column: 4
        },
        end: {
          line: 14,
          column: 41
        }
      },
      "8": {
        start: {
          line: 15,
          column: 4
        },
        end: {
          line: 15,
          column: 43
        }
      },
      "9": {
        start: {
          line: 16,
          column: 4
        },
        end: {
          line: 16,
          column: 41
        }
      },
      "10": {
        start: {
          line: 17,
          column: 4
        },
        end: {
          line: 17,
          column: 49
        }
      },
      "11": {
        start: {
          line: 18,
          column: 4
        },
        end: {
          line: 18,
          column: 37
        }
      },
      "12": {
        start: {
          line: 19,
          column: 4
        },
        end: {
          line: 19,
          column: 51
        }
      },
      "13": {
        start: {
          line: 20,
          column: 4
        },
        end: {
          line: 20,
          column: 49
        }
      },
      "14": {
        start: {
          line: 21,
          column: 4
        },
        end: {
          line: 21,
          column: 43
        }
      },
      "15": {
        start: {
          line: 25,
          column: 0
        },
        end: {
          line: 30,
          column: 66
        }
      },
      "16": {
        start: {
          line: 26,
          column: 4
        },
        end: {
          line: 26,
          column: 33
        }
      },
      "17": {
        start: {
          line: 27,
          column: 4
        },
        end: {
          line: 27,
          column: 39
        }
      },
      "18": {
        start: {
          line: 28,
          column: 4
        },
        end: {
          line: 28,
          column: 35
        }
      },
      "19": {
        start: {
          line: 29,
          column: 4
        },
        end: {
          line: 29,
          column: 43
        }
      },
      "20": {
        start: {
          line: 34,
          column: 30
        },
        end: {
          line: 49,
          column: 1
        }
      },
      "21": {
        start: {
          line: 35,
          column: 4
        },
        end: {
          line: 48,
          column: 6
        }
      },
      "22": {
        start: {
          line: 50,
          column: 0
        },
        end: {
          line: 50,
          column: 54
        }
      },
      "23": {
        start: {
          line: 54,
          column: 27
        },
        end: {
          line: 69,
          column: 1
        }
      },
      "24": {
        start: {
          line: 55,
          column: 24
        },
        end: {
          line: 55,
          column: 66
        }
      },
      "25": {
        start: {
          line: 56,
          column: 4
        },
        end: {
          line: 68,
          column: 6
        }
      },
      "26": {
        start: {
          line: 70,
          column: 0
        },
        end: {
          line: 70,
          column: 48
        }
      },
      "27": {
        start: {
          line: 74,
          column: 31
        },
        end: {
          line: 96,
          column: 1
        }
      },
      "28": {
        start: {
          line: 75,
          column: 24
        },
        end: {
          line: 75,
          column: 49
        }
      },
      "29": {
        start: {
          line: 76,
          column: 25
        },
        end: {
          line: 76,
          column: 27
        }
      },
      "30": {
        start: {
          line: 77,
          column: 4
        },
        end: {
          line: 82,
          column: 5
        }
      },
      "31": {
        start: {
          line: 78,
          column: 8
        },
        end: {
          line: 78,
          column: 97
        }
      },
      "32": {
        start: {
          line: 80,
          column: 9
        },
        end: {
          line: 82,
          column: 5
        }
      },
      "33": {
        start: {
          line: 81,
          column: 8
        },
        end: {
          line: 81,
          column: 63
        }
      },
      "34": {
        start: {
          line: 83,
          column: 4
        },
        end: {
          line: 85,
          column: 5
        }
      },
      "35": {
        start: {
          line: 84,
          column: 8
        },
        end: {
          line: 84,
          column: 73
        }
      },
      "36": {
        start: {
          line: 86,
          column: 4
        },
        end: {
          line: 88,
          column: 5
        }
      },
      "37": {
        start: {
          line: 87,
          column: 8
        },
        end: {
          line: 87,
          column: 69
        }
      },
      "38": {
        start: {
          line: 89,
          column: 4
        },
        end: {
          line: 94,
          column: 5
        }
      },
      "39": {
        start: {
          line: 90,
          column: 33
        },
        end: {
          line: 92,
          column: 34
        }
      },
      "40": {
        start: {
          line: 93,
          column: 8
        },
        end: {
          line: 93,
          column: 71
        }
      },
      "41": {
        start: {
          line: 95,
          column: 4
        },
        end: {
          line: 95,
          column: 40
        }
      },
      "42": {
        start: {
          line: 97,
          column: 0
        },
        end: {
          line: 97,
          column: 56
        }
      },
      "43": {
        start: {
          line: 101,
          column: 30
        },
        end: {
          line: 198,
          column: 1
        }
      },
      "44": {
        start: {
          line: 102,
          column: 4
        },
        end: {
          line: 162,
          column: 5
        }
      },
      "45": {
        start: {
          line: 103,
          column: 23
        },
        end: {
          line: 103,
          column: 44
        }
      },
      "46": {
        start: {
          line: 104,
          column: 21
        },
        end: {
          line: 104,
          column: 40
        }
      },
      "47": {
        start: {
          line: 108,
          column: 24
        },
        end: {
          line: 108,
          column: 29
        }
      },
      "48": {
        start: {
          line: 110,
          column: 8
        },
        end: {
          line: 146,
          column: 9
        }
      },
      "49": {
        start: {
          line: 112,
          column: 16
        },
        end: {
          line: 112,
          column: 49
        }
      },
      "50": {
        start: {
          line: 113,
          column: 16
        },
        end: {
          line: 113,
          column: 45
        }
      },
      "51": {
        start: {
          line: 114,
          column: 16
        },
        end: {
          line: 114,
          column: 22
        }
      },
      "52": {
        start: {
          line: 116,
          column: 16
        },
        end: {
          line: 116,
          column: 53
        }
      },
      "53": {
        start: {
          line: 117,
          column: 16
        },
        end: {
          line: 117,
          column: 46
        }
      },
      "54": {
        start: {
          line: 118,
          column: 16
        },
        end: {
          line: 118,
          column: 22
        }
      },
      "55": {
        start: {
          line: 120,
          column: 16
        },
        end: {
          line: 120,
          column: 52
        }
      },
      "56": {
        start: {
          line: 121,
          column: 16
        },
        end: {
          line: 121,
          column: 46
        }
      },
      "57": {
        start: {
          line: 122,
          column: 16
        },
        end: {
          line: 122,
          column: 22
        }
      },
      "58": {
        start: {
          line: 124,
          column: 16
        },
        end: {
          line: 124,
          column: 48
        }
      },
      "59": {
        start: {
          line: 125,
          column: 16
        },
        end: {
          line: 125,
          column: 45
        }
      },
      "60": {
        start: {
          line: 126,
          column: 16
        },
        end: {
          line: 126,
          column: 22
        }
      },
      "61": {
        start: {
          line: 128,
          column: 16
        },
        end: {
          line: 128,
          column: 49
        }
      },
      "62": {
        start: {
          line: 129,
          column: 16
        },
        end: {
          line: 129,
          column: 48
        }
      },
      "63": {
        start: {
          line: 130,
          column: 16
        },
        end: {
          line: 130,
          column: 33
        }
      },
      "64": {
        start: {
          line: 131,
          column: 16
        },
        end: {
          line: 131,
          column: 83
        }
      },
      "65": {
        start: {
          line: 132,
          column: 16
        },
        end: {
          line: 132,
          column: 22
        }
      },
      "66": {
        start: {
          line: 137,
          column: 16
        },
        end: {
          line: 137,
          column: 48
        }
      },
      "67": {
        start: {
          line: 138,
          column: 16
        },
        end: {
          line: 138,
          column: 46
        }
      },
      "68": {
        start: {
          line: 139,
          column: 16
        },
        end: {
          line: 139,
          column: 33
        }
      },
      "69": {
        start: {
          line: 140,
          column: 16
        },
        end: {
          line: 140,
          column: 32
        }
      },
      "70": {
        start: {
          line: 141,
          column: 16
        },
        end: {
          line: 141,
          column: 22
        }
      },
      "71": {
        start: {
          line: 143,
          column: 16
        },
        end: {
          line: 143,
          column: 48
        }
      },
      "72": {
        start: {
          line: 144,
          column: 16
        },
        end: {
          line: 144,
          column: 48
        }
      },
      "73": {
        start: {
          line: 145,
          column: 16
        },
        end: {
          line: 145,
          column: 42
        }
      },
      "74": {
        start: {
          line: 147,
          column: 8
        },
        end: {
          line: 161,
          column: 11
        }
      },
      "75": {
        start: {
          line: 163,
          column: 4
        },
        end: {
          line: 175,
          column: 5
        }
      },
      "76": {
        start: {
          line: 164,
          column: 8
        },
        end: {
          line: 174,
          column: 11
        }
      },
      "77": {
        start: {
          line: 176,
          column: 4
        },
        end: {
          line: 188,
          column: 5
        }
      },
      "78": {
        start: {
          line: 177,
          column: 8
        },
        end: {
          line: 187,
          column: 11
        }
      },
      "79": {
        start: {
          line: 189,
          column: 4
        },
        end: {
          line: 197,
          column: 7
        }
      },
      "80": {
        start: {
          line: 199,
          column: 0
        },
        end: {
          line: 199,
          column: 54
        }
      },
      "81": {
        start: {
          line: 203,
          column: 30
        },
        end: {
          line: 214,
          column: 1
        }
      },
      "82": {
        start: {
          line: 204,
          column: 19
        },
        end: {
          line: 204,
          column: 83
        }
      },
      "83": {
        start: {
          line: 204,
          column: 43
        },
        end: {
          line: 204,
          column: 82
        }
      },
      "84": {
        start: {
          line: 205,
          column: 4
        },
        end: {
          line: 213,
          column: 7
        }
      },
      "85": {
        start: {
          line: 215,
          column: 0
        },
        end: {
          line: 215,
          column: 54
        }
      },
      "86": {
        start: {
          line: 219,
          column: 27
        },
        end: {
          line: 231,
          column: 1
        }
      },
      "87": {
        start: {
          line: 220,
          column: 4
        },
        end: {
          line: 230,
          column: 7
        }
      },
      "88": {
        start: {
          line: 232,
          column: 0
        },
        end: {
          line: 232,
          column: 48
        }
      },
      "89": {
        start: {
          line: 236,
          column: 24
        },
        end: {
          line: 262,
          column: 1
        }
      },
      "90": {
        start: {
          line: 237,
          column: 18
        },
        end: {
          line: 237,
          column: 58
        }
      },
      "91": {
        start: {
          line: 238,
          column: 19
        },
        end: {
          line: 238,
          column: 39
        }
      },
      "92": {
        start: {
          line: 239,
          column: 4
        },
        end: {
          line: 250,
          column: 5
        }
      },
      "93": {
        start: {
          line: 240,
          column: 8
        },
        end: {
          line: 240,
          column: 35
        }
      },
      "94": {
        start: {
          line: 241,
          column: 8
        },
        end: {
          line: 241,
          column: 37
        }
      },
      "95": {
        start: {
          line: 243,
          column: 9
        },
        end: {
          line: 250,
          column: 5
        }
      },
      "96": {
        start: {
          line: 244,
          column: 8
        },
        end: {
          line: 244,
          column: 38
        }
      },
      "97": {
        start: {
          line: 245,
          column: 8
        },
        end: {
          line: 245,
          column: 38
        }
      },
      "98": {
        start: {
          line: 247,
          column: 9
        },
        end: {
          line: 250,
          column: 5
        }
      },
      "99": {
        start: {
          line: 248,
          column: 8
        },
        end: {
          line: 248,
          column: 44
        }
      },
      "100": {
        start: {
          line: 249,
          column: 8
        },
        end: {
          line: 249,
          column: 38
        }
      },
      "101": {
        start: {
          line: 251,
          column: 4
        },
        end: {
          line: 261,
          column: 7
        }
      },
      "102": {
        start: {
          line: 263,
          column: 0
        },
        end: {
          line: 263,
          column: 42
        }
      },
      "103": {
        start: {
          line: 269,
          column: 8
        },
        end: {
          line: 269,
          column: 37
        }
      },
      "104": {
        start: {
          line: 270,
          column: 8
        },
        end: {
          line: 270,
          column: 35
        }
      },
      "105": {
        start: {
          line: 271,
          column: 8
        },
        end: {
          line: 271,
          column: 33
        }
      },
      "106": {
        start: {
          line: 275,
          column: 8
        },
        end: {
          line: 293,
          column: 9
        }
      },
      "107": {
        start: {
          line: 275,
          column: 27
        },
        end: {
          line: 275,
          column: 28
        }
      },
      "108": {
        start: {
          line: 276,
          column: 12
        },
        end: {
          line: 292,
          column: 13
        }
      },
      "109": {
        start: {
          line: 277,
          column: 16
        },
        end: {
          line: 277,
          column: 41
        }
      },
      "110": {
        start: {
          line: 280,
          column: 40
        },
        end: {
          line: 282,
          column: 27
        }
      },
      "111": {
        start: {
          line: 283,
          column: 16
        },
        end: {
          line: 283,
          column: 44
        }
      },
      "112": {
        start: {
          line: 285,
          column: 16
        },
        end: {
          line: 287,
          column: 17
        }
      },
      "113": {
        start: {
          line: 286,
          column: 20
        },
        end: {
          line: 286,
          column: 26
        }
      },
      "114": {
        start: {
          line: 289,
          column: 30
        },
        end: {
          line: 289,
          column: 157
        }
      },
      "115": {
        start: {
          line: 290,
          column: 16
        },
        end: {
          line: 290,
          column: 112
        }
      },
      "116": {
        start: {
          line: 291,
          column: 16
        },
        end: {
          line: 291,
          column: 73
        }
      },
      "117": {
        start: {
          line: 291,
          column: 45
        },
        end: {
          line: 291,
          column: 71
        }
      },
      "118": {
        start: {
          line: 294,
          column: 8
        },
        end: {
          line: 294,
          column: 24
        }
      },
      "119": {
        start: {
          line: 297,
          column: 0
        },
        end: {
          line: 297,
          column: 36
        }
      },
      "120": {
        start: {
          line: 301,
          column: 17
        },
        end: {
          line: 323,
          column: 1
        }
      },
      "121": {
        start: {
          line: 302,
          column: 21
        },
        end: {
          line: 304,
          column: 69
        }
      },
      "122": {
        start: {
          line: 305,
          column: 20
        },
        end: {
          line: 316,
          column: 5
        }
      },
      "123": {
        start: {
          line: 317,
          column: 4
        },
        end: {
          line: 317,
          column: 67
        }
      },
      "124": {
        start: {
          line: 319,
          column: 4
        },
        end: {
          line: 322,
          column: 5
        }
      },
      "125": {
        start: {
          line: 321,
          column: 8
        },
        end: {
          line: 321,
          column: 80
        }
      },
      "126": {
        start: {
          line: 324,
          column: 0
        },
        end: {
          line: 324,
          column: 28
        }
      },
      "127": {
        start: {
          line: 328,
          column: 20
        },
        end: {
          line: 361,
          column: 1
        }
      },
      "128": {
        start: {
          line: 329,
          column: 4
        },
        end: {
          line: 360,
          column: 6
        }
      },
      "129": {
        start: {
          line: 330,
          column: 26
        },
        end: {
          line: 330,
          column: 58
        }
      },
      "130": {
        start: {
          line: 331,
          column: 8
        },
        end: {
          line: 359,
          column: 9
        }
      },
      "131": {
        start: {
          line: 333,
          column: 34
        },
        end: {
          line: 333,
          column: 52
        }
      },
      "132": {
        start: {
          line: 335,
          column: 27
        },
        end: {
          line: 335,
          column: 55
        }
      },
      "133": {
        start: {
          line: 337,
          column: 12
        },
        end: {
          line: 342,
          column: 14
        }
      },
      "134": {
        start: {
          line: 346,
          column: 12
        },
        end: {
          line: 354,
          column: 13
        }
      },
      "135": {
        start: {
          line: 347,
          column: 16
        },
        end: {
          line: 347,
          column: 112
        }
      },
      "136": {
        start: {
          line: 349,
          column: 17
        },
        end: {
          line: 354,
          column: 13
        }
      },
      "137": {
        start: {
          line: 350,
          column: 16
        },
        end: {
          line: 350,
          column: 112
        }
      },
      "138": {
        start: {
          line: 353,
          column: 16
        },
        end: {
          line: 353,
          column: 40
        }
      },
      "139": {
        start: {
          line: 356,
          column: 12
        },
        end: {
          line: 356,
          column: 51
        }
      },
      "140": {
        start: {
          line: 358,
          column: 12
        },
        end: {
          line: 358,
          column: 68
        }
      },
      "141": {
        start: {
          line: 362,
          column: 0
        },
        end: {
          line: 362,
          column: 34
        }
      },
      "142": {
        start: {
          line: 366,
          column: 26
        },
        end: {
          line: 368,
          column: 1
        }
      },
      "143": {
        start: {
          line: 367,
          column: 4
        },
        end: {
          line: 367,
          column: 74
        }
      },
      "144": {
        start: {
          line: 369,
          column: 0
        },
        end: {
          line: 369,
          column: 46
        }
      },
      "145": {
        start: {
          line: 373,
          column: 27
        },
        end: {
          line: 404,
          column: 1
        }
      },
      "146": {
        start: {
          line: 374,
          column: 19
        },
        end: {
          line: 374,
          column: 21
        }
      },
      "147": {
        start: {
          line: 376,
          column: 22
        },
        end: {
          line: 376,
          column: 32
        }
      },
      "148": {
        start: {
          line: 377,
          column: 4
        },
        end: {
          line: 391,
          column: 5
        }
      },
      "149": {
        start: {
          line: 378,
          column: 30
        },
        end: {
          line: 378,
          column: 80
        }
      },
      "150": {
        start: {
          line: 379,
          column: 8
        },
        end: {
          line: 383,
          column: 10
        }
      },
      "151": {
        start: {
          line: 386,
          column: 8
        },
        end: {
          line: 390,
          column: 10
        }
      },
      "152": {
        start: {
          line: 393,
          column: 24
        },
        end: {
          line: 393,
          column: 45
        }
      },
      "153": {
        start: {
          line: 394,
          column: 28
        },
        end: {
          line: 394,
          column: 45
        }
      },
      "154": {
        start: {
          line: 395,
          column: 4
        },
        end: {
          line: 399,
          column: 6
        }
      },
      "155": {
        start: {
          line: 401,
          column: 25
        },
        end: {
          line: 401,
          column: 94
        }
      },
      "156": {
        start: {
          line: 401,
          column: 63
        },
        end: {
          line: 401,
          column: 86
        }
      },
      "157": {
        start: {
          line: 402,
          column: 19
        },
        end: {
          line: 402,
          column: 96
        }
      },
      "158": {
        start: {
          line: 403,
          column: 4
        },
        end: {
          line: 403,
          column: 30
        }
      },
      "159": {
        start: {
          line: 405,
          column: 0
        },
        end: {
          line: 405,
          column: 48
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 10,
            column: 1
          },
          end: {
            line: 10,
            column: 2
          }
        },
        loc: {
          start: {
            line: 10,
            column: 22
          },
          end: {
            line: 22,
            column: 1
          }
        },
        line: 10
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 25,
            column: 1
          },
          end: {
            line: 25,
            column: 2
          }
        },
        loc: {
          start: {
            line: 25,
            column: 26
          },
          end: {
            line: 30,
            column: 1
          }
        },
        line: 25
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 34,
            column: 30
          },
          end: {
            line: 34,
            column: 31
          }
        },
        loc: {
          start: {
            line: 34,
            column: 63
          },
          end: {
            line: 49,
            column: 1
          }
        },
        line: 34
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 54,
            column: 27
          },
          end: {
            line: 54,
            column: 28
          }
        },
        loc: {
          start: {
            line: 54,
            column: 38
          },
          end: {
            line: 69,
            column: 1
          }
        },
        line: 54
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 74,
            column: 31
          },
          end: {
            line: 74,
            column: 32
          }
        },
        loc: {
          start: {
            line: 74,
            column: 42
          },
          end: {
            line: 96,
            column: 1
          }
        },
        line: 74
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 101,
            column: 30
          },
          end: {
            line: 101,
            column: 31
          }
        },
        loc: {
          start: {
            line: 101,
            column: 50
          },
          end: {
            line: 198,
            column: 1
          }
        },
        line: 101
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 203,
            column: 30
          },
          end: {
            line: 203,
            column: 31
          }
        },
        loc: {
          start: {
            line: 203,
            column: 50
          },
          end: {
            line: 214,
            column: 1
          }
        },
        line: 203
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 204,
            column: 36
          },
          end: {
            line: 204,
            column: 37
          }
        },
        loc: {
          start: {
            line: 204,
            column: 43
          },
          end: {
            line: 204,
            column: 82
          }
        },
        line: 204
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 219,
            column: 27
          },
          end: {
            line: 219,
            column: 28
          }
        },
        loc: {
          start: {
            line: 219,
            column: 47
          },
          end: {
            line: 231,
            column: 1
          }
        },
        line: 219
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 236,
            column: 24
          },
          end: {
            line: 236,
            column: 25
          }
        },
        loc: {
          start: {
            line: 236,
            column: 44
          },
          end: {
            line: 262,
            column: 1
          }
        },
        line: 236
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 268,
            column: 4
          },
          end: {
            line: 268,
            column: 5
          }
        },
        loc: {
          start: {
            line: 268,
            column: 68
          },
          end: {
            line: 272,
            column: 5
          }
        },
        line: 268
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 273,
            column: 4
          },
          end: {
            line: 273,
            column: 5
          }
        },
        loc: {
          start: {
            line: 273,
            column: 47
          },
          end: {
            line: 295,
            column: 5
          }
        },
        line: 273
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 291,
            column: 34
          },
          end: {
            line: 291,
            column: 35
          }
        },
        loc: {
          start: {
            line: 291,
            column: 45
          },
          end: {
            line: 291,
            column: 71
          }
        },
        line: 291
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 301,
            column: 17
          },
          end: {
            line: 301,
            column: 18
          }
        },
        loc: {
          start: {
            line: 301,
            column: 28
          },
          end: {
            line: 323,
            column: 1
          }
        },
        line: 301
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 328,
            column: 20
          },
          end: {
            line: 328,
            column: 21
          }
        },
        loc: {
          start: {
            line: 328,
            column: 51
          },
          end: {
            line: 361,
            column: 1
          }
        },
        line: 328
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 329,
            column: 11
          },
          end: {
            line: 329,
            column: 12
          }
        },
        loc: {
          start: {
            line: 329,
            column: 27
          },
          end: {
            line: 360,
            column: 5
          }
        },
        line: 329
      },
      "16": {
        name: "(anonymous_16)",
        decl: {
          start: {
            line: 366,
            column: 26
          },
          end: {
            line: 366,
            column: 27
          }
        },
        loc: {
          start: {
            line: 366,
            column: 32
          },
          end: {
            line: 368,
            column: 1
          }
        },
        line: 366
      },
      "17": {
        name: "(anonymous_17)",
        decl: {
          start: {
            line: 373,
            column: 27
          },
          end: {
            line: 373,
            column: 28
          }
        },
        loc: {
          start: {
            line: 373,
            column: 39
          },
          end: {
            line: 404,
            column: 1
          }
        },
        line: 373
      },
      "18": {
        name: "(anonymous_18)",
        decl: {
          start: {
            line: 401,
            column: 54
          },
          end: {
            line: 401,
            column: 55
          }
        },
        loc: {
          start: {
            line: 401,
            column: 63
          },
          end: {
            line: 401,
            column: 86
          }
        },
        line: 401
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 22,
            column: 3
          },
          end: {
            line: 22,
            column: 52
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 22,
            column: 3
          },
          end: {
            line: 22,
            column: 12
          }
        }, {
          start: {
            line: 22,
            column: 17
          },
          end: {
            line: 22,
            column: 51
          }
        }],
        line: 22
      },
      "1": {
        loc: {
          start: {
            line: 30,
            column: 3
          },
          end: {
            line: 30,
            column: 64
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 30,
            column: 3
          },
          end: {
            line: 30,
            column: 16
          }
        }, {
          start: {
            line: 30,
            column: 21
          },
          end: {
            line: 30,
            column: 63
          }
        }],
        line: 30
      },
      "2": {
        loc: {
          start: {
            line: 34,
            column: 46
          },
          end: {
            line: 34,
            column: 58
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 34,
            column: 56
          },
          end: {
            line: 34,
            column: 58
          }
        }],
        line: 34
      },
      "3": {
        loc: {
          start: {
            line: 37,
            column: 18
          },
          end: {
            line: 37,
            column: 58
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 37,
            column: 18
          },
          end: {
            line: 37,
            column: 34
          }
        }, {
          start: {
            line: 37,
            column: 38
          },
          end: {
            line: 37,
            column: 58
          }
        }],
        line: 37
      },
      "4": {
        loc: {
          start: {
            line: 46,
            column: 19
          },
          end: {
            line: 46,
            column: 45
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 46,
            column: 19
          },
          end: {
            line: 46,
            column: 36
          }
        }, {
          start: {
            line: 46,
            column: 40
          },
          end: {
            line: 46,
            column: 45
          }
        }],
        line: 46
      },
      "5": {
        loc: {
          start: {
            line: 77,
            column: 4
          },
          end: {
            line: 82,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 77,
            column: 4
          },
          end: {
            line: 82,
            column: 5
          }
        }, {
          start: {
            line: 80,
            column: 9
          },
          end: {
            line: 82,
            column: 5
          }
        }],
        line: 77
      },
      "6": {
        loc: {
          start: {
            line: 77,
            column: 8
          },
          end: {
            line: 77,
            column: 43
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 77,
            column: 8
          },
          end: {
            line: 77,
            column: 23
          }
        }, {
          start: {
            line: 77,
            column: 27
          },
          end: {
            line: 77,
            column: 43
          }
        }],
        line: 77
      },
      "7": {
        loc: {
          start: {
            line: 80,
            column: 9
          },
          end: {
            line: 82,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 80,
            column: 9
          },
          end: {
            line: 82,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 80
      },
      "8": {
        loc: {
          start: {
            line: 83,
            column: 4
          },
          end: {
            line: 85,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 83,
            column: 4
          },
          end: {
            line: 85,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 83
      },
      "9": {
        loc: {
          start: {
            line: 86,
            column: 4
          },
          end: {
            line: 88,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 86,
            column: 4
          },
          end: {
            line: 88,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 86
      },
      "10": {
        loc: {
          start: {
            line: 89,
            column: 4
          },
          end: {
            line: 94,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 89,
            column: 4
          },
          end: {
            line: 94,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 89
      },
      "11": {
        loc: {
          start: {
            line: 89,
            column: 8
          },
          end: {
            line: 89,
            column: 68
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 89,
            column: 8
          },
          end: {
            line: 89,
            column: 43
          }
        }, {
          start: {
            line: 89,
            column: 47
          },
          end: {
            line: 89,
            column: 68
          }
        }],
        line: 89
      },
      "12": {
        loc: {
          start: {
            line: 90,
            column: 33
          },
          end: {
            line: 92,
            column: 34
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 91,
            column: 14
          },
          end: {
            line: 91,
            column: 45
          }
        }, {
          start: {
            line: 92,
            column: 14
          },
          end: {
            line: 92,
            column: 34
          }
        }],
        line: 90
      },
      "13": {
        loc: {
          start: {
            line: 102,
            column: 4
          },
          end: {
            line: 162,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 102,
            column: 4
          },
          end: {
            line: 162,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 102
      },
      "14": {
        loc: {
          start: {
            line: 110,
            column: 8
          },
          end: {
            line: 146,
            column: 9
          }
        },
        type: "switch",
        locations: [{
          start: {
            line: 111,
            column: 12
          },
          end: {
            line: 114,
            column: 22
          }
        }, {
          start: {
            line: 115,
            column: 12
          },
          end: {
            line: 118,
            column: 22
          }
        }, {
          start: {
            line: 119,
            column: 12
          },
          end: {
            line: 122,
            column: 22
          }
        }, {
          start: {
            line: 123,
            column: 12
          },
          end: {
            line: 126,
            column: 22
          }
        }, {
          start: {
            line: 127,
            column: 12
          },
          end: {
            line: 132,
            column: 22
          }
        }, {
          start: {
            line: 133,
            column: 12
          },
          end: {
            line: 133,
            column: 21
          }
        }, {
          start: {
            line: 134,
            column: 12
          },
          end: {
            line: 134,
            column: 21
          }
        }, {
          start: {
            line: 135,
            column: 12
          },
          end: {
            line: 135,
            column: 21
          }
        }, {
          start: {
            line: 136,
            column: 12
          },
          end: {
            line: 141,
            column: 22
          }
        }, {
          start: {
            line: 142,
            column: 12
          },
          end: {
            line: 145,
            column: 42
          }
        }],
        line: 110
      },
      "15": {
        loc: {
          start: {
            line: 131,
            column: 29
          },
          end: {
            line: 131,
            column: 82
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 131,
            column: 29
          },
          end: {
            line: 131,
            column: 76
          }
        }, {
          start: {
            line: 131,
            column: 80
          },
          end: {
            line: 131,
            column: 82
          }
        }],
        line: 131
      },
      "16": {
        loc: {
          start: {
            line: 147,
            column: 61
          },
          end: {
            line: 147,
            column: 128
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 147,
            column: 61
          },
          end: {
            line: 147,
            column: 70
          }
        }, {
          start: {
            line: 147,
            column: 74
          },
          end: {
            line: 147,
            column: 85
          }
        }, {
          start: {
            line: 147,
            column: 89
          },
          end: {
            line: 147,
            column: 102
          }
        }, {
          start: {
            line: 147,
            column: 106
          },
          end: {
            line: 147,
            column: 128
          }
        }],
        line: 147
      },
      "17": {
        loc: {
          start: {
            line: 163,
            column: 4
          },
          end: {
            line: 175,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 163,
            column: 4
          },
          end: {
            line: 175,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 163
      },
      "18": {
        loc: {
          start: {
            line: 163,
            column: 8
          },
          end: {
            line: 163,
            column: 67
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 163,
            column: 8
          },
          end: {
            line: 163,
            column: 37
          }
        }, {
          start: {
            line: 163,
            column: 41
          },
          end: {
            line: 163,
            column: 67
          }
        }],
        line: 163
      },
      "19": {
        loc: {
          start: {
            line: 176,
            column: 4
          },
          end: {
            line: 188,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 176,
            column: 4
          },
          end: {
            line: 188,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 176
      },
      "20": {
        loc: {
          start: {
            line: 176,
            column: 8
          },
          end: {
            line: 176,
            column: 67
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 176,
            column: 8
          },
          end: {
            line: 176,
            column: 34
          }
        }, {
          start: {
            line: 176,
            column: 38
          },
          end: {
            line: 176,
            column: 67
          }
        }],
        line: 176
      },
      "21": {
        loc: {
          start: {
            line: 189,
            column: 72
          },
          end: {
            line: 189,
            column: 113
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 189,
            column: 72
          },
          end: {
            line: 189,
            column: 85
          }
        }, {
          start: {
            line: 189,
            column: 89
          },
          end: {
            line: 189,
            column: 113
          }
        }],
        line: 189
      },
      "22": {
        loc: {
          start: {
            line: 220,
            column: 71
          },
          end: {
            line: 220,
            column: 115
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 220,
            column: 71
          },
          end: {
            line: 220,
            column: 84
          }
        }, {
          start: {
            line: 220,
            column: 88
          },
          end: {
            line: 220,
            column: 115
          }
        }],
        line: 220
      },
      "23": {
        loc: {
          start: {
            line: 237,
            column: 18
          },
          end: {
            line: 237,
            column: 58
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 237,
            column: 18
          },
          end: {
            line: 237,
            column: 31
          }
        }, {
          start: {
            line: 237,
            column: 35
          },
          end: {
            line: 237,
            column: 58
          }
        }],
        line: 237
      },
      "24": {
        loc: {
          start: {
            line: 239,
            column: 4
          },
          end: {
            line: 250,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 239,
            column: 4
          },
          end: {
            line: 250,
            column: 5
          }
        }, {
          start: {
            line: 243,
            column: 9
          },
          end: {
            line: 250,
            column: 5
          }
        }],
        line: 239
      },
      "25": {
        loc: {
          start: {
            line: 243,
            column: 9
          },
          end: {
            line: 250,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 243,
            column: 9
          },
          end: {
            line: 250,
            column: 5
          }
        }, {
          start: {
            line: 247,
            column: 9
          },
          end: {
            line: 250,
            column: 5
          }
        }],
        line: 243
      },
      "26": {
        loc: {
          start: {
            line: 247,
            column: 9
          },
          end: {
            line: 250,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 247,
            column: 9
          },
          end: {
            line: 250,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 247
      },
      "27": {
        loc: {
          start: {
            line: 268,
            column: 16
          },
          end: {
            line: 268,
            column: 30
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 268,
            column: 29
          },
          end: {
            line: 268,
            column: 30
          }
        }],
        line: 268
      },
      "28": {
        loc: {
          start: {
            line: 268,
            column: 32
          },
          end: {
            line: 268,
            column: 48
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 268,
            column: 44
          },
          end: {
            line: 268,
            column: 48
          }
        }],
        line: 268
      },
      "29": {
        loc: {
          start: {
            line: 268,
            column: 50
          },
          end: {
            line: 268,
            column: 66
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 268,
            column: 61
          },
          end: {
            line: 268,
            column: 66
          }
        }],
        line: 268
      },
      "30": {
        loc: {
          start: {
            line: 280,
            column: 40
          },
          end: {
            line: 282,
            column: 27
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 281,
            column: 22
          },
          end: {
            line: 281,
            column: 133
          }
        }, {
          start: {
            line: 282,
            column: 22
          },
          end: {
            line: 282,
            column: 27
          }
        }],
        line: 280
      },
      "31": {
        loc: {
          start: {
            line: 285,
            column: 16
          },
          end: {
            line: 287,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 285,
            column: 16
          },
          end: {
            line: 287,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 285
      },
      "32": {
        loc: {
          start: {
            line: 285,
            column: 20
          },
          end: {
            line: 285,
            column: 77
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 285,
            column: 20
          },
          end: {
            line: 285,
            column: 46
          }
        }, {
          start: {
            line: 285,
            column: 50
          },
          end: {
            line: 285,
            column: 77
          }
        }],
        line: 285
      },
      "33": {
        loc: {
          start: {
            line: 289,
            column: 78
          },
          end: {
            line: 289,
            column: 156
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 289,
            column: 107
          },
          end: {
            line: 289,
            column: 140
          }
        }, {
          start: {
            line: 289,
            column: 143
          },
          end: {
            line: 289,
            column: 156
          }
        }],
        line: 289
      },
      "34": {
        loc: {
          start: {
            line: 302,
            column: 21
          },
          end: {
            line: 304,
            column: 69
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 302,
            column: 65
          },
          end: {
            line: 302,
            column: 72
          }
        }, {
          start: {
            line: 303,
            column: 8
          },
          end: {
            line: 304,
            column: 69
          }
        }],
        line: 302
      },
      "35": {
        loc: {
          start: {
            line: 303,
            column: 8
          },
          end: {
            line: 304,
            column: 69
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 303,
            column: 48
          },
          end: {
            line: 303,
            column: 55
          }
        }, {
          start: {
            line: 304,
            column: 12
          },
          end: {
            line: 304,
            column: 69
          }
        }],
        line: 303
      },
      "36": {
        loc: {
          start: {
            line: 304,
            column: 12
          },
          end: {
            line: 304,
            column: 69
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 304,
            column: 54
          },
          end: {
            line: 304,
            column: 60
          }
        }, {
          start: {
            line: 304,
            column: 63
          },
          end: {
            line: 304,
            column: 69
          }
        }],
        line: 304
      },
      "37": {
        loc: {
          start: {
            line: 319,
            column: 4
          },
          end: {
            line: 322,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 319,
            column: 4
          },
          end: {
            line: 322,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 319
      },
      "38": {
        loc: {
          start: {
            line: 340,
            column: 30
          },
          end: {
            line: 340,
            column: 99
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 340,
            column: 59
          },
          end: {
            line: 340,
            column: 65
          }
        }, {
          start: {
            line: 340,
            column: 68
          },
          end: {
            line: 340,
            column: 99
          }
        }],
        line: 340
      },
      "39": {
        loc: {
          start: {
            line: 346,
            column: 12
          },
          end: {
            line: 354,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 346,
            column: 12
          },
          end: {
            line: 354,
            column: 13
          }
        }, {
          start: {
            line: 349,
            column: 17
          },
          end: {
            line: 354,
            column: 13
          }
        }],
        line: 346
      },
      "40": {
        loc: {
          start: {
            line: 349,
            column: 17
          },
          end: {
            line: 354,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 349,
            column: 17
          },
          end: {
            line: 354,
            column: 13
          }
        }, {
          start: {
            line: 352,
            column: 17
          },
          end: {
            line: 354,
            column: 13
          }
        }],
        line: 349
      },
      "41": {
        loc: {
          start: {
            line: 380,
            column: 20
          },
          end: {
            line: 380,
            column: 59
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 380,
            column: 44
          },
          end: {
            line: 380,
            column: 50
          }
        }, {
          start: {
            line: 380,
            column: 53
          },
          end: {
            line: 380,
            column: 59
          }
        }],
        line: 380
      },
      "42": {
        loc: {
          start: {
            line: 381,
            column: 21
          },
          end: {
            line: 381,
            column: 123
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 381,
            column: 45
          },
          end: {
            line: 381,
            column: 89
          }
        }, {
          start: {
            line: 381,
            column: 92
          },
          end: {
            line: 381,
            column: 123
          }
        }],
        line: 381
      },
      "43": {
        loc: {
          start: {
            line: 396,
            column: 16
          },
          end: {
            line: 396,
            column: 72
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 396,
            column: 57
          },
          end: {
            line: 396,
            column: 63
          }
        }, {
          start: {
            line: 396,
            column: 66
          },
          end: {
            line: 396,
            column: 72
          }
        }],
        line: 396
      },
      "44": {
        loc: {
          start: {
            line: 402,
            column: 19
          },
          end: {
            line: 402,
            column: 96
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 402,
            column: 40
          },
          end: {
            line: 402,
            column: 49
          }
        }, {
          start: {
            line: 402,
            column: 52
          },
          end: {
            line: 402,
            column: 96
          }
        }],
        line: 402
      },
      "45": {
        loc: {
          start: {
            line: 402,
            column: 52
          },
          end: {
            line: 402,
            column: 96
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 402,
            column: 72
          },
          end: {
            line: 402,
            column: 82
          }
        }, {
          start: {
            line: 402,
            column: 85
          },
          end: {
            line: 402,
            column: 96
          }
        }],
        line: 402
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0,
      "105": 0,
      "106": 0,
      "107": 0,
      "108": 0,
      "109": 0,
      "110": 0,
      "111": 0,
      "112": 0,
      "113": 0,
      "114": 0,
      "115": 0,
      "116": 0,
      "117": 0,
      "118": 0,
      "119": 0,
      "120": 0,
      "121": 0,
      "122": 0,
      "123": 0,
      "124": 0,
      "125": 0,
      "126": 0,
      "127": 0,
      "128": 0,
      "129": 0,
      "130": 0,
      "131": 0,
      "132": 0,
      "133": 0,
      "134": 0,
      "135": 0,
      "136": 0,
      "137": 0,
      "138": 0,
      "139": 0,
      "140": 0,
      "141": 0,
      "142": 0,
      "143": 0,
      "144": 0,
      "145": 0,
      "146": 0,
      "147": 0,
      "148": 0,
      "149": 0,
      "150": 0,
      "151": 0,
      "152": 0,
      "153": 0,
      "154": 0,
      "155": 0,
      "156": 0,
      "157": 0,
      "158": 0,
      "159": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      "15": [0, 0],
      "16": [0, 0, 0, 0],
      "17": [0, 0],
      "18": [0, 0],
      "19": [0, 0],
      "20": [0, 0],
      "21": [0, 0],
      "22": [0, 0],
      "23": [0, 0],
      "24": [0, 0],
      "25": [0, 0],
      "26": [0, 0],
      "27": [0],
      "28": [0],
      "29": [0],
      "30": [0, 0],
      "31": [0, 0],
      "32": [0, 0],
      "33": [0, 0],
      "34": [0, 0],
      "35": [0, 0],
      "36": [0, 0],
      "37": [0, 0],
      "38": [0, 0],
      "39": [0, 0],
      "40": [0, 0],
      "41": [0, 0],
      "42": [0, 0],
      "43": [0, 0],
      "44": [0, 0],
      "45": [0, 0]
    },
    inputSourceMap: {
      file: "/Users/peterkrzyzek/Development/clickup-mcp-server/src/utils/error-handling.ts",
      mappings: "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",
      names: [],
      sources: ["/Users/peterkrzyzek/Development/clickup-mcp-server/src/utils/error-handling.ts"],
      sourcesContent: ["import { z } from 'zod';\n\n/**\n * Comprehensive error handling utilities for the ClickUp MCP Server\n */\n\n// Error types\nexport enum ErrorType {\n  VALIDATION = 'VALIDATION',\n  AUTHENTICATION = 'AUTHENTICATION',\n  AUTHORIZATION = 'AUTHORIZATION',\n  NOT_FOUND = 'NOT_FOUND',\n  RATE_LIMIT = 'RATE_LIMIT',\n  API_ERROR = 'API_ERROR',\n  NETWORK_ERROR = 'NETWORK_ERROR',\n  TIMEOUT = 'TIMEOUT',\n  INTERNAL_ERROR = 'INTERNAL_ERROR',\n  WEBHOOK_ERROR = 'WEBHOOK_ERROR',\n  FILE_ERROR = 'FILE_ERROR'\n}\n\n// Error severity levels\nexport enum ErrorSeverity {\n  LOW = 'LOW',\n  MEDIUM = 'MEDIUM',\n  HIGH = 'HIGH',\n  CRITICAL = 'CRITICAL'\n}\n\n// Structured error interface\nexport interface StructuredError {\n  type: ErrorType;\n  severity: ErrorSeverity;\n  message: string;\n  code?: string;\n  details?: Record<string, any>;\n  timestamp: string;\n  requestId?: string;\n  userId?: number;\n  workspaceId?: string;\n  stack?: string;\n  retryable: boolean;\n  retryAfter?: number;\n}\n\n// Error response for MCP tools\nexport interface McpErrorResponse {\n  content: Array<{\n    type: 'text';\n    text: string;\n  }>;\n  isError: true;\n  _meta?: {\n    errorType: ErrorType;\n    severity: ErrorSeverity;\n    retryable: boolean;\n    retryAfter?: number;\n  };\n}\n\n/**\n * Create a structured error\n */\nexport const createStructuredError = (\n  type: ErrorType,\n  message: string,\n  options: {\n    severity?: ErrorSeverity;\n    code?: string;\n    details?: Record<string, any>;\n    requestId?: string;\n    userId?: number;\n    workspaceId?: string;\n    originalError?: Error;\n    retryable?: boolean;\n    retryAfter?: number;\n  } = {}\n): StructuredError => {\n  return {\n    type,\n    severity: options.severity || ErrorSeverity.MEDIUM,\n    message,\n    code: options.code,\n    details: options.details,\n    timestamp: new Date().toISOString(),\n    requestId: options.requestId,\n    userId: options.userId,\n    workspaceId: options.workspaceId,\n    stack: options.originalError?.stack,\n    retryable: options.retryable || false,\n    retryAfter: options.retryAfter\n  };\n};\n\n/**\n * Convert structured error to MCP response\n */\nexport const errorToMcpResponse = (error: StructuredError): McpErrorResponse => {\n  const userMessage = getUserFriendlyMessage(error);\n  \n  return {\n    content: [{\n      type: 'text',\n      text: userMessage\n    }],\n    isError: true,\n    _meta: {\n      errorType: error.type,\n      severity: error.severity,\n      retryable: error.retryable,\n      retryAfter: error.retryAfter\n    }\n  };\n};\n\n/**\n * Get user-friendly error message\n */\nexport const getUserFriendlyMessage = (error: StructuredError): string => {\n  const baseMessage = `Error: ${error.message}`;\n  \n  let additionalInfo = '';\n  \n  if (error.retryable && error.retryAfter) {\n    additionalInfo += `\\n\\nThis operation can be retried after ${error.retryAfter} seconds.`;\n  } else if (error.retryable) {\n    additionalInfo += '\\n\\nThis operation can be retried.';\n  }\n  \n  if (error.type === ErrorType.RATE_LIMIT) {\n    additionalInfo += '\\n\\nPlease reduce the frequency of requests.';\n  }\n  \n  if (error.type === ErrorType.AUTHENTICATION) {\n    additionalInfo += '\\n\\nPlease check your ClickUp API token.';\n  }\n  \n  if (error.type === ErrorType.VALIDATION && error.details?.errors) {\n    const validationErrors = Array.isArray(error.details.errors) \n      ? error.details.errors.join(', ')\n      : error.details.errors;\n    additionalInfo += `\\n\\nValidation errors: ${validationErrors}`;\n  }\n  \n  return baseMessage + additionalInfo;\n};\n\n/**\n * Handle ClickUp API errors\n */\nexport const handleClickUpApiError = (error: any, context?: {\n  operation?: string;\n  requestId?: string;\n  userId?: number;\n  workspaceId?: string;\n}): StructuredError => {\n  if (error.response) {\n    const status = error.response.status;\n    const data = error.response.data;\n    \n    // Map HTTP status codes to error types\n    let errorType: ErrorType;\n    let severity: ErrorSeverity;\n    let retryable = false;\n    let retryAfter: number | undefined;\n    \n    switch (status) {\n      case 400:\n        errorType = ErrorType.VALIDATION;\n        severity = ErrorSeverity.LOW;\n        break;\n      case 401:\n        errorType = ErrorType.AUTHENTICATION;\n        severity = ErrorSeverity.HIGH;\n        break;\n      case 403:\n        errorType = ErrorType.AUTHORIZATION;\n        severity = ErrorSeverity.HIGH;\n        break;\n      case 404:\n        errorType = ErrorType.NOT_FOUND;\n        severity = ErrorSeverity.LOW;\n        break;\n      case 429:\n        errorType = ErrorType.RATE_LIMIT;\n        severity = ErrorSeverity.MEDIUM;\n        retryable = true;\n        retryAfter = parseInt(error.response.headers['retry-after']) || 60;\n        break;\n      case 500:\n      case 502:\n      case 503:\n      case 504:\n        errorType = ErrorType.API_ERROR;\n        severity = ErrorSeverity.HIGH;\n        retryable = true;\n        retryAfter = 30;\n        break;\n      default:\n        errorType = ErrorType.API_ERROR;\n        severity = ErrorSeverity.MEDIUM;\n        retryable = status >= 500;\n    }\n    \n    return createStructuredError(\n      errorType,\n      data?.err || data?.error || error.message || `HTTP ${status} error`,\n      {\n        severity,\n        code: status.toString(),\n        details: {\n          status,\n          data,\n          operation: context?.operation\n        },\n        requestId: context?.requestId,\n        userId: context?.userId,\n        workspaceId: context?.workspaceId,\n        originalError: error,\n        retryable,\n        retryAfter\n      }\n    );\n  }\n  \n  if (error.code === 'ECONNABORTED' || error.code === 'ETIMEDOUT') {\n    return createStructuredError(\n      ErrorType.TIMEOUT,\n      'Request timed out',\n      {\n        severity: ErrorSeverity.MEDIUM,\n        code: error.code,\n        details: { operation: context?.operation },\n        requestId: context?.requestId,\n        userId: context?.userId,\n        workspaceId: context?.workspaceId,\n        originalError: error,\n        retryable: true,\n        retryAfter: 10\n      }\n    );\n  }\n  \n  if (error.code === 'ENOTFOUND' || error.code === 'ECONNREFUSED') {\n    return createStructuredError(\n      ErrorType.NETWORK_ERROR,\n      'Network connection failed',\n      {\n        severity: ErrorSeverity.HIGH,\n        code: error.code,\n        details: { operation: context?.operation },\n        requestId: context?.requestId,\n        userId: context?.userId,\n        workspaceId: context?.workspaceId,\n        originalError: error,\n        retryable: true,\n        retryAfter: 30\n      }\n    );\n  }\n  \n  return createStructuredError(\n    ErrorType.INTERNAL_ERROR,\n    error.message || 'Unknown error occurred',\n    {\n      severity: ErrorSeverity.HIGH,\n      details: { operation: context?.operation },\n      requestId: context?.requestId,\n      userId: context?.userId,\n      workspaceId: context?.workspaceId,\n      originalError: error,\n      retryable: false\n    }\n  );\n};\n\n/**\n * Handle validation errors\n */\nexport const handleValidationError = (\n  error: z.ZodError,\n  context?: {\n    operation?: string;\n    requestId?: string;\n  }\n): StructuredError => {\n  const errors = error.errors.map(err => `${err.path.join('.')}: ${err.message}`);\n  \n  return createStructuredError(\n    ErrorType.VALIDATION,\n    'Input validation failed',\n    {\n      severity: ErrorSeverity.LOW,\n      details: {\n        errors,\n        operation: context?.operation\n      },\n      requestId: context?.requestId,\n      retryable: false\n    }\n  );\n};\n\n/**\n * Handle webhook errors\n */\nexport const handleWebhookError = (\n  error: any,\n  context?: {\n    webhookId?: string;\n    eventType?: string;\n    requestId?: string;\n  }\n): StructuredError => {\n  return createStructuredError(\n    ErrorType.WEBHOOK_ERROR,\n    error.message || 'Webhook processing failed',\n    {\n      severity: ErrorSeverity.MEDIUM,\n      details: {\n        webhookId: context?.webhookId,\n        eventType: context?.eventType\n      },\n      requestId: context?.requestId,\n      originalError: error,\n      retryable: true,\n      retryAfter: 60\n    }\n  );\n};\n\n/**\n * Handle file operation errors\n */\nexport const handleFileError = (\n  error: any,\n  context?: {\n    filename?: string;\n    operation?: string;\n    requestId?: string;\n  }\n): StructuredError => {\n  let message = error.message || 'File operation failed';\n  let severity = ErrorSeverity.MEDIUM;\n  \n  if (error.code === 'ENOENT') {\n    message = 'File not found';\n    severity = ErrorSeverity.LOW;\n  } else if (error.code === 'EACCES') {\n    message = 'Permission denied';\n    severity = ErrorSeverity.HIGH;\n  } else if (error.code === 'ENOSPC') {\n    message = 'No space left on device';\n    severity = ErrorSeverity.HIGH;\n  }\n  \n  return createStructuredError(\n    ErrorType.FILE_ERROR,\n    message,\n    {\n      severity,\n      code: error.code,\n      details: {\n        filename: context?.filename,\n        operation: context?.operation\n      },\n      requestId: context?.requestId,\n      originalError: error,\n      retryable: error.code !== 'EACCES'\n    }\n  );\n};\n\n/**\n * Retry mechanism with exponential backoff\n */\nexport class RetryManager {\n  private maxRetries: number;\n  private baseDelay: number;\n  private maxDelay: number;\n  \n  constructor(maxRetries = 3, baseDelay = 1000, maxDelay = 30000) {\n    this.maxRetries = maxRetries;\n    this.baseDelay = baseDelay;\n    this.maxDelay = maxDelay;\n  }\n  \n  async executeWithRetry<T>(\n    operation: () => Promise<T>,\n    context?: {\n      operationName?: string;\n      requestId?: string;\n    }\n  ): Promise<T> {\n    let lastError: StructuredError | undefined;\n    \n    for (let attempt = 0; attempt <= this.maxRetries; attempt++) {\n      try {\n        return await operation();\n      } catch (error) {\n        const structuredError = error instanceof Error \n          ? handleClickUpApiError(error, { operation: context?.operationName, requestId: context?.requestId })\n          : error as StructuredError;\n        \n        lastError = structuredError;\n        \n        // Don't retry if not retryable or on last attempt\n        if (!structuredError.retryable || attempt === this.maxRetries) {\n          break;\n        }\n        \n        // Calculate delay with exponential backoff\n        const delay = Math.min(\n          this.baseDelay * Math.pow(2, attempt),\n          structuredError.retryAfter ? structuredError.retryAfter * 1000 : this.maxDelay\n        );\n        \n        console.warn(`Attempt ${attempt + 1} failed, retrying in ${delay}ms:`, structuredError.message);\n        await new Promise(resolve => setTimeout(resolve, delay));\n      }\n    }\n    \n    throw lastError;\n  }\n}\n\n/**\n * Global error logger\n */\nexport const logError = (error: StructuredError): void => {\n  const logLevel = error.severity === ErrorSeverity.CRITICAL ? 'error' :\n                   error.severity === ErrorSeverity.HIGH ? 'error' :\n                   error.severity === ErrorSeverity.MEDIUM ? 'warn' : 'info';\n  \n  const logData = {\n    timestamp: error.timestamp,\n    type: error.type,\n    severity: error.severity,\n    message: error.message,\n    code: error.code,\n    details: error.details,\n    requestId: error.requestId,\n    userId: error.userId,\n    workspaceId: error.workspaceId,\n    retryable: error.retryable\n  };\n  \n  console[logLevel](`[${error.type}] ${error.message}`, logData);\n  \n  // In production, send to monitoring service\n  if (error.severity === ErrorSeverity.CRITICAL) {\n    // Send alert to monitoring system\n    console.error('CRITICAL ERROR - IMMEDIATE ATTENTION REQUIRED', logData);\n  }\n};\n\n/**\n * Wrap MCP tool execution with error handling\n */\nexport const wrapMcpTool = <T extends any[], R>(\n  toolName: string,\n  schema: z.ZodSchema,\n  handler: (...args: T) => Promise<R>\n) => {\n  return async (args: any): Promise<any> => {\n    const requestId = generateRequestId();\n    \n    try {\n      // Validate input\n      const validatedArgs = schema.parse(args);\n      \n      // Execute handler with proper type casting\n      const result = await (handler as any)(validatedArgs);\n      \n      // Return success response\n      return {\n        content: [{\n          type: 'text',\n          text: typeof result === 'string' ? result : JSON.stringify(result, null, 2)\n        }]\n      };\n    } catch (error) {\n      let structuredError: StructuredError;\n      \n      if (error instanceof z.ZodError) {\n        structuredError = handleValidationError(error, { operation: toolName, requestId });\n      } else if (error instanceof Error) {\n        structuredError = handleClickUpApiError(error, { operation: toolName, requestId });\n      } else {\n        structuredError = error as StructuredError;\n      }\n      \n      // Log error\n      logError(structuredError);\n      \n      // Return error response\n      return errorToMcpResponse(structuredError);\n    }\n  };\n};\n\n/**\n * Generate unique request ID\n */\nexport const generateRequestId = (): string => {\n  return `req_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n};\n\n/**\n * Health check utilities\n */\nexport const performHealthCheck = async (): Promise<{\n  status: 'healthy' | 'degraded' | 'unhealthy';\n  checks: Record<string, {\n    status: 'pass' | 'fail';\n    message?: string;\n    duration?: number;\n  }>;\n}> => {\n  const checks: Record<string, any> = {};\n  \n  // Check environment variables\n  const startTime = Date.now();\n  try {\n    const envValidation = require('../utils/security').validateEnvironment();\n    checks.environment = {\n      status: envValidation.isValid ? 'pass' : 'fail',\n      message: envValidation.isValid ? 'All required environment variables present' : envValidation.errors.join(', '),\n      duration: Date.now() - startTime\n    };\n  } catch (error) {\n    checks.environment = {\n      status: 'fail',\n      message: 'Failed to validate environment',\n      duration: Date.now() - startTime\n    };\n  }\n  \n  // Check memory usage\n  const memoryUsage = process.memoryUsage();\n  const memoryThreshold = 500 * 1024 * 1024; // 500MB\n  checks.memory = {\n    status: memoryUsage.heapUsed < memoryThreshold ? 'pass' : 'fail',\n    message: `Heap used: ${Math.round(memoryUsage.heapUsed / 1024 / 1024)}MB`,\n    duration: 0\n  };\n  \n  // Determine overall status\n  const failedChecks = Object.values(checks).filter(check => check.status === 'fail').length;\n  const status = failedChecks === 0 ? 'healthy' : failedChecks <= 1 ? 'degraded' : 'unhealthy';\n  \n  return { status, checks };\n};\n"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "3c47d6c5b42fd6d299e07815fbe36cae35a84b4c"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_rykizwlco = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_rykizwlco();
cov_rykizwlco().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_rykizwlco().s[1]++;
exports.performHealthCheck = exports.generateRequestId = exports.wrapMcpTool = exports.logError = exports.RetryManager = exports.handleFileError = exports.handleWebhookError = exports.handleValidationError = exports.handleClickUpApiError = exports.getUserFriendlyMessage = exports.errorToMcpResponse = exports.createStructuredError = exports.ErrorSeverity = exports.ErrorType = void 0;
const zod_1 =
/* istanbul ignore next */
(cov_rykizwlco().s[2]++, require("zod"));
/**
 * Comprehensive error handling utilities for the ClickUp MCP Server
 */
// Error types
var ErrorType;
/* istanbul ignore next */
cov_rykizwlco().s[3]++;
(function (ErrorType) {
  /* istanbul ignore next */
  cov_rykizwlco().f[0]++;
  cov_rykizwlco().s[4]++;
  ErrorType["VALIDATION"] = "VALIDATION";
  /* istanbul ignore next */
  cov_rykizwlco().s[5]++;
  ErrorType["AUTHENTICATION"] = "AUTHENTICATION";
  /* istanbul ignore next */
  cov_rykizwlco().s[6]++;
  ErrorType["AUTHORIZATION"] = "AUTHORIZATION";
  /* istanbul ignore next */
  cov_rykizwlco().s[7]++;
  ErrorType["NOT_FOUND"] = "NOT_FOUND";
  /* istanbul ignore next */
  cov_rykizwlco().s[8]++;
  ErrorType["RATE_LIMIT"] = "RATE_LIMIT";
  /* istanbul ignore next */
  cov_rykizwlco().s[9]++;
  ErrorType["API_ERROR"] = "API_ERROR";
  /* istanbul ignore next */
  cov_rykizwlco().s[10]++;
  ErrorType["NETWORK_ERROR"] = "NETWORK_ERROR";
  /* istanbul ignore next */
  cov_rykizwlco().s[11]++;
  ErrorType["TIMEOUT"] = "TIMEOUT";
  /* istanbul ignore next */
  cov_rykizwlco().s[12]++;
  ErrorType["INTERNAL_ERROR"] = "INTERNAL_ERROR";
  /* istanbul ignore next */
  cov_rykizwlco().s[13]++;
  ErrorType["WEBHOOK_ERROR"] = "WEBHOOK_ERROR";
  /* istanbul ignore next */
  cov_rykizwlco().s[14]++;
  ErrorType["FILE_ERROR"] = "FILE_ERROR";
})(
/* istanbul ignore next */
(cov_rykizwlco().b[0][0]++, ErrorType) ||
/* istanbul ignore next */
(cov_rykizwlco().b[0][1]++, exports.ErrorType = ErrorType = {}));
// Error severity levels
var ErrorSeverity;
/* istanbul ignore next */
cov_rykizwlco().s[15]++;
(function (ErrorSeverity) {
  /* istanbul ignore next */
  cov_rykizwlco().f[1]++;
  cov_rykizwlco().s[16]++;
  ErrorSeverity["LOW"] = "LOW";
  /* istanbul ignore next */
  cov_rykizwlco().s[17]++;
  ErrorSeverity["MEDIUM"] = "MEDIUM";
  /* istanbul ignore next */
  cov_rykizwlco().s[18]++;
  ErrorSeverity["HIGH"] = "HIGH";
  /* istanbul ignore next */
  cov_rykizwlco().s[19]++;
  ErrorSeverity["CRITICAL"] = "CRITICAL";
})(
/* istanbul ignore next */
(cov_rykizwlco().b[1][0]++, ErrorSeverity) ||
/* istanbul ignore next */
(cov_rykizwlco().b[1][1]++, exports.ErrorSeverity = ErrorSeverity = {}));
/**
 * Create a structured error
 */
/* istanbul ignore next */
cov_rykizwlco().s[20]++;
const createStructuredError = (type, message, options =
/* istanbul ignore next */
(cov_rykizwlco().b[2][0]++, {})) => {
  /* istanbul ignore next */
  cov_rykizwlco().f[2]++;
  cov_rykizwlco().s[21]++;
  return {
    type,
    severity:
    /* istanbul ignore next */
    (cov_rykizwlco().b[3][0]++, options.severity) ||
    /* istanbul ignore next */
    (cov_rykizwlco().b[3][1]++, ErrorSeverity.MEDIUM),
    message,
    code: options.code,
    details: options.details,
    timestamp: new Date().toISOString(),
    requestId: options.requestId,
    userId: options.userId,
    workspaceId: options.workspaceId,
    stack: options.originalError?.stack,
    retryable:
    /* istanbul ignore next */
    (cov_rykizwlco().b[4][0]++, options.retryable) ||
    /* istanbul ignore next */
    (cov_rykizwlco().b[4][1]++, false),
    retryAfter: options.retryAfter
  };
};
/* istanbul ignore next */
cov_rykizwlco().s[22]++;
exports.createStructuredError = createStructuredError;
/**
 * Convert structured error to MCP response
 */
/* istanbul ignore next */
cov_rykizwlco().s[23]++;
const errorToMcpResponse = error => {
  /* istanbul ignore next */
  cov_rykizwlco().f[3]++;
  const userMessage =
  /* istanbul ignore next */
  (cov_rykizwlco().s[24]++, (0, exports.getUserFriendlyMessage)(error));
  /* istanbul ignore next */
  cov_rykizwlco().s[25]++;
  return {
    content: [{
      type: 'text',
      text: userMessage
    }],
    isError: true,
    _meta: {
      errorType: error.type,
      severity: error.severity,
      retryable: error.retryable,
      retryAfter: error.retryAfter
    }
  };
};
/* istanbul ignore next */
cov_rykizwlco().s[26]++;
exports.errorToMcpResponse = errorToMcpResponse;
/**
 * Get user-friendly error message
 */
/* istanbul ignore next */
cov_rykizwlco().s[27]++;
const getUserFriendlyMessage = error => {
  /* istanbul ignore next */
  cov_rykizwlco().f[4]++;
  const baseMessage =
  /* istanbul ignore next */
  (cov_rykizwlco().s[28]++, `Error: ${error.message}`);
  let additionalInfo =
  /* istanbul ignore next */
  (cov_rykizwlco().s[29]++, '');
  /* istanbul ignore next */
  cov_rykizwlco().s[30]++;
  if (
  /* istanbul ignore next */
  (cov_rykizwlco().b[6][0]++, error.retryable) &&
  /* istanbul ignore next */
  (cov_rykizwlco().b[6][1]++, error.retryAfter)) {
    /* istanbul ignore next */
    cov_rykizwlco().b[5][0]++;
    cov_rykizwlco().s[31]++;
    additionalInfo += `\n\nThis operation can be retried after ${error.retryAfter} seconds.`;
  } else {
    /* istanbul ignore next */
    cov_rykizwlco().b[5][1]++;
    cov_rykizwlco().s[32]++;
    if (error.retryable) {
      /* istanbul ignore next */
      cov_rykizwlco().b[7][0]++;
      cov_rykizwlco().s[33]++;
      additionalInfo += '\n\nThis operation can be retried.';
    } else
    /* istanbul ignore next */
    {
      cov_rykizwlco().b[7][1]++;
    }
  }
  /* istanbul ignore next */
  cov_rykizwlco().s[34]++;
  if (error.type === ErrorType.RATE_LIMIT) {
    /* istanbul ignore next */
    cov_rykizwlco().b[8][0]++;
    cov_rykizwlco().s[35]++;
    additionalInfo += '\n\nPlease reduce the frequency of requests.';
  } else
  /* istanbul ignore next */
  {
    cov_rykizwlco().b[8][1]++;
  }
  cov_rykizwlco().s[36]++;
  if (error.type === ErrorType.AUTHENTICATION) {
    /* istanbul ignore next */
    cov_rykizwlco().b[9][0]++;
    cov_rykizwlco().s[37]++;
    additionalInfo += '\n\nPlease check your ClickUp API token.';
  } else
  /* istanbul ignore next */
  {
    cov_rykizwlco().b[9][1]++;
  }
  cov_rykizwlco().s[38]++;
  if (
  /* istanbul ignore next */
  (cov_rykizwlco().b[11][0]++, error.type === ErrorType.VALIDATION) &&
  /* istanbul ignore next */
  (cov_rykizwlco().b[11][1]++, error.details?.errors)) {
    /* istanbul ignore next */
    cov_rykizwlco().b[10][0]++;
    const validationErrors =
    /* istanbul ignore next */
    (cov_rykizwlco().s[39]++, Array.isArray(error.details.errors) ?
    /* istanbul ignore next */
    (cov_rykizwlco().b[12][0]++, error.details.errors.join(', ')) :
    /* istanbul ignore next */
    (cov_rykizwlco().b[12][1]++, error.details.errors));
    /* istanbul ignore next */
    cov_rykizwlco().s[40]++;
    additionalInfo += `\n\nValidation errors: ${validationErrors}`;
  } else
  /* istanbul ignore next */
  {
    cov_rykizwlco().b[10][1]++;
  }
  cov_rykizwlco().s[41]++;
  return baseMessage + additionalInfo;
};
/* istanbul ignore next */
cov_rykizwlco().s[42]++;
exports.getUserFriendlyMessage = getUserFriendlyMessage;
/**
 * Handle ClickUp API errors
 */
/* istanbul ignore next */
cov_rykizwlco().s[43]++;
const handleClickUpApiError = (error, context) => {
  /* istanbul ignore next */
  cov_rykizwlco().f[5]++;
  cov_rykizwlco().s[44]++;
  if (error.response) {
    /* istanbul ignore next */
    cov_rykizwlco().b[13][0]++;
    const status =
    /* istanbul ignore next */
    (cov_rykizwlco().s[45]++, error.response.status);
    const data =
    /* istanbul ignore next */
    (cov_rykizwlco().s[46]++, error.response.data);
    // Map HTTP status codes to error types
    let errorType;
    let severity;
    let retryable =
    /* istanbul ignore next */
    (cov_rykizwlco().s[47]++, false);
    let retryAfter;
    /* istanbul ignore next */
    cov_rykizwlco().s[48]++;
    switch (status) {
      case 400:
        /* istanbul ignore next */
        cov_rykizwlco().b[14][0]++;
        cov_rykizwlco().s[49]++;
        errorType = ErrorType.VALIDATION;
        /* istanbul ignore next */
        cov_rykizwlco().s[50]++;
        severity = ErrorSeverity.LOW;
        /* istanbul ignore next */
        cov_rykizwlco().s[51]++;
        break;
      case 401:
        /* istanbul ignore next */
        cov_rykizwlco().b[14][1]++;
        cov_rykizwlco().s[52]++;
        errorType = ErrorType.AUTHENTICATION;
        /* istanbul ignore next */
        cov_rykizwlco().s[53]++;
        severity = ErrorSeverity.HIGH;
        /* istanbul ignore next */
        cov_rykizwlco().s[54]++;
        break;
      case 403:
        /* istanbul ignore next */
        cov_rykizwlco().b[14][2]++;
        cov_rykizwlco().s[55]++;
        errorType = ErrorType.AUTHORIZATION;
        /* istanbul ignore next */
        cov_rykizwlco().s[56]++;
        severity = ErrorSeverity.HIGH;
        /* istanbul ignore next */
        cov_rykizwlco().s[57]++;
        break;
      case 404:
        /* istanbul ignore next */
        cov_rykizwlco().b[14][3]++;
        cov_rykizwlco().s[58]++;
        errorType = ErrorType.NOT_FOUND;
        /* istanbul ignore next */
        cov_rykizwlco().s[59]++;
        severity = ErrorSeverity.LOW;
        /* istanbul ignore next */
        cov_rykizwlco().s[60]++;
        break;
      case 429:
        /* istanbul ignore next */
        cov_rykizwlco().b[14][4]++;
        cov_rykizwlco().s[61]++;
        errorType = ErrorType.RATE_LIMIT;
        /* istanbul ignore next */
        cov_rykizwlco().s[62]++;
        severity = ErrorSeverity.MEDIUM;
        /* istanbul ignore next */
        cov_rykizwlco().s[63]++;
        retryable = true;
        /* istanbul ignore next */
        cov_rykizwlco().s[64]++;
        retryAfter =
        /* istanbul ignore next */
        (cov_rykizwlco().b[15][0]++, parseInt(error.response.headers['retry-after'])) ||
        /* istanbul ignore next */
        (cov_rykizwlco().b[15][1]++, 60);
        /* istanbul ignore next */
        cov_rykizwlco().s[65]++;
        break;
      case 500:
        /* istanbul ignore next */
        cov_rykizwlco().b[14][5]++;
      case 502:
        /* istanbul ignore next */
        cov_rykizwlco().b[14][6]++;
      case 503:
        /* istanbul ignore next */
        cov_rykizwlco().b[14][7]++;
      case 504:
        /* istanbul ignore next */
        cov_rykizwlco().b[14][8]++;
        cov_rykizwlco().s[66]++;
        errorType = ErrorType.API_ERROR;
        /* istanbul ignore next */
        cov_rykizwlco().s[67]++;
        severity = ErrorSeverity.HIGH;
        /* istanbul ignore next */
        cov_rykizwlco().s[68]++;
        retryable = true;
        /* istanbul ignore next */
        cov_rykizwlco().s[69]++;
        retryAfter = 30;
        /* istanbul ignore next */
        cov_rykizwlco().s[70]++;
        break;
      default:
        /* istanbul ignore next */
        cov_rykizwlco().b[14][9]++;
        cov_rykizwlco().s[71]++;
        errorType = ErrorType.API_ERROR;
        /* istanbul ignore next */
        cov_rykizwlco().s[72]++;
        severity = ErrorSeverity.MEDIUM;
        /* istanbul ignore next */
        cov_rykizwlco().s[73]++;
        retryable = status >= 500;
    }
    /* istanbul ignore next */
    cov_rykizwlco().s[74]++;
    return (0, exports.createStructuredError)(errorType,
    /* istanbul ignore next */
    (cov_rykizwlco().b[16][0]++, data?.err) ||
    /* istanbul ignore next */
    (cov_rykizwlco().b[16][1]++, data?.error) ||
    /* istanbul ignore next */
    (cov_rykizwlco().b[16][2]++, error.message) ||
    /* istanbul ignore next */
    (cov_rykizwlco().b[16][3]++, `HTTP ${status} error`), {
      severity,
      code: status.toString(),
      details: {
        status,
        data,
        operation: context?.operation
      },
      requestId: context?.requestId,
      userId: context?.userId,
      workspaceId: context?.workspaceId,
      originalError: error,
      retryable,
      retryAfter
    });
  } else
  /* istanbul ignore next */
  {
    cov_rykizwlco().b[13][1]++;
  }
  cov_rykizwlco().s[75]++;
  if (
  /* istanbul ignore next */
  (cov_rykizwlco().b[18][0]++, error.code === 'ECONNABORTED') ||
  /* istanbul ignore next */
  (cov_rykizwlco().b[18][1]++, error.code === 'ETIMEDOUT')) {
    /* istanbul ignore next */
    cov_rykizwlco().b[17][0]++;
    cov_rykizwlco().s[76]++;
    return (0, exports.createStructuredError)(ErrorType.TIMEOUT, 'Request timed out', {
      severity: ErrorSeverity.MEDIUM,
      code: error.code,
      details: {
        operation: context?.operation
      },
      requestId: context?.requestId,
      userId: context?.userId,
      workspaceId: context?.workspaceId,
      originalError: error,
      retryable: true,
      retryAfter: 10
    });
  } else
  /* istanbul ignore next */
  {
    cov_rykizwlco().b[17][1]++;
  }
  cov_rykizwlco().s[77]++;
  if (
  /* istanbul ignore next */
  (cov_rykizwlco().b[20][0]++, error.code === 'ENOTFOUND') ||
  /* istanbul ignore next */
  (cov_rykizwlco().b[20][1]++, error.code === 'ECONNREFUSED')) {
    /* istanbul ignore next */
    cov_rykizwlco().b[19][0]++;
    cov_rykizwlco().s[78]++;
    return (0, exports.createStructuredError)(ErrorType.NETWORK_ERROR, 'Network connection failed', {
      severity: ErrorSeverity.HIGH,
      code: error.code,
      details: {
        operation: context?.operation
      },
      requestId: context?.requestId,
      userId: context?.userId,
      workspaceId: context?.workspaceId,
      originalError: error,
      retryable: true,
      retryAfter: 30
    });
  } else
  /* istanbul ignore next */
  {
    cov_rykizwlco().b[19][1]++;
  }
  cov_rykizwlco().s[79]++;
  return (0, exports.createStructuredError)(ErrorType.INTERNAL_ERROR,
  /* istanbul ignore next */
  (cov_rykizwlco().b[21][0]++, error.message) ||
  /* istanbul ignore next */
  (cov_rykizwlco().b[21][1]++, 'Unknown error occurred'), {
    severity: ErrorSeverity.HIGH,
    details: {
      operation: context?.operation
    },
    requestId: context?.requestId,
    userId: context?.userId,
    workspaceId: context?.workspaceId,
    originalError: error,
    retryable: false
  });
};
/* istanbul ignore next */
cov_rykizwlco().s[80]++;
exports.handleClickUpApiError = handleClickUpApiError;
/**
 * Handle validation errors
 */
/* istanbul ignore next */
cov_rykizwlco().s[81]++;
const handleValidationError = (error, context) => {
  /* istanbul ignore next */
  cov_rykizwlco().f[6]++;
  const errors =
  /* istanbul ignore next */
  (cov_rykizwlco().s[82]++, error.errors.map(err => {
    /* istanbul ignore next */
    cov_rykizwlco().f[7]++;
    cov_rykizwlco().s[83]++;
    return `${err.path.join('.')}: ${err.message}`;
  }));
  /* istanbul ignore next */
  cov_rykizwlco().s[84]++;
  return (0, exports.createStructuredError)(ErrorType.VALIDATION, 'Input validation failed', {
    severity: ErrorSeverity.LOW,
    details: {
      errors,
      operation: context?.operation
    },
    requestId: context?.requestId,
    retryable: false
  });
};
/* istanbul ignore next */
cov_rykizwlco().s[85]++;
exports.handleValidationError = handleValidationError;
/**
 * Handle webhook errors
 */
/* istanbul ignore next */
cov_rykizwlco().s[86]++;
const handleWebhookError = (error, context) => {
  /* istanbul ignore next */
  cov_rykizwlco().f[8]++;
  cov_rykizwlco().s[87]++;
  return (0, exports.createStructuredError)(ErrorType.WEBHOOK_ERROR,
  /* istanbul ignore next */
  (cov_rykizwlco().b[22][0]++, error.message) ||
  /* istanbul ignore next */
  (cov_rykizwlco().b[22][1]++, 'Webhook processing failed'), {
    severity: ErrorSeverity.MEDIUM,
    details: {
      webhookId: context?.webhookId,
      eventType: context?.eventType
    },
    requestId: context?.requestId,
    originalError: error,
    retryable: true,
    retryAfter: 60
  });
};
/* istanbul ignore next */
cov_rykizwlco().s[88]++;
exports.handleWebhookError = handleWebhookError;
/**
 * Handle file operation errors
 */
/* istanbul ignore next */
cov_rykizwlco().s[89]++;
const handleFileError = (error, context) => {
  /* istanbul ignore next */
  cov_rykizwlco().f[9]++;
  let message =
  /* istanbul ignore next */
  (cov_rykizwlco().s[90]++,
  /* istanbul ignore next */
  (cov_rykizwlco().b[23][0]++, error.message) ||
  /* istanbul ignore next */
  (cov_rykizwlco().b[23][1]++, 'File operation failed'));
  let severity =
  /* istanbul ignore next */
  (cov_rykizwlco().s[91]++, ErrorSeverity.MEDIUM);
  /* istanbul ignore next */
  cov_rykizwlco().s[92]++;
  if (error.code === 'ENOENT') {
    /* istanbul ignore next */
    cov_rykizwlco().b[24][0]++;
    cov_rykizwlco().s[93]++;
    message = 'File not found';
    /* istanbul ignore next */
    cov_rykizwlco().s[94]++;
    severity = ErrorSeverity.LOW;
  } else {
    /* istanbul ignore next */
    cov_rykizwlco().b[24][1]++;
    cov_rykizwlco().s[95]++;
    if (error.code === 'EACCES') {
      /* istanbul ignore next */
      cov_rykizwlco().b[25][0]++;
      cov_rykizwlco().s[96]++;
      message = 'Permission denied';
      /* istanbul ignore next */
      cov_rykizwlco().s[97]++;
      severity = ErrorSeverity.HIGH;
    } else {
      /* istanbul ignore next */
      cov_rykizwlco().b[25][1]++;
      cov_rykizwlco().s[98]++;
      if (error.code === 'ENOSPC') {
        /* istanbul ignore next */
        cov_rykizwlco().b[26][0]++;
        cov_rykizwlco().s[99]++;
        message = 'No space left on device';
        /* istanbul ignore next */
        cov_rykizwlco().s[100]++;
        severity = ErrorSeverity.HIGH;
      } else
      /* istanbul ignore next */
      {
        cov_rykizwlco().b[26][1]++;
      }
    }
  }
  /* istanbul ignore next */
  cov_rykizwlco().s[101]++;
  return (0, exports.createStructuredError)(ErrorType.FILE_ERROR, message, {
    severity,
    code: error.code,
    details: {
      filename: context?.filename,
      operation: context?.operation
    },
    requestId: context?.requestId,
    originalError: error,
    retryable: error.code !== 'EACCES'
  });
};
/* istanbul ignore next */
cov_rykizwlco().s[102]++;
exports.handleFileError = handleFileError;
/**
 * Retry mechanism with exponential backoff
 */
class RetryManager {
  constructor(maxRetries =
  /* istanbul ignore next */
  (cov_rykizwlco().b[27][0]++, 3), baseDelay =
  /* istanbul ignore next */
  (cov_rykizwlco().b[28][0]++, 1000), maxDelay =
  /* istanbul ignore next */
  (cov_rykizwlco().b[29][0]++, 30000)) {
    /* istanbul ignore next */
    cov_rykizwlco().f[10]++;
    cov_rykizwlco().s[103]++;
    this.maxRetries = maxRetries;
    /* istanbul ignore next */
    cov_rykizwlco().s[104]++;
    this.baseDelay = baseDelay;
    /* istanbul ignore next */
    cov_rykizwlco().s[105]++;
    this.maxDelay = maxDelay;
  }
  async executeWithRetry(operation, context) {
    /* istanbul ignore next */
    cov_rykizwlco().f[11]++;
    let lastError;
    /* istanbul ignore next */
    cov_rykizwlco().s[106]++;
    for (let attempt =
    /* istanbul ignore next */
    (cov_rykizwlco().s[107]++, 0); attempt <= this.maxRetries; attempt++) {
      /* istanbul ignore next */
      cov_rykizwlco().s[108]++;
      try {
        /* istanbul ignore next */
        cov_rykizwlco().s[109]++;
        return await operation();
      } catch (error) {
        const structuredError =
        /* istanbul ignore next */
        (cov_rykizwlco().s[110]++, error instanceof Error ?
        /* istanbul ignore next */
        (cov_rykizwlco().b[30][0]++, (0, exports.handleClickUpApiError)(error, {
          operation: context?.operationName,
          requestId: context?.requestId
        })) :
        /* istanbul ignore next */
        (cov_rykizwlco().b[30][1]++, error));
        /* istanbul ignore next */
        cov_rykizwlco().s[111]++;
        lastError = structuredError;
        // Don't retry if not retryable or on last attempt
        /* istanbul ignore next */
        cov_rykizwlco().s[112]++;
        if (
        /* istanbul ignore next */
        (cov_rykizwlco().b[32][0]++, !structuredError.retryable) ||
        /* istanbul ignore next */
        (cov_rykizwlco().b[32][1]++, attempt === this.maxRetries)) {
          /* istanbul ignore next */
          cov_rykizwlco().b[31][0]++;
          cov_rykizwlco().s[113]++;
          break;
        } else
        /* istanbul ignore next */
        {
          cov_rykizwlco().b[31][1]++;
        }
        // Calculate delay with exponential backoff
        const delay =
        /* istanbul ignore next */
        (cov_rykizwlco().s[114]++, Math.min(this.baseDelay * Math.pow(2, attempt), structuredError.retryAfter ?
        /* istanbul ignore next */
        (cov_rykizwlco().b[33][0]++, structuredError.retryAfter * 1000) :
        /* istanbul ignore next */
        (cov_rykizwlco().b[33][1]++, this.maxDelay)));
        /* istanbul ignore next */
        cov_rykizwlco().s[115]++;
        console.warn(`Attempt ${attempt + 1} failed, retrying in ${delay}ms:`, structuredError.message);
        /* istanbul ignore next */
        cov_rykizwlco().s[116]++;
        await new Promise(resolve => {
          /* istanbul ignore next */
          cov_rykizwlco().f[12]++;
          cov_rykizwlco().s[117]++;
          return setTimeout(resolve, delay);
        });
      }
    }
    /* istanbul ignore next */
    cov_rykizwlco().s[118]++;
    throw lastError;
  }
}
/* istanbul ignore next */
cov_rykizwlco().s[119]++;
exports.RetryManager = RetryManager;
/**
 * Global error logger
 */
/* istanbul ignore next */
cov_rykizwlco().s[120]++;
const logError = error => {
  /* istanbul ignore next */
  cov_rykizwlco().f[13]++;
  const logLevel =
  /* istanbul ignore next */
  (cov_rykizwlco().s[121]++, error.severity === ErrorSeverity.CRITICAL ?
  /* istanbul ignore next */
  (cov_rykizwlco().b[34][0]++, 'error') :
  /* istanbul ignore next */
  (cov_rykizwlco().b[34][1]++, error.severity === ErrorSeverity.HIGH ?
  /* istanbul ignore next */
  (cov_rykizwlco().b[35][0]++, 'error') :
  /* istanbul ignore next */
  (cov_rykizwlco().b[35][1]++, error.severity === ErrorSeverity.MEDIUM ?
  /* istanbul ignore next */
  (cov_rykizwlco().b[36][0]++, 'warn') :
  /* istanbul ignore next */
  (cov_rykizwlco().b[36][1]++, 'info'))));
  const logData =
  /* istanbul ignore next */
  (cov_rykizwlco().s[122]++, {
    timestamp: error.timestamp,
    type: error.type,
    severity: error.severity,
    message: error.message,
    code: error.code,
    details: error.details,
    requestId: error.requestId,
    userId: error.userId,
    workspaceId: error.workspaceId,
    retryable: error.retryable
  });
  /* istanbul ignore next */
  cov_rykizwlco().s[123]++;
  console[logLevel](`[${error.type}] ${error.message}`, logData);
  // In production, send to monitoring service
  /* istanbul ignore next */
  cov_rykizwlco().s[124]++;
  if (error.severity === ErrorSeverity.CRITICAL) {
    /* istanbul ignore next */
    cov_rykizwlco().b[37][0]++;
    cov_rykizwlco().s[125]++;
    // Send alert to monitoring system
    console.error('CRITICAL ERROR - IMMEDIATE ATTENTION REQUIRED', logData);
  } else
  /* istanbul ignore next */
  {
    cov_rykizwlco().b[37][1]++;
  }
};
/* istanbul ignore next */
cov_rykizwlco().s[126]++;
exports.logError = logError;
/**
 * Wrap MCP tool execution with error handling
 */
/* istanbul ignore next */
cov_rykizwlco().s[127]++;
const wrapMcpTool = (toolName, schema, handler) => {
  /* istanbul ignore next */
  cov_rykizwlco().f[14]++;
  cov_rykizwlco().s[128]++;
  return async args => {
    /* istanbul ignore next */
    cov_rykizwlco().f[15]++;
    const requestId =
    /* istanbul ignore next */
    (cov_rykizwlco().s[129]++, (0, exports.generateRequestId)());
    /* istanbul ignore next */
    cov_rykizwlco().s[130]++;
    try {
      // Validate input
      const validatedArgs =
      /* istanbul ignore next */
      (cov_rykizwlco().s[131]++, schema.parse(args));
      // Execute handler with proper type casting
      const result =
      /* istanbul ignore next */
      (cov_rykizwlco().s[132]++, await handler(validatedArgs));
      // Return success response
      /* istanbul ignore next */
      cov_rykizwlco().s[133]++;
      return {
        content: [{
          type: 'text',
          text: typeof result === 'string' ?
          /* istanbul ignore next */
          (cov_rykizwlco().b[38][0]++, result) :
          /* istanbul ignore next */
          (cov_rykizwlco().b[38][1]++, JSON.stringify(result, null, 2))
        }]
      };
    } catch (error) {
      let structuredError;
      /* istanbul ignore next */
      cov_rykizwlco().s[134]++;
      if (error instanceof zod_1.z.ZodError) {
        /* istanbul ignore next */
        cov_rykizwlco().b[39][0]++;
        cov_rykizwlco().s[135]++;
        structuredError = (0, exports.handleValidationError)(error, {
          operation: toolName,
          requestId
        });
      } else {
        /* istanbul ignore next */
        cov_rykizwlco().b[39][1]++;
        cov_rykizwlco().s[136]++;
        if (error instanceof Error) {
          /* istanbul ignore next */
          cov_rykizwlco().b[40][0]++;
          cov_rykizwlco().s[137]++;
          structuredError = (0, exports.handleClickUpApiError)(error, {
            operation: toolName,
            requestId
          });
        } else {
          /* istanbul ignore next */
          cov_rykizwlco().b[40][1]++;
          cov_rykizwlco().s[138]++;
          structuredError = error;
        }
      }
      // Log error
      /* istanbul ignore next */
      cov_rykizwlco().s[139]++;
      (0, exports.logError)(structuredError);
      // Return error response
      /* istanbul ignore next */
      cov_rykizwlco().s[140]++;
      return (0, exports.errorToMcpResponse)(structuredError);
    }
  };
};
/* istanbul ignore next */
cov_rykizwlco().s[141]++;
exports.wrapMcpTool = wrapMcpTool;
/**
 * Generate unique request ID
 */
/* istanbul ignore next */
cov_rykizwlco().s[142]++;
const generateRequestId = () => {
  /* istanbul ignore next */
  cov_rykizwlco().f[16]++;
  cov_rykizwlco().s[143]++;
  return `req_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
};
/* istanbul ignore next */
cov_rykizwlco().s[144]++;
exports.generateRequestId = generateRequestId;
/**
 * Health check utilities
 */
/* istanbul ignore next */
cov_rykizwlco().s[145]++;
const performHealthCheck = async () => {
  /* istanbul ignore next */
  cov_rykizwlco().f[17]++;
  const checks =
  /* istanbul ignore next */
  (cov_rykizwlco().s[146]++, {});
  // Check environment variables
  const startTime =
  /* istanbul ignore next */
  (cov_rykizwlco().s[147]++, Date.now());
  /* istanbul ignore next */
  cov_rykizwlco().s[148]++;
  try {
    const envValidation =
    /* istanbul ignore next */
    (cov_rykizwlco().s[149]++, require('../utils/security').validateEnvironment());
    /* istanbul ignore next */
    cov_rykizwlco().s[150]++;
    checks.environment = {
      status: envValidation.isValid ?
      /* istanbul ignore next */
      (cov_rykizwlco().b[41][0]++, 'pass') :
      /* istanbul ignore next */
      (cov_rykizwlco().b[41][1]++, 'fail'),
      message: envValidation.isValid ?
      /* istanbul ignore next */
      (cov_rykizwlco().b[42][0]++, 'All required environment variables present') :
      /* istanbul ignore next */
      (cov_rykizwlco().b[42][1]++, envValidation.errors.join(', ')),
      duration: Date.now() - startTime
    };
  } catch (error) {
    /* istanbul ignore next */
    cov_rykizwlco().s[151]++;
    checks.environment = {
      status: 'fail',
      message: 'Failed to validate environment',
      duration: Date.now() - startTime
    };
  }
  // Check memory usage
  const memoryUsage =
  /* istanbul ignore next */
  (cov_rykizwlco().s[152]++, process.memoryUsage());
  const memoryThreshold =
  /* istanbul ignore next */
  (cov_rykizwlco().s[153]++, 500 * 1024 * 1024); // 500MB
  /* istanbul ignore next */
  cov_rykizwlco().s[154]++;
  checks.memory = {
    status: memoryUsage.heapUsed < memoryThreshold ?
    /* istanbul ignore next */
    (cov_rykizwlco().b[43][0]++, 'pass') :
    /* istanbul ignore next */
    (cov_rykizwlco().b[43][1]++, 'fail'),
    message: `Heap used: ${Math.round(memoryUsage.heapUsed / 1024 / 1024)}MB`,
    duration: 0
  };
  // Determine overall status
  const failedChecks =
  /* istanbul ignore next */
  (cov_rykizwlco().s[155]++, Object.values(checks).filter(check => {
    /* istanbul ignore next */
    cov_rykizwlco().f[18]++;
    cov_rykizwlco().s[156]++;
    return check.status === 'fail';
  }).length);
  const status =
  /* istanbul ignore next */
  (cov_rykizwlco().s[157]++, failedChecks === 0 ?
  /* istanbul ignore next */
  (cov_rykizwlco().b[44][0]++, 'healthy') :
  /* istanbul ignore next */
  (cov_rykizwlco().b[44][1]++, failedChecks <= 1 ?
  /* istanbul ignore next */
  (cov_rykizwlco().b[45][0]++, 'degraded') :
  /* istanbul ignore next */
  (cov_rykizwlco().b[45][1]++, 'unhealthy')));
  /* istanbul ignore next */
  cov_rykizwlco().s[158]++;
  return {
    status,
    checks
  };
};
/* istanbul ignore next */
cov_rykizwlco().s[159]++;
exports.performHealthCheck = performHealthCheck;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
{"version":3,"names":["cov_2rmy2e8nx0","actualCoverage","prepareContentForClickUp","processClickUpResponse","TasksClient","constructor","client","f","s","getTasksFromList","listId","params","result","get","b","tasks","Array","isArray","map","task","getTask","taskId","createTask","processedParams","description","contentData","post","updateTask","put","deleteTask","delete","getSubtasks","list","id","Error","subtasks","filter","parent","error","console","createTasksClient"],"sources":["/Users/peterkrzyzek/Development/clickup-mcp-server/src/clickup-client/tasks.ts"],"sourcesContent":["import { ClickUpClient } from './index.js';\nimport { prepareContentForClickUp, processClickUpResponse } from '../utils/markdown.js';\n\nexport interface Task {\n  id: string;\n  name: string;\n  description?: string;\n  text_content?: string; // Plain text version of description\n  description_markdown?: string; // Markdown version for display\n  status?: {\n    status: string;\n    color: string;\n  };\n  date_created?: string;\n  date_updated?: string;\n  date_closed?: string;\n  creator?: {\n    id: number;\n    username: string;\n    email: string;\n  };\n  assignees?: Array<{\n    id: number;\n    username: string;\n    email: string;\n  }>;\n  priority?: {\n    id: string;\n    priority: string;\n    color: string;\n  };\n  due_date?: string | null;\n  start_date?: string | null;\n  time_estimate?: number | null;\n  time_spent?: number | null;\n  custom_fields?: Array<any>;\n  list?: {\n    id: string;\n    name: string;\n  };\n  folder?: {\n    id: string;\n    name: string;\n  };\n  space?: {\n    id: string;\n    name: string;\n  };\n  url: string;\n  subtasks?: Task[]; // Add subtasks property\n  parent?: string; // Add parent property\n  top_level_parent?: string; // Add top_level_parent property\n}\n\nexport interface CreateTaskParams {\n  name: string;\n  description?: string;\n  assignees?: number[];\n  tags?: string[];\n  status?: string;\n  priority?: number;\n  due_date?: number;\n  due_date_time?: boolean;\n  time_estimate?: number;\n  start_date?: number;\n  start_date_time?: boolean;\n  notify_all?: boolean;\n  parent?: string;\n  links_to?: string;\n  check_required_custom_fields?: boolean;\n  custom_fields?: Array<{\n    id: string;\n    value: any;\n  }>;\n}\n\nexport interface UpdateTaskParams {\n  name?: string;\n  description?: string;\n  assignees?: number[];\n  status?: string;\n  priority?: number;\n  due_date?: number;\n  due_date_time?: boolean;\n  time_estimate?: number;\n  start_date?: number;\n  start_date_time?: boolean;\n  notify_all?: boolean;\n  parent?: string;\n  custom_fields?: Array<{\n    id: string;\n    value: any;\n  }>;\n}\n\nexport interface GetTasksParams {\n  page?: number;\n  order_by?: string;\n  reverse?: boolean;\n  subtasks?: boolean;\n  statuses?: string[];\n  include_closed?: boolean;\n  assignees?: number[];\n  due_date_gt?: number;\n  due_date_lt?: number;\n  date_created_gt?: number;\n  date_created_lt?: number;\n  date_updated_gt?: number;\n  date_updated_lt?: number;\n  custom_fields?: Array<{\n    field_id: string;\n    operator: string;\n    value: any;\n  }>;\n}\n\nexport class TasksClient {\n  private client: ClickUpClient;\n\n  constructor(client: ClickUpClient) {\n    this.client = client;\n  }\n\n  /**\n   * Get tasks from a specific list\n   * @param listId The ID of the list to get tasks from\n   * @param params Optional parameters for filtering tasks\n   * @returns A list of tasks with processed content\n   */\n  async getTasksFromList(listId: string, params?: GetTasksParams): Promise<{ tasks: Task[] }> {\n    const result = await this.client.get(`/list/${listId}/task`, params);\n    \n    // Process each task's content\n    if (result.tasks && Array.isArray(result.tasks)) {\n      result.tasks = result.tasks.map((task: any) => processClickUpResponse(task));\n    }\n    \n    return result;\n  }\n\n  // Removed pseudo endpoints for getting tasks from spaces and folders\n\n  /**\n   * Get a specific task by ID\n   * @param taskId The ID of the task to get\n   * @param params Optional parameters (include_subtasks)\n   * @returns The task details with processed content\n   */\n  async getTask(taskId: string, params?: { include_subtasks?: boolean }): Promise<Task> {\n    const result = await this.client.get(`/task/${taskId}`, params);\n    return processClickUpResponse(result);\n  }\n\n  /**\n   * Create a new task in a list\n   * @param listId The ID of the list to create the task in\n   * @param params The task parameters (supports markdown in description)\n   * @returns The created task with processed content\n   */\n  async createTask(listId: string, params: CreateTaskParams): Promise<Task> {\n    // Process description for markdown support\n    const processedParams = { ...params };\n    if (params.description) {\n      const contentData = prepareContentForClickUp(params.description);\n      processedParams.description = contentData.description;\n      // Note: ClickUp API doesn't accept text_content on create, it generates it\n    }\n    \n    const result = await this.client.post(`/list/${listId}/task`, processedParams);\n    return processClickUpResponse(result);\n  }\n\n  /**\n   * Update an existing task\n   * @param taskId The ID of the task to update\n   * @param params The task parameters to update (supports markdown in description)\n   * @returns The updated task with processed content\n   */\n  async updateTask(taskId: string, params: UpdateTaskParams): Promise<Task> {\n    // Process description for markdown support\n    const processedParams = { ...params };\n    if (params.description) {\n      const contentData = prepareContentForClickUp(params.description);\n      processedParams.description = contentData.description;\n      // Note: ClickUp API doesn't accept text_content on update, it generates it\n    }\n    \n    const result = await this.client.put(`/task/${taskId}`, processedParams);\n    return processClickUpResponse(result);\n  }\n\n  /**\n   * Delete a task\n   * @param taskId The ID of the task to delete\n   * @returns Success message\n   */\n  async deleteTask(taskId: string): Promise<{ success: boolean }> {\n    return this.client.delete(`/task/${taskId}`);\n  }\n\n  /**\n   * Get subtasks of a specific task\n   * @param taskId The ID of the task to get subtasks for\n   * @returns A list of subtasks\n   */\n  async getSubtasks(taskId: string): Promise<Task[]> {\n    try {\n      // First, we need to get the task to find its list ID\n      const task = await this.getTask(taskId);\n      if (!task.list || !task.list.id) {\n        throw new Error('Task does not have a list ID');\n      }\n      \n      // Then, get all tasks from the list with subtasks included\n      const result = await this.getTasksFromList(task.list.id, { subtasks: true });\n      \n      // Filter tasks to find those that have the specified task as parent\n      return result.tasks.filter(task => task.parent === taskId);\n    } catch (error) {\n      console.error(`Error getting subtasks for task ${taskId}:`, error);\n      return [];\n    }\n  }\n}\n\nexport const createTasksClient = (client: ClickUpClient): TasksClient => {\n  return new TasksClient(client);\n};\n"],"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","ignoreList":[]}
{"version":3,"names":["cov_2gzql2q6t1","actualCoverage","prepareContentForClickUp","processClickUpResponse","CommentsClient","constructor","client","f","s","getTaskComments","taskId","params","result","get","b","comments","Array","isArray","map","comment","createTaskComment","processedParams","comment_text","contentData","description","post","getChatViewComments","viewId","createChatViewComment","getListComments","listId","createListComment","updateComment","commentId","put","deleteComment","delete","getThreadedComments","createThreadedComment","createCommentsClient"],"sources":["/Users/peterkrzyzek/Development/clickup-mcp-server/src/clickup-client/comments.ts"],"sourcesContent":["import { ClickUpClient } from './index.js';\nimport { prepareContentForClickUp, processClickUpResponse } from '../utils/markdown.js';\n\nexport interface Comment {\n  id: string;\n  comment: string[];\n  comment_text: string;\n  comment_markdown?: string; // Markdown version for display\n  user: {\n    id: number;\n    username: string;\n    email: string;\n    color: string;\n    profilePicture?: string;\n  };\n  resolved: boolean;\n  assignee?: {\n    id: number;\n    username: string;\n    email: string;\n    color: string;\n    profilePicture?: string;\n  };\n  assigned_by?: {\n    id: number;\n    username: string;\n    email: string;\n    color: string;\n    profilePicture?: string;\n  };\n  reactions?: {\n    [key: string]: {\n      count: number;\n      users: Array<{\n        id: number;\n        username: string;\n        email: string;\n      }>;\n    };\n  };\n  date: string;\n  start_date?: string;\n  due_date?: string;\n  parent?: string;\n  replies_count?: number;\n}\n\nexport interface GetTaskCommentsParams {\n  start?: number;\n  start_id?: string;\n}\n\nexport interface CreateTaskCommentParams {\n  comment_text: string;\n  assignee?: number;\n  notify_all?: boolean;\n}\n\nexport interface GetChatViewCommentsParams {\n  start?: number;\n  start_id?: string;\n}\n\nexport interface CreateChatViewCommentParams {\n  comment_text: string;\n  notify_all?: boolean;\n}\n\nexport interface GetListCommentsParams {\n  start?: number;\n  start_id?: string;\n}\n\nexport interface CreateListCommentParams {\n  comment_text: string;\n  assignee?: number;\n  notify_all?: boolean;\n}\n\nexport interface UpdateCommentParams {\n  comment_text: string;\n  assignee?: number;\n  resolved?: boolean;\n}\n\nexport interface GetThreadedCommentsParams {\n  start?: number;\n  start_id?: string;\n}\n\nexport interface CreateThreadedCommentParams {\n  comment_text: string;\n  notify_all?: boolean;\n}\n\nexport class CommentsClient {\n  private client: ClickUpClient;\n\n  constructor(client: ClickUpClient) {\n    this.client = client;\n  }\n\n  /**\n   * Get comments for a specific task\n   * @param taskId The ID of the task to get comments for\n   * @param params Optional parameters for pagination\n   * @returns A list of comments with processed content\n   */\n  async getTaskComments(taskId: string, params?: GetTaskCommentsParams): Promise<{ comments: Comment[] }> {\n    const result = await this.client.get(`/task/${taskId}/comment`, params);\n    \n    // Process each comment's content\n    if (result.comments && Array.isArray(result.comments)) {\n      result.comments = result.comments.map((comment: any) => processClickUpResponse(comment));\n    }\n    \n    return result;\n  }\n\n  /**\n   * Create a new comment on a task\n   * @param taskId The ID of the task to comment on\n   * @param params The comment parameters (supports markdown in comment_text)\n   * @returns The created comment with processed content\n   */\n  async createTaskComment(taskId: string, params: CreateTaskCommentParams): Promise<Comment> {\n    // Process comment text for markdown support\n    const processedParams = { ...params };\n    if (params.comment_text) {\n      const contentData = prepareContentForClickUp(params.comment_text);\n      // For comments, ClickUp expects comment_text field with HTML\n      processedParams.comment_text = contentData.description;\n    }\n    \n    const result = await this.client.post(`/task/${taskId}/comment`, processedParams);\n    return processClickUpResponse(result);\n  }\n\n  /**\n   * Get comments for a chat view\n   * @param viewId The ID of the chat view to get comments for\n   * @param params Optional parameters for pagination\n   * @returns A list of comments with processed content\n   */\n  async getChatViewComments(viewId: string, params?: GetChatViewCommentsParams): Promise<{ comments: Comment[] }> {\n    const result = await this.client.get(`/view/${viewId}/comment`, params);\n    \n    // Process each comment's content\n    if (result.comments && Array.isArray(result.comments)) {\n      result.comments = result.comments.map((comment: any) => processClickUpResponse(comment));\n    }\n    \n    return result;\n  }\n\n  /**\n   * Create a new comment on a chat view\n   * @param viewId The ID of the chat view to comment on\n   * @param params The comment parameters (supports markdown in comment_text)\n   * @returns The created comment with processed content\n   */\n  async createChatViewComment(viewId: string, params: CreateChatViewCommentParams): Promise<Comment> {\n    // Process comment text for markdown support\n    const processedParams = { ...params };\n    if (params.comment_text) {\n      const contentData = prepareContentForClickUp(params.comment_text);\n      processedParams.comment_text = contentData.description;\n    }\n    \n    const result = await this.client.post(`/view/${viewId}/comment`, processedParams);\n    return processClickUpResponse(result);\n  }\n\n  /**\n   * Get comments for a list\n   * @param listId The ID of the list to get comments for\n   * @param params Optional parameters for pagination\n   * @returns A list of comments with processed content\n   */\n  async getListComments(listId: string, params?: GetListCommentsParams): Promise<{ comments: Comment[] }> {\n    const result = await this.client.get(`/list/${listId}/comment`, params);\n    \n    // Process each comment's content\n    if (result.comments && Array.isArray(result.comments)) {\n      result.comments = result.comments.map((comment: any) => processClickUpResponse(comment));\n    }\n    \n    return result;\n  }\n\n  /**\n   * Create a new comment on a list\n   * @param listId The ID of the list to comment on\n   * @param params The comment parameters (supports markdown in comment_text)\n   * @returns The created comment with processed content\n   */\n  async createListComment(listId: string, params: CreateListCommentParams): Promise<Comment> {\n    // Process comment text for markdown support\n    const processedParams = { ...params };\n    if (params.comment_text) {\n      const contentData = prepareContentForClickUp(params.comment_text);\n      processedParams.comment_text = contentData.description;\n    }\n    \n    const result = await this.client.post(`/list/${listId}/comment`, processedParams);\n    return processClickUpResponse(result);\n  }\n\n  /**\n   * Update an existing comment\n   * @param commentId The ID of the comment to update\n   * @param params The comment parameters to update (supports markdown in comment_text)\n   * @returns The updated comment with processed content\n   */\n  async updateComment(commentId: string, params: UpdateCommentParams): Promise<Comment> {\n    // Process comment text for markdown support\n    const processedParams = { ...params };\n    if (params.comment_text) {\n      const contentData = prepareContentForClickUp(params.comment_text);\n      processedParams.comment_text = contentData.description;\n    }\n    \n    const result = await this.client.put(`/comment/${commentId}`, processedParams);\n    return processClickUpResponse(result);\n  }\n\n  /**\n   * Delete a comment\n   * @param commentId The ID of the comment to delete\n   * @returns Success message\n   */\n  async deleteComment(commentId: string): Promise<{ success: boolean }> {\n    return this.client.delete(`/comment/${commentId}`);\n  }\n\n  /**\n   * Get threaded comments for a parent comment\n   * @param commentId The ID of the parent comment\n   * @param params Optional parameters for pagination\n   * @returns A list of threaded comments with processed content\n   */\n  async getThreadedComments(commentId: string, params?: GetThreadedCommentsParams): Promise<{ comments: Comment[] }> {\n    const result = await this.client.get(`/comment/${commentId}/reply`, params);\n    \n    // Process each comment's content\n    if (result.comments && Array.isArray(result.comments)) {\n      result.comments = result.comments.map((comment: any) => processClickUpResponse(comment));\n    }\n    \n    return result;\n  }\n\n  /**\n   * Create a new threaded comment on a parent comment\n   * @param commentId The ID of the parent comment\n   * @param params The comment parameters (supports markdown in comment_text)\n   * @returns The created threaded comment with processed content\n   */\n  async createThreadedComment(commentId: string, params: CreateThreadedCommentParams): Promise<Comment> {\n    // Process comment text for markdown support\n    const processedParams = { ...params };\n    if (params.comment_text) {\n      const contentData = prepareContentForClickUp(params.comment_text);\n      processedParams.comment_text = contentData.description;\n    }\n    \n    const result = await this.client.post(`/comment/${commentId}/reply`, processedParams);\n    return processClickUpResponse(result);\n  }\n}\n\nexport const createCommentsClient = (client: ClickUpClient): CommentsClient => {\n  return new CommentsClient(client);\n};\n"],"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","ignoreList":[]}
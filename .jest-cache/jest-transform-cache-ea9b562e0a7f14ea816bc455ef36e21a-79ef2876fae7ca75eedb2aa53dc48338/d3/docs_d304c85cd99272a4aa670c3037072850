9c1c4a9e0cff4133f95406e6346bd86b
/* istanbul ignore next */
function cov_x2k5pwmeq() {
  var path = "/Users/peterkrzyzek/Development/clickup-mcp-server/src/clickup-client/docs.ts";
  var hash = "ccaadca731563a2585765c224e5a239c81c17d8f";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/peterkrzyzek/Development/clickup-mcp-server/src/clickup-client/docs.ts",
    statementMap: {
      "0": {
        start: {
          line: 4,
          column: 8
        },
        end: {
          line: 4,
          column: 29
        }
      },
      "1": {
        start: {
          line: 14,
          column: 25
        },
        end: {
          line: 14,
          column: 54
        }
      },
      "2": {
        start: {
          line: 15,
          column: 8
        },
        end: {
          line: 31,
          column: 9
        }
      },
      "3": {
        start: {
          line: 16,
          column: 24
        },
        end: {
          line: 16,
          column: 87
        }
      },
      "4": {
        start: {
          line: 18,
          column: 28
        },
        end: {
          line: 21,
          column: 13
        }
      },
      "5": {
        start: {
          line: 22,
          column: 29
        },
        end: {
          line: 25,
          column: 14
        }
      },
      "6": {
        start: {
          line: 26,
          column: 12
        },
        end: {
          line: 26,
          column: 33
        }
      },
      "7": {
        start: {
          line: 29,
          column: 12
        },
        end: {
          line: 29,
          column: 56
        }
      },
      "8": {
        start: {
          line: 30,
          column: 12
        },
        end: {
          line: 30,
          column: 24
        }
      },
      "9": {
        start: {
          line: 42,
          column: 25
        },
        end: {
          line: 42,
          column: 54
        }
      },
      "10": {
        start: {
          line: 43,
          column: 8
        },
        end: {
          line: 64,
          column: 9
        }
      },
      "11": {
        start: {
          line: 44,
          column: 24
        },
        end: {
          line: 44,
          column: 102
        }
      },
      "12": {
        start: {
          line: 46,
          column: 27
        },
        end: {
          line: 49,
          column: 13
        }
      },
      "13": {
        start: {
          line: 51,
          column: 28
        },
        end: {
          line: 54,
          column: 13
        }
      },
      "14": {
        start: {
          line: 55,
          column: 29
        },
        end: {
          line: 58,
          column: 14
        }
      },
      "15": {
        start: {
          line: 59,
          column: 12
        },
        end: {
          line: 59,
          column: 33
        }
      },
      "16": {
        start: {
          line: 62,
          column: 12
        },
        end: {
          line: 62,
          column: 61
        }
      },
      "17": {
        start: {
          line: 63,
          column: 12
        },
        end: {
          line: 63,
          column: 24
        }
      },
      "18": {
        start: {
          line: 74,
          column: 25
        },
        end: {
          line: 74,
          column: 54
        }
      },
      "19": {
        start: {
          line: 75,
          column: 8
        },
        end: {
          line: 106,
          column: 9
        }
      },
      "20": {
        start: {
          line: 79,
          column: 24
        },
        end: {
          line: 79,
          column: 88
        }
      },
      "21": {
        start: {
          line: 81,
          column: 28
        },
        end: {
          line: 84,
          column: 13
        }
      },
      "22": {
        start: {
          line: 87,
          column: 32
        },
        end: {
          line: 90,
          column: 13
        }
      },
      "23": {
        start: {
          line: 92,
          column: 12
        },
        end: {
          line: 96,
          column: 13
        }
      },
      "24": {
        start: {
          line: 93,
          column: 32
        },
        end: {
          line: 93,
          column: 57
        }
      },
      "25": {
        start: {
          line: 94,
          column: 16
        },
        end: {
          line: 94,
          column: 47
        }
      },
      "26": {
        start: {
          line: 95,
          column: 16
        },
        end: {
          line: 95,
          column: 44
        }
      },
      "27": {
        start: {
          line: 97,
          column: 29
        },
        end: {
          line: 100,
          column: 14
        }
      },
      "28": {
        start: {
          line: 101,
          column: 12
        },
        end: {
          line: 101,
          column: 33
        }
      },
      "29": {
        start: {
          line: 104,
          column: 12
        },
        end: {
          line: 104,
          column: 58
        }
      },
      "30": {
        start: {
          line: 105,
          column: 12
        },
        end: {
          line: 105,
          column: 24
        }
      },
      "31": {
        start: {
          line: 117,
          column: 30
        },
        end: {
          line: 117,
          column: 60
        }
      },
      "32": {
        start: {
          line: 118,
          column: 25
        },
        end: {
          line: 118,
          column: 130
        }
      },
      "33": {
        start: {
          line: 119,
          column: 8
        },
        end: {
          line: 119,
          column: 29
        }
      },
      "34": {
        start: {
          line: 130,
          column: 30
        },
        end: {
          line: 130,
          column: 60
        }
      },
      "35": {
        start: {
          line: 131,
          column: 25
        },
        end: {
          line: 131,
          column: 134
        }
      },
      "36": {
        start: {
          line: 132,
          column: 8
        },
        end: {
          line: 132,
          column: 29
        }
      },
      "37": {
        start: {
          line: 142,
          column: 23
        },
        end: {
          line: 142,
          column: 25
        }
      },
      "38": {
        start: {
          line: 143,
          column: 8
        },
        end: {
          line: 144,
          column: 32
        }
      },
      "39": {
        start: {
          line: 144,
          column: 12
        },
        end: {
          line: 144,
          column: 32
        }
      },
      "40": {
        start: {
          line: 145,
          column: 8
        },
        end: {
          line: 146,
          column: 37
        }
      },
      "41": {
        start: {
          line: 146,
          column: 12
        },
        end: {
          line: 146,
          column: 37
        }
      },
      "42": {
        start: {
          line: 148,
          column: 30
        },
        end: {
          line: 148,
          column: 60
        }
      },
      "43": {
        start: {
          line: 149,
          column: 25
        },
        end: {
          line: 149,
          column: 104
        }
      },
      "44": {
        start: {
          line: 150,
          column: 8
        },
        end: {
          line: 150,
          column: 29
        }
      },
      "45": {
        start: {
          line: 153,
          column: 32
        },
        end: {
          line: 155,
          column: 1
        }
      },
      "46": {
        start: {
          line: 154,
          column: 4
        },
        end: {
          line: 154,
          column: 34
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 3,
            column: 4
          },
          end: {
            line: 3,
            column: 5
          }
        },
        loc: {
          start: {
            line: 3,
            column: 24
          },
          end: {
            line: 5,
            column: 5
          }
        },
        line: 3
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 12,
            column: 4
          },
          end: {
            line: 12,
            column: 5
          }
        },
        loc: {
          start: {
            line: 12,
            column: 52
          },
          end: {
            line: 32,
            column: 5
          }
        },
        line: 12
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 40,
            column: 4
          },
          end: {
            line: 40,
            column: 5
          }
        },
        loc: {
          start: {
            line: 40,
            column: 69
          },
          end: {
            line: 65,
            column: 5
          }
        },
        line: 40
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 72,
            column: 4
          },
          end: {
            line: 72,
            column: 5
          }
        },
        loc: {
          start: {
            line: 72,
            column: 42
          },
          end: {
            line: 107,
            column: 5
          }
        },
        line: 72
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 115,
            column: 4
          },
          end: {
            line: 115,
            column: 5
          }
        },
        loc: {
          start: {
            line: 115,
            column: 50
          },
          end: {
            line: 120,
            column: 5
          }
        },
        line: 115
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 128,
            column: 4
          },
          end: {
            line: 128,
            column: 5
          }
        },
        loc: {
          start: {
            line: 128,
            column: 54
          },
          end: {
            line: 133,
            column: 5
          }
        },
        line: 128
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 141,
            column: 4
          },
          end: {
            line: 141,
            column: 5
          }
        },
        loc: {
          start: {
            line: 141,
            column: 43
          },
          end: {
            line: 151,
            column: 5
          }
        },
        line: 141
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 153,
            column: 32
          },
          end: {
            line: 153,
            column: 33
          }
        },
        loc: {
          start: {
            line: 153,
            column: 44
          },
          end: {
            line: 155,
            column: 1
          }
        },
        line: 153
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 40,
            column: 42
          },
          end: {
            line: 40,
            column: 67
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 40,
            column: 58
          },
          end: {
            line: 40,
            column: 67
          }
        }],
        line: 40
      },
      "1": {
        loc: {
          start: {
            line: 92,
            column: 12
          },
          end: {
            line: 96,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 92,
            column: 12
          },
          end: {
            line: 96,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 92
      },
      "2": {
        loc: {
          start: {
            line: 143,
            column: 8
          },
          end: {
            line: 144,
            column: 32
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 143,
            column: 8
          },
          end: {
            line: 144,
            column: 32
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 143
      },
      "3": {
        loc: {
          start: {
            line: 145,
            column: 8
          },
          end: {
            line: 146,
            column: 37
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 145,
            column: 8
          },
          end: {
            line: 146,
            column: 37
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 145
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0
    },
    b: {
      "0": [0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0]
    },
    inputSourceMap: {
      file: "/Users/peterkrzyzek/Development/clickup-mcp-server/src/clickup-client/docs.ts",
      mappings: "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",
      names: [],
      sources: ["/Users/peterkrzyzek/Development/clickup-mcp-server/src/clickup-client/docs.ts"],
      sourcesContent: ["import { ClickUpClient } from './index.js';\nimport axios from 'axios';\n\n// Updated Doc interface based on v3 API response\nexport interface Doc {\n  id: string;\n  name: string;\n  date_created: number;\n  date_updated: number;\n  parent?: {\n    id: string;\n    type: number;\n  };\n  public: boolean;\n  workspace_id: number;\n  creator: number;\n  deleted: boolean;\n  type: number;\n  content?: string;\n}\n\nexport interface GetDocsParams {\n  cursor?: string;\n  deleted?: boolean;\n  archived?: boolean;\n  limit?: number;\n}\n\nexport interface SearchDocsParams {\n  query: string;\n  cursor?: string;\n}\n\nexport class DocsClient {\n  private client: ClickUpClient;\n\n  constructor(client: ClickUpClient) {\n    this.client = client;\n  }\n\n  /**\n   * Get docs from a specific workspace\n   * @param workspaceId The ID of the workspace to get docs from\n   * @param params Optional parameters for filtering docs\n   * @returns A list of docs\n   */\n  async getDocsFromWorkspace(workspaceId: string, params?: GetDocsParams): Promise<{ docs: Doc[], next_cursor: string }> {\n    // Get the API token directly from the environment variable\n    const apiToken = process.env.CLICKUP_API_TOKEN;\n    \n    try {\n      const url = `https://api.clickup.com/api/v3/workspaces/${workspaceId}/docs`;\n      \n      // Use the exact same headers that worked in the successful request\n      const headers = {\n        'Authorization': apiToken,\n        'Accept': 'application/json'\n      };\n      \n      const response = await axios.get(url, {\n        headers,\n        params\n      });\n      \n      return response.data;\n    } catch (error) {\n      console.error('Error getting docs:', error);\n      throw error;\n    }\n  }\n\n\n  /**\n   * Get the pages of a doc\n   * @param workspaceId The ID of the workspace\n   * @param docId The ID of the doc\n   * @param contentFormat The format to return the content in (text/md or text/plain)\n   * @returns The pages of the doc\n   */\n  async getDocPages(workspaceId: string, docId: string, contentFormat: string = 'text/md'): Promise<any> {\n    // Get the API token directly from the environment variable\n    const apiToken = process.env.CLICKUP_API_TOKEN;\n    \n    try {\n      const url = `https://api.clickup.com/api/v3/workspaces/${workspaceId}/docs/${docId}/pages`;\n      \n      // Use the exact same parameters that worked in the successful request\n      const params = { \n        max_page_depth: -1,\n        content_format: contentFormat\n      };\n      \n      // Use the exact same headers that worked in the successful request\n      const headers = {\n        'Authorization': apiToken,\n        'Accept': 'application/json'\n      };\n      \n      const response = await axios.get(url, {\n        headers,\n        params\n      });\n      \n      return response.data;\n    } catch (error) {\n      console.error('Error getting doc pages:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Search for docs in a workspace\n   * @param workspaceId The ID of the workspace to search in\n   * @param params The search parameters\n   * @returns A list of docs matching the search query\n   */\n  async searchDocs(workspaceId: string, params: SearchDocsParams): Promise<{ docs: Doc[], next_cursor: string }> {\n    // Get the API token directly from the environment variable\n    const apiToken = process.env.CLICKUP_API_TOKEN;\n    \n    try {\n      // According to the ClickUp API documentation, the endpoint is:\n      // GET /api/v2/team/{team_id}/docs/search\n      // where team_id is the workspace ID\n      const url = `https://api.clickup.com/api/v2/team/${workspaceId}/docs/search`;\n      \n      // Use the exact same headers that worked in the successful request\n      const headers = {\n        'Authorization': apiToken,\n        'Accept': 'application/json'\n      };\n      \n      // According to the ClickUp API documentation, this should be a GET request\n      // with the parameters as query parameters\n      const queryParams: any = {\n        doc_name: params.query,\n        cursor: params.cursor\n      };\n      \n      // If the query is a space ID, use it as a space_id parameter\n      if (params.query.startsWith('space:')) {\n        const spaceId = params.query.substring(6);\n        queryParams.space_id = spaceId;\n        delete queryParams.doc_name;\n      }\n      \n      const response = await axios.get(url, {\n        headers,\n        params: queryParams\n      });\n      \n      return response.data;\n    } catch (error) {\n      console.error('Error searching docs:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Create a new doc in a list\n   * @param listId The ID of the list to create the doc in\n   * @param title The title of the doc\n   * @param content The content of the doc (HTML format)\n   * @returns The created doc\n   */\n  async createDocInList(listId: string, title: string, content: string): Promise<Doc> {\n    // Create a custom axios instance for v3 API\n    const axiosInstance = this.client.getAxiosInstance();\n    const response = await axiosInstance.post(`https://api.clickup.com/api/v3/lists/${listId}/docs`, { name: title, content });\n    return response.data;\n  }\n\n  /**\n   * Create a new doc in a folder\n   * @param folderId The ID of the folder to create the doc in\n   * @param title The title of the doc\n   * @param content The content of the doc (HTML format)\n   * @returns The created doc\n   */\n  async createDocInFolder(folderId: string, title: string, content: string): Promise<Doc> {\n    // Create a custom axios instance for v3 API\n    const axiosInstance = this.client.getAxiosInstance();\n    const response = await axiosInstance.post(`https://api.clickup.com/api/v3/folders/${folderId}/docs`, { name: title, content });\n    return response.data;\n  }\n\n  /**\n   * Update an existing doc\n   * @param docId The ID of the doc to update\n   * @param title The new title of the doc\n   * @param content The new content of the doc (HTML format)\n   * @returns The updated doc\n   */\n  async updateDoc(docId: string, title?: string, content?: string): Promise<Doc> {\n    const params: any = {};\n    if (title !== undefined) params.name = title;\n    if (content !== undefined) params.content = content;\n    \n    // Create a custom axios instance for v3 API\n    const axiosInstance = this.client.getAxiosInstance();\n    const response = await axiosInstance.put(`https://api.clickup.com/api/v3/docs/${docId}`, params);\n    return response.data;\n  }\n}\n\nexport const createDocsClient = (client: ClickUpClient): DocsClient => {\n  return new DocsClient(client);\n};\n"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "ccaadca731563a2585765c224e5a239c81c17d8f"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_x2k5pwmeq = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_x2k5pwmeq();
import axios from 'axios';
export class DocsClient {
  constructor(client) {
    /* istanbul ignore next */
    cov_x2k5pwmeq().f[0]++;
    cov_x2k5pwmeq().s[0]++;
    this.client = client;
  }
  /**
   * Get docs from a specific workspace
   * @param workspaceId The ID of the workspace to get docs from
   * @param params Optional parameters for filtering docs
   * @returns A list of docs
   */
  async getDocsFromWorkspace(workspaceId, params) {
    /* istanbul ignore next */
    cov_x2k5pwmeq().f[1]++;
    // Get the API token directly from the environment variable
    const apiToken =
    /* istanbul ignore next */
    (cov_x2k5pwmeq().s[1]++, process.env.CLICKUP_API_TOKEN);
    /* istanbul ignore next */
    cov_x2k5pwmeq().s[2]++;
    try {
      const url =
      /* istanbul ignore next */
      (cov_x2k5pwmeq().s[3]++, `https://api.clickup.com/api/v3/workspaces/${workspaceId}/docs`);
      // Use the exact same headers that worked in the successful request
      const headers =
      /* istanbul ignore next */
      (cov_x2k5pwmeq().s[4]++, {
        'Authorization': apiToken,
        'Accept': 'application/json'
      });
      const response =
      /* istanbul ignore next */
      (cov_x2k5pwmeq().s[5]++, await axios.get(url, {
        headers,
        params
      }));
      /* istanbul ignore next */
      cov_x2k5pwmeq().s[6]++;
      return response.data;
    } catch (error) {
      /* istanbul ignore next */
      cov_x2k5pwmeq().s[7]++;
      console.error('Error getting docs:', error);
      /* istanbul ignore next */
      cov_x2k5pwmeq().s[8]++;
      throw error;
    }
  }
  /**
   * Get the pages of a doc
   * @param workspaceId The ID of the workspace
   * @param docId The ID of the doc
   * @param contentFormat The format to return the content in (text/md or text/plain)
   * @returns The pages of the doc
   */
  async getDocPages(workspaceId, docId, contentFormat =
  /* istanbul ignore next */
  (cov_x2k5pwmeq().b[0][0]++, 'text/md')) {
    /* istanbul ignore next */
    cov_x2k5pwmeq().f[2]++;
    // Get the API token directly from the environment variable
    const apiToken =
    /* istanbul ignore next */
    (cov_x2k5pwmeq().s[9]++, process.env.CLICKUP_API_TOKEN);
    /* istanbul ignore next */
    cov_x2k5pwmeq().s[10]++;
    try {
      const url =
      /* istanbul ignore next */
      (cov_x2k5pwmeq().s[11]++, `https://api.clickup.com/api/v3/workspaces/${workspaceId}/docs/${docId}/pages`);
      // Use the exact same parameters that worked in the successful request
      const params =
      /* istanbul ignore next */
      (cov_x2k5pwmeq().s[12]++, {
        max_page_depth: -1,
        content_format: contentFormat
      });
      // Use the exact same headers that worked in the successful request
      const headers =
      /* istanbul ignore next */
      (cov_x2k5pwmeq().s[13]++, {
        'Authorization': apiToken,
        'Accept': 'application/json'
      });
      const response =
      /* istanbul ignore next */
      (cov_x2k5pwmeq().s[14]++, await axios.get(url, {
        headers,
        params
      }));
      /* istanbul ignore next */
      cov_x2k5pwmeq().s[15]++;
      return response.data;
    } catch (error) {
      /* istanbul ignore next */
      cov_x2k5pwmeq().s[16]++;
      console.error('Error getting doc pages:', error);
      /* istanbul ignore next */
      cov_x2k5pwmeq().s[17]++;
      throw error;
    }
  }
  /**
   * Search for docs in a workspace
   * @param workspaceId The ID of the workspace to search in
   * @param params The search parameters
   * @returns A list of docs matching the search query
   */
  async searchDocs(workspaceId, params) {
    /* istanbul ignore next */
    cov_x2k5pwmeq().f[3]++;
    // Get the API token directly from the environment variable
    const apiToken =
    /* istanbul ignore next */
    (cov_x2k5pwmeq().s[18]++, process.env.CLICKUP_API_TOKEN);
    /* istanbul ignore next */
    cov_x2k5pwmeq().s[19]++;
    try {
      // According to the ClickUp API documentation, the endpoint is:
      // GET /api/v2/team/{team_id}/docs/search
      // where team_id is the workspace ID
      const url =
      /* istanbul ignore next */
      (cov_x2k5pwmeq().s[20]++, `https://api.clickup.com/api/v2/team/${workspaceId}/docs/search`);
      // Use the exact same headers that worked in the successful request
      const headers =
      /* istanbul ignore next */
      (cov_x2k5pwmeq().s[21]++, {
        'Authorization': apiToken,
        'Accept': 'application/json'
      });
      // According to the ClickUp API documentation, this should be a GET request
      // with the parameters as query parameters
      const queryParams =
      /* istanbul ignore next */
      (cov_x2k5pwmeq().s[22]++, {
        doc_name: params.query,
        cursor: params.cursor
      });
      // If the query is a space ID, use it as a space_id parameter
      /* istanbul ignore next */
      cov_x2k5pwmeq().s[23]++;
      if (params.query.startsWith('space:')) {
        /* istanbul ignore next */
        cov_x2k5pwmeq().b[1][0]++;
        const spaceId =
        /* istanbul ignore next */
        (cov_x2k5pwmeq().s[24]++, params.query.substring(6));
        /* istanbul ignore next */
        cov_x2k5pwmeq().s[25]++;
        queryParams.space_id = spaceId;
        /* istanbul ignore next */
        cov_x2k5pwmeq().s[26]++;
        delete queryParams.doc_name;
      } else
      /* istanbul ignore next */
      {
        cov_x2k5pwmeq().b[1][1]++;
      }
      const response =
      /* istanbul ignore next */
      (cov_x2k5pwmeq().s[27]++, await axios.get(url, {
        headers,
        params: queryParams
      }));
      /* istanbul ignore next */
      cov_x2k5pwmeq().s[28]++;
      return response.data;
    } catch (error) {
      /* istanbul ignore next */
      cov_x2k5pwmeq().s[29]++;
      console.error('Error searching docs:', error);
      /* istanbul ignore next */
      cov_x2k5pwmeq().s[30]++;
      throw error;
    }
  }
  /**
   * Create a new doc in a list
   * @param listId The ID of the list to create the doc in
   * @param title The title of the doc
   * @param content The content of the doc (HTML format)
   * @returns The created doc
   */
  async createDocInList(listId, title, content) {
    /* istanbul ignore next */
    cov_x2k5pwmeq().f[4]++;
    // Create a custom axios instance for v3 API
    const axiosInstance =
    /* istanbul ignore next */
    (cov_x2k5pwmeq().s[31]++, this.client.getAxiosInstance());
    const response =
    /* istanbul ignore next */
    (cov_x2k5pwmeq().s[32]++, await axiosInstance.post(`https://api.clickup.com/api/v3/lists/${listId}/docs`, {
      name: title,
      content
    }));
    /* istanbul ignore next */
    cov_x2k5pwmeq().s[33]++;
    return response.data;
  }
  /**
   * Create a new doc in a folder
   * @param folderId The ID of the folder to create the doc in
   * @param title The title of the doc
   * @param content The content of the doc (HTML format)
   * @returns The created doc
   */
  async createDocInFolder(folderId, title, content) {
    /* istanbul ignore next */
    cov_x2k5pwmeq().f[5]++;
    // Create a custom axios instance for v3 API
    const axiosInstance =
    /* istanbul ignore next */
    (cov_x2k5pwmeq().s[34]++, this.client.getAxiosInstance());
    const response =
    /* istanbul ignore next */
    (cov_x2k5pwmeq().s[35]++, await axiosInstance.post(`https://api.clickup.com/api/v3/folders/${folderId}/docs`, {
      name: title,
      content
    }));
    /* istanbul ignore next */
    cov_x2k5pwmeq().s[36]++;
    return response.data;
  }
  /**
   * Update an existing doc
   * @param docId The ID of the doc to update
   * @param title The new title of the doc
   * @param content The new content of the doc (HTML format)
   * @returns The updated doc
   */
  async updateDoc(docId, title, content) {
    /* istanbul ignore next */
    cov_x2k5pwmeq().f[6]++;
    const params =
    /* istanbul ignore next */
    (cov_x2k5pwmeq().s[37]++, {});
    /* istanbul ignore next */
    cov_x2k5pwmeq().s[38]++;
    if (title !== undefined) {
      /* istanbul ignore next */
      cov_x2k5pwmeq().b[2][0]++;
      cov_x2k5pwmeq().s[39]++;
      params.name = title;
    } else
    /* istanbul ignore next */
    {
      cov_x2k5pwmeq().b[2][1]++;
    }
    cov_x2k5pwmeq().s[40]++;
    if (content !== undefined) {
      /* istanbul ignore next */
      cov_x2k5pwmeq().b[3][0]++;
      cov_x2k5pwmeq().s[41]++;
      params.content = content;
    } else
    /* istanbul ignore next */
    {
      cov_x2k5pwmeq().b[3][1]++;
    }
    // Create a custom axios instance for v3 API
    const axiosInstance =
    /* istanbul ignore next */
    (cov_x2k5pwmeq().s[42]++, this.client.getAxiosInstance());
    const response =
    /* istanbul ignore next */
    (cov_x2k5pwmeq().s[43]++, await axiosInstance.put(`https://api.clickup.com/api/v3/docs/${docId}`, params));
    /* istanbul ignore next */
    cov_x2k5pwmeq().s[44]++;
    return response.data;
  }
}
/* istanbul ignore next */
cov_x2k5pwmeq().s[45]++;
export const createDocsClient = client => {
  /* istanbul ignore next */
  cov_x2k5pwmeq().f[7]++;
  cov_x2k5pwmeq().s[46]++;
  return new DocsClient(client);
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
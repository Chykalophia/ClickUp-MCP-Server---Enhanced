d8982c293de68ea2b7ccdca7ed39a84b
/* istanbul ignore next */
function cov_gnc8p84ru() {
  var path = "/Users/peterkrzyzek/Development/clickup-mcp-server/src/clickup-client/secure-client.ts";
  var hash = "75d1fcc5205c2cbe62df18ccd193afc6fa103104";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/peterkrzyzek/Development/clickup-mcp-server/src/clickup-client/secure-client.ts",
    statementMap: {
      "0": {
        start: {
          line: 5,
          column: 21
        },
        end: {
          line: 5,
          column: 53
        }
      },
      "1": {
        start: {
          line: 9,
          column: 32
        },
        end: {
          line: 9,
          column: 65
        }
      },
      "2": {
        start: {
          line: 10,
          column: 8
        },
        end: {
          line: 12,
          column: 9
        }
      },
      "3": {
        start: {
          line: 11,
          column: 12
        },
        end: {
          line: 11,
          column: 75
        }
      },
      "4": {
        start: {
          line: 13,
          column: 8
        },
        end: {
          line: 13,
          column: 62
        }
      },
      "5": {
        start: {
          line: 14,
          column: 8
        },
        end: {
          line: 14,
          column: 72
        }
      },
      "6": {
        start: {
          line: 15,
          column: 8
        },
        end: {
          line: 15,
          column: 69
        }
      },
      "7": {
        start: {
          line: 16,
          column: 8
        },
        end: {
          line: 26,
          column: 11
        }
      },
      "8": {
        start: {
          line: 28,
          column: 8
        },
        end: {
          line: 48,
          column: 45
        }
      },
      "9": {
        start: {
          line: 30,
          column: 30
        },
        end: {
          line: 30,
          column: 49
        }
      },
      "10": {
        start: {
          line: 31,
          column: 12
        },
        end: {
          line: 31,
          column: 55
        }
      },
      "11": {
        start: {
          line: 33,
          column: 12
        },
        end: {
          line: 38,
          column: 13
        }
      },
      "12": {
        start: {
          line: 34,
          column: 37
        },
        end: {
          line: 34,
          column: 56
        }
      },
      "13": {
        start: {
          line: 35,
          column: 16
        },
        end: {
          line: 37,
          column: 17
        }
      },
      "14": {
        start: {
          line: 36,
          column: 20
        },
        end: {
          line: 36,
          column: 92
        }
      },
      "15": {
        start: {
          line: 40,
          column: 12
        },
        end: {
          line: 42,
          column: 13
        }
      },
      "16": {
        start: {
          line: 41,
          column: 16
        },
        end: {
          line: 41,
          column: 57
        }
      },
      "17": {
        start: {
          line: 44,
          column: 12
        },
        end: {
          line: 46,
          column: 13
        }
      },
      "18": {
        start: {
          line: 45,
          column: 16
        },
        end: {
          line: 45,
          column: 61
        }
      },
      "19": {
        start: {
          line: 47,
          column: 12
        },
        end: {
          line: 47,
          column: 26
        }
      },
      "20": {
        start: {
          line: 48,
          column: 22
        },
        end: {
          line: 48,
          column: 43
        }
      },
      "21": {
        start: {
          line: 50,
          column: 8
        },
        end: {
          line: 65,
          column: 11
        }
      },
      "22": {
        start: {
          line: 52,
          column: 12
        },
        end: {
          line: 54,
          column: 13
        }
      },
      "23": {
        start: {
          line: 53,
          column: 16
        },
        end: {
          line: 53,
          column: 163
        }
      },
      "24": {
        start: {
          line: 55,
          column: 12
        },
        end: {
          line: 55,
          column: 28
        }
      },
      "25": {
        start: {
          line: 57,
          column: 30
        },
        end: {
          line: 57,
          column: 69
        }
      },
      "26": {
        start: {
          line: 58,
          column: 36
        },
        end: {
          line: 61,
          column: 14
        }
      },
      "27": {
        start: {
          line: 63,
          column: 12
        },
        end: {
          line: 63,
          column: 80
        }
      },
      "28": {
        start: {
          line: 64,
          column: 12
        },
        end: {
          line: 64,
          column: 51
        }
      },
      "29": {
        start: {
          line: 71,
          column: 8
        },
        end: {
          line: 77,
          column: 49
        }
      },
      "30": {
        start: {
          line: 72,
          column: 29
        },
        end: {
          line: 75,
          column: 14
        }
      },
      "31": {
        start: {
          line: 76,
          column: 12
        },
        end: {
          line: 76,
          column: 33
        }
      },
      "32": {
        start: {
          line: 83,
          column: 8
        },
        end: {
          line: 86,
          column: 50
        }
      },
      "33": {
        start: {
          line: 84,
          column: 29
        },
        end: {
          line: 84,
          column: 97
        }
      },
      "34": {
        start: {
          line: 85,
          column: 12
        },
        end: {
          line: 85,
          column: 33
        }
      },
      "35": {
        start: {
          line: 92,
          column: 8
        },
        end: {
          line: 95,
          column: 49
        }
      },
      "36": {
        start: {
          line: 93,
          column: 29
        },
        end: {
          line: 93,
          column: 96
        }
      },
      "37": {
        start: {
          line: 94,
          column: 12
        },
        end: {
          line: 94,
          column: 33
        }
      },
      "38": {
        start: {
          line: 101,
          column: 8
        },
        end: {
          line: 104,
          column: 52
        }
      },
      "39": {
        start: {
          line: 102,
          column: 29
        },
        end: {
          line: 102,
          column: 78
        }
      },
      "40": {
        start: {
          line: 103,
          column: 12
        },
        end: {
          line: 103,
          column: 33
        }
      },
      "41": {
        start: {
          line: 110,
          column: 8
        },
        end: {
          line: 113,
          column: 51
        }
      },
      "42": {
        start: {
          line: 111,
          column: 29
        },
        end: {
          line: 111,
          column: 98
        }
      },
      "43": {
        start: {
          line: 112,
          column: 12
        },
        end: {
          line: 112,
          column: 33
        }
      },
      "44": {
        start: {
          line: 120,
          column: 39
        },
        end: {
          line: 120,
          column: 75
        }
      },
      "45": {
        start: {
          line: 121,
          column: 27
        },
        end: {
          line: 121,
          column: 141
        }
      },
      "46": {
        start: {
          line: 122,
          column: 8
        },
        end: {
          line: 124,
          column: 9
        }
      },
      "47": {
        start: {
          line: 123,
          column: 12
        },
        end: {
          line: 123,
          column: 94
        }
      },
      "48": {
        start: {
          line: 126,
          column: 8
        },
        end: {
          line: 131,
          column: 9
        }
      },
      "49": {
        start: {
          line: 127,
          column: 33
        },
        end: {
          line: 127,
          column: 53
        }
      },
      "50": {
        start: {
          line: 128,
          column: 12
        },
        end: {
          line: 130,
          column: 13
        }
      },
      "51": {
        start: {
          line: 129,
          column: 16
        },
        end: {
          line: 129,
          column: 104
        }
      },
      "52": {
        start: {
          line: 132,
          column: 25
        },
        end: {
          line: 132,
          column: 39
        }
      },
      "53": {
        start: {
          line: 134,
          column: 21
        },
        end: {
          line: 134,
          column: 67
        }
      },
      "54": {
        start: {
          line: 135,
          column: 8
        },
        end: {
          line: 135,
          column: 53
        }
      },
      "55": {
        start: {
          line: 137,
          column: 8
        },
        end: {
          line: 141,
          column: 9
        }
      },
      "56": {
        start: {
          line: 138,
          column: 12
        },
        end: {
          line: 140,
          column: 15
        }
      },
      "57": {
        start: {
          line: 139,
          column: 16
        },
        end: {
          line: 139,
          column: 52
        }
      },
      "58": {
        start: {
          line: 142,
          column: 8
        },
        end: {
          line: 150,
          column: 52
        }
      },
      "59": {
        start: {
          line: 143,
          column: 29
        },
        end: {
          line: 148,
          column: 14
        }
      },
      "60": {
        start: {
          line: 149,
          column: 12
        },
        end: {
          line: 149,
          column: 33
        }
      },
      "61": {
        start: {
          line: 156,
          column: 54
        },
        end: {
          line: 156,
          column: 61
        }
      },
      "62": {
        start: {
          line: 157,
          column: 24
        },
        end: {
          line: 157,
          column: 26
        }
      },
      "63": {
        start: {
          line: 159,
          column: 8
        },
        end: {
          line: 195,
          column: 9
        }
      },
      "64": {
        start: {
          line: 159,
          column: 21
        },
        end: {
          line: 159,
          column: 22
        }
      },
      "65": {
        start: {
          line: 160,
          column: 26
        },
        end: {
          line: 160,
          column: 60
        }
      },
      "66": {
        start: {
          line: 161,
          column: 34
        },
        end: {
          line: 192,
          column: 14
        }
      },
      "67": {
        start: {
          line: 162,
          column: 16
        },
        end: {
          line: 191,
          column: 17
        }
      },
      "68": {
        start: {
          line: 164,
          column: 20
        },
        end: {
          line: 182,
          column: 21
        }
      },
      "69": {
        start: {
          line: 166,
          column: 28
        },
        end: {
          line: 166,
          column: 84
        }
      },
      "70": {
        start: {
          line: 167,
          column: 28
        },
        end: {
          line: 167,
          column: 34
        }
      },
      "71": {
        start: {
          line: 169,
          column: 28
        },
        end: {
          line: 169,
          column: 83
        }
      },
      "72": {
        start: {
          line: 170,
          column: 28
        },
        end: {
          line: 170,
          column: 34
        }
      },
      "73": {
        start: {
          line: 172,
          column: 28
        },
        end: {
          line: 172,
          column: 82
        }
      },
      "74": {
        start: {
          line: 173,
          column: 28
        },
        end: {
          line: 173,
          column: 34
        }
      },
      "75": {
        start: {
          line: 175,
          column: 28
        },
        end: {
          line: 175,
          column: 71
        }
      },
      "76": {
        start: {
          line: 176,
          column: 28
        },
        end: {
          line: 176,
          column: 34
        }
      },
      "77": {
        start: {
          line: 178,
          column: 28
        },
        end: {
          line: 178,
          column: 84
        }
      },
      "78": {
        start: {
          line: 179,
          column: 28
        },
        end: {
          line: 179,
          column: 34
        }
      },
      "79": {
        start: {
          line: 181,
          column: 28
        },
        end: {
          line: 181,
          column: 85
        }
      },
      "80": {
        start: {
          line: 183,
          column: 20
        },
        end: {
          line: 183,
          column: 51
        }
      },
      "81": {
        start: {
          line: 186,
          column: 41
        },
        end: {
          line: 186,
          column: 97
        }
      },
      "82": {
        start: {
          line: 187,
          column: 20
        },
        end: {
          line: 189,
          column: 21
        }
      },
      "83": {
        start: {
          line: 188,
          column: 24
        },
        end: {
          line: 188,
          column: 36
        }
      },
      "84": {
        start: {
          line: 190,
          column: 20
        },
        end: {
          line: 190,
          column: 67
        }
      },
      "85": {
        start: {
          line: 193,
          column: 33
        },
        end: {
          line: 193,
          column: 65
        }
      },
      "86": {
        start: {
          line: 194,
          column: 12
        },
        end: {
          line: 194,
          column: 42
        }
      },
      "87": {
        start: {
          line: 196,
          column: 8
        },
        end: {
          line: 196,
          column: 23
        }
      },
      "88": {
        start: {
          line: 202,
          column: 26
        },
        end: {
          line: 202,
          column: 36
        }
      },
      "89": {
        start: {
          line: 203,
          column: 8
        },
        end: {
          line: 219,
          column: 9
        }
      },
      "90": {
        start: {
          line: 205,
          column: 12
        },
        end: {
          line: 205,
          column: 36
        }
      },
      "91": {
        start: {
          line: 206,
          column: 28
        },
        end: {
          line: 206,
          column: 50
        }
      },
      "92": {
        start: {
          line: 207,
          column: 12
        },
        end: {
          line: 211,
          column: 14
        }
      },
      "93": {
        start: {
          line: 214,
          column: 12
        },
        end: {
          line: 218,
          column: 14
        }
      },
      "94": {
        start: {
          line: 225,
          column: 8
        },
        end: {
          line: 230,
          column: 10
        }
      },
      "95": {
        start: {
          line: 236,
          column: 8
        },
        end: {
          line: 242,
          column: 9
        }
      },
      "96": {
        start: {
          line: 237,
          column: 36
        },
        end: {
          line: 237,
          column: 69
        }
      },
      "97": {
        start: {
          line: 238,
          column: 12
        },
        end: {
          line: 240,
          column: 13
        }
      },
      "98": {
        start: {
          line: 239,
          column: 16
        },
        end: {
          line: 239,
          column: 79
        }
      },
      "99": {
        start: {
          line: 241,
          column: 12
        },
        end: {
          line: 241,
          column: 83
        }
      },
      "100": {
        start: {
          line: 243,
          column: 8
        },
        end: {
          line: 245,
          column: 9
        }
      },
      "101": {
        start: {
          line: 244,
          column: 12
        },
        end: {
          line: 244,
          column: 65
        }
      },
      "102": {
        start: {
          line: 246,
          column: 8
        },
        end: {
          line: 249,
          column: 9
        }
      },
      "103": {
        start: {
          line: 247,
          column: 12
        },
        end: {
          line: 247,
          column: 46
        }
      },
      "104": {
        start: {
          line: 248,
          column: 12
        },
        end: {
          line: 248,
          column: 81
        }
      },
      "105": {
        start: {
          line: 250,
          column: 8
        },
        end: {
          line: 252,
          column: 9
        }
      },
      "106": {
        start: {
          line: 251,
          column: 12
        },
        end: {
          line: 251,
          column: 58
        }
      },
      "107": {
        start: {
          line: 259,
          column: 8
        },
        end: {
          line: 259,
          column: 48
        }
      },
      "108": {
        start: {
          line: 261,
          column: 8
        },
        end: {
          line: 261,
          column: 28
        }
      },
      "109": {
        start: {
          line: 265,
          column: 41
        },
        end: {
          line: 274,
          column: 1
        }
      },
      "110": {
        start: {
          line: 266,
          column: 21
        },
        end: {
          line: 266,
          column: 70
        }
      },
      "111": {
        start: {
          line: 267,
          column: 4
        },
        end: {
          line: 269,
          column: 5
        }
      },
      "112": {
        start: {
          line: 268,
          column: 8
        },
        end: {
          line: 268,
          column: 78
        }
      },
      "113": {
        start: {
          line: 270,
          column: 4
        },
        end: {
          line: 273,
          column: 7
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 7,
            column: 4
          },
          end: {
            line: 7,
            column: 5
          }
        },
        loc: {
          start: {
            line: 7,
            column: 24
          },
          end: {
            line: 66,
            column: 5
          }
        },
        line: 7
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 28,
            column: 52
          },
          end: {
            line: 28,
            column: 53
          }
        },
        loc: {
          start: {
            line: 28,
            column: 64
          },
          end: {
            line: 48,
            column: 9
          }
        },
        line: 28
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 48,
            column: 11
          },
          end: {
            line: 48,
            column: 12
          }
        },
        loc: {
          start: {
            line: 48,
            column: 22
          },
          end: {
            line: 48,
            column: 43
          }
        },
        line: 48
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 50,
            column: 53
          },
          end: {
            line: 50,
            column: 54
          }
        },
        loc: {
          start: {
            line: 50,
            column: 67
          },
          end: {
            line: 56,
            column: 9
          }
        },
        line: 50
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 56,
            column: 11
          },
          end: {
            line: 56,
            column: 12
          }
        },
        loc: {
          start: {
            line: 56,
            column: 22
          },
          end: {
            line: 65,
            column: 9
          }
        },
        line: 56
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 70,
            column: 4
          },
          end: {
            line: 70,
            column: 5
          }
        },
        loc: {
          start: {
            line: 70,
            column: 40
          },
          end: {
            line: 78,
            column: 5
          }
        },
        line: 70
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 71,
            column: 50
          },
          end: {
            line: 71,
            column: 51
          }
        },
        loc: {
          start: {
            line: 71,
            column: 62
          },
          end: {
            line: 77,
            column: 9
          }
        },
        line: 71
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 82,
            column: 4
          },
          end: {
            line: 82,
            column: 5
          }
        },
        loc: {
          start: {
            line: 82,
            column: 39
          },
          end: {
            line: 87,
            column: 5
          }
        },
        line: 82
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 83,
            column: 50
          },
          end: {
            line: 83,
            column: 51
          }
        },
        loc: {
          start: {
            line: 83,
            column: 62
          },
          end: {
            line: 86,
            column: 9
          }
        },
        line: 83
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 91,
            column: 4
          },
          end: {
            line: 91,
            column: 5
          }
        },
        loc: {
          start: {
            line: 91,
            column: 38
          },
          end: {
            line: 96,
            column: 5
          }
        },
        line: 91
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 92,
            column: 50
          },
          end: {
            line: 92,
            column: 51
          }
        },
        loc: {
          start: {
            line: 92,
            column: 62
          },
          end: {
            line: 95,
            column: 9
          }
        },
        line: 92
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 100,
            column: 4
          },
          end: {
            line: 100,
            column: 5
          }
        },
        loc: {
          start: {
            line: 100,
            column: 35
          },
          end: {
            line: 105,
            column: 5
          }
        },
        line: 100
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 101,
            column: 50
          },
          end: {
            line: 101,
            column: 51
          }
        },
        loc: {
          start: {
            line: 101,
            column: 62
          },
          end: {
            line: 104,
            column: 9
          }
        },
        line: 101
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 109,
            column: 4
          },
          end: {
            line: 109,
            column: 5
          }
        },
        loc: {
          start: {
            line: 109,
            column: 40
          },
          end: {
            line: 114,
            column: 5
          }
        },
        line: 109
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 110,
            column: 50
          },
          end: {
            line: 110,
            column: 51
          }
        },
        loc: {
          start: {
            line: 110,
            column: 62
          },
          end: {
            line: 113,
            column: 9
          }
        },
        line: 110
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 118,
            column: 4
          },
          end: {
            line: 118,
            column: 5
          }
        },
        loc: {
          start: {
            line: 118,
            column: 53
          },
          end: {
            line: 151,
            column: 5
          }
        },
        line: 118
      },
      "16": {
        name: "(anonymous_16)",
        decl: {
          start: {
            line: 138,
            column: 66
          },
          end: {
            line: 138,
            column: 67
          }
        },
        loc: {
          start: {
            line: 138,
            column: 84
          },
          end: {
            line: 140,
            column: 13
          }
        },
        line: 138
      },
      "17": {
        name: "(anonymous_17)",
        decl: {
          start: {
            line: 142,
            column: 50
          },
          end: {
            line: 142,
            column: 51
          }
        },
        loc: {
          start: {
            line: 142,
            column: 62
          },
          end: {
            line: 150,
            column: 9
          }
        },
        line: 142
      },
      "18": {
        name: "(anonymous_18)",
        decl: {
          start: {
            line: 155,
            column: 4
          },
          end: {
            line: 155,
            column: 5
          }
        },
        loc: {
          start: {
            line: 155,
            column: 48
          },
          end: {
            line: 197,
            column: 5
          }
        },
        line: 155
      },
      "19": {
        name: "(anonymous_19)",
        decl: {
          start: {
            line: 161,
            column: 44
          },
          end: {
            line: 161,
            column: 45
          }
        },
        loc: {
          start: {
            line: 161,
            column: 63
          },
          end: {
            line: 192,
            column: 13
          }
        },
        line: 161
      },
      "20": {
        name: "(anonymous_20)",
        decl: {
          start: {
            line: 201,
            column: 4
          },
          end: {
            line: 201,
            column: 5
          }
        },
        loc: {
          start: {
            line: 201,
            column: 24
          },
          end: {
            line: 220,
            column: 5
          }
        },
        line: 201
      },
      "21": {
        name: "(anonymous_21)",
        decl: {
          start: {
            line: 224,
            column: 4
          },
          end: {
            line: 224,
            column: 5
          }
        },
        loc: {
          start: {
            line: 224,
            column: 15
          },
          end: {
            line: 231,
            column: 5
          }
        },
        line: 224
      },
      "22": {
        name: "(anonymous_22)",
        decl: {
          start: {
            line: 235,
            column: 4
          },
          end: {
            line: 235,
            column: 5
          }
        },
        loc: {
          start: {
            line: 235,
            column: 25
          },
          end: {
            line: 253,
            column: 5
          }
        },
        line: 235
      },
      "23": {
        name: "(anonymous_23)",
        decl: {
          start: {
            line: 257,
            column: 4
          },
          end: {
            line: 257,
            column: 5
          }
        },
        loc: {
          start: {
            line: 257,
            column: 14
          },
          end: {
            line: 262,
            column: 5
          }
        },
        line: 257
      },
      "24": {
        name: "(anonymous_24)",
        decl: {
          start: {
            line: 265,
            column: 41
          },
          end: {
            line: 265,
            column: 42
          }
        },
        loc: {
          start: {
            line: 265,
            column: 53
          },
          end: {
            line: 274,
            column: 1
          }
        },
        line: 265
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 10,
            column: 8
          },
          end: {
            line: 12,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 10,
            column: 8
          },
          end: {
            line: 12,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 10
      },
      "1": {
        loc: {
          start: {
            line: 13,
            column: 31
          },
          end: {
            line: 13,
            column: 61
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 13,
            column: 31
          },
          end: {
            line: 13,
            column: 53
          }
        }, {
          start: {
            line: 13,
            column: 57
          },
          end: {
            line: 13,
            column: 61
          }
        }],
        line: 13
      },
      "2": {
        loc: {
          start: {
            line: 14,
            column: 25
          },
          end: {
            line: 14,
            column: 71
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 14,
            column: 25
          },
          end: {
            line: 14,
            column: 41
          }
        }, {
          start: {
            line: 14,
            column: 45
          },
          end: {
            line: 14,
            column: 71
          }
        }],
        line: 14
      },
      "3": {
        loc: {
          start: {
            line: 15,
            column: 45
          },
          end: {
            line: 15,
            column: 67
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 15,
            column: 45
          },
          end: {
            line: 15,
            column: 62
          }
        }, {
          start: {
            line: 15,
            column: 66
          },
          end: {
            line: 15,
            column: 67
          }
        }],
        line: 15
      },
      "4": {
        loc: {
          start: {
            line: 17,
            column: 21
          },
          end: {
            line: 17,
            column: 51
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 17,
            column: 21
          },
          end: {
            line: 17,
            column: 35
          }
        }, {
          start: {
            line: 17,
            column: 39
          },
          end: {
            line: 17,
            column: 51
          }
        }],
        line: 17
      },
      "5": {
        loc: {
          start: {
            line: 18,
            column: 21
          },
          end: {
            line: 18,
            column: 44
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 18,
            column: 21
          },
          end: {
            line: 18,
            column: 35
          }
        }, {
          start: {
            line: 18,
            column: 39
          },
          end: {
            line: 18,
            column: 44
          }
        }],
        line: 18
      },
      "6": {
        loc: {
          start: {
            line: 33,
            column: 12
          },
          end: {
            line: 38,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 33,
            column: 12
          },
          end: {
            line: 38,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 33
      },
      "7": {
        loc: {
          start: {
            line: 35,
            column: 16
          },
          end: {
            line: 37,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 35,
            column: 16
          },
          end: {
            line: 37,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 35
      },
      "8": {
        loc: {
          start: {
            line: 40,
            column: 12
          },
          end: {
            line: 42,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 40,
            column: 12
          },
          end: {
            line: 42,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 40
      },
      "9": {
        loc: {
          start: {
            line: 44,
            column: 12
          },
          end: {
            line: 46,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 44,
            column: 12
          },
          end: {
            line: 46,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 44
      },
      "10": {
        loc: {
          start: {
            line: 52,
            column: 12
          },
          end: {
            line: 54,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 52,
            column: 12
          },
          end: {
            line: 54,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 52
      },
      "11": {
        loc: {
          start: {
            line: 121,
            column: 76
          },
          end: {
            line: 121,
            column: 140
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 121,
            column: 105
          },
          end: {
            line: 121,
            column: 121
          }
        }, {
          start: {
            line: 121,
            column: 124
          },
          end: {
            line: 121,
            column: 140
          }
        }],
        line: 121
      },
      "12": {
        loc: {
          start: {
            line: 122,
            column: 8
          },
          end: {
            line: 124,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 122,
            column: 8
          },
          end: {
            line: 124,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 122
      },
      "13": {
        loc: {
          start: {
            line: 126,
            column: 8
          },
          end: {
            line: 131,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 126,
            column: 8
          },
          end: {
            line: 131,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 126
      },
      "14": {
        loc: {
          start: {
            line: 128,
            column: 12
          },
          end: {
            line: 130,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 128,
            column: 12
          },
          end: {
            line: 130,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 128
      },
      "15": {
        loc: {
          start: {
            line: 137,
            column: 8
          },
          end: {
            line: 141,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 137,
            column: 8
          },
          end: {
            line: 141,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 137
      },
      "16": {
        loc: {
          start: {
            line: 155,
            column: 34
          },
          end: {
            line: 155,
            column: 46
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 155,
            column: 44
          },
          end: {
            line: 155,
            column: 46
          }
        }],
        line: 155
      },
      "17": {
        loc: {
          start: {
            line: 156,
            column: 16
          },
          end: {
            line: 156,
            column: 31
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 156,
            column: 30
          },
          end: {
            line: 156,
            column: 31
          }
        }],
        line: 156
      },
      "18": {
        loc: {
          start: {
            line: 156,
            column: 33
          },
          end: {
            line: 156,
            column: 49
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 156,
            column: 44
          },
          end: {
            line: 156,
            column: 49
          }
        }],
        line: 156
      },
      "19": {
        loc: {
          start: {
            line: 164,
            column: 20
          },
          end: {
            line: 182,
            column: 21
          }
        },
        type: "switch",
        locations: [{
          start: {
            line: 165,
            column: 24
          },
          end: {
            line: 167,
            column: 34
          }
        }, {
          start: {
            line: 168,
            column: 24
          },
          end: {
            line: 170,
            column: 34
          }
        }, {
          start: {
            line: 171,
            column: 24
          },
          end: {
            line: 173,
            column: 34
          }
        }, {
          start: {
            line: 174,
            column: 24
          },
          end: {
            line: 176,
            column: 34
          }
        }, {
          start: {
            line: 177,
            column: 24
          },
          end: {
            line: 179,
            column: 34
          }
        }, {
          start: {
            line: 180,
            column: 24
          },
          end: {
            line: 181,
            column: 85
          }
        }],
        line: 164
      },
      "20": {
        loc: {
          start: {
            line: 186,
            column: 41
          },
          end: {
            line: 186,
            column: 97
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 186,
            column: 66
          },
          end: {
            line: 186,
            column: 79
          }
        }, {
          start: {
            line: 186,
            column: 82
          },
          end: {
            line: 186,
            column: 97
          }
        }],
        line: 186
      },
      "21": {
        loc: {
          start: {
            line: 187,
            column: 20
          },
          end: {
            line: 189,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 187,
            column: 20
          },
          end: {
            line: 189,
            column: 21
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 187
      },
      "22": {
        loc: {
          start: {
            line: 229,
            column: 21
          },
          end: {
            line: 229,
            column: 72
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 229,
            column: 21
          },
          end: {
            line: 229,
            column: 56
          }
        }, {
          start: {
            line: 229,
            column: 60
          },
          end: {
            line: 229,
            column: 72
          }
        }],
        line: 229
      },
      "23": {
        loc: {
          start: {
            line: 236,
            column: 8
          },
          end: {
            line: 242,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 236,
            column: 8
          },
          end: {
            line: 242,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 236
      },
      "24": {
        loc: {
          start: {
            line: 238,
            column: 12
          },
          end: {
            line: 240,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 238,
            column: 12
          },
          end: {
            line: 240,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 238
      },
      "25": {
        loc: {
          start: {
            line: 243,
            column: 8
          },
          end: {
            line: 245,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 243,
            column: 8
          },
          end: {
            line: 245,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 243
      },
      "26": {
        loc: {
          start: {
            line: 246,
            column: 8
          },
          end: {
            line: 249,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 246,
            column: 8
          },
          end: {
            line: 249,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 246
      },
      "27": {
        loc: {
          start: {
            line: 250,
            column: 8
          },
          end: {
            line: 252,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 250,
            column: 8
          },
          end: {
            line: 252,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 250
      },
      "28": {
        loc: {
          start: {
            line: 266,
            column: 21
          },
          end: {
            line: 266,
            column: 70
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 266,
            column: 21
          },
          end: {
            line: 266,
            column: 37
          }
        }, {
          start: {
            line: 266,
            column: 41
          },
          end: {
            line: 266,
            column: 70
          }
        }],
        line: 266
      },
      "29": {
        loc: {
          start: {
            line: 267,
            column: 4
          },
          end: {
            line: 269,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 267,
            column: 4
          },
          end: {
            line: 269,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 267
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0,
      "105": 0,
      "106": 0,
      "107": 0,
      "108": 0,
      "109": 0,
      "110": 0,
      "111": 0,
      "112": 0,
      "113": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0],
      "17": [0],
      "18": [0],
      "19": [0, 0, 0, 0, 0, 0],
      "20": [0, 0],
      "21": [0, 0],
      "22": [0, 0],
      "23": [0, 0],
      "24": [0, 0],
      "25": [0, 0],
      "26": [0, 0],
      "27": [0, 0],
      "28": [0, 0],
      "29": [0, 0]
    },
    inputSourceMap: {
      file: "/Users/peterkrzyzek/Development/clickup-mcp-server/src/clickup-client/secure-client.ts",
      mappings: "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",
      names: [],
      sources: ["/Users/peterkrzyzek/Development/clickup-mcp-server/src/clickup-client/secure-client.ts"],
      sourcesContent: ["import axios, { AxiosInstance, AxiosRequestConfig } from 'axios';\nimport { validateApiToken, sanitizeInput, rateLimiter, DEFAULT_RATE_LIMITS } from '../utils/security.js';\nimport { handleClickUpApiError, RetryManager, generateRequestId } from '../utils/error-handling.js';\n\n// ClickUp API base URL\nconst API_BASE_URL = 'https://api.clickup.com/api/v2';\n\nexport interface SecureClickUpClientConfig {\n  apiToken: string;\n  baseUrl?: string;\n  timeout?: number;\n  maxRetries?: number;\n  enableRateLimit?: boolean;\n  userAgent?: string;\n}\n\nexport class SecureClickUpClient {\n  private axiosInstance: AxiosInstance;\n  private retryManager: RetryManager;\n  private enableRateLimit: boolean;\n  private userAgent: string;\n  \n  constructor(config: SecureClickUpClientConfig) {\n    // Validate API token\n    const tokenValidation = validateApiToken(config.apiToken);\n    if (!tokenValidation.isValid) {\n      throw new Error(`Invalid API token: ${tokenValidation.error}`);\n    }\n\n    this.enableRateLimit = config.enableRateLimit ?? true;\n    this.userAgent = config.userAgent || 'ClickUp-MCP-Server/3.0.0';\n    this.retryManager = new RetryManager(config.maxRetries || 3);\n\n    this.axiosInstance = axios.create({\n      baseURL: config.baseUrl || API_BASE_URL,\n      timeout: config.timeout || 30000, // 30 second timeout\n      headers: {\n        'Authorization': config.apiToken,\n        'Content-Type': 'application/json',\n        'User-Agent': this.userAgent,\n        'Accept': 'application/json',\n        'X-Requested-With': 'XMLHttpRequest'\n      }\n    });\n\n    // Add request interceptor for security and rate limiting\n    this.axiosInstance.interceptors.request.use(\n      (config) => {\n        // Generate request ID for tracking\n        const requestId = generateRequestId();\n        config.headers['X-Request-ID'] = requestId;\n        \n        // Rate limiting\n        if (this.enableRateLimit) {\n          const rateLimitKey = `api_${config.url}`;\n          if (!rateLimiter.isAllowed(rateLimitKey, DEFAULT_RATE_LIMITS.api)) {\n            throw new Error('Rate limit exceeded. Please slow down your requests.');\n          }\n        }\n\n        // Sanitize request data\n        if (config.data) {\n          config.data = sanitizeInput(config.data);\n        }\n\n        // Sanitize query parameters\n        if (config.params) {\n          config.params = sanitizeInput(config.params);\n        }\n\n        return config;\n      },\n      (error) => Promise.reject(error)\n    );\n\n    // Add response interceptor for error handling\n    this.axiosInstance.interceptors.response.use(\n      (response) => {\n        // Log successful requests in debug mode\n        if (process.env.NODE_ENV === 'development') {\n          console.debug(`[${response.config.headers['X-Request-ID']}] ${response.config.method?.toUpperCase()} ${response.config.url} - ${response.status}`);\n        }\n        return response;\n      },\n      (error) => {\n        const requestId = error.config?.headers?.['X-Request-ID'];\n        const structuredError = handleClickUpApiError(error, {\n          operation: `${error.config?.method?.toUpperCase()} ${error.config?.url}`,\n          requestId\n        });\n        \n        // Log error\n        console.error(`[${requestId}] API Error:`, structuredError.message);\n        \n        return Promise.reject(structuredError);\n      }\n    );\n  }\n\n  /**\n   * Secure GET request with retry logic\n   */\n  async get<T = any>(endpoint: string, params?: any, config?: AxiosRequestConfig): Promise<T> {\n    return this.retryManager.executeWithRetry(async () => {\n      const response = await this.axiosInstance.get(endpoint, { \n        params: sanitizeInput(params), \n        ...config \n      });\n      return response.data;\n    }, { operationName: `GET ${endpoint}` });\n  }\n\n  /**\n   * Secure POST request with retry logic\n   */\n  async post<T = any>(endpoint: string, data?: any, config?: AxiosRequestConfig): Promise<T> {\n    return this.retryManager.executeWithRetry(async () => {\n      const response = await this.axiosInstance.post(endpoint, sanitizeInput(data), config);\n      return response.data;\n    }, { operationName: `POST ${endpoint}` });\n  }\n\n  /**\n   * Secure PUT request with retry logic\n   */\n  async put<T = any>(endpoint: string, data?: any, config?: AxiosRequestConfig): Promise<T> {\n    return this.retryManager.executeWithRetry(async () => {\n      const response = await this.axiosInstance.put(endpoint, sanitizeInput(data), config);\n      return response.data;\n    }, { operationName: `PUT ${endpoint}` });\n  }\n\n  /**\n   * Secure DELETE request with retry logic\n   */\n  async delete<T = any>(endpoint: string, config?: AxiosRequestConfig): Promise<T> {\n    return this.retryManager.executeWithRetry(async () => {\n      const response = await this.axiosInstance.delete(endpoint, config);\n      return response.data;\n    }, { operationName: `DELETE ${endpoint}` });\n  }\n\n  /**\n   * Secure PATCH request with retry logic\n   */\n  async patch<T = any>(endpoint: string, data?: any, config?: AxiosRequestConfig): Promise<T> {\n    return this.retryManager.executeWithRetry(async () => {\n      const response = await this.axiosInstance.patch(endpoint, sanitizeInput(data), config);\n      return response.data;\n    }, { operationName: `PATCH ${endpoint}` });\n  }\n\n  /**\n   * Upload file securely with validation\n   */\n  async uploadFile<T = any>(\n    endpoint: string, \n    file: {\n      filename: string;\n      data: Buffer | string;\n      mimetype?: string;\n    },\n    additionalData?: Record<string, any>\n  ): Promise<T> {\n    // Validate file upload\n    const { validateFileUpload } = await import('../utils/security.js');\n    const validation = validateFileUpload(file.filename, file.mimetype, \n      Buffer.isBuffer(file.data) ? file.data.length : file.data.length);\n    \n    if (!validation.isValid) {\n      throw new Error(`File upload validation failed: ${validation.errors.join(', ')}`);\n    }\n\n    // Rate limit file uploads more strictly\n    if (this.enableRateLimit) {\n      const rateLimitKey = `upload_${endpoint}`;\n      if (!rateLimiter.isAllowed(rateLimitKey, DEFAULT_RATE_LIMITS.upload)) {\n        throw new Error('Upload rate limit exceeded. Please wait before uploading more files.');\n      }\n    }\n\n    const formData = new FormData();\n    \n    // Add file\n    const blob = new Blob([file.data], { type: file.mimetype });\n    formData.append('file', blob, file.filename);\n    \n    // Add additional data\n    if (additionalData) {\n      Object.entries(sanitizeInput(additionalData)).forEach(([key, value]) => {\n        formData.append(key, String(value));\n      });\n    }\n\n    return this.retryManager.executeWithRetry(async () => {\n      const response = await this.axiosInstance.post(endpoint, formData, {\n        headers: {\n          'Content-Type': 'multipart/form-data'\n        },\n        timeout: 120000 // 2 minute timeout for uploads\n      });\n      return response.data;\n    }, { operationName: `UPLOAD ${endpoint}` });\n  }\n\n  /**\n   * Batch requests with concurrency control\n   */\n  async batchRequests<T>(\n    requests: Array<{\n      method: 'GET' | 'POST' | 'PUT' | 'DELETE' | 'PATCH';\n      endpoint: string;\n      data?: any;\n      params?: any;\n    }>,\n    options: {\n      concurrency?: number;\n      failFast?: boolean;\n    } = {}\n  ): Promise<Array<{ success: boolean; data?: T; error?: string }>> {\n    const { concurrency = 5, failFast = false } = options;\n    const results: Array<{ success: boolean; data?: T; error?: string }> = [];\n    \n    // Process requests in batches\n    for (let i = 0; i < requests.length; i += concurrency) {\n      const batch = requests.slice(i, i + concurrency);\n      \n      const batchPromises = batch.map(async (request) => {\n        try {\n          let data: T;\n          \n          switch (request.method) {\n            case 'GET':\n              data = await this.get<T>(request.endpoint, request.params);\n              break;\n            case 'POST':\n              data = await this.post<T>(request.endpoint, request.data);\n              break;\n            case 'PUT':\n              data = await this.put<T>(request.endpoint, request.data);\n              break;\n            case 'DELETE':\n              data = await this.delete<T>(request.endpoint);\n              break;\n            case 'PATCH':\n              data = await this.patch<T>(request.endpoint, request.data);\n              break;\n            default:\n              throw new Error(`Unsupported method: ${request.method}`);\n          }\n          \n          return { success: true, data };\n        } catch (error) {\n          const errorMessage = error instanceof Error ? error.message : 'Unknown error';\n          \n          if (failFast) {\n            throw error;\n          }\n          \n          return { success: false, error: errorMessage };\n        }\n      });\n      \n      const batchResults = await Promise.all(batchPromises);\n      results.push(...batchResults);\n    }\n    \n    return results;\n  }\n\n  /**\n   * Health check endpoint\n   */\n  async healthCheck(): Promise<{\n    status: 'healthy' | 'unhealthy';\n    latency: number;\n    timestamp: string;\n  }> {\n    const startTime = Date.now();\n    \n    try {\n      // Simple API call to check connectivity\n      await this.get('/user');\n      const latency = Date.now() - startTime;\n      \n      return {\n        status: 'healthy',\n        latency,\n        timestamp: new Date().toISOString()\n      };\n    } catch (error) {\n      return {\n        status: 'unhealthy',\n        latency: Date.now() - startTime,\n        timestamp: new Date().toISOString()\n      };\n    }\n  }\n\n  /**\n   * Get client statistics\n   */\n  getStats(): {\n    totalRequests: number;\n    rateLimitEnabled: boolean;\n    userAgent: string;\n    baseUrl: string;\n  } {\n    return {\n      totalRequests: 0, // Would need to implement request counting\n      rateLimitEnabled: this.enableRateLimit,\n      userAgent: this.userAgent,\n      baseUrl: this.axiosInstance.defaults.baseURL || API_BASE_URL\n    };\n  }\n\n  /**\n   * Update configuration\n   */\n  updateConfig(config: Partial<SecureClickUpClientConfig>): void {\n    if (config.apiToken) {\n      const tokenValidation = validateApiToken(config.apiToken);\n      if (!tokenValidation.isValid) {\n        throw new Error(`Invalid API token: ${tokenValidation.error}`);\n      }\n      this.axiosInstance.defaults.headers['Authorization'] = config.apiToken;\n    }\n\n    if (config.timeout) {\n      this.axiosInstance.defaults.timeout = config.timeout;\n    }\n\n    if (config.userAgent) {\n      this.userAgent = config.userAgent;\n      this.axiosInstance.defaults.headers['User-Agent'] = config.userAgent;\n    }\n\n    if (config.enableRateLimit !== undefined) {\n      this.enableRateLimit = config.enableRateLimit;\n    }\n  }\n\n  /**\n   * Cleanup resources\n   */\n  destroy(): void {\n    // Clear any pending requests\n    this.axiosInstance.defaults.timeout = 1;\n    \n    // Reset rate limiter\n    rateLimiter.reset();\n  }\n}\n\n// Create secure client factory\nexport const createSecureClickUpClient = (config?: Partial<SecureClickUpClientConfig>): SecureClickUpClient => {\n  const apiToken = config?.apiToken || process.env.CLICKUP_API_TOKEN;\n  \n  if (!apiToken) {\n    throw new Error('CLICKUP_API_TOKEN environment variable is required');\n  }\n  \n  return new SecureClickUpClient({\n    apiToken,\n    ...config\n  });\n};\n"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "75d1fcc5205c2cbe62df18ccd193afc6fa103104"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_gnc8p84ru = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_gnc8p84ru();
import axios from 'axios';
import { validateApiToken, sanitizeInput, rateLimiter, DEFAULT_RATE_LIMITS } from '../utils/security.js';
import { handleClickUpApiError, RetryManager, generateRequestId } from '../utils/error-handling.js';
// ClickUp API base URL
const API_BASE_URL =
/* istanbul ignore next */
(cov_gnc8p84ru().s[0]++, 'https://api.clickup.com/api/v2');
export class SecureClickUpClient {
  constructor(config) {
    /* istanbul ignore next */
    cov_gnc8p84ru().f[0]++;
    // Validate API token
    const tokenValidation =
    /* istanbul ignore next */
    (cov_gnc8p84ru().s[1]++, validateApiToken(config.apiToken));
    /* istanbul ignore next */
    cov_gnc8p84ru().s[2]++;
    if (!tokenValidation.isValid) {
      /* istanbul ignore next */
      cov_gnc8p84ru().b[0][0]++;
      cov_gnc8p84ru().s[3]++;
      throw new Error(`Invalid API token: ${tokenValidation.error}`);
    } else
    /* istanbul ignore next */
    {
      cov_gnc8p84ru().b[0][1]++;
    }
    cov_gnc8p84ru().s[4]++;
    this.enableRateLimit =
    /* istanbul ignore next */
    (cov_gnc8p84ru().b[1][0]++, config.enableRateLimit) ??
    /* istanbul ignore next */
    (cov_gnc8p84ru().b[1][1]++, true);
    /* istanbul ignore next */
    cov_gnc8p84ru().s[5]++;
    this.userAgent =
    /* istanbul ignore next */
    (cov_gnc8p84ru().b[2][0]++, config.userAgent) ||
    /* istanbul ignore next */
    (cov_gnc8p84ru().b[2][1]++, 'ClickUp-MCP-Server/3.0.0');
    /* istanbul ignore next */
    cov_gnc8p84ru().s[6]++;
    this.retryManager = new RetryManager(
    /* istanbul ignore next */
    (cov_gnc8p84ru().b[3][0]++, config.maxRetries) ||
    /* istanbul ignore next */
    (cov_gnc8p84ru().b[3][1]++, 3));
    /* istanbul ignore next */
    cov_gnc8p84ru().s[7]++;
    this.axiosInstance = axios.create({
      baseURL:
      /* istanbul ignore next */
      (cov_gnc8p84ru().b[4][0]++, config.baseUrl) ||
      /* istanbul ignore next */
      (cov_gnc8p84ru().b[4][1]++, API_BASE_URL),
      timeout:
      /* istanbul ignore next */
      (cov_gnc8p84ru().b[5][0]++, config.timeout) ||
      /* istanbul ignore next */
      (cov_gnc8p84ru().b[5][1]++, 30000),
      // 30 second timeout
      headers: {
        'Authorization': config.apiToken,
        'Content-Type': 'application/json',
        'User-Agent': this.userAgent,
        'Accept': 'application/json',
        'X-Requested-With': 'XMLHttpRequest'
      }
    });
    // Add request interceptor for security and rate limiting
    /* istanbul ignore next */
    cov_gnc8p84ru().s[8]++;
    this.axiosInstance.interceptors.request.use(config => {
      /* istanbul ignore next */
      cov_gnc8p84ru().f[1]++;
      // Generate request ID for tracking
      const requestId =
      /* istanbul ignore next */
      (cov_gnc8p84ru().s[9]++, generateRequestId());
      /* istanbul ignore next */
      cov_gnc8p84ru().s[10]++;
      config.headers['X-Request-ID'] = requestId;
      // Rate limiting
      /* istanbul ignore next */
      cov_gnc8p84ru().s[11]++;
      if (this.enableRateLimit) {
        /* istanbul ignore next */
        cov_gnc8p84ru().b[6][0]++;
        const rateLimitKey =
        /* istanbul ignore next */
        (cov_gnc8p84ru().s[12]++, `api_${config.url}`);
        /* istanbul ignore next */
        cov_gnc8p84ru().s[13]++;
        if (!rateLimiter.isAllowed(rateLimitKey, DEFAULT_RATE_LIMITS.api)) {
          /* istanbul ignore next */
          cov_gnc8p84ru().b[7][0]++;
          cov_gnc8p84ru().s[14]++;
          throw new Error('Rate limit exceeded. Please slow down your requests.');
        } else
        /* istanbul ignore next */
        {
          cov_gnc8p84ru().b[7][1]++;
        }
      } else
      /* istanbul ignore next */
      {
        cov_gnc8p84ru().b[6][1]++;
      }
      // Sanitize request data
      cov_gnc8p84ru().s[15]++;
      if (config.data) {
        /* istanbul ignore next */
        cov_gnc8p84ru().b[8][0]++;
        cov_gnc8p84ru().s[16]++;
        config.data = sanitizeInput(config.data);
      } else
      /* istanbul ignore next */
      {
        cov_gnc8p84ru().b[8][1]++;
      }
      // Sanitize query parameters
      cov_gnc8p84ru().s[17]++;
      if (config.params) {
        /* istanbul ignore next */
        cov_gnc8p84ru().b[9][0]++;
        cov_gnc8p84ru().s[18]++;
        config.params = sanitizeInput(config.params);
      } else
      /* istanbul ignore next */
      {
        cov_gnc8p84ru().b[9][1]++;
      }
      cov_gnc8p84ru().s[19]++;
      return config;
    }, error => {
      /* istanbul ignore next */
      cov_gnc8p84ru().f[2]++;
      cov_gnc8p84ru().s[20]++;
      return Promise.reject(error);
    });
    // Add response interceptor for error handling
    /* istanbul ignore next */
    cov_gnc8p84ru().s[21]++;
    this.axiosInstance.interceptors.response.use(response => {
      /* istanbul ignore next */
      cov_gnc8p84ru().f[3]++;
      cov_gnc8p84ru().s[22]++;
      // Log successful requests in debug mode
      if (process.env.NODE_ENV === 'development') {
        /* istanbul ignore next */
        cov_gnc8p84ru().b[10][0]++;
        cov_gnc8p84ru().s[23]++;
        console.debug(`[${response.config.headers['X-Request-ID']}] ${response.config.method?.toUpperCase()} ${response.config.url} - ${response.status}`);
      } else
      /* istanbul ignore next */
      {
        cov_gnc8p84ru().b[10][1]++;
      }
      cov_gnc8p84ru().s[24]++;
      return response;
    }, error => {
      /* istanbul ignore next */
      cov_gnc8p84ru().f[4]++;
      const requestId =
      /* istanbul ignore next */
      (cov_gnc8p84ru().s[25]++, error.config?.headers?.['X-Request-ID']);
      const structuredError =
      /* istanbul ignore next */
      (cov_gnc8p84ru().s[26]++, handleClickUpApiError(error, {
        operation: `${error.config?.method?.toUpperCase()} ${error.config?.url}`,
        requestId
      }));
      // Log error
      /* istanbul ignore next */
      cov_gnc8p84ru().s[27]++;
      console.error(`[${requestId}] API Error:`, structuredError.message);
      /* istanbul ignore next */
      cov_gnc8p84ru().s[28]++;
      return Promise.reject(structuredError);
    });
  }
  /**
   * Secure GET request with retry logic
   */
  async get(endpoint, params, config) {
    /* istanbul ignore next */
    cov_gnc8p84ru().f[5]++;
    cov_gnc8p84ru().s[29]++;
    return this.retryManager.executeWithRetry(async () => {
      /* istanbul ignore next */
      cov_gnc8p84ru().f[6]++;
      const response =
      /* istanbul ignore next */
      (cov_gnc8p84ru().s[30]++, await this.axiosInstance.get(endpoint, {
        params: sanitizeInput(params),
        ...config
      }));
      /* istanbul ignore next */
      cov_gnc8p84ru().s[31]++;
      return response.data;
    }, {
      operationName: `GET ${endpoint}`
    });
  }
  /**
   * Secure POST request with retry logic
   */
  async post(endpoint, data, config) {
    /* istanbul ignore next */
    cov_gnc8p84ru().f[7]++;
    cov_gnc8p84ru().s[32]++;
    return this.retryManager.executeWithRetry(async () => {
      /* istanbul ignore next */
      cov_gnc8p84ru().f[8]++;
      const response =
      /* istanbul ignore next */
      (cov_gnc8p84ru().s[33]++, await this.axiosInstance.post(endpoint, sanitizeInput(data), config));
      /* istanbul ignore next */
      cov_gnc8p84ru().s[34]++;
      return response.data;
    }, {
      operationName: `POST ${endpoint}`
    });
  }
  /**
   * Secure PUT request with retry logic
   */
  async put(endpoint, data, config) {
    /* istanbul ignore next */
    cov_gnc8p84ru().f[9]++;
    cov_gnc8p84ru().s[35]++;
    return this.retryManager.executeWithRetry(async () => {
      /* istanbul ignore next */
      cov_gnc8p84ru().f[10]++;
      const response =
      /* istanbul ignore next */
      (cov_gnc8p84ru().s[36]++, await this.axiosInstance.put(endpoint, sanitizeInput(data), config));
      /* istanbul ignore next */
      cov_gnc8p84ru().s[37]++;
      return response.data;
    }, {
      operationName: `PUT ${endpoint}`
    });
  }
  /**
   * Secure DELETE request with retry logic
   */
  async delete(endpoint, config) {
    /* istanbul ignore next */
    cov_gnc8p84ru().f[11]++;
    cov_gnc8p84ru().s[38]++;
    return this.retryManager.executeWithRetry(async () => {
      /* istanbul ignore next */
      cov_gnc8p84ru().f[12]++;
      const response =
      /* istanbul ignore next */
      (cov_gnc8p84ru().s[39]++, await this.axiosInstance.delete(endpoint, config));
      /* istanbul ignore next */
      cov_gnc8p84ru().s[40]++;
      return response.data;
    }, {
      operationName: `DELETE ${endpoint}`
    });
  }
  /**
   * Secure PATCH request with retry logic
   */
  async patch(endpoint, data, config) {
    /* istanbul ignore next */
    cov_gnc8p84ru().f[13]++;
    cov_gnc8p84ru().s[41]++;
    return this.retryManager.executeWithRetry(async () => {
      /* istanbul ignore next */
      cov_gnc8p84ru().f[14]++;
      const response =
      /* istanbul ignore next */
      (cov_gnc8p84ru().s[42]++, await this.axiosInstance.patch(endpoint, sanitizeInput(data), config));
      /* istanbul ignore next */
      cov_gnc8p84ru().s[43]++;
      return response.data;
    }, {
      operationName: `PATCH ${endpoint}`
    });
  }
  /**
   * Upload file securely with validation
   */
  async uploadFile(endpoint, file, additionalData) {
    /* istanbul ignore next */
    cov_gnc8p84ru().f[15]++;
    // Validate file upload
    const {
      validateFileUpload
    } =
    /* istanbul ignore next */
    (cov_gnc8p84ru().s[44]++, await import('../utils/security.js'));
    const validation =
    /* istanbul ignore next */
    (cov_gnc8p84ru().s[45]++, validateFileUpload(file.filename, file.mimetype, Buffer.isBuffer(file.data) ?
    /* istanbul ignore next */
    (cov_gnc8p84ru().b[11][0]++, file.data.length) :
    /* istanbul ignore next */
    (cov_gnc8p84ru().b[11][1]++, file.data.length)));
    /* istanbul ignore next */
    cov_gnc8p84ru().s[46]++;
    if (!validation.isValid) {
      /* istanbul ignore next */
      cov_gnc8p84ru().b[12][0]++;
      cov_gnc8p84ru().s[47]++;
      throw new Error(`File upload validation failed: ${validation.errors.join(', ')}`);
    } else
    /* istanbul ignore next */
    {
      cov_gnc8p84ru().b[12][1]++;
    }
    // Rate limit file uploads more strictly
    cov_gnc8p84ru().s[48]++;
    if (this.enableRateLimit) {
      /* istanbul ignore next */
      cov_gnc8p84ru().b[13][0]++;
      const rateLimitKey =
      /* istanbul ignore next */
      (cov_gnc8p84ru().s[49]++, `upload_${endpoint}`);
      /* istanbul ignore next */
      cov_gnc8p84ru().s[50]++;
      if (!rateLimiter.isAllowed(rateLimitKey, DEFAULT_RATE_LIMITS.upload)) {
        /* istanbul ignore next */
        cov_gnc8p84ru().b[14][0]++;
        cov_gnc8p84ru().s[51]++;
        throw new Error('Upload rate limit exceeded. Please wait before uploading more files.');
      } else
      /* istanbul ignore next */
      {
        cov_gnc8p84ru().b[14][1]++;
      }
    } else
    /* istanbul ignore next */
    {
      cov_gnc8p84ru().b[13][1]++;
    }
    const formData =
    /* istanbul ignore next */
    (cov_gnc8p84ru().s[52]++, new FormData());
    // Add file
    const blob =
    /* istanbul ignore next */
    (cov_gnc8p84ru().s[53]++, new Blob([file.data], {
      type: file.mimetype
    }));
    /* istanbul ignore next */
    cov_gnc8p84ru().s[54]++;
    formData.append('file', blob, file.filename);
    // Add additional data
    /* istanbul ignore next */
    cov_gnc8p84ru().s[55]++;
    if (additionalData) {
      /* istanbul ignore next */
      cov_gnc8p84ru().b[15][0]++;
      cov_gnc8p84ru().s[56]++;
      Object.entries(sanitizeInput(additionalData)).forEach(([key, value]) => {
        /* istanbul ignore next */
        cov_gnc8p84ru().f[16]++;
        cov_gnc8p84ru().s[57]++;
        formData.append(key, String(value));
      });
    } else
    /* istanbul ignore next */
    {
      cov_gnc8p84ru().b[15][1]++;
    }
    cov_gnc8p84ru().s[58]++;
    return this.retryManager.executeWithRetry(async () => {
      /* istanbul ignore next */
      cov_gnc8p84ru().f[17]++;
      const response =
      /* istanbul ignore next */
      (cov_gnc8p84ru().s[59]++, await this.axiosInstance.post(endpoint, formData, {
        headers: {
          'Content-Type': 'multipart/form-data'
        },
        timeout: 120000 // 2 minute timeout for uploads
      }));
      /* istanbul ignore next */
      cov_gnc8p84ru().s[60]++;
      return response.data;
    }, {
      operationName: `UPLOAD ${endpoint}`
    });
  }
  /**
   * Batch requests with concurrency control
   */
  async batchRequests(requests, options =
  /* istanbul ignore next */
  (cov_gnc8p84ru().b[16][0]++, {})) {
    /* istanbul ignore next */
    cov_gnc8p84ru().f[18]++;
    const {
      concurrency =
      /* istanbul ignore next */
      (cov_gnc8p84ru().b[17][0]++, 5),
      failFast =
      /* istanbul ignore next */
      (cov_gnc8p84ru().b[18][0]++, false)
    } =
    /* istanbul ignore next */
    (cov_gnc8p84ru().s[61]++, options);
    const results =
    /* istanbul ignore next */
    (cov_gnc8p84ru().s[62]++, []);
    // Process requests in batches
    /* istanbul ignore next */
    cov_gnc8p84ru().s[63]++;
    for (let i =
    /* istanbul ignore next */
    (cov_gnc8p84ru().s[64]++, 0); i < requests.length; i += concurrency) {
      const batch =
      /* istanbul ignore next */
      (cov_gnc8p84ru().s[65]++, requests.slice(i, i + concurrency));
      const batchPromises =
      /* istanbul ignore next */
      (cov_gnc8p84ru().s[66]++, batch.map(async request => {
        /* istanbul ignore next */
        cov_gnc8p84ru().f[19]++;
        cov_gnc8p84ru().s[67]++;
        try {
          let data;
          /* istanbul ignore next */
          cov_gnc8p84ru().s[68]++;
          switch (request.method) {
            case 'GET':
              /* istanbul ignore next */
              cov_gnc8p84ru().b[19][0]++;
              cov_gnc8p84ru().s[69]++;
              data = await this.get(request.endpoint, request.params);
              /* istanbul ignore next */
              cov_gnc8p84ru().s[70]++;
              break;
            case 'POST':
              /* istanbul ignore next */
              cov_gnc8p84ru().b[19][1]++;
              cov_gnc8p84ru().s[71]++;
              data = await this.post(request.endpoint, request.data);
              /* istanbul ignore next */
              cov_gnc8p84ru().s[72]++;
              break;
            case 'PUT':
              /* istanbul ignore next */
              cov_gnc8p84ru().b[19][2]++;
              cov_gnc8p84ru().s[73]++;
              data = await this.put(request.endpoint, request.data);
              /* istanbul ignore next */
              cov_gnc8p84ru().s[74]++;
              break;
            case 'DELETE':
              /* istanbul ignore next */
              cov_gnc8p84ru().b[19][3]++;
              cov_gnc8p84ru().s[75]++;
              data = await this.delete(request.endpoint);
              /* istanbul ignore next */
              cov_gnc8p84ru().s[76]++;
              break;
            case 'PATCH':
              /* istanbul ignore next */
              cov_gnc8p84ru().b[19][4]++;
              cov_gnc8p84ru().s[77]++;
              data = await this.patch(request.endpoint, request.data);
              /* istanbul ignore next */
              cov_gnc8p84ru().s[78]++;
              break;
            default:
              /* istanbul ignore next */
              cov_gnc8p84ru().b[19][5]++;
              cov_gnc8p84ru().s[79]++;
              throw new Error(`Unsupported method: ${request.method}`);
          }
          /* istanbul ignore next */
          cov_gnc8p84ru().s[80]++;
          return {
            success: true,
            data
          };
        } catch (error) {
          const errorMessage =
          /* istanbul ignore next */
          (cov_gnc8p84ru().s[81]++, error instanceof Error ?
          /* istanbul ignore next */
          (cov_gnc8p84ru().b[20][0]++, error.message) :
          /* istanbul ignore next */
          (cov_gnc8p84ru().b[20][1]++, 'Unknown error'));
          /* istanbul ignore next */
          cov_gnc8p84ru().s[82]++;
          if (failFast) {
            /* istanbul ignore next */
            cov_gnc8p84ru().b[21][0]++;
            cov_gnc8p84ru().s[83]++;
            throw error;
          } else
          /* istanbul ignore next */
          {
            cov_gnc8p84ru().b[21][1]++;
          }
          cov_gnc8p84ru().s[84]++;
          return {
            success: false,
            error: errorMessage
          };
        }
      }));
      const batchResults =
      /* istanbul ignore next */
      (cov_gnc8p84ru().s[85]++, await Promise.all(batchPromises));
      /* istanbul ignore next */
      cov_gnc8p84ru().s[86]++;
      results.push(...batchResults);
    }
    /* istanbul ignore next */
    cov_gnc8p84ru().s[87]++;
    return results;
  }
  /**
   * Health check endpoint
   */
  async healthCheck() {
    /* istanbul ignore next */
    cov_gnc8p84ru().f[20]++;
    const startTime =
    /* istanbul ignore next */
    (cov_gnc8p84ru().s[88]++, Date.now());
    /* istanbul ignore next */
    cov_gnc8p84ru().s[89]++;
    try {
      /* istanbul ignore next */
      cov_gnc8p84ru().s[90]++;
      // Simple API call to check connectivity
      await this.get('/user');
      const latency =
      /* istanbul ignore next */
      (cov_gnc8p84ru().s[91]++, Date.now() - startTime);
      /* istanbul ignore next */
      cov_gnc8p84ru().s[92]++;
      return {
        status: 'healthy',
        latency,
        timestamp: new Date().toISOString()
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_gnc8p84ru().s[93]++;
      return {
        status: 'unhealthy',
        latency: Date.now() - startTime,
        timestamp: new Date().toISOString()
      };
    }
  }
  /**
   * Get client statistics
   */
  getStats() {
    /* istanbul ignore next */
    cov_gnc8p84ru().f[21]++;
    cov_gnc8p84ru().s[94]++;
    return {
      totalRequests: 0,
      // Would need to implement request counting
      rateLimitEnabled: this.enableRateLimit,
      userAgent: this.userAgent,
      baseUrl:
      /* istanbul ignore next */
      (cov_gnc8p84ru().b[22][0]++, this.axiosInstance.defaults.baseURL) ||
      /* istanbul ignore next */
      (cov_gnc8p84ru().b[22][1]++, API_BASE_URL)
    };
  }
  /**
   * Update configuration
   */
  updateConfig(config) {
    /* istanbul ignore next */
    cov_gnc8p84ru().f[22]++;
    cov_gnc8p84ru().s[95]++;
    if (config.apiToken) {
      /* istanbul ignore next */
      cov_gnc8p84ru().b[23][0]++;
      const tokenValidation =
      /* istanbul ignore next */
      (cov_gnc8p84ru().s[96]++, validateApiToken(config.apiToken));
      /* istanbul ignore next */
      cov_gnc8p84ru().s[97]++;
      if (!tokenValidation.isValid) {
        /* istanbul ignore next */
        cov_gnc8p84ru().b[24][0]++;
        cov_gnc8p84ru().s[98]++;
        throw new Error(`Invalid API token: ${tokenValidation.error}`);
      } else
      /* istanbul ignore next */
      {
        cov_gnc8p84ru().b[24][1]++;
      }
      cov_gnc8p84ru().s[99]++;
      this.axiosInstance.defaults.headers['Authorization'] = config.apiToken;
    } else
    /* istanbul ignore next */
    {
      cov_gnc8p84ru().b[23][1]++;
    }
    cov_gnc8p84ru().s[100]++;
    if (config.timeout) {
      /* istanbul ignore next */
      cov_gnc8p84ru().b[25][0]++;
      cov_gnc8p84ru().s[101]++;
      this.axiosInstance.defaults.timeout = config.timeout;
    } else
    /* istanbul ignore next */
    {
      cov_gnc8p84ru().b[25][1]++;
    }
    cov_gnc8p84ru().s[102]++;
    if (config.userAgent) {
      /* istanbul ignore next */
      cov_gnc8p84ru().b[26][0]++;
      cov_gnc8p84ru().s[103]++;
      this.userAgent = config.userAgent;
      /* istanbul ignore next */
      cov_gnc8p84ru().s[104]++;
      this.axiosInstance.defaults.headers['User-Agent'] = config.userAgent;
    } else
    /* istanbul ignore next */
    {
      cov_gnc8p84ru().b[26][1]++;
    }
    cov_gnc8p84ru().s[105]++;
    if (config.enableRateLimit !== undefined) {
      /* istanbul ignore next */
      cov_gnc8p84ru().b[27][0]++;
      cov_gnc8p84ru().s[106]++;
      this.enableRateLimit = config.enableRateLimit;
    } else
    /* istanbul ignore next */
    {
      cov_gnc8p84ru().b[27][1]++;
    }
  }
  /**
   * Cleanup resources
   */
  destroy() {
    /* istanbul ignore next */
    cov_gnc8p84ru().f[23]++;
    cov_gnc8p84ru().s[107]++;
    // Clear any pending requests
    this.axiosInstance.defaults.timeout = 1;
    // Reset rate limiter
    /* istanbul ignore next */
    cov_gnc8p84ru().s[108]++;
    rateLimiter.reset();
  }
}
// Create secure client factory
/* istanbul ignore next */
cov_gnc8p84ru().s[109]++;
export const createSecureClickUpClient = config => {
  /* istanbul ignore next */
  cov_gnc8p84ru().f[24]++;
  const apiToken =
  /* istanbul ignore next */
  (cov_gnc8p84ru().s[110]++,
  /* istanbul ignore next */
  (cov_gnc8p84ru().b[28][0]++, config?.apiToken) ||
  /* istanbul ignore next */
  (cov_gnc8p84ru().b[28][1]++, process.env.CLICKUP_API_TOKEN));
  /* istanbul ignore next */
  cov_gnc8p84ru().s[111]++;
  if (!apiToken) {
    /* istanbul ignore next */
    cov_gnc8p84ru().b[29][0]++;
    cov_gnc8p84ru().s[112]++;
    throw new Error('CLICKUP_API_TOKEN environment variable is required');
  } else
  /* istanbul ignore next */
  {
    cov_gnc8p84ru().b[29][1]++;
  }
  cov_gnc8p84ru().s[113]++;
  return new SecureClickUpClient({
    apiToken,
    ...config
  });
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,